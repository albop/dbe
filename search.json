[
  {
    "objectID": "pushups/pushups_1_correction.html",
    "href": "pushups/pushups_1_correction.html",
    "title": "Basics and Collections",
    "section": "",
    "text": "See “Check Your Understanding” from Basics and Collections"
  },
  {
    "objectID": "pushups/pushups_1_correction.html#question-1",
    "href": "pushups/pushups_1_correction.html#question-1",
    "title": "Basics and Collections",
    "section": "Question 1",
    "text": "Question 1\nBelow this cell, add\n\nA Markdown cell with\n\n\n\ntwo levels of headings;\n\na numbered list (We ask for a list in Markdown, not a Python list object);\n\nan unnumbered list (again not a Python list object);\n\ntext with a * and a - sign (hint: look at this cell and escape characters)\n\nbackticked code (see https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet)\n\n\n\nA Markdown cell with\n\n\n\nthe quadratic formula embedded in the cell using LaTeX\n\nresponse:"
  },
  {
    "objectID": "pushups/pushups_1_correction.html#is-a-rose",
    "href": "pushups/pushups_1_correction.html#is-a-rose",
    "title": "Basics and Collections",
    "section": "is a rose",
    "text": "is a rose\n\nis a rose\n\nbrexit\nis brexit\nis brexit\n\nHere is nice quadratic formula: \\[\nx=\\frac{-b\\pm\\sqrt{b^2-4ac}}{2a}\n\\]"
  },
  {
    "objectID": "pushups/pushups_1_correction.html#question-2",
    "href": "pushups/pushups_1_correction.html#question-2",
    "title": "Basics and Collections",
    "section": "Question 2",
    "text": "Question 2\nComplete the following code, which sets up variables a, b, and c, to find the roots using the quadratic formula.\n\\[\nx=\\frac{-b\\pm\\sqrt{b^2-4ac}}{2a}\n\\]\nNote: because there are two roots, you will need to calculate two values of x\n\na = 1.0\nb = 2.0\nc = 1.0\n# we need the square root function\nfrom math import sqrt\n\nx1 = -b+sqrt(b**2-4*a*c)/(2*a)\nx2 = -b-sqrt(b**2-4*a*c)/(2*a)\n\nprint(f\"The two roots are {x1} and {x2}\")\n\nThe two roots are -2.0 and -2.0"
  },
  {
    "objectID": "pushups/pushups_1_correction.html#question-3",
    "href": "pushups/pushups_1_correction.html#question-3",
    "title": "Basics and Collections",
    "section": "Question 3",
    "text": "Question 3\nIn the cell below, use tab completion to find a function from the time module that displays the local time.\nUse time.FUNC_NAME? (where FUNC_NAME is replaced with the name of the function you found) to see information about that function, then call the function. (Hint: look for something involving the word local).\n\nimport time\n# Your code goes here\n# time. # uncomment and hit &lt;TAB&gt; to see functions\n\ntime.localtime()\n\ntime.struct_time(tm_year=2023, tm_mon=2, tm_mday=7, tm_hour=23, tm_min=15, tm_sec=33, tm_wday=1, tm_yday=38, tm_isdst=0)\n\n\nHint: if you are using an online jupyter server, the time will be based on the server settings. If it doesn’t match your location, don’t worry about it."
  },
  {
    "objectID": "pushups/pushups_1_correction.html#question-4",
    "href": "pushups/pushups_1_correction.html#question-4",
    "title": "Basics and Collections",
    "section": "Question 4",
    "text": "Question 4\nCreate the following variables:\n\nD: A floating point number with the value 10,000\n\nr: A floating point number with the value 0.025\n\nT: An integer with the value 30\n\nCompute the present discounted value of a payment (D) made in T years, assuming an interest rate of 2.5%. Save this value to a new variable called PDV and print your output.\nHint: The formula is\n\\[\n\\text{PDV} = \\frac{D}{(1 + r)^T}\n\\]\n\n# Your code goes here\nD = 10.0\nr = 0.025\nT = 30\n\nPDV = D/(1+r)**T\n\nf\"Present discount factor is: {PDV: .2f}\"   # the .2f is an instruction to limit the number of float numbers\n\n'Present discount factor is:  4.77'"
  },
  {
    "objectID": "pushups/pushups_1_correction.html#question-5",
    "href": "pushups/pushups_1_correction.html#question-5",
    "title": "Basics and Collections",
    "section": "Question 5",
    "text": "Question 5\nHow could you use the variables x and y to create the sentence Hello World ?\nHint: Think about how to represent a space as a string.\n\nx = \"Hello\"\ny = \"World\"\n# Your code goes here\n\nx+\" \"+y\n\n'Hello World'"
  },
  {
    "objectID": "pushups/pushups_1_correction.html#question-6",
    "href": "pushups/pushups_1_correction.html#question-6",
    "title": "Basics and Collections",
    "section": "Question 6",
    "text": "Question 6\nSuppose you are working with price data and come across the value \"€6.50\".\nWhen Python tries to interpret this value, it sees the value as the string \"€6.50\" instead of the number 6.50. (Quiz: why is this a problem? Think about the examples above.)\nIn this exercise, your task is to convert the variable price below into a number.\nHint: Once the string is in a suitable format, you can call float(clean_price) to make it a number.\n\nprice = \"€6.50\"\n# Your code goes here\n\n# remove the euro symbol\nprice[1:]\ns = price.strip(\"€\")\n\nfloat(s)\n\n6.5"
  },
  {
    "objectID": "pushups/pushups_1_correction.html#question-7",
    "href": "pushups/pushups_1_correction.html#question-7",
    "title": "Basics and Collections",
    "section": "Question 7",
    "text": "Question 7\nUse Python formatting (e.g. print(f\"text {somecode}\") where somecode is a valid expression or variable name) to produce the following output.\nThe 1st quarter revenue was $110M\nThe 2nd quarter revenue was $95M\nThe 3rd quarter revenue was $100M\nThe 4th quarter revenue was $130M\n\nns = [110, 95, 100, 130]\nqs = [\"1st\", \"2nd\", \"3rd\", \"4th\"]\n\n\nfor i in [0, 1, 2, 3]:\n    q = qs[i]\n    n = ns[i]\n    s = f\"The {q} quarter revenue was {n}M\"\n    print(s)\n\nThe 1st quarter revenue was 110M\nThe 2nd quarter revenue was 95M\nThe 3rd quarter revenue was 100M\nThe 4th quarter revenue was 130M"
  },
  {
    "objectID": "pushups/pushups_1_correction.html#question-8",
    "href": "pushups/pushups_1_correction.html#question-8",
    "title": "Basics and Collections",
    "section": "Question 8",
    "text": "Question 8\nDefine two lists y and z.\nThey can contain anything you want.\nCheck what happens when you do y + z. When you have finished that, try 2 * x and x * 2 where x represents the object you created from y + z.\nBriefly explain.\n\ny = [1,2,3,4,5] # fill me in!\nz = [\"once\", \"I\", \"caught\", \"a\", \"fish\", \"alive\"] # fill me in!\n# Your code goes here\n\n[1, 2, 3, 4, 5, 'once', 'I', 'caught', 'a', 'fish', 'alive']\n\n\n\nx = y+z # concatenates the two strings\nx\n\n[1, 2, 3, 4, 5, 'once', 'I', 'caught', 'a', 'fish', 'alive']\n\n\n\n2*x # repeats the list twice\n\n[1,\n 2,\n 3,\n 4,\n 5,\n 'once',\n 'I',\n 'caught',\n 'a',\n 'fish',\n 'alive',\n 1,\n 2,\n 3,\n 4,\n 5,\n 'once',\n 'I',\n 'caught',\n 'a',\n 'fish',\n 'alive']"
  },
  {
    "objectID": "pushups/pushups_1.html",
    "href": "pushups/pushups_1.html",
    "title": "Problem Set 1",
    "section": "",
    "text": "See “Check Your Understanding” from Basics and Collections"
  },
  {
    "objectID": "pushups/pushups_1.html#question-1",
    "href": "pushups/pushups_1.html#question-1",
    "title": "Problem Set 1",
    "section": "Question 1",
    "text": "Question 1\nBelow this cell, add\n\nA Markdown cell with\n\n\n\ntwo levels of headings;\n\na numbered list (We ask for a list in Markdown, not a Python list object);\n\nan unnumbered list (again not a Python list object);\n\ntext with a * and a - sign (hint: look at this cell and escape characters)\n\nbackticked code (see https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet)\n\n\n\nA Markdown cell with\n\n\n\nthe quadratic formula embedded in the cell using LaTeX"
  },
  {
    "objectID": "pushups/pushups_1.html#question-2",
    "href": "pushups/pushups_1.html#question-2",
    "title": "Problem Set 1",
    "section": "Question 2",
    "text": "Question 2\nComplete the following code, which sets up variables a, b, and c, to find the roots using the quadratic formula.\n\\[\nx=\\frac{-b\\pm\\sqrt{b^2-4ac}}{2a}\n\\]\nNote: because there are two roots, you will need to calculate two values of x\n\na = 1.0\nb = 2.0\nc = 1.0\n# Your code goes here"
  },
  {
    "objectID": "pushups/pushups_1.html#question-3",
    "href": "pushups/pushups_1.html#question-3",
    "title": "Problem Set 1",
    "section": "Question 3",
    "text": "Question 3\nIn the cell below, use tab completion to find a function from the time module that displays the local time.\nUse time.FUNC_NAME? (where FUNC_NAME is replaced with the name of the function you found) to see information about that function, then call the function. (Hint: look for something involving the word local).\n\nimport time\n# Your code goes here\n# time. # uncomment and hit &lt;TAB&gt; to see functions\n\nHint: if you are using an online jupyter server, the time will be based on the server settings. If it doesn’t match your location, don’t worry about it."
  },
  {
    "objectID": "pushups/pushups_1.html#question-4",
    "href": "pushups/pushups_1.html#question-4",
    "title": "Problem Set 1",
    "section": "Question 4",
    "text": "Question 4\nCreate the following variables:\n\nD: A floating point number with the value 10,000\n\nr: A floating point number with the value 0.025\n\nT: An integer with the value 30\n\nCompute the present discounted value of a payment (D) made in T years, assuming an interest rate of 2.5%. Save this value to a new variable called PDV and print your output.\nHint: The formula is\n\\[\n\\text{PDV} = \\frac{D}{(1 + r)^T}\n\\]\n\n# Your code goes here"
  },
  {
    "objectID": "pushups/pushups_1.html#question-5",
    "href": "pushups/pushups_1.html#question-5",
    "title": "Problem Set 1",
    "section": "Question 5",
    "text": "Question 5\nHow could you use the variables x and y to create the sentence Hello World ?\nHint: Think about how to represent a space as a string.\n\nx = \"Hello\"\ny = \"World\"\n# Your code goes here"
  },
  {
    "objectID": "pushups/pushups_1.html#question-6",
    "href": "pushups/pushups_1.html#question-6",
    "title": "Problem Set 1",
    "section": "Question 6",
    "text": "Question 6\nSuppose you are working with price data and come across the value \"€6.50\".\nWhen Python tries to interpret this value, it sees the value as the string \"€6.50\" instead of the number 6.50. (Quiz: why is this a problem? Think about the examples above.)\nIn this exercise, your task is to convert the variable price below into a number.\nHint: Once the string is in a suitable format, you can call float(clean_price) to make it a number.\n\nprice = \"€6.50\"\n# Your code goes here"
  },
  {
    "objectID": "pushups/pushups_1.html#question-7",
    "href": "pushups/pushups_1.html#question-7",
    "title": "Problem Set 1",
    "section": "Question 7",
    "text": "Question 7\nUse Python formatting (e.g. print(f\"text {somecode}\") where somecode is a valid expression or variable name) to produce the following output.\nThe 1st quarter revenue was $110M\nThe 2nd quarter revenue was $95M\nThe 3rd quarter revenue was $100M\nThe 4th quarter revenue was $130M\n\n# Your code goes here"
  },
  {
    "objectID": "pushups/pushups_1.html#question-8",
    "href": "pushups/pushups_1.html#question-8",
    "title": "Problem Set 1",
    "section": "Question 8",
    "text": "Question 8\nDefine two lists y and z.\nThey can contain anything you want.\nCheck what happens when you do y + z. When you have finished that, try 2 * x and x * 2 where x represents the object you created from y + z.\nBriefly explain.\n\ny = [] # fill me in!\nz = [] # fill me in!\n# Your code goes here"
  },
  {
    "objectID": "pushups/pushups_2_0.html",
    "href": "pushups/pushups_2_0.html",
    "title": "Pushups 2",
    "section": "",
    "text": "Verify that tuples are indeed immutable by attempting the following:\n\nChanging the first element of t to be 100\n\nAppending a new element \"!!\" to the end of t (remember with a list x we would use x.append(\"!!\") to do this\n\nSorting t\n\nReversing t\n\n\nt = (2,2,4)\n\n\n# change first element of t\nt[0] = 100\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[6], line 2\n      1 # change first element of t\n----&gt; 2 t[0] = 100\n\nTypeError: 'tuple' object does not support item assignment\n\n\n\n\n# appending to t\nt.append(3)\n\n\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[7], line 2\n      1 # appending to t\n----&gt; 2 t.append(3)\n\nAttributeError: 'tuple' object has no attribute 'append'\n\n\n\n\n# sorting t\nt.sort()\n\n\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[8], line 2\n      1 # sorting t\n----&gt; 2 t.sort()\n\nAttributeError: 'tuple' object has no attribute 'sort'\n\n\n\n\n# this works and returns a new list\nsorted(t)\n\n[2, 2, 4]\n\n\n\n# reversing t\nt.reverse()\n\n\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[12], line 2\n      1 # reversing t\n----&gt; 2 t.reverse()\n\nAttributeError: 'tuple' object has no attribute 'reverse'\n\n\n\n\n\n\nCreate a new dict which associates stock tickers with its stock price.\nHere are some tickers and a price.\n\nAAPL: 175.96\n\nGOOGL: 1047.43\n\nTVIX: 8.38\n\n\n# your code here\n{\n    \"AAPL\": 175.96,\n    \"GOOGL\": 1047.43,\n    \"TVIX\": 8.38\n}\n\n{'AAPL': 175.96, 'GOOGL': 1047.43, 'TVIX': 8.38}\n\n\n\n\n\nLook at the World Factbook for Australia and create a dictionary with data containing the following types: float, string, integer, list, and dict. Choose any data you wish.\nTo confirm, you should have a dictionary that you identified via a key.\n\n# your code here\naustralia_data = {\n    \"coast_line\": 253760, #int\n    \"languages\": { # dict\n        \"English\": 72,\n        \"Mandarin\": 2.7,\n        \"Arabic\": 1.4,\n        \"Vietnamese\": 1.3,\n        \"Cantonese\": 1.2,\n        \"other\": 15.7,\n        \"unspecified\": 5.7\n    },\n    \"irrigated_land\": 15.210, #float\n    \"aquifers\": [\"Great Artesian Basin\", \"Canning Basin\"], # list\n    # string\n    \"population_distribution\": \"\"\"population is primarily located on the periphery, with the highest concentration of people residing in the east and southeast; a secondary population center is located in and around Perth in the west; of the States and Territories, New South Wales has, by far, the largest population; the interior, or \"outback\", has a very sparse population\"\"\"\n}\n\n\n\n\nUse Jupyter’s help facilities to learn how to use the pop method to remove the key \"irrigated_land\" (and its value) from the dict.\n\n# uncomment and use the Inspector or ?\naustralia_data.pop(\"irrigated_land\")\n\n15.21\n\n\n\naustralia_data\n\n{'coast_line': 253760,\n 'languages': {'English': 72,\n  'Mandarin': 2.7,\n  'Arabic': 1.4,\n  'Vietnamese': 1.3,\n  'Cantonese': 1.2,\n  'other': 15.7,\n  'unspecified': 5.7},\n 'aquifers': ['Great Artesian Basin', 'Canning Basin'],\n 'population_distribution': 'population is primarily located on the periphery, with the highest concentration of people residing in the east and southeast; a secondary population center is located in and around Perth in the west; of the States and Territories, New South Wales has, by far, the largest population; the interior, or \"outback\", has a very sparse population'}\n\n\n\n\n\nExplain what happens to the value you popped.\n\nIt returns the value, and removes it from the dictionary object.\n\n\n'irrigated_land' in australia_data\n\nFalse\n\n\nExperiment with calling pop twice.\n\naustralia_data.pop(\"irrigated_land\")\n## errors because the key is not in the dictionary any more\n\n\n---------------------------------------------------------------------------\nKeyError                                  Traceback (most recent call last)\nCell In[31], line 1\n----&gt; 1 australia_data.pop(\"irrigated_land\")\n      2 ## errors because the key is not in the dictionary any more\n\nKeyError: 'irrigated_land'"
  },
  {
    "objectID": "pushups/pushups_2_0.html#tuples-and-dictionaries",
    "href": "pushups/pushups_2_0.html#tuples-and-dictionaries",
    "title": "Pushups 2",
    "section": "",
    "text": "Verify that tuples are indeed immutable by attempting the following:\n\nChanging the first element of t to be 100\n\nAppending a new element \"!!\" to the end of t (remember with a list x we would use x.append(\"!!\") to do this\n\nSorting t\n\nReversing t\n\n\nt = (2,2,4)\n\n\n# change first element of t\nt[0] = 100\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[6], line 2\n      1 # change first element of t\n----&gt; 2 t[0] = 100\n\nTypeError: 'tuple' object does not support item assignment\n\n\n\n\n# appending to t\nt.append(3)\n\n\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[7], line 2\n      1 # appending to t\n----&gt; 2 t.append(3)\n\nAttributeError: 'tuple' object has no attribute 'append'\n\n\n\n\n# sorting t\nt.sort()\n\n\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[8], line 2\n      1 # sorting t\n----&gt; 2 t.sort()\n\nAttributeError: 'tuple' object has no attribute 'sort'\n\n\n\n\n# this works and returns a new list\nsorted(t)\n\n[2, 2, 4]\n\n\n\n# reversing t\nt.reverse()\n\n\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[12], line 2\n      1 # reversing t\n----&gt; 2 t.reverse()\n\nAttributeError: 'tuple' object has no attribute 'reverse'\n\n\n\n\n\n\nCreate a new dict which associates stock tickers with its stock price.\nHere are some tickers and a price.\n\nAAPL: 175.96\n\nGOOGL: 1047.43\n\nTVIX: 8.38\n\n\n# your code here\n{\n    \"AAPL\": 175.96,\n    \"GOOGL\": 1047.43,\n    \"TVIX\": 8.38\n}\n\n{'AAPL': 175.96, 'GOOGL': 1047.43, 'TVIX': 8.38}\n\n\n\n\n\nLook at the World Factbook for Australia and create a dictionary with data containing the following types: float, string, integer, list, and dict. Choose any data you wish.\nTo confirm, you should have a dictionary that you identified via a key.\n\n# your code here\naustralia_data = {\n    \"coast_line\": 253760, #int\n    \"languages\": { # dict\n        \"English\": 72,\n        \"Mandarin\": 2.7,\n        \"Arabic\": 1.4,\n        \"Vietnamese\": 1.3,\n        \"Cantonese\": 1.2,\n        \"other\": 15.7,\n        \"unspecified\": 5.7\n    },\n    \"irrigated_land\": 15.210, #float\n    \"aquifers\": [\"Great Artesian Basin\", \"Canning Basin\"], # list\n    # string\n    \"population_distribution\": \"\"\"population is primarily located on the periphery, with the highest concentration of people residing in the east and southeast; a secondary population center is located in and around Perth in the west; of the States and Territories, New South Wales has, by far, the largest population; the interior, or \"outback\", has a very sparse population\"\"\"\n}\n\n\n\n\nUse Jupyter’s help facilities to learn how to use the pop method to remove the key \"irrigated_land\" (and its value) from the dict.\n\n# uncomment and use the Inspector or ?\naustralia_data.pop(\"irrigated_land\")\n\n15.21\n\n\n\naustralia_data\n\n{'coast_line': 253760,\n 'languages': {'English': 72,\n  'Mandarin': 2.7,\n  'Arabic': 1.4,\n  'Vietnamese': 1.3,\n  'Cantonese': 1.2,\n  'other': 15.7,\n  'unspecified': 5.7},\n 'aquifers': ['Great Artesian Basin', 'Canning Basin'],\n 'population_distribution': 'population is primarily located on the periphery, with the highest concentration of people residing in the east and southeast; a secondary population center is located in and around Perth in the west; of the States and Territories, New South Wales has, by far, the largest population; the interior, or \"outback\", has a very sparse population'}\n\n\n\n\n\nExplain what happens to the value you popped.\n\nIt returns the value, and removes it from the dictionary object.\n\n\n'irrigated_land' in australia_data\n\nFalse\n\n\nExperiment with calling pop twice.\n\naustralia_data.pop(\"irrigated_land\")\n## errors because the key is not in the dictionary any more\n\n\n---------------------------------------------------------------------------\nKeyError                                  Traceback (most recent call last)\nCell In[31], line 1\n----&gt; 1 australia_data.pop(\"irrigated_land\")\n      2 ## errors because the key is not in the dictionary any more\n\nKeyError: 'irrigated_land'"
  },
  {
    "objectID": "pushups/pushups_2_0.html#prep-work-for-the-philips-curve",
    "href": "pushups/pushups_2_0.html#prep-work-for-the-philips-curve",
    "title": "Pushups 2",
    "section": "Prep work for the Philips Curve",
    "text": "Prep work for the Philips Curve\nNote, if dbnomics is not installed on your machine, install it by running the following cell:\n\n!pip install dbnomics\n\nChoose any OECD country you like and download historical, yearly data for inflation and gdp growth from the dbnomics website.\nCheck the maximum common availability period for both series.\nCompute average and standard deviations for both series.\nBonus: try to get the relevant data as one single dataframe."
  },
  {
    "objectID": "tutorials/session_6/machine_learning_regressions.html",
    "href": "tutorials/session_6/machine_learning_regressions.html",
    "title": "Machine learning: Sparse regressions on the Boston House Price Dataset",
    "section": "",
    "text": "Objectives:\n\ncreate a training set and a validation set\ntrain a model with sklearn\nperform a validation test\n\nThe goal of this exercise is to find a way to predict californian house prices, using machine learning regressions.\nImport the California Housing Price Dataset from sklearn.\n\n# dataset = sklearn.datasets.load_boston()\nfrom sklearn.datasets import fetch_california_housing \ndataset = fetch_california_housing()\n\nExplore the data (description, correlations, histograms…)\nSplit the dataset into a training set (70%) and a test set (30%).\nTrain a linear model on the training set (using sklearn).\nCompute the fitting score on the test set. What is the problem? Should we adjust the size of the training set?\nTrain a lasso model to predict house prices. Compute the score on the test set.\nTrain a ridge model to predict house prices. Which one is better?\n(Bonus): For your preferred regression, implement the k-fold evaluation scheme to validate the model."
  },
  {
    "objectID": "tutorials/session_1/qe_control_answers.html",
    "href": "tutorials/session_1/qe_control_answers.html",
    "title": "Control Flow",
    "section": "",
    "text": "Prerequisites\nOutcomes"
  },
  {
    "objectID": "tutorials/session_1/qe_control_answers.html#net-present-values-and-asset-pricing",
    "href": "tutorials/session_1/qe_control_answers.html#net-present-values-and-asset-pricing",
    "title": "Control Flow",
    "section": "Net Present Values and Asset Pricing",
    "text": "Net Present Values and Asset Pricing\nIn this lecture, we’ll introduce two related topics from economics:\n\nNet present valuations\n\nAsset pricing\n\nThese topics will motivate some of the programming we do in this course.\nIn economics and finance, “assets” provide a stream of payoffs.\nThese “assets” can be concrete or abstract: a stock pays dividends over time, a bond pays interest, an apple tree provides apples, a job pays wages, and an education provides possible jobs (which, in turn, pay wages).\nWhen deciding the price to pay for an asset or how to choose between different alternatives, we need to take into account that most people would prefer to receive 1 today vs. 1 next year.\nThis reflection on consumer preferences leads to the notion of a discount rate. If you are indifferent between receiving 1.00 today and 1.10 next year, then the discount rate over the next year is $ r = 0.10 $.\nIf we assume that an individuals preferences are consistent over time, then we can apply that same discount rate to valuing assets further into the future.\nFor example, we would expect that the consumer would be indifferent between consuming 1.00 today and $ (1+r)(1+r) = 1.21 $ dollars two years from now (i.e. discount twice).\nInverting this formula, 1 delivered two years from now is equivalent to $ $ today."
  },
  {
    "objectID": "tutorials/session_1/qe_control_answers.html#exercise",
    "href": "tutorials/session_1/qe_control_answers.html#exercise",
    "title": "Control Flow",
    "section": "Exercise",
    "text": "Exercise\nSee exercise 1 in the exercise list.\n\n\nNet Present Value\nIf an asset pays a stream of payoffs over multiple time periods, then we can use a discount rate to calculate the value to the consumer of a entire sequence of payoffs.\nMost generally, we enumerate each discrete time period (e.g. year, month, day) by the index $ t $ where today is $ t=0 $ and the asset lives for $ T $ periods.\nList the payoff at each time period as $ y_t $, which we will assume, for now, is known in advance.\nThen if the discount factor is $ r $, the consumer “values” the payoff $ y_t $ delivered at time $ t $ as $ y_t $ where we note that if $ t=0 \\(, the value is just the current payoff\\) y_0 $.\nUsing this logic, we can write an expression for the value of the entire sequence of payoffs with a sum.\n \\[\nP_0 = \\sum_{t=0}^T \\left(\\frac{1}{1 + r}\\right)^t y_t \\tag{1}\n\\]\nIf $ y_t $ is a constant, then we can compute this sum with a simple formula!\nBelow, we present some useful formulas that come from infinite series that we will use to get our net present value formula.\nFor any constant $ 0 &lt; &lt; 1 $ and integer value $ &gt; 0 $,\n \\[\n\\begin{aligned}\n\\sum_{t=0}^{\\infty} \\beta^t & = \\frac{1}{1-\\beta}\\\\\n\\sum_{t=0}^{\\tau} \\beta^t &= \\frac{1- \\beta^{\\tau+1}}{1-\\beta}\\\\\n\\sum_{t=\\tau}^{\\infty} \\beta^t &=  \\frac{\\beta^{\\tau}}{1-\\beta}\n\\end{aligned} \\tag{2}\n\\]\nIn the case of an asset which pays one dollar until time $ T $, we can use these formulas, taking $ = $ and $ T = $, to find\n\\[\n\\begin{aligned}\nP_0 &= \\sum_{t=0}^T \\left(\\frac{1}{1 + r}\\right)^t = \\frac{1- (\\frac{1}{1+r})^{\\tau+1}}{1-\\frac{1}{1+r}}\\\\\n&= \\frac{1 + r}{r} - \\frac{1}{r}\\left(\\frac{1}{1+r} \\right)^\\tau\n\\end{aligned}\n\\]\nNote that we can also consider an asset that lives and pays forever if $ T= $, and from (2), the value of an asset which pays 1 forever is $ $."
  },
  {
    "objectID": "tutorials/session_1/qe_control_answers.html#conditional-statements-and-blocks",
    "href": "tutorials/session_1/qe_control_answers.html#conditional-statements-and-blocks",
    "title": "Control Flow",
    "section": "Conditional Statements and Blocks",
    "text": "Conditional Statements and Blocks\nSometimes, we will only want to execute some piece of code if a certain condition is met.\nThese conditions can be anything.\nFor example, we might add to total sales if the transaction value is positive, but add to total returns if the value is negative.\nOr, we might want to add up all incurred costs, only if the transaction happened before a certain date.\nWe use conditionals to run particular pieces of code when certain criterion are met.\nConditionals are closely tied to booleans, so if you don’t remember what those are, go back to the basics lecture for a refresher.\nThe basic syntax for conditionals is\n\nif condition:\n    # code to run when condition is True\nelse:\n    # code to run if no conditions above are True\n\nNote that immediately following the condition, there is a colon and that the next line begins with blank spaces.\nUsing 4 spaces is a very strong convention, so that is what we do — we recommend that you do the same.\nAlso note that the else clause is optional.\nLet’s see some simple examples.\n\nif True:\n    print(\"This is where `True` code is run\")\n\nAlternatively, you could have a test which returns a booleans\n\nif 1 &lt; 2:\n     print(\"This is where `True` code is run\")\n\nThis example is equivalent to just typing the print statement, but the example below isn’t…\n\nif False:\n    print(\"This is where `True` code is run\")\n\nOr\n\nif 1 &gt; 2:\n     print(\"This is where `True` code is run\")\n\nNotice that when you run the cells above nothing is printed.\nThat is because the condition for the if statement was not true, so the code inside the indented block was never run.\nThis also allows us to demonstrate the role of indentation in determining the “block” of code.\n\nval = False\n\nif val is True: # check an expression\n    print(\"This is where `True` code is run\")\n    print(\"More code in the if block\")\nprint(\"Code runs after 'if' block, regardless of val\")"
  },
  {
    "objectID": "tutorials/session_1/qe_control_answers.html#exercise-1",
    "href": "tutorials/session_1/qe_control_answers.html#exercise-1",
    "title": "Control Flow",
    "section": "Exercise",
    "text": "Exercise\nSee exercise 2 in the exercise list.\nThe next example shows us how else works.\n\nval = (2 == 4)  # returns False\nif val is True:\n    print(\"This is where `True` code is run\")\nelse:\n    print(\"This is where `False` code is run\")\n    print(\"More else code\")\nprint(\"Code runs after 'if' block, regardless of val\")\n\nThe if False: ... part of this example is the same as the example before, but now, we added an else: clause.\nIn this case, because the conditional for the if statement was not True, the if code block was not executed, but the else block was.\nFinally, the Condition is True is assumed in the if statement, and is often left out. For example, the following are identical\n\nif (1 &lt; 2) is True:\n    print(\"1 &lt; 2\")\n\nif 1 &lt; 2:\n    print(\"1 &lt; 2\")"
  },
  {
    "objectID": "tutorials/session_1/qe_control_answers.html#exercise-2",
    "href": "tutorials/session_1/qe_control_answers.html#exercise-2",
    "title": "Control Flow",
    "section": "Exercise",
    "text": "Exercise\nSee exercise 3 in the exercise list."
  },
  {
    "objectID": "tutorials/session_1/qe_control_answers.html#exercise-3",
    "href": "tutorials/session_1/qe_control_answers.html#exercise-3",
    "title": "Control Flow",
    "section": "Exercise",
    "text": "Exercise\nSee exercise 4 in the exercise list.\n\nelif clauses\nSometimes, you have more than one condition you want to check.\nFor example, you might want to run a different set of code based on which quarter a particular transaction took place in.\nIn this case you could check whether the date is in Q1, or in Q2, or in Q3, or if not any of these it must be in Q4.\nThe way to express this type of conditional is to use one or more elif clause in addition to the if and the else.\nThe syntax is\n\nif condition1:\n    # code to run when condition1 is True\nelif condition2:\n    # code to run when condition2 is True\nelif condition3:\n    # code to run when condition3 is True\nelse:\n    # code to run when none of the above are true\n\nYou can include as many elif clauses as you want.\nAs before, the else part is optional.\nHere’s how we might express the quarter example referred to above.\n\nimport datetime\nhalloween = datetime.date(2017, 10, 31)\n\nif halloween.month &gt; 9:\n    print(\"Halloween is in Q4\")\nelif halloween.month &gt; 6:\n    print(\"Halloween is in Q3\")\nelif halloween.month &gt; 3:\n    print(\"Halloween is in Q2\")\nelse:\n    print(\"Halloween is in Q1\")\n\nNote that when there are multiple if or elif conditions, only the code corresponding to the first true clause is run.\nWe saw this in action above.\nWe know that when halloween.month &gt; 9 is true, then halloween.month &gt; 6 and halloween.month &gt; 3 must also be true, but only the code block associated with halloween.month &gt; 9 was printed."
  },
  {
    "objectID": "tutorials/session_1/qe_control_answers.html#iteration",
    "href": "tutorials/session_1/qe_control_answers.html#iteration",
    "title": "Control Flow",
    "section": "Iteration",
    "text": "Iteration\nWhen doing computations or analyzing data, we often need to repeat certain operations a finite number of times or until some condition is met.\nExamples include processing all data files in a directory (folder), aggregating revenues and costs for every period in a year, or computing the net present value of certain assets. (In fact, later in this section, we will verify the equations that we wrote down above.)\nThese are all examples of a programming concept called iteration.\nWe feel the concept is best understood through example, so we will present a contrived example and then discuss the details behind doing iteration in Python.\n\nA Contrived Example\nSuppose we wanted to print out the first 10 integers and their squares.\nWe could do something like this.\n\nprint(f\"1**2 = {1**2}\")\nprint(f\"2**2 = {2**2}\")\nprint(f\"3**2 = {3**2}\")\nprint(f\"4**2 = {4**2}\")\n# .. and so on until 10\n\nAs you can see, the code above is repetitive.\nFor each integer, the code is exactly the same except for the two places where the “current” integer appears.\nSuppose that I asked you to write the same print statement for an int stored in a variable named i.\nYou might write the following code:\n\nprint(f\"{i}**2 = {i**2}\")\n\nThis more general version of the operation suggests a strategy for achieving our goal with less repetition: have a variable i take on the values 1 through 10 (Quiz: How can we use range to create the numbers 1 to 10?) and run the line of code above for each new value of i.\nThis can be accomplished with a for loop!\n\nfor i in range(1, 11):\n     print(f\"{i}**2 = {i**2}\")\n\nWhoa, what just happened?\nThe integer i took on the values in range(1, 11) one by one and for each new value it did the operations in the indented block (here just one line that called the print function).\n\n\nfor Loops\nThe general structure of a standard for loop is as follows.\n\nfor item in iterable:\n   # operation 1 with item\n   # operation 2 with item\n   # ...\n   # operation N with item\n\nwhere iterable is anything capable of producing one item at a time (see here for official definition from the Python team).\nWe’ve actually already seen some of the most common iterables!\nLists, tuples, dicts, and range/zip/enumerate objects are all iterables.\nNote that we can have as many operations as we want inside the indented block.\nWe will refer to the indented block as the “body” of the loop.\nWhen the for loop is executed, item will take on one value from iterable at a time and execute the loop body for each value.\n\n\n\nExercise\nSee exercise 5 in the exercise list.\nWhen iterating, each item in iterable might actually contain more than one value.\nRecall that tuples (and lists) can be unpacked directly into variables.\n\ntup = (4, \"test\")\ni, x = tup\nprint(f\"i = {i}, x = {x}, tup = {tup}\")\n\nAlso, recall that the value of a enumerate(iterable) is a tuple of the form (i, x) where iterable[i] == x.\nWhen we use enumerate in a for loop, we can “unpack” both values at the same time as follows:\n\n# revenue by quarter\ncompany_revenue = [5.12, 5.20, 5.50, 6.50]\n\nfor index, value in enumerate(company_revenue):\n    print(f\"quarter {index} revenue is ${value} million\")\n\nSimilarly, the index can be used to access another vector.\n\ncities = [\"Phoenix\", \"Austin\", \"San Diego\", \"New York\"]\nstates = [\"Arizona\", \"Texas\", \"California\", \"New York\"]\nfor index, city in enumerate(cities):\n    state = states[index]\n    print(f\"{city} is in {state}\")\n\n\n\nExercise\nSee exercise 6 in the exercise list.\n\n\nwhile Loops\nA related but slightly different form of iteration is to repeat something until some condition is met.\nThis is typically achieved using a while loop.\nThe structure of a while loop is\n\nwhile True_condition:\n    # repeat these steps\n\nwhere True_condition is some conditional statement that should evaluate to True when iterations should continue and False when Python should stop iterating.\nFor example, suppose we wanted to know the smallest N such that $ _{i=0}^N i &gt; 1000 $.\nWe figure this out using a while loop as follows.\n\ntotal = 0\ni = 0\nwhile total &lt;= 1000:\n    i = i + 1\n    total = total + i\n\nprint(\"The answer is\", i)\n\nLet’s check our work.\n\n# Should be just less than 1000 because range(45) goes from 0 to 44\nsum(range(45))\n\n\n# should be between 990 + 45 = 1035\nsum(range(46))\n\nA warning: one common programming error with while loops is to forget to set the variable you use in the condition prior to executing. For example, take the following code which correctly sets a counter\n\ni = 0\n\nAnd then executes a while loop\n\nwhile i &lt; 3:\n    print(i)\n    i = i + 1\nprint(\"done\")\n\nNo problems. But if you were to execute the above cell again, or another cell, the i=3 remains, and code is never executed (since i &lt; 3 begins as False).\n\nwhile i &lt; 3:\n    print(i)\n    i = i + 1\nprint(\"done\")\n\n\n\nExercise\nSee exercise 7 in the exercise list.\n\n\nbreak and continue\n\nbreak Out of a Loop\nSometimes we want to stop a loop early if some condition is met.\nLet’s revisit the example of finding the smallest N such that $ _{i=0}^N i &gt; 1000 $.\nClearly N must be less than 1000, so we know we will find the answer if we start with a for loop over all items in range(1001).\nThen, we can keep a running total as we proceed and tell Python to stop iterating through our range once total goes above 1000.\n\ntotal = 0\nfor i in range(1001):\n    total = total + i\n    if total &gt; 1000:\n        break\n\nprint(\"The answer is\", i)\n\n\n\nExercise\nSee exercise 8 in the exercise list.\n\n\ncontinue to the Next Iteration\nSometimes we might want to stop the body of a loop early if a condition is met.\nTo do this we can use the continue keyword.\nThe basic syntax for doing this is:\n\nfor item in iterable:\n    # always do these operations\n    if condition:\n        continue\n\n    # only do these operations if condition is False\n\nInside the loop body, Python will stop that loop iteration of the loop and continue directly to the next iteration when it encounters the continue statement.\nFor example, suppose I ask you to loop over the numbers 1 to 10 and print out the message “{i} An odd number!” whenever the number i is odd, and do nothing otherwise.\nYou can use continue to do this as follows:\n\nfor i in range(1, 11):\n    if i % 2 == 0:  # an even number... This is modulus division\n        continue\n\n    print(i, \"is an odd number!\")\n\n\n\nExercise\nSee exercise 9 in the exercise list."
  },
  {
    "objectID": "tutorials/session_1/qe_control_answers.html#comprehension",
    "href": "tutorials/session_1/qe_control_answers.html#comprehension",
    "title": "Control Flow",
    "section": "Comprehension",
    "text": "Comprehension\nOften, we will want to perform a very simple operation for every element of some iterable and create a new iterable with these values.\nThis could be done by writing a for loop and saving each value, but often using what is called a comprehension is more readable.\nLike many Python concepts, a comprehension is easiest to understand through example.\nImagine that we have a list x with a list of numbers. We would like to create a list x2 which has the squared values of x.\n\nx = list(range(4))\n\n# Create squared values with a loop\nx2_loop = []\nfor x_val in x:\n    x2_loop.append(x_val**2)\n\n# Create squared values with a comprehension\nx2_comp = [x_val**2 for x_val in x]\n\nprint(x2_loop)\nprint(x2_comp)\n\nNotice that much of the same text appears when we do the operation in the loop and when we do the operation with the comprehension.\n\nWe need to specify what we are iterating over – in both cases, this is for x_val in x.\n\nWe need to square each element x_val**2.\n\nIt needs to be stored somewhere – in x2_loop, this is done by appending each element to a list, and in x2_comp, this is done automatically because the operation is enclosed in a list.\n\nWe can do comprehension with many different types of iterables, so we demonstrate a few more below.\n\n# Create a dictionary from lists\ntickers = [\"AAPL\", \"GOOGL\", \"TVIX\"]\nprices = [175.96, 1047.43, 8.38]\nd = {key: value for key, value in zip(tickers, prices)}\nd\n\n\n# Create a list from a dictionary\nd = {\"AMZN\": \"Seattle\", \"TVIX\": \"Zurich\", \"AAPL\": \"Cupertino\"}\n\nhq_cities = [d[ticker] for ticker in d.keys()]\nhq_cities\n\n\nimport math\n\n# List from list\nx = range(10)\n\nsin_x = [math.sin(x_val) for x_val in x]\nsin_x"
  },
  {
    "objectID": "tutorials/session_1/qe_control_answers.html#exercise-9",
    "href": "tutorials/session_1/qe_control_answers.html#exercise-9",
    "title": "Control Flow",
    "section": "Exercise",
    "text": "Exercise\nSee exercise 10 in the exercise list.\nFinally, we can use this approach to build complicated nested dictionaries.\n\ngdp_data = [9.607, 10.48, 11.06]\nyears = [2013, 2014, 2015]\nexports = [ {\"manufacturing\": 2.4, \"agriculture\": 1.5, \"services\": 0.5},\n            {\"manufacturing\": 2.5, \"agriculture\": 1.4, \"services\": 0.9},\n            {\"manufacturing\": 2.7, \"agriculture\": 1.4, \"services\": 1.5}]\ndata = zip(years, gdp_data,exports)\ndata_dict = {year : {\"gdp\" : gdp, \"exports\": exports} for year, gdp, exports in data}\nprint(data_dict)\n\n# total exports by year\n[data_dict[year][\"exports\"][\"services\"] for year in data_dict.keys()]"
  },
  {
    "objectID": "tutorials/session_1/qe_control_answers.html#exercises",
    "href": "tutorials/session_1/qe_control_answers.html#exercises",
    "title": "Control Flow",
    "section": "Exercises",
    "text": "Exercises\n\nExercise 1\nGovernment bonds are often issued as zero-coupon bonds meaning that they make no payments throughout the entire time that they are held, but, rather make a single payment at the time of maturity.\nHow much should you be willing to pay for a zero-coupon bond that paid 100 in 10 years with an interest rate of 5%?\n\n# your code here\n\n(back to text)\n\n\nExercise 2\nRun the following two variations on the code with only a single change in the indentation.\nAfter, modify the x to print 3 and then 2, 3 instead.\n\nx = 1\n\nif x &gt; 0:\n    print(\"1\")\n    print(\"2\")\nprint(\"3\")\n\n\nx = 1\n\nif x &gt; 0:\n    print(\"1\")\nprint(\"2\") # changed the indentation\nprint(\"3\")\n\n(back to text)\n\n\nExercise 3\nUsing the code cell below as a start, print \"Good afternoon\" if the current_time is past noon.\nOtherwise, do nothing.\nWrite some conditional based on current_time.hour.\n\nimport datetime\ncurrent_time = datetime.datetime.now()\n\n## your code here\n\nmore text after\n(back to text)\n\n\nExercise 4\nIn this example, you will generate a random number between 0 and 1 and then display “x &gt; 0.5” or “x &lt; 0.5” depending on the value of the number.\nThis also introduces a new package numpy.random for drawing random numbers (more in the randomness lecture).\n\nimport numpy as np\nx = np.random.random()\nprint(f\"x = {x}\")\n\n## your code here\n\n(back to text)\n\n\nExercise 5\nIn economics, when an individual has some knowledge, skills, or education which provides them with a source of future income, we call it human capital.\nWhen a student graduating from high school is considering whether to continue with post-secondary education, they may consider that it gives them higher paying jobs in the future, but requires that they don’t begin working until after graduation.\nConsider the simplified example where a student has perfectly forecastable employment and is given two choices:\n\nBegin working immediately and make 40,000 a year until they retire 40 years later.\n\nPay 5,000 a year for the next 4 years to attend university, then get a job paying 50,000 a year until they retire 40 years after making the college attendance decision.\n\nShould the student enroll in school if the discount rate is r = 0.05?\n\n# Discount rate\nr = 0.05\n\n# High school wage\nw_hs = 40_000\n\n# College wage and cost of college\nc_college = 5_000\nw_college = 50_000\n\n# Compute npv of being a hs worker\n\n# Compute npv of attending college\n\n# Compute npv of being a college worker\n\n# Is npv_collegeworker - npv_collegecost &gt; npv_hsworker\n\n(back to text)\n\n\nExercise 6\nInstead of the above, write a for loop that uses the lists of cities and states below to print the same “{city} is in {state}” using a zip instead of an enumerate.\nTry using zip\n\ncities = [\"Phoenix\", \"Austin\", \"San Diego\", \"New York\"]\nstates = [\"Arizona\", \"Texas\", \"California\", \"New York\"]\n\n# Your code here\n\n(back to text)\n\n\nExercise 7\nCompanies often invest in training their employees to raise their productivity. Economists sometimes wonder why companies spend this money when this incentivizes other companies to hire their employees away with higher salaries since employees gain human capital from training?\nLet’s say that it costs a company 25,000 dollars to teach their employees Python, but it raises their output by 2,500 per month. How many months would an employee need to stay for the company to find it profitable to pay for their employees to learn Python if their discount rate is r = 0.01?\n\n# Define cost of teaching python\ncost = 25_000\nr = 0.01\n\n# Per month value\nadded_value = 2500\n\nn_months = 0\ntotal_npv = 0.0\n\n# Put condition below here\nwhile False: # (replace False with your condition here)\n    n_months = n_months + 1  # Increment how many months they've worked\n\n    # Increase total_npv\n\n(back to text)\n\n\nExercise 8\nTry to find the index of the first value in x that is greater than 0.999 using a for loop and break.\ntry iterating over range(len(x)).\n\nx = np.random.rand(10_000)\n# Your code here\n\n(back to text)\n\n\nExercise 9\nWrite a for loop that adds up all values in x that are greater than or equal to 0.5.\nUse the continue word to end the body of the loop early for all values of x that are less than 0.5.\nTry starting your loop with for value in x: instead of iterating over the indices of x.\n\nx = np.random.rand(10_000)\n# Your code here\n\n(back to text)\n\n\nExercise 10\nReturning to our previous example: print “{city} is in {state}” for each combination using a zip and a comprehension.\nTry using zip\n\ncities = [\"Phoenix\", \"Austin\", \"San Diego\", \"New York\"]\nstates = [\"Arizona\", \"Texas\", \"California\", \"New York\"]\n\n# your code here\n\n(back to text)"
  },
  {
    "objectID": "tutorials/session_1/qe_basics.html",
    "href": "tutorials/session_1/qe_basics.html",
    "title": "Basics",
    "section": "",
    "text": "Outcomes"
  },
  {
    "objectID": "tutorials/session_1/qe_basics.html#first-steps",
    "href": "tutorials/session_1/qe_basics.html#first-steps",
    "title": "Basics",
    "section": "First Steps",
    "text": "First Steps\nWe are ready to begin writing code!\nIn this section, we will teach you some basic concepts of programming and where to search for help.\n\nVariable Assignment\nThe first thing we will learn is the idea of variable assignment.\nVariable assignment associates a value to a variable.\nBelow, we assign the value “Hello World” to the variable x\n\nx = \"Hello World\"\n\n\nx\n\n'Hello World'\n\n\nOnce we have assigned a value to a variable, Python will remember this variable as long as the current session of Python is still running.\nNotice how writing x into the prompt below outputs the value “Hello World”.\n\nx\n\n'Hello World'\n\n\nHowever, Python returns an error if we ask it about variables that have not yet been created.\n\n# uncomment (delete the # and the space) the line below and run\ny\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[5], line 1\n----&gt; 1 y\n\nNameError: name 'y' is not defined\n\n\n\nIt is also useful to understand the order in which operations happen.\nFirst, the right side of the equal sign is computed.\nThen, that computed value is stored as the variable to the left of the equal sign.\n\n\nExercise\nSee exercise 1 in the exercise list.\nKeep in mind that the variable binds a name to something stored in memory.\nThe name can even be bound to a value of a completely different type.\n\nx = 2\nprint(x)\nx = \"something else\"\nprint(x)\n\n\n\nCode Comments\nComments are short notes that you leave for yourself and for others who read your code.\nThey should be used to explain what the code does.\nA comment is made with the #. Python ignores everything in a line that follows a #.\nLet’s practice making some comments.\n\ni = 1  # Assign the value 1 to variable i\nj = 2  # Assign the value 2 to variable j\n\n# We add i and j below this line\ni + j\n\n3"
  },
  {
    "objectID": "tutorials/session_1/qe_basics.html#functions",
    "href": "tutorials/session_1/qe_basics.html#functions",
    "title": "Basics",
    "section": "Functions",
    "text": "Functions\nFunctions are processes that take an input (or inputs) and produce an output.\nIf we had a function called f that took two arguments x and y, we would write f(x, y) to use the function.\nFor example, the function print simply prints whatever it is given. Recall the variable we created called x.\n\nprint(x)\n\nHello World\n\n\n\nGetting Help\nWe can figure out what a function does by asking for help.\nIn Jupyter notebooks, this is done by placing a ? after the function name (without using parenthesis) and evaluating the cell.\nFor example, we can ask for help on the print function by writing print?.\nDepending on how you launched Jupyter, this will either launch\n\nJupyterLab: display the help in text below the cell.\n\nClassic Jupyter Notebooks: display a new panel at the bottom of your screen. You can exit this panel by hitting the escape key or clicking the x at the top right of the panel.\n\n\nprint?\n\n\nDocstring:\nprint(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\nPrints the values to a stream, or to sys.stdout by default.\nOptional keyword arguments:\nfile:  a file-like object (stream); defaults to the current sys.stdout.\nsep:   string inserted between values, default a space.\nend:   string appended after the last value, default a newline.\nflush: whether to forcibly flush the stream.\nType:      builtin_function_or_method\n\n\n\n\n# print? # remove the comment and &lt;Shift-Enter&gt;\n\n\n\nExercise\nSee exercise 2 in the exercise list.\nJupyterLab also has a “Contextual Help” (previously called “Inspector”) window. To use,\n\nGo to the Commands and choose Contextual Help (or Inspector), or select &lt;Ctrl-I&gt; (&lt;Cmd-I&gt; for OSX users).\n\nDrag the new inspector pain to dock in the screen next to your code.\n\nThen, type print or any other function into a cell and see the help.\n\n\n# len? # remove the comment and &lt;Shift-Enter&gt;\n\nWe will learn much more about functions, including how to write our own, in a future lecture."
  },
  {
    "objectID": "tutorials/session_1/qe_basics.html#objects-and-types",
    "href": "tutorials/session_1/qe_basics.html#objects-and-types",
    "title": "Basics",
    "section": "Objects and Types",
    "text": "Objects and Types\nEverything in Python is an object.\nObjects are “things” that contain 1) data and 2) functions that can operate on the data.\nSometimes we refer to the functions inside an object as methods.\nWe can investigate what data is inside an object and which methods it supports by typing . after that particular variable, then hitting TAB.\nIt should then list data and method names to the right of the variable name like this:\n\n\n\nhttps://datascience.quantecon.org/_static/introspection.png\n\n\nYou can scroll through this list by using the up and down arrows.\nWe often refer to this as “tab completion” or “introspection”.\nLet’s do this together below. Keep going down until you find the method split.\n\n# Type a period after `x` and then press TAB.\nx\n\nOnce you have found the method split, you can use the method by adding parenthesis after it.\nLet’s call the split method, which doesn’t have any other required parameters. (Quiz: how would we check that?)\n\nx.split()\n\nWe often want to identify what kind of object some value is– called its “type”.\nA “type” is an abstraction which defines a set of behavior for any “instance” of that type i.e. 2.0 and 3.0 are instances of float, where float has a set of particular common behaviors.\nIn particular, the type determines:\n\nthe available data for any “instance” of the type (where each instance may have different values of the data).\n\nthe methods that can be applied on the object and its data.\n\nWe can figure this out by using the type function.\nThe type function takes a single argument and outputs the type of that argument.\n\ntype(3)\n\n\ntype(\"Hello World\")\n\n\ntype([1, 2, 3])\n\nWe will learn more about each of these types (and others!) and how to use them soon, so stay tuned!"
  },
  {
    "objectID": "tutorials/session_1/qe_basics.html#modules",
    "href": "tutorials/session_1/qe_basics.html#modules",
    "title": "Basics",
    "section": "Modules",
    "text": "Modules\nPython takes a modular approach to tools.\nBy this we mean that sets of related tools are bundled together into packages. (You may also hear the term modules to describe the same thing.)\nFor example:\n\npandas is a package that implements the tools necessary to do scalable data analysis.\n\nmatplotlib is a package that implements visualization tools.\n\nrequests and urllib are packages that allow Python to interface with the internet.\n\nAs we move further into the class, being able to access these packages will become very important.\nWe can bring a package’s functionality into our current Python session by writing\n\nimport package\n\nOnce we have done this, any function or object from that package can be accessed by using package.name.\nHere’s an example.\n\nimport sys   # for dealing with your computer's system\nsys.version  # information about the Python version in use"
  },
  {
    "objectID": "tutorials/session_1/qe_basics.html#exercise-2",
    "href": "tutorials/session_1/qe_basics.html#exercise-2",
    "title": "Basics",
    "section": "Exercise",
    "text": "Exercise\nSee exercise 3 in the exercise list.\n\nModule Aliases\nSome packages have long names (see matplotlib, for example) which makes accessing the package functionality somewhat inconvenient.\nTo ease this burden, Python allows us to give aliases or “nicknames” to packages.\nFor example we can write:\n\nimport package as p\n\nThis statement allows us to access the packages functionality as p.function_name rather than package.function_name.\nSome common aliases for packages are\n\nimport pandas as pd\n\nimport numpy as np\n\nimport matplotlib as mpl\n\nimport datetime as dt\n\nWhile you can choose any name for an alias, we suggest that you stick to the common ones.\nYou will learn what these common ones are over time.\n\n\nExercise\nSee exercise 4 in the exercise list."
  },
  {
    "objectID": "tutorials/session_1/qe_basics.html#good-code-habits",
    "href": "tutorials/session_1/qe_basics.html#good-code-habits",
    "title": "Basics",
    "section": "Good Code Habits",
    "text": "Good Code Habits\nA common saying in the software engineering world is:\n\nAlways code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live. Code for readability.\n\nThis might be a dramatic take, but the most important feature of your code after correctness is readability.\nWe encourage you to do everything in your power to make your code as readable as possible.\nHere are some suggestions for how to do so:\n\nComment frequently. Leaving short notes not only will help others who use your code, but will also help you interpret your code after some time has passed.\n\nAnytime you use a comma, place a space immediately afterwards.\n\nWhitespace is your friend. Don’t write line after line of code – use blank lines to break it up.\n\nDon’t let your lines run too long. Some people reading your code will be on a laptop, so you want to ensure that they don’t need to scroll horizontally and right to read your code. We recommend no more than 80 characters per line."
  },
  {
    "objectID": "tutorials/session_1/qe_basics.html#numbers",
    "href": "tutorials/session_1/qe_basics.html#numbers",
    "title": "Basics",
    "section": "Numbers",
    "text": "Numbers\nPython has two types of numbers.\n\nInteger (int): These can only take the values of the integers i.e. $ {, -2, -1, 0, 1, 2, } $\n\nFloating Point Number (float): Think of these as any real number such as $ 1.0 $, $ 3.1415 $, or $ -100.022358923223 $…\n\nThe easiest way to differentiate these types of numbers is to find a decimal place after the number.\nA float will have a decimal place, but an integer will not.\nBelow, we assign integers to the variables xi and zi and assign floating point numbers to the variables xf and zf.\n\nxi = 1\nxf = 1.0\nzi = 123\nzf = 1230.5  # Notice -- There are no commas!\nzf2 = 1_230.5  # If needed, we use `_` to separate numbers for readability"
  },
  {
    "objectID": "tutorials/session_1/qe_basics.html#exercise-4",
    "href": "tutorials/session_1/qe_basics.html#exercise-4",
    "title": "Basics",
    "section": "Exercise",
    "text": "Exercise\nSee exercise 5 in the exercise list.\n\nPython as a Calculator\nYou can use Python to perform mathematical calculations.\n\na = 4\nb = 2\n\nprint(\"a + b is\", a + b)\nprint(\"a - b is\", a - b)\nprint(\"a * b is\", a * b)\nprint(\"a / b is\", a / b)\nprint(\"a ** b is\", a**b)\nprint(\"a ^ b is\", a^b)\n\nYou likely could have guessed all except the last two.\nPython uses **, not ^, for exponentiation (raising a number to a power)!\nNotice also that above +, - and ** all returned an integer type, but / converted the result to a float.\nWhen possible, operations between integers return an integer type.\nAll operations involving a float will result in a float.\n\na = 4\nb = 2.0\n\nprint(\"a + b is\", a + b)\nprint(\"a - b is\", a - b)\nprint(\"a * b is\", a * b)\nprint(\"a / b is\", a / b)\nprint(\"a ** b is\", a**b)\n\nWe can also chain together operations.\nWhen doing this, Python follows the standard order of operations — parenthesis, exponents, multiplication and division, followed by addition and subtraction.\nFor example,\n\nx = 2.0\ny = 3.0\nz1 = x + y * x\nz2 = (x + y) * x\n\nWhat do you think z1 is?\nHow about z2?\n\n\nExercise\nSee exercise 6 in the exercise list.\n\n\nOther Math Functions\nWe often want to use other math functions on our numbers. Let’s try to calculate sin(2.5).\n\nsin(2.5)\n\nAs seen above, Python complains that sin isn’t defined.\nThe problem here is that the sin function – as well as many other standard math functions – are contained in the math package.\nWe must begin by importing the math package.\n\nimport math\n\nNow, we can use math.[TAB] to see what functions are available to us.\n\n# uncomment, add a period (`.`) and pres TAB\n# math\n\n\n# found math.sin!\nmath.sin(2.5)\n\n\n\nExercise\nSee exercise 7 in the exercise list.\n\nFloor/Modulus Division Operators\nYou are less likely to run into the following operators, but understanding that they exist is useful.\nFor two numbers assigned to the variables x and y,\n\nFloor division: x // y\n\nModulus division: x % y\n\nRemember when you first learned how to do division and you were asked to talk about the quotient and the remainder?\nThat’s what these operators correspond to…\nFloor division returns the number of times the divisor goes into the dividend (the quotient) and modulus division returns the remainder.\nAn example would be 37 divided by 7:\n\nFloor division would return 5 (7 * 5 = 35)\n\nModulus division would return 2 (2 + 35 = 37)\n\nTry it!\n\n37 // 7\n\n\n37 % 7"
  },
  {
    "objectID": "tutorials/session_1/qe_basics.html#strings",
    "href": "tutorials/session_1/qe_basics.html#strings",
    "title": "Basics",
    "section": "Strings",
    "text": "Strings\nTextual information is stored in a data type called a string.\nTo denote that you would like something to be stored as a string, you place it inside of quotation marks.\nFor example,\n\n\"this is a string\"  # Notice the quotation marks\n'this is a string'  # Notice the quotation marks\nthis is not a string  # No quotation marks\n\nYou can use either \" or ' to create a string. Just make sure that you start and end the string with the same one!\nNotice that if we ask Python to tell us the type of a string, it abbreviates its answer to str.\n\ntype(\"this is a string\")"
  },
  {
    "objectID": "tutorials/session_1/qe_basics.html#exercise-7",
    "href": "tutorials/session_1/qe_basics.html#exercise-7",
    "title": "Basics",
    "section": "Exercise",
    "text": "Exercise\nSee exercise 8 in the exercise list.\n\nString Operations\nSome of the arithmetic operators we saw in the numbers lecture also work on strings:\n\nPut two strings together: x + y.\n\nRepeat the string x a total of n times: n * x (or x * n).\n\n\nx = \"Hello\"\ny = \"World\"\n\n\nx + y\n\n\n3 * x\n\nWhat happens if we try * with two strings, or - or /?\nThe best way to find out is to try it!\n\na = \"1\"\nb = \"2\"\na * b\n\n\na - b\n\n\n\nExercise\nSee exercise 9 in the exercise list.\n\n\nString Methods\nWe can use many methods to manipulate strings.\nWe will not be able to cover all of them here, but let’s take a look at some of the most useful ones.\n\nx\n\n\nx.lower()  # Makes all letters lower case\n\n\nx.upper()  # Makes all letters upper case\n\n\nx.count(\"l\")  # Counts number of a particular string\n\n\nx.count(\"ll\")\n\n\n\nExercise\nSee exercise 10 in the exercise list.\n\n\nExercise\nSee exercise 11 in the exercise list.\n\n\nString Formatting\nSometimes we’d like to reuse some portion of a string repeatedly, but still make some relatively small changes at each usage.\nWe can do this with string formatting, which done by using {} as a placeholder where we’d like to change the string, with a variable name or expression.\nLet’s look at an example.\n\ncountry = \"Vietnam\"\nGDP = 223.9\nyear = 2017\nmy_string = f\"{country} had ${GDP} billion GDP in {year}\"\nprint(my_string)\n\nRather than just substituting a variable name, you can use a calculation or expression.\n\nprint(f\"{5}**2 = {5**2}\")\n\nOr, using our previous example\n\nmy_string = f\"{country} had ${GDP * 1_000_000} GDP in {year}\"\nprint(my_string)\n\nIn these cases, the f in front of the string causes Python interpolate any valid expression within the {} braces.\n\n\nExercise\nSee exercise 12 in the exercise list.\nAlternatively, to reuse a formatted string, you can call the format method (noting that you do not put f in front).\n\ngdp_string = \"{country} had ${GDP} billion in {year}\"\n\ngdp_string.format(country = \"Vietnam\", GDP = 223.9, year = 2017)\n\n\n\nExercise\nSee exercise 13 in the exercise list.\n\n\nExercise\nSee exercise 14 in the exercise list.\nFor more information on what you can do with string formatting (there is a lot that can be done…), see the official Python documentation on the subject."
  },
  {
    "objectID": "tutorials/session_1/qe_basics.html#booleans",
    "href": "tutorials/session_1/qe_basics.html#booleans",
    "title": "Basics",
    "section": "Booleans",
    "text": "Booleans\nA boolean is a type that denotes true or false.\nAs you will soon see in the control flow chapter, using boolean values allows you to perform or skip operations depending on whether or not a condition is met.\nLet’s start by creating some booleans and looking at them.\n\nx = True\ny = False\n\ntype(x)\n\n\nx\n\n\ny\n\n\nComparison Operators\nRather than directly write True or False, you will usually create booleans by making a comparison.\nFor example, you might want to evaluate whether the price of a particular asset is greater than or less than some price.\nFor two variables x and y, we can do the following comparisons:\n\nGreater than: x &gt; y\n\nLess than: x &lt; y\n\nEqual to: ==\n\nGreater than or equal to: x &gt;= y\n\nLess than or equal to: x &lt;= y\n\nWe demonstrate these below.\n\na = 4\nb = 2\n\nprint(\"a &gt; b\", \"is\", a &gt; b)\nprint(\"a &lt; b\", \"is\", a &lt; b)\nprint(\"a == b\", \"is\", a == b)\nprint(\"a &gt;= b\", \"is\", a &gt;= b)\nprint(\"a &lt;= b\", \"is\", a &lt;= b)\n\n\n\nNegation\nOccasionally, determining whether a statement is “not true” or “not false” is more convenient than simply “true” or “false”.\nThis is known as negating a statement.\nIn Python, we can negate a boolean using the word not.\n\nnot False\n\n\nnot True\n\n\n\nMultiple Comparisons (and/or)\nSometimes we need to evaluate multiple comparisons at once.\nThis is done by using the words and and or.\nHowever, these are the “mathematical” ands and ors – so they don’t carry the same meaning as you’d use them in colloquial English.\n\na and b is true only when both a and b are true.\n\na or b is true whenever at least one of a or b is true.\n\nFor example\n\nThe statement “I will accept the new job if the salary is higher and I receive more vacation days” means that you would only accept the new job if you both receive a higher salary and are given more vacation days.\n\nThe statement “I will accept the new job if the salary is higher or I receive more vacation days” means that you would accept the job if\n\nthey raised your salary, (2) you are given more vacation days, or\nthey raise your salary and give you more vacation days.\n\n\nLet’s see some examples.\n\nTrue and False\n\n\nTrue and True\n\n\nTrue or False\n\n\nFalse or False\n\n\n# Can chain multiple comparisons together.\nTrue and (False or True)\n\n\n\nExercise\nSee exercise 15 in the exercise list.\n\n\nall and any\nWe have seen how we can use the words and and or to process two booleans at a time.\nThe functions all and any allow us to process an unlimited number of booleans at once.\nall(bools) will return True if and only if all the booleans in bools is True and returns False otherwise.\nany(bools) returns True whenever one or more of bools is True.\nThe exercise below will give you a chance to practice.\n\n\nExercise\nSee exercise 16 in the exercise list."
  },
  {
    "objectID": "tutorials/session_1/qe_basics.html#exercises",
    "href": "tutorials/session_1/qe_basics.html#exercises",
    "title": "Basics",
    "section": "Exercises",
    "text": "Exercises\n\nExercise 1\nWhat do you think the value of z is after running the code below?\n\nz = 3\nz = z + 4\nprint(\"z is\", z)\n\n(back to text)\n\n\nExercise 2\nRead about out what the len function does (by writing len?).\nWhat will it produce if we give it the variable x?\nCheck whether you were right by running the code len(x).\n(back to text)\n\n\nExercise 3\nWe can use our introspection skills to investigate a package’s contents.\nIn the cell below, use tab completion to find a function from the time module that will display the local time.\nUse time.FUNC_NAME? (where FUNC_NAME is replaced with the function you found) to see information about that function and then call the function.\nLook for something to do with the word local\n\nimport time\n# your code here -- notice the comment!\n\n(back to text)\n\n\nExercise 4\nTry running import time as t in the cell below, then see if you can call the function you identified above.\nDoes it work?\n(back to text)\n\n\nExercise 5\nCreate the following variables:\n\nD: A floating point number with the value 10,000\n\nr: A floating point number with value 0.025\n\nT: An integer with value 30\n\nWe will use them in a later exercise.\n\n# your code here!\n\n(back to text)\n\n\nExercise 6\nRemember the variables we created earlier?\nLet’s compute the present discounted value of a payment ($ D $) made in $ T $ years assuming an interest rate of 2.5%. Save this value to a new variable called PDV and print your output.\nThe formula is\n\\[\n\\text{PDV} = \\frac{D}{(1 + r)^T}\n\\]\n\n# your code here\n\n(back to text)\n\n\nExercise 7\nVerify the “trick” where the percent difference ($ \\()\nbetween two numbers close to 1 can be well approximated by the difference\nbetween the log of the two numbers (\\) (x) - (y) $).\nUse the numbers x and y below.\nyou will want to use the math.log function\n\n# your code here\n\n(back to text)\n\n\nExercise 8\nThe code below is invalid Python code\n\nx = 'What's wrong with this string'\n\nCan you fix it?\nTry creating a code cell below and testing things out until you find a solution.\n(back to text)\n\n\nExercise 9\nUsing the variables x and y, how could you create the sentence Hello World?\nThink about how to represent a space as a string.\n(back to text)\n\n\nExercise 10\nOne of our favorite (and most frequently used) string methods is replace.\nIt substitutes all occurrences of a particular pattern with a different pattern.\nFor the variable test below, use the replace method to change the c to a d.\nType test.replace? to get some help for how to use the method replace.\n\ntest = \"abc\"\n\n(back to text)\n\n\nExercise 11\nSuppose you are working with price data and encounter the value \"\\$6.50\".\nWe recognize this as being a number representing the quantity “six dollars and fifty cents.”\nHowever, Python interprets the value as the string \"\\$6.50\". (Quiz: why is this a problem? Think about the examples above.)\nIn this exercise, your task is to convert the variable price below into a number.\nOnce the string is in a suitable format, you can call write float(clean_price) to make it a number.\n\nprice = \"$6.50\"\n\n(back to text)\n\n\nExercise 12\nLookup a country in World Bank database, and format a string showing the growth rate of GDP over the last 2 years.\n(back to text)\n\n\nExercise 13\nInstead of hard-coding the values above, try to use the country, GDP and year variables you previously defined.\n(back to text)\n\n\nExercise 14\nCreate a new string and use formatting to produce each of the following statements\n\n“The 1st quarter revenue was 110M”\n\n“The 2nd quarter revenue was 95M”\n\n“The 3rd quarter revenue was 100M”\n\n“The 4th quarter revenue was 130M”\n\n(back to text)\n\n\nExercise 15\nWithout typing the commands, determine whether the following statements are true or false.\nOnce you have evaluated whether the command is True or False, run the code in Python.\n\nx = 2\ny = 2\nz = 4\n\n# Statement 1\nx &gt; z\n\n# Statement 1\nx == y\n\n# Statement 3\n(x &lt; y) and (x &gt; y)\n\n# Statement 4\n(x &lt; y) or (x &gt; y)\n\n# Statement 5\n(x &lt;= y) and (x &gt;= y)\n\n# Statement 6\nTrue and ((x &lt; z) or (x &lt; y))\n\n\n# code here!\n\n(back to text)\n\n\nExercise 16\nFor each of the code cells below, think carefully about what you expect to be returned before evaluating the cell.\nThen evaluate the cell to check your intuitions.\nNOTE: For now, do not worry about what the [ and ] mean – they allow us to create lists which we will learn about in an upcoming lecture.\n\nall([True, True, True])\n\n\nall([False, True, False])\n\n\nall([False, False, False])\n\n\nany([True, True, True])\n\n\nany([False, True, False])\n\n\nany([False, False, False])\n\n(back to text)"
  },
  {
    "objectID": "tutorials/session_1/qe_basics_answers.html",
    "href": "tutorials/session_1/qe_basics_answers.html",
    "title": "Basics",
    "section": "",
    "text": "Outcomes"
  },
  {
    "objectID": "tutorials/session_1/qe_basics_answers.html#first-steps",
    "href": "tutorials/session_1/qe_basics_answers.html#first-steps",
    "title": "Basics",
    "section": "First Steps",
    "text": "First Steps\nWe are ready to begin writing code!\nIn this section, we will teach you some basic concepts of programming and where to search for help.\n\nVariable Assignment\nThe first thing we will learn is the idea of variable assignment.\nVariable assignment associates a value to a variable.\nBelow, we assign the value “Hello World” to the variable x\n\nx = \"Hello World\"\n\n\nx\n\n'Hello World'\n\n\nOnce we have assigned a value to a variable, Python will remember this variable as long as the current session of Python is still running.\nNotice how writing x into the prompt below outputs the value “Hello World”.\n\nx\n\n'Hello World'\n\n\nHowever, Python returns an error if we ask it about variables that have not yet been created.\n\n# uncomment (delete the # and the space) the line below and run\ny\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[5], line 1\n----&gt; 1 y\n\nNameError: name 'y' is not defined\n\n\n\nIt is also useful to understand the order in which operations happen.\nFirst, the right side of the equal sign is computed.\nThen, that computed value is stored as the variable to the left of the equal sign.\n\n\nExercise\nSee exercise 1 in the exercise list.\nKeep in mind that the variable binds a name to something stored in memory.\nThe name can even be bound to a value of a completely different type.\n\nx = 2\nprint(x)\nx = \"something else\"\nprint(x)\n\n\n\nCode Comments\nComments are short notes that you leave for yourself and for others who read your code.\nThey should be used to explain what the code does.\nA comment is made with the #. Python ignores everything in a line that follows a #.\nLet’s practice making some comments.\n\ni = 1  # Assign the value 1 to variable i\nj = 2  # Assign the value 2 to variable j\n\n# We add i and j below this line\ni + j\n\n3"
  },
  {
    "objectID": "tutorials/session_1/qe_basics_answers.html#functions",
    "href": "tutorials/session_1/qe_basics_answers.html#functions",
    "title": "Basics",
    "section": "Functions",
    "text": "Functions\nFunctions are processes that take an input (or inputs) and produce an output.\nIf we had a function called f that took two arguments x and y, we would write f(x, y) to use the function.\nFor example, the function print simply prints whatever it is given. Recall the variable we created called x.\n\nprint(x)\n\nHello World\n\n\n\nGetting Help\nWe can figure out what a function does by asking for help.\nIn Jupyter notebooks, this is done by placing a ? after the function name (without using parenthesis) and evaluating the cell.\nFor example, we can ask for help on the print function by writing print?.\nDepending on how you launched Jupyter, this will either launch\n\nJupyterLab: display the help in text below the cell.\n\nClassic Jupyter Notebooks: display a new panel at the bottom of your screen. You can exit this panel by hitting the escape key or clicking the x at the top right of the panel.\n\n\nprint?\n\n\nDocstring:\nprint(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\nPrints the values to a stream, or to sys.stdout by default.\nOptional keyword arguments:\nfile:  a file-like object (stream); defaults to the current sys.stdout.\nsep:   string inserted between values, default a space.\nend:   string appended after the last value, default a newline.\nflush: whether to forcibly flush the stream.\nType:      builtin_function_or_method\n\n\n\n\n# print? # remove the comment and &lt;Shift-Enter&gt;\n\n\n\nExercise\nSee exercise 2 in the exercise list.\nJupyterLab also has a “Contextual Help” (previously called “Inspector”) window. To use,\n\nGo to the Commands and choose Contextual Help (or Inspector), or select &lt;Ctrl-I&gt; (&lt;Cmd-I&gt; for OSX users).\n\nDrag the new inspector pain to dock in the screen next to your code.\n\nThen, type print or any other function into a cell and see the help.\n\n\n# len? # remove the comment and &lt;Shift-Enter&gt;\n\nWe will learn much more about functions, including how to write our own, in a future lecture."
  },
  {
    "objectID": "tutorials/session_1/qe_basics_answers.html#objects-and-types",
    "href": "tutorials/session_1/qe_basics_answers.html#objects-and-types",
    "title": "Basics",
    "section": "Objects and Types",
    "text": "Objects and Types\nEverything in Python is an object.\nObjects are “things” that contain 1) data and 2) functions that can operate on the data.\nSometimes we refer to the functions inside an object as methods.\nWe can investigate what data is inside an object and which methods it supports by typing . after that particular variable, then hitting TAB.\nIt should then list data and method names to the right of the variable name like this:\n\n\n\nhttps://datascience.quantecon.org/_static/introspection.png\n\n\nYou can scroll through this list by using the up and down arrows.\nWe often refer to this as “tab completion” or “introspection”.\nLet’s do this together below. Keep going down until you find the method split.\n\n# Type a period after `x` and then press TAB.\nx\n\nOnce you have found the method split, you can use the method by adding parenthesis after it.\nLet’s call the split method, which doesn’t have any other required parameters. (Quiz: how would we check that?)\n\nx.split()\n\nWe often want to identify what kind of object some value is– called its “type”.\nA “type” is an abstraction which defines a set of behavior for any “instance” of that type i.e. 2.0 and 3.0 are instances of float, where float has a set of particular common behaviors.\nIn particular, the type determines:\n\nthe available data for any “instance” of the type (where each instance may have different values of the data).\n\nthe methods that can be applied on the object and its data.\n\nWe can figure this out by using the type function.\nThe type function takes a single argument and outputs the type of that argument.\n\ntype(3)\n\n\ntype(\"Hello World\")\n\n\ntype([1, 2, 3])\n\nWe will learn more about each of these types (and others!) and how to use them soon, so stay tuned!"
  },
  {
    "objectID": "tutorials/session_1/qe_basics_answers.html#modules",
    "href": "tutorials/session_1/qe_basics_answers.html#modules",
    "title": "Basics",
    "section": "Modules",
    "text": "Modules\nPython takes a modular approach to tools.\nBy this we mean that sets of related tools are bundled together into packages. (You may also hear the term modules to describe the same thing.)\nFor example:\n\npandas is a package that implements the tools necessary to do scalable data analysis.\n\nmatplotlib is a package that implements visualization tools.\n\nrequests and urllib are packages that allow Python to interface with the internet.\n\nAs we move further into the class, being able to access these packages will become very important.\nWe can bring a package’s functionality into our current Python session by writing\n\nimport package\n\nOnce we have done this, any function or object from that package can be accessed by using package.name.\nHere’s an example.\n\nimport sys   # for dealing with your computer's system\nsys.version  # information about the Python version in use"
  },
  {
    "objectID": "tutorials/session_1/qe_basics_answers.html#exercise-2",
    "href": "tutorials/session_1/qe_basics_answers.html#exercise-2",
    "title": "Basics",
    "section": "Exercise",
    "text": "Exercise\nSee exercise 3 in the exercise list.\n\nModule Aliases\nSome packages have long names (see matplotlib, for example) which makes accessing the package functionality somewhat inconvenient.\nTo ease this burden, Python allows us to give aliases or “nicknames” to packages.\nFor example we can write:\n\nimport package as p\n\nThis statement allows us to access the packages functionality as p.function_name rather than package.function_name.\nSome common aliases for packages are\n\nimport pandas as pd\n\nimport numpy as np\n\nimport matplotlib as mpl\n\nimport datetime as dt\n\nWhile you can choose any name for an alias, we suggest that you stick to the common ones.\nYou will learn what these common ones are over time.\n\n\nExercise\nSee exercise 4 in the exercise list."
  },
  {
    "objectID": "tutorials/session_1/qe_basics_answers.html#good-code-habits",
    "href": "tutorials/session_1/qe_basics_answers.html#good-code-habits",
    "title": "Basics",
    "section": "Good Code Habits",
    "text": "Good Code Habits\nA common saying in the software engineering world is:\n\nAlways code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live. Code for readability.\n\nThis might be a dramatic take, but the most important feature of your code after correctness is readability.\nWe encourage you to do everything in your power to make your code as readable as possible.\nHere are some suggestions for how to do so:\n\nComment frequently. Leaving short notes not only will help others who use your code, but will also help you interpret your code after some time has passed.\n\nAnytime you use a comma, place a space immediately afterwards.\n\nWhitespace is your friend. Don’t write line after line of code – use blank lines to break it up.\n\nDon’t let your lines run too long. Some people reading your code will be on a laptop, so you want to ensure that they don’t need to scroll horizontally and right to read your code. We recommend no more than 80 characters per line."
  },
  {
    "objectID": "tutorials/session_1/qe_basics_answers.html#numbers",
    "href": "tutorials/session_1/qe_basics_answers.html#numbers",
    "title": "Basics",
    "section": "Numbers",
    "text": "Numbers\nPython has two types of numbers.\n\nInteger (int): These can only take the values of the integers i.e. $ {, -2, -1, 0, 1, 2, } $\n\nFloating Point Number (float): Think of these as any real number such as $ 1.0 $, $ 3.1415 $, or $ -100.022358923223 $…\n\nThe easiest way to differentiate these types of numbers is to find a decimal place after the number.\nA float will have a decimal place, but an integer will not.\nBelow, we assign integers to the variables xi and zi and assign floating point numbers to the variables xf and zf.\n\nxi = 1\nxf = 1.0\nzi = 123\nzf = 1230.5  # Notice -- There are no commas!\nzf2 = 1_230.5  # If needed, we use `_` to separate numbers for readability"
  },
  {
    "objectID": "tutorials/session_1/qe_basics_answers.html#exercise-4",
    "href": "tutorials/session_1/qe_basics_answers.html#exercise-4",
    "title": "Basics",
    "section": "Exercise",
    "text": "Exercise\nSee exercise 5 in the exercise list.\n\nPython as a Calculator\nYou can use Python to perform mathematical calculations.\n\na = 4\nb = 2\n\nprint(\"a + b is\", a + b)\nprint(\"a - b is\", a - b)\nprint(\"a * b is\", a * b)\nprint(\"a / b is\", a / b)\nprint(\"a ** b is\", a**b)\nprint(\"a ^ b is\", a^b)\n\nYou likely could have guessed all except the last two.\nPython uses **, not ^, for exponentiation (raising a number to a power)!\nNotice also that above +, - and ** all returned an integer type, but / converted the result to a float.\nWhen possible, operations between integers return an integer type.\nAll operations involving a float will result in a float.\n\na = 4\nb = 2.0\n\nprint(\"a + b is\", a + b)\nprint(\"a - b is\", a - b)\nprint(\"a * b is\", a * b)\nprint(\"a / b is\", a / b)\nprint(\"a ** b is\", a**b)\n\nWe can also chain together operations.\nWhen doing this, Python follows the standard order of operations — parenthesis, exponents, multiplication and division, followed by addition and subtraction.\nFor example,\n\nx = 2.0\ny = 3.0\nz1 = x + y * x\nz2 = (x + y) * x\n\nWhat do you think z1 is?\nHow about z2?\n\n\nExercise\nSee exercise 6 in the exercise list.\n\n\nOther Math Functions\nWe often want to use other math functions on our numbers. Let’s try to calculate sin(2.5).\n\nsin(2.5)\n\nAs seen above, Python complains that sin isn’t defined.\nThe problem here is that the sin function – as well as many other standard math functions – are contained in the math package.\nWe must begin by importing the math package.\n\nimport math\n\nNow, we can use math.[TAB] to see what functions are available to us.\n\n# uncomment, add a period (`.`) and pres TAB\n# math\n\n\n# found math.sin!\nmath.sin(2.5)\n\n\n\nExercise\nSee exercise 7 in the exercise list.\n\nFloor/Modulus Division Operators\nYou are less likely to run into the following operators, but understanding that they exist is useful.\nFor two numbers assigned to the variables x and y,\n\nFloor division: x // y\n\nModulus division: x % y\n\nRemember when you first learned how to do division and you were asked to talk about the quotient and the remainder?\nThat’s what these operators correspond to…\nFloor division returns the number of times the divisor goes into the dividend (the quotient) and modulus division returns the remainder.\nAn example would be 37 divided by 7:\n\nFloor division would return 5 (7 * 5 = 35)\n\nModulus division would return 2 (2 + 35 = 37)\n\nTry it!\n\n37 // 7\n\n\n37 % 7"
  },
  {
    "objectID": "tutorials/session_1/qe_basics_answers.html#strings",
    "href": "tutorials/session_1/qe_basics_answers.html#strings",
    "title": "Basics",
    "section": "Strings",
    "text": "Strings\nTextual information is stored in a data type called a string.\nTo denote that you would like something to be stored as a string, you place it inside of quotation marks.\nFor example,\n\n\"this is a string\"  # Notice the quotation marks\n'this is a string'  # Notice the quotation marks\nthis is not a string  # No quotation marks\n\nYou can use either \" or ' to create a string. Just make sure that you start and end the string with the same one!\nNotice that if we ask Python to tell us the type of a string, it abbreviates its answer to str.\n\ntype(\"this is a string\")"
  },
  {
    "objectID": "tutorials/session_1/qe_basics_answers.html#exercise-7",
    "href": "tutorials/session_1/qe_basics_answers.html#exercise-7",
    "title": "Basics",
    "section": "Exercise",
    "text": "Exercise\nSee exercise 8 in the exercise list.\n\nString Operations\nSome of the arithmetic operators we saw in the numbers lecture also work on strings:\n\nPut two strings together: x + y.\n\nRepeat the string x a total of n times: n * x (or x * n).\n\n\nx = \"Hello\"\ny = \"World\"\n\n\nx + y\n\n\n3 * x\n\nWhat happens if we try * with two strings, or - or /?\nThe best way to find out is to try it!\n\na = \"1\"\nb = \"2\"\na * b\n\n\na - b\n\n\n\nExercise\nSee exercise 9 in the exercise list.\n\n\nString Methods\nWe can use many methods to manipulate strings.\nWe will not be able to cover all of them here, but let’s take a look at some of the most useful ones.\n\nx\n\n\nx.lower()  # Makes all letters lower case\n\n\nx.upper()  # Makes all letters upper case\n\n\nx.count(\"l\")  # Counts number of a particular string\n\n\nx.count(\"ll\")\n\n\n\nExercise\nSee exercise 10 in the exercise list.\n\n\nExercise\nSee exercise 11 in the exercise list.\n\n\nString Formatting\nSometimes we’d like to reuse some portion of a string repeatedly, but still make some relatively small changes at each usage.\nWe can do this with string formatting, which done by using {} as a placeholder where we’d like to change the string, with a variable name or expression.\nLet’s look at an example.\n\ncountry = \"Vietnam\"\nGDP = 223.9\nyear = 2017\nmy_string = f\"{country} had ${GDP} billion GDP in {year}\"\nprint(my_string)\n\nRather than just substituting a variable name, you can use a calculation or expression.\n\nprint(f\"{5}**2 = {5**2}\")\n\nOr, using our previous example\n\nmy_string = f\"{country} had ${GDP * 1_000_000} GDP in {year}\"\nprint(my_string)\n\nIn these cases, the f in front of the string causes Python interpolate any valid expression within the {} braces.\n\n\nExercise\nSee exercise 12 in the exercise list.\nAlternatively, to reuse a formatted string, you can call the format method (noting that you do not put f in front).\n\ngdp_string = \"{country} had ${GDP} billion in {year}\"\n\ngdp_string.format(country = \"Vietnam\", GDP = 223.9, year = 2017)\n\n\n\nExercise\nSee exercise 13 in the exercise list.\n\n\nExercise\nSee exercise 14 in the exercise list.\nFor more information on what you can do with string formatting (there is a lot that can be done…), see the official Python documentation on the subject."
  },
  {
    "objectID": "tutorials/session_1/qe_basics_answers.html#booleans",
    "href": "tutorials/session_1/qe_basics_answers.html#booleans",
    "title": "Basics",
    "section": "Booleans",
    "text": "Booleans\nA boolean is a type that denotes true or false.\nAs you will soon see in the control flow chapter, using boolean values allows you to perform or skip operations depending on whether or not a condition is met.\nLet’s start by creating some booleans and looking at them.\n\nx = True\ny = False\n\ntype(x)\n\n\nx\n\n\ny\n\n\nComparison Operators\nRather than directly write True or False, you will usually create booleans by making a comparison.\nFor example, you might want to evaluate whether the price of a particular asset is greater than or less than some price.\nFor two variables x and y, we can do the following comparisons:\n\nGreater than: x &gt; y\n\nLess than: x &lt; y\n\nEqual to: ==\n\nGreater than or equal to: x &gt;= y\n\nLess than or equal to: x &lt;= y\n\nWe demonstrate these below.\n\na = 4\nb = 2\n\nprint(\"a &gt; b\", \"is\", a &gt; b)\nprint(\"a &lt; b\", \"is\", a &lt; b)\nprint(\"a == b\", \"is\", a == b)\nprint(\"a &gt;= b\", \"is\", a &gt;= b)\nprint(\"a &lt;= b\", \"is\", a &lt;= b)\n\n\n\nNegation\nOccasionally, determining whether a statement is “not true” or “not false” is more convenient than simply “true” or “false”.\nThis is known as negating a statement.\nIn Python, we can negate a boolean using the word not.\n\nnot False\n\n\nnot True\n\n\n\nMultiple Comparisons (and/or)\nSometimes we need to evaluate multiple comparisons at once.\nThis is done by using the words and and or.\nHowever, these are the “mathematical” ands and ors – so they don’t carry the same meaning as you’d use them in colloquial English.\n\na and b is true only when both a and b are true.\n\na or b is true whenever at least one of a or b is true.\n\nFor example\n\nThe statement “I will accept the new job if the salary is higher and I receive more vacation days” means that you would only accept the new job if you both receive a higher salary and are given more vacation days.\n\nThe statement “I will accept the new job if the salary is higher or I receive more vacation days” means that you would accept the job if\n\nthey raised your salary, (2) you are given more vacation days, or\nthey raise your salary and give you more vacation days.\n\n\nLet’s see some examples.\n\nTrue and False\n\n\nTrue and True\n\n\nTrue or False\n\n\nFalse or False\n\n\n# Can chain multiple comparisons together.\nTrue and (False or True)\n\n\n\nExercise\nSee exercise 15 in the exercise list.\n\n\nall and any\nWe have seen how we can use the words and and or to process two booleans at a time.\nThe functions all and any allow us to process an unlimited number of booleans at once.\nall(bools) will return True if and only if all the booleans in bools is True and returns False otherwise.\nany(bools) returns True whenever one or more of bools is True.\nThe exercise below will give you a chance to practice.\n\n\nExercise\nSee exercise 16 in the exercise list."
  },
  {
    "objectID": "tutorials/session_1/qe_basics_answers.html#exercises",
    "href": "tutorials/session_1/qe_basics_answers.html#exercises",
    "title": "Basics",
    "section": "Exercises",
    "text": "Exercises\n\nExercise 1\nWhat do you think the value of z is after running the code below?\n\nz = 3\nz = z + 4\nprint(\"z is\", z)\n\nz is 7\n\n\nI think the answer is: 7\n(back to text)\n\n\nExercise 2\nRead about out what the len function does (by writing len?).\nWhat will it produce if we give it the variable x?\nCheck whether you were right by running the code len(x).\n(back to text)\nlen counts the number of objects in a collection and returns an integer. The string x has 11 elements, which should be the answer.\n\nlen?\n\n\nSignature: len(obj, /)\nDocstring: Return the number of items in a container.\nType:      builtin_function_or_method\n\n\n\n\nlen(x)\n\n11\n\n\n\n\nExercise 3\nWe can use our introspection skills to investigate a package’s contents.\nIn the cell below, use tab completion to find a function from the time module that will display the local time.\nUse time.FUNC_NAME? (where FUNC_NAME is replaced with the function you found) to see information about that function and then call the function.\nLook for something to do with the word local\n\nimport time\n# your code here -- notice the comment!\n\n(back to text)\n\n\nExercise 4\nTry running import time as t in the cell below, then see if you can call the function you identified above.\nDoes it work?\n(back to text)\n\n\nExercise 5\nCreate the following variables:\n\nD: A floating point number with the value 10,000\n\nr: A floating point number with value 0.025\n\nT: An integer with value 30\n\nWe will use them in a later exercise.\n\n# your code here!\n\n(back to text)\n\n\nExercise 6\nRemember the variables we created earlier?\nLet’s compute the present discounted value of a payment ($ D $) made in $ T $ years assuming an interest rate of 2.5%. Save this value to a new variable called PDV and print your output.\nThe formula is\n\\[\n\\text{PDV} = \\frac{D}{(1 + r)^T}\n\\]\n\n# your code here\n\n(back to text)\n\n\nExercise 7\nVerify the “trick” where the percent difference ($ \\()\nbetween two numbers close to 1 can be well approximated by the difference\nbetween the log of the two numbers (\\) (x) - (y) $).\nUse the numbers x and y below.\nyou will want to use the math.log function\n\nx = 1.05\ny = 1.02\n\n(back to text)\n\n\nExercise 8\nThe code below is invalid Python code\n\nx = 'What's wrong with this string'\n\nCan you fix it?\nTry creating a code cell below and testing things out until you find a solution.\n(back to text)\n\n\nExercise 9\nUsing the variables x and y, how could you create the sentence Hello World?\nThink about how to represent a space as a string.\n(back to text)\n\n\nExercise 10\nOne of our favorite (and most frequently used) string methods is replace.\nIt substitutes all occurrences of a particular pattern with a different pattern.\nFor the variable test below, use the replace method to change the c to a d.\nType test.replace? to get some help for how to use the method replace.\n\ntest = \"abc\"\n\n(back to text)\n\n\nExercise 11\nSuppose you are working with price data and encounter the value \"\\$6.50\".\nWe recognize this as being a number representing the quantity “six dollars and fifty cents.”\nHowever, Python interprets the value as the string \"\\$6.50\". (Quiz: why is this a problem? Think about the examples above.)\nIn this exercise, your task is to convert the variable price below into a number.\nOnce the string is in a suitable format, you can call write float(clean_price) to make it a number.\n\nprice = \"$6.50\"\n\n(back to text)\n\n\nExercise 12\nLookup a country in World Bank database, and format a string showing the growth rate of GDP over the last 2 years.\n(back to text)\n\n\nExercise 13\nInstead of hard-coding the values above, try to use the country, GDP and year variables you previously defined.\n(back to text)\n\n\nExercise 14\nCreate a new string and use formatting to produce each of the following statements\n\n“The 1st quarter revenue was 110M”\n\n“The 2nd quarter revenue was 95M”\n\n“The 3rd quarter revenue was 100M”\n\n“The 4th quarter revenue was 130M”\n\n(back to text)\n\n\nExercise 15\nWithout typing the commands, determine whether the following statements are true or false.\nOnce you have evaluated whether the command is True or False, run the code in Python.\n\nx = 2\ny = 2\nz = 4\n\n# Statement 1\nx &gt; z\n\n# Statement 1\nx == y\n\n# Statement 3\n(x &lt; y) and (x &gt; y)\n\n# Statement 4\n(x &lt; y) or (x &gt; y)\n\n# Statement 5\n(x &lt;= y) and (x &gt;= y)\n\n# Statement 6\nTrue and ((x &lt; z) or (x &lt; y))\n\n\n# code here!\n\n(back to text)\n\n\nExercise 16\nFor each of the code cells below, think carefully about what you expect to be returned before evaluating the cell.\nThen evaluate the cell to check your intuitions.\nNOTE: For now, do not worry about what the [ and ] mean – they allow us to create lists which we will learn about in an upcoming lecture.\n\nall([True, True, True])\n\n\nall([False, True, False])\n\n\nall([False, False, False])\n\n\nany([True, True, True])\n\n\nany([False, True, False])\n\n\nany([False, False, False])\n\n(back to text)"
  },
  {
    "objectID": "tutorials/session_1/qe_collections_answers.html",
    "href": "tutorials/session_1/qe_collections_answers.html",
    "title": "Collections",
    "section": "",
    "text": "Prerequisites\nOutcomes"
  },
  {
    "objectID": "tutorials/session_1/qe_collections_answers.html#ordered-collections",
    "href": "tutorials/session_1/qe_collections_answers.html#ordered-collections",
    "title": "Collections",
    "section": "Ordered Collections",
    "text": "Ordered Collections\n\nLists\nA Python list is an ordered collection of items.\nWe can create lists using the following syntax\n\n[item1, item2, ...,  itemN]\n\nwhere the ... represents any number of additional items.\nEach item can be of any type.\nLet’s create some lists.\n\n# created, but not assigned to a variable\n[2.0, 9.1, \"a rose is a rose is a rose\"]\n\n[2.0, 9.1, 'a rose is a rose is a rose']\n\n\n\n# stored as the variable `x`\nx = [2.0, 9.1, 12.5]\nprint(\"x has type\", type(x))\nx\n\nx has type &lt;class 'list'&gt;\n\n\n[2.0, 9.1, 12.5]\n\n\n\nWhat Can We Do with Lists?\nWe can access items in a list called mylist using mylist[N] where N is an integer.\nNote: Anytime that we use the syntax x[i] we are doing what is called indexing – it means that we are selecting a particular element of a collection x.\n\nx[1]\n\n9.1\n\n\nWait? Why did x[1] return 9.1 when the first element in x is actually 2.0?\nThis happened because Python starts counting at zero!\nLets repeat that one more time for emphasis Python starts counting at zero!\nTo access the first element of x we must use x[0]:\n\nx[0]\n\n2.0\n\n\nWe can also determine how many items are in a list using the len function.\n\nlen(x)\n\n3\n\n\nWhat happens if we try to index with a number higher than the number of items in a list?\n\n# uncomment the line below and run\nx[4]\n\n\n---------------------------------------------------------------------------\nIndexError                                Traceback (most recent call last)\nCell In[6], line 2\n      1 # uncomment the line below and run\n----&gt; 2 x[4]\n\nIndexError: list index out of range\n\n\n\nWe can check if a list contains an element using the in keyword.\n\n2.0 in x\n\nTrue\n\n\n\n1.5 in x\n\nFalse\n\n\nFor our list x, other common operations we might want to do are…\n\nx.reverse()\nx\n\n[12.5, 9.1, 2.0]\n\n\n\nnumber_list = [10, 25, 42, 1.0]\nprint(number_list)\nnumber_list.sort()\nprint(number_list)\n\n[10, 25, 42, 1.0]\n[1.0, 10, 25, 42]\n\n\nNote that in order to sort, we had to have all elements in our list be numbers (int and float), more on this below.\nWe could actually do the same with a list of strings. In this case, sort will put the items in alphabetical order.\n\nstr_list = [\"NY\", \"AZ\", \"TX\"]\nprint(str_list)\nstr_list.sort()\nprint(str_list)\n\n['NY', 'AZ', 'TX']\n['AZ', 'NY', 'TX']\n\n\nThe append method adds an element to the end of existing list.\n\nnum_list = [10, 25, 42, 8]\nprint(num_list)\nnum_list.append(10)\nprint(num_list)\n\n[10, 25, 42, 8]\n[10, 25, 42, 8, 10]\n\n\nHowever, if you call append with a list, it adds a list to the end, rather than the numbers in that list.\n\nnum_list = [10, 25, 42, 8]\nprint(num_list)\nnum_list.append([20, 4])\nprint(num_list)\n\n[10, 25, 42, 8]\n[10, 25, 42, 8, [20, 4]]\n\n\nTo combine the lists instead…\n\nnum_list = [10, 25, 42, 8]\nprint(num_list)\nnum_list.extend([20, 4])\nprint(num_list)\n\n[10, 25, 42, 8]\n[10, 25, 42, 8, 20, 4]\n\n\n\n\nExercise\nSee exercise 1 in the exercise list.\n\n\n\n\nLists of Different Types\nWhile most examples above have all used a list with a single type of variable, this is not required.\nLet’s carefully make a small change to the first example: replace 2.0 with 2\n\nx = [2, 9.1, 12.5]\n\nThis behavior is identical for many operations you might apply to a list.\n\nimport numpy as np\nx = [2, 9.1, 12.5]\nnp.mean(x) == sum(x)/len(x)\n\nHere we have also introduced a new module, Numpy, which provides many functions for working with numeric data.\nTaking this further, we can put completely different types of elements inside of a list.\n\n# stored as the variable `x`\nx = [2, \"hello\", 3.0]\nprint(\"x has type\", type(x))\nx\n\nTo see the types of individual elements in the list:\n\nprint(f\"type(x[0]) = {type(x[0])}, type(x[0]) = {type(x[1])}, type(x[2]) = {type(x[2])}\")\n\nWhile no programming limitations prevent this, you should be careful if you write code with different numeric and non-numeric types in the same list.\nFor example, if the types within the list cannot be compared, then how could you sort the elements of the list? (i.e. How do you determine whether the string “hello” is less than the integer 2, “hello” &lt; 2?)\n\nx = [2, \"hello\", 3.0]\n# uncomment the line below and see what happens!\n# x.sort()\n\nA few key exceptions to this general rule are:\n\nLists with both integers and floating points are less error-prone (since mathematical code using the list would work with both types).\n\nWhen working with lists and data, you may want to represent missing values with a different type than the existing values.\n\n\n\nThe range Function\nOne function you will see often in Python is the range function.\nIt has three versions:\n\nrange(N): goes from 0 to N-1\n\nrange(a, N): goes from a to N-1\n\nrange(a, N, d): goes from a to N-1, counting by d\n\nWhen we call the range function, we get back something that has type range:\n\nr = range(5)\nprint(\"type(r)\", type(r))\n\ntype(r) &lt;class 'range'&gt;\n\n\nTo turn the range into a list:\n\n[*r]\n\n[0, 1, 2, 3, 4]\n\n\n\nlist(r)\n\n[0, 1, 2, 3, 4]\n\n\n\nfor i in range(5):\n    print(i)\n\n0\n1\n2\n3\n4\n\n\n\n\nExercise\nSee exercise 2 in the exercise list.\n\n\nWhat are Tuples?\nTuples are very similar to lists and hold ordered collections of items.\nHowever, tuples and lists have three main differences:\n\nTuples are created using parenthesis — ( and ) — instead of square brackets — [ and ].\n\nTuples are immutable, which is a fancy computer science word meaning that they can’t be changed or altered after they are created.\n\nTuples and multiple return values from functions are tightly connected, as we will see in functions.\n\n\nt = (1, \"hello\", 3.0)\nprint(\"t is a\", type(t))\nt\n\nt is a &lt;class 'tuple'&gt;\n\n\n(1, 'hello', 3.0)\n\n\n\ntuple(list(t))\n\n(1, 'hello', 3.0)\n\n\nWe can convert a list to a tuple by calling the tuple function on a list.\n\nprint(\"x is a\", type(x))\nprint(\"tuple(x) is a\", type(tuple(x)))\ntuple(x)\n\nWe can also convert a tuple to a list using the list function.\n\nlist(t)\n\nAs with a list, we access items in a tuple t using t[N] where N is an int.\n\nt[0]  # still start counting at 0\n\n1\n\n\n\nt[2]\n\n3.0\n\n\n\n\nExercise\nSee exercise 3 in the exercise list.\nTuples (and lists) can be unpacked directly into variables.\n\nx, y = (1, \"test\")\nprint(f\"x = {x}, y = {y}\")\n\nThis will be a convenient way to work with functions returning multiple values, as well as within comprehensions and loops.\n\n\nList vs Tuple: Which to Use?\nShould you use a list or tuple?\nThis depends on what you are storing, whether you might need to reorder the elements, or whether you’d add new elements without a complete reinterpretation of the underlying data.\nFor example, take data representing the GDP (in trillions) and population (in billions) for China in 2015.\n\nchina_data_2015 = (\"China\", 2015, 11.06, 1.371)\n\nprint(china_data_2015)\n\nIn this case, we have used a tuple since: (a) ordering would be meaningless; and (b) adding more data would require a reinterpretation of the whole data structure.\nOn the other hand, consider a list of GDP in China between 2013 and 2015.\n\ngdp_data = [9.607, 10.48, 11.06]\nprint(gdp_data)\n\nIn this case, we have used a list, since adding on a new element to the end of the list for GDP in 2016 would make complete sense.\nAlong these lines, collecting data on China for different years may make sense as a list of tuples (e.g. year, GDP, and population – although we will see better ways to store this sort of data in the Pandas section).\n\nchina_data = [(2015, 11.06, 1.371), (2014, 10.48, 1.364), (2013, 9.607, 1.357)]\nprint(china_data)\n\nIn general, a rule of thumb is to use a list unless you need to use a tuple.\nKey criteria for tuple use are when you want to:\n\nensure the order of elements can’t change\n\nensure the actual values of the elements can’t change\n\nuse the collection as a key in a dict (we will learn what this means soon)\n\n\n\nzip and enumerate\nTwo functions that can be extremely useful are zip and enumerate.\nBoth of these functions are best understood by example, so let’s see them in action and then talk about what they do.\n\ngdp_data = [9.607, 10.48, 11.06]\nyears = [2013, 2014, 2015]\nz = zip(years, gdp_data)\nprint(\"type(z)\", type(z))\n\ntype(z) &lt;class 'zip'&gt;\n\n\nTo see what is inside z, let’s convert it to a list.\n\nlist(z)\n\n[(2013, 9.607), (2014, 10.48), (2015, 11.06)]\n\n\nNotice that we now have a list where each item is a tuple.\nWithin each tuple, we have one item from each of the collections we passed to the zip function.\nIn particular, the first item in z contains the first item from [2013, 2014, 2015] and the first item from [9.607, 10.48, 11.06].\nThe second item in z contains the second item from each collection and so on.\nWe can access an element in this and then unpack the resulting tuple directly into variables.\n\nl = list(zip(years, gdp_data))\nx, y = l[0]\nprint(f\"year = {x}, GDP = {y}\")\n\nNow let’s experiment with enumerate.\n\ne = enumerate([\"a\", \"b\", \"c\"])\nprint(\"type(e)\", type(e))\ne\n\ntype(e) &lt;class 'enumerate'&gt;\n\n\n&lt;enumerate at 0x7fef3c8a01c0&gt;\n\n\nAgain, we call list(e) to see what is inside.\n\nlist(e)\n\n[(0, 'a'), (1, 'b'), (2, 'c')]\n\n\nWe again have a list of tuples, but this time, the first element in each tuple is the index of the second tuple element in the initial collection.\nNotice that the third item is (2, 'c') because [\"a\", \"b\", \"c\"][2] is 'c'\n\n\nExercise\nSee exercise 4 in the exercise list.\nAn important quirk of some iterable types that are not lists (such as the above zip) is that you cannot convert the same type to a list twice.\nThis is because zip, enumerate, and range produce what is called a generator.\nA generator will only produce each of its elements a single time, so if you call list on the same generator a second time, it will not have any elements to iterate over anymore.\nFor more information, refer to the Python documentation.\n\ngdp_data = [9.607, 10.48, 11.06]\nyears = [2013, 2014, 2015]\nz = zip(years, gdp_data)\nl = list(z)\nprint(l)\nm = list(z)\nprint(m)"
  },
  {
    "objectID": "tutorials/session_1/qe_collections_answers.html#associative-collections",
    "href": "tutorials/session_1/qe_collections_answers.html#associative-collections",
    "title": "Collections",
    "section": "Associative Collections",
    "text": "Associative Collections\n\n\nDictionaries\nA dictionary (or dict) associates keys with values.\nIt will feel similar to a dictionary for words, where the keys are words and the values are the associated definitions.\nThe most common way to create a dict is to use curly braces — { and } — like this:\n\n{\n    \"key1\": value1,\n    \"key2\": value2,\n    \"keyN\": valueN\n}\n\nwhere the ... indicates that we can have any number of additional terms.\nThe crucial part of the syntax is that each key-value pair is written key: value and that these pairs are separated by commas — ,.\nLet’s see an example using our aggregate data on China in 2015.\n\nchina_data = {\n    \"country\": \"China\",\n    \"year\": 2015,\n    \"GDP\" : 11.06,\n    \"population\": 1.371\n}\nprint(china_data)\n\n{'country': 'China', 'year': 2015, 'GDP': 11.06, 'population': 1.371}\n\n\nUnlike our above example using a tuple, a dict allows us to associate a name with each field, rather than having to remember the order within the tuple.\nOften, code that makes a dict is easier to read if we put each key: value pair on its own line. (Recall our earlier comment on using whitespace effectively to improve readability!)\nThe code below is equivalent to what we saw above.\n\nchina_data = {\n    \"country\": \"China\",\n    \"year\": 2015,\n    \"GDP\" : 11.06,\n    \"population\": 1.371\n}\n\nMost often, the keys (e.g. “country”, “year”, “GDP”, and “population”) will be strings, but we could also use numbers (int, or float) or even tuples (or, rarely, a combination of types).\nThe values can be any type and different from each other.\n\n\nExercise\nSee exercise 5 in the exercise list.\nThis next example is meant to emphasize how values can be anything – including another dictionary.\n\ncompanies = {\"AAPL\": {\"bid\": 175.96, \"ask\": 175.98},\n             \"GE\": {\"bid\": 1047.03, \"ask\": 1048.40},\n             \"TVIX\": {\"bid\": 8.38, \"ask\": 8.40}}\nprint(companies)\n\n\nGetting, Setting, and Updating dict Items\nWe can now ask Python to tell us the value for a particular key by using the syntax d[k], where d is our dict and k is the key for which we want to find the value.\nFor example,\n\nchina_data['country']\n\n'China'\n\n\n\n\nprint(f\"country = {china_data['country']}, population = {china_data['population']}\")\n\ncountry = China, population = 1.371\n\n\nNote: when inside of a formatting string, you can use ' instead of \" as above to ensure the formatting still works with the embedded code.\nIf we ask for the value of a key that is not in the dict, we will get an error.\n\n# uncomment the line below to see the error\n# china_data[\"inflation\"]\n\nWe can also add new items to a dict using the syntax d[new_key] = new_value.\nLet’s see some examples.\n\nchina_data\n\n{'country': 'China', 'year': 2015, 'GDP': 11.06, 'population': 1.371}\n\n\n\nprint(china_data)\nchina_data[\"unemployment\"] = \"4.05%\"\nprint(china_data)\n\n{'country': 'China', 'year': 2015, 'GDP': 11.06, 'population': 1.371}\n{'country': 'China', 'year': 2015, 'GDP': 11.06, 'population': 1.371, 'unemployment': '4.05%'}\n\n\nTo update the value, we use assignment in the same way (which will create the key and value as required).\n\nprint(china_data)\nchina_data[\"unemployment\"] = \"4.051%\"\nprint(china_data)\n\n{'country': 'China', 'year': 2015, 'GDP': 11.06, 'population': 1.371, 'unemployment': '4.05%'}\n{'country': 'China', 'year': 2015, 'GDP': 11.06, 'population': 1.371, 'unemployment': '4.051%'}\n\n\nOr we could change the type.\n\nchina_data[\"unemployment\"] = False or True\nprint(china_data)\n\n{'country': 'China', 'year': 2015, 'GDP': 11.06, 'population': 1.371, 'unemployment': True}\n\n\n\n\nExercise\nSee exercise 6 in the exercise list.\n\n\nCommon dict Functionality\nWe can do some common things with dicts.\nWe will demonstrate them with examples below.\n\n# number of key-value pairs in a dict\nlen(china_data)\n\n5\n\n\n\n# get a list of all the keys\nlist(china_data.keys())\n\n['country', 'year', 'GDP', 'population', 'unemployment']\n\n\n\n# get a list of all the values\nlist(china_data.values())\n\n['China', 2015, 11.06, 1.371, True]\n\n\n\nmore_china_data = {\n    \"irrigated_land\": 690_070,\n    \"top_religions\":\n        {\"buddhist\": 18.2, \"christian\" : 5.1, \"muslim\": 1.8}\n}\n\n# Add all key-value pairs in mydict2 to mydict.\n# if the key already appears in mydict, overwrite the\n# value with the value in mydict2\nchina_data.update(more_china_data)\nchina_data\n\n{'country': 'China',\n 'year': 2015,\n 'GDP': 11.06,\n 'population': 1.371,\n 'unemployment': True,\n 'irrigated_land': 690070,\n 'top_religions': {'buddhist': 18.2, 'christian': 5.1, 'muslim': 1.8}}\n\n\n\ntype(china_data.get(\"book\"))\n\nNoneType\n\n\n\n# Get the value associated with a key or return a default value\n# use this to avoid the NameError we saw above if you have a reasonable\n# default value\nchina_data.get(\"irrigated_land\", \"Data Not Available\")\n\n690070\n\n\n\nchina_data.get(\"book\", \"Data Not Available\")\n\n'Data Not Available'\n\n\n\n\nExercise\nSee exercise 7 in the exercise list.\n\n\nExercise\nSee exercise 8 in the exercise list.\n\n\n\nSets (Optional)\nPython has an additional way to represent collections of items: sets.\nSets come up infrequently, but you should be aware of them.\nIf you are familiar with the mathematical concept of sets, then you will understand the majority of Python sets already.\nIf you don’t know the math behind sets, don’t worry: we’ll cover the basics of Python’s sets here.\nA set is an unordered collection of unique elements.\nThe syntax for creating a set uses curly bracket { and }.\n\n{item1, item2, ..., itemN}\n\nHere is an example.\n\ns = {1, \"hello\", 3.0}\nprint(\"s has type\", type(s))\ns\n\n\n\nExercise\nSee exercise 9 in the exercise list.\nAs with lists and tuples, we can check if something is in the set and check the set’s length:\n\nprint(\"len(s) =\", len(s))\n\"hello\" in s\n\nUnlike lists and tuples, we can’t extract elements of a set s using s[N] where N is a number.\n\n# Uncomment the line below to see what happens\n# s[1]\n\nThis is because sets are not ordered, so the notion of getting the second element (s[1]) is not well defined.\nWe add elements to a set s using s.add.\n\ns.add(100)\ns\n\n\ns.add(\"hello\") # nothing happens, why?\ns\n\nWe can also do set operations.\nConsider the set s from above and the set s2 = {\"hello\", \"world\"}.\n\ns.union(s2): returns a set with all elements in either s or s2\n\ns.intersection(s2): returns a set with all elements in both s and s2\n\ns.difference(s2): returns a set with all elements in s that aren’t in s2\n\ns.symmetric_difference(s2): returns a set with all elements in only one of s and s2\n\n\n\nExercise\nSee exercise 10 in the exercise list.\nAs with tuples and lists, a set function can convert other collections to sets.\n\nx = [1, 2, 3, 1]\nset(x)\n\n\nt = (1, 2, 3, 1)\nset(t)\n\nLikewise, we can convert sets to lists and tuples.\n\nlist(s)\n\n\ntuple(s)"
  },
  {
    "objectID": "tutorials/session_1/qe_collections_answers.html#exercises",
    "href": "tutorials/session_1/qe_collections_answers.html#exercises",
    "title": "Collections",
    "section": "Exercises",
    "text": "Exercises\n\nExercise 1\nIn the first cell, try y.append(z).\nIn the second cell try y.extend(z).\nExplain the behavior.\nWhen you are trying to explain use y.append? and y.extend? to see a description of what these methods are supposed to do.\n\ny = [\"a\", \"b\", \"c\"]\nz = [1, 2, 3]\ny.append(z)\nprint(y)\n\n['a', 'b', 'c', [1, 2, 3]]\n\n\n\ny = [\"a\", \"b\", \"c\"]\nz = [1, 2, 3]\ny.extend(z)\nprint(y)\n\n['a', 'b', 'c', 1, 2, 3]\n\n\n(back to text)\n\n\nExercise 2\nExperiment with the other two versions of the range function.\n\n# try list(range(a, N)) -- you pick `a` and `N`\n\n\n# try list(range(a, N, d)) -- you pick `a`, `N`, and `d`\n\n(back to text)\n\n\nExercise 3\nVerify that tuples are indeed immutable by attempting the following:\n\nChanging the first element of t to be 100\n\nAppending a new element \"!!\" to the end of t (remember with a list x we would use x.append(\"!!\") to do this\n\nSorting t\n\nReversing t\n\n\n# change first element of t\n\n\n# appending to t\n\n\n# sorting t\n\n\n# reversing t\n\n(back to text)\n\n\nExercise 4\nChallenging For the tuple foo below, use a combination of zip, range, and len to mimic enumerate(foo).\nVerify that your proposed solution is correct by converting each to a list and checking equality with ==.\nYou can see what the answer should look like by starting with list(enumerate(foo)).\n\nfoo = (\"good\", \"luck!\")\n\n(back to text)\n\n\nExercise 5\nCreate a new dict which associates stock tickers with its stock price.\nHere are some tickers and a price.\n\nAAPL: 175.96\n\nGOOGL: 1047.43\n\nTVIX: 8.38\n\n\n# your code here\n\n(back to text)\n\n\nExercise 6\nLook at the World Factbook for Australia and create a dictionary with data containing the following types: float, string, integer, list, and dict. Choose any data you wish.\nTo confirm, you should have a dictionary that you identified via a key.\n\n# your code here\n\n(back to text)\n\n\nExercise 7\nUse Jupyter’s help facilities to learn how to use the pop method to remove the key \"irrigated_land\" (and its value) from the dict.\n\n# uncomment and use the Inspector or ?\n#china_data.pop()\n\n(back to text)\n\n\nExercise 8\nExplain what happens to the value you popped.\nExperiment with calling pop twice.\n\n# your code here\n\n(back to text)\n\n\nExercise 9\nTry creating a set with repeated elements (e.g. {1, 2, 1, 2, 1, 2}).\nWhat happens?\nWhy?\n\n# your code here\n\n(back to text)\n\n\nExercise 10\nTest out two of the operations described above using the original set we created, s, and the set created below s2.\n\ns2 = {\"hello\", \"world\"}\n\n\n# Operation 1\n\n\n# Operation 2\n\n(back to text)"
  },
  {
    "objectID": "tutorials/session_7/Classification.html",
    "href": "tutorials/session_7/Classification.html",
    "title": "Classification and clustering",
    "section": "",
    "text": "The two csv files (origin: kaggle) contain the training set (resp the validation set) about the clients from a “global finance company”.\nYour goal is to use all available information to build a model to accurately predict the probability of default which is coded up as a qualitative variable with three values.\nUpdate: the test.csv file now contains the score that should be predicted.\nImport training set and validation sets\nWe follow a three sets approach and define the following sets: - data used for the developing the model (dataset from train.csv) will be split into: - training dataset (variable called train) - test data set (variable called tes - data use\n\nimport pandas\ndataset = pandas.read_csv(\"train.csv\")\nvalidation = pandas.read_csv(\"test.csv\")\n\nDescribe the dataset.\nHow is the credit category encoded? Create a new variable representing it with values 0,1,2.\nReencode all categorical variables as dummy variables. Remove variables that are not useful for the analysis.\nMake several plots about the dataset (histograms, correlation plots, …)\nTip: there are cool ideas here\nSplit the train dataset into a df_train and a df_test dataset.\nImplement a logistic regression.\nCompute the confusion matrix using the test set. Comment\nPerform the same analysis with other classification methods and compare their performance using the test set.\nWhich one would you choose? Test its performance on the validation set"
  },
  {
    "objectID": "tutorials/session_7/Classification.html#predicting-the-credit-score",
    "href": "tutorials/session_7/Classification.html#predicting-the-credit-score",
    "title": "Classification and clustering",
    "section": "",
    "text": "The two csv files (origin: kaggle) contain the training set (resp the validation set) about the clients from a “global finance company”.\nYour goal is to use all available information to build a model to accurately predict the probability of default which is coded up as a qualitative variable with three values.\nUpdate: the test.csv file now contains the score that should be predicted.\nImport training set and validation sets\nWe follow a three sets approach and define the following sets: - data used for the developing the model (dataset from train.csv) will be split into: - training dataset (variable called train) - test data set (variable called tes - data use\n\nimport pandas\ndataset = pandas.read_csv(\"train.csv\")\nvalidation = pandas.read_csv(\"test.csv\")\n\nDescribe the dataset.\nHow is the credit category encoded? Create a new variable representing it with values 0,1,2.\nReencode all categorical variables as dummy variables. Remove variables that are not useful for the analysis.\nMake several plots about the dataset (histograms, correlation plots, …)\nTip: there are cool ideas here\nSplit the train dataset into a df_train and a df_test dataset.\nImplement a logistic regression.\nCompute the confusion matrix using the test set. Comment\nPerform the same analysis with other classification methods and compare their performance using the test set.\nWhich one would you choose? Test its performance on the validation set"
  },
  {
    "objectID": "tutorials/session_7/Classification.html#segmenting-the-bank-clients",
    "href": "tutorials/session_7/Classification.html#segmenting-the-bank-clients",
    "title": "Classification and clustering",
    "section": "Segmenting the bank clients",
    "text": "Segmenting the bank clients\nWith the same database, without using the credit score, implement a k-means clustering algorithm.\nAre the clusters related to the credit score?"
  },
  {
    "objectID": "tutorials/session_3/Phillips_curve.html",
    "href": "tutorials/session_3/Phillips_curve.html",
    "title": "Visualizing the Philips Curve",
    "section": "",
    "text": "The Philips Curve was initially discovered as a statistical relationship between unemployment and inflation. The original version used historical US data.\nOur goal here is to visually inspect the Philips curve using recent data, for several countries.\nIn the process we will learn to: - import dataframes, inspect them, merge them, clean the resulting data - use matplotlib to create graphs - bonus: experiment with other plotting libraries"
  },
  {
    "objectID": "tutorials/session_3/Phillips_curve.html#importing-the-data",
    "href": "tutorials/session_3/Phillips_curve.html#importing-the-data",
    "title": "Visualizing the Philips Curve",
    "section": "Importing the Data",
    "text": "Importing the Data\nWe start by loading library dbnomics which contains all the data we want. It is installed already on the nuvolos server.\n\nimport dbnomics\n\nThe following code imports data for from dbnomics for a few countries.\n\ntable_1 = dbnomics.fetch_series([\n    \"OECD/DP_LIVE/FRA.CPI.TOT.AGRWTH.Q\",\n    \"OECD/DP_LIVE/GBR.CPI.TOT.AGRWTH.Q\",\n    \"OECD/DP_LIVE/USA.CPI.TOT.AGRWTH.Q\",\n    \"OECD/DP_LIVE/DEU.CPI.TOT.AGRWTH.Q\"\n])\n\n\ntable_2 = dbnomics.fetch_series([\n    \"OECD/MEI/DEU.LRUNTTTT.STSA.Q\",\n    \"OECD/MEI/FRA.LRUNTTTT.STSA.Q\",\n    \"OECD/MEI/USA.LRUNTTTT.STSA.Q\",\n    \"OECD/MEI/GBR.LRUNTTTT.STSA.Q\"\n])\n\nDescribe concisely the data that has been imported (periodicity, type of measure, …). You can either check dbnomics website or look at the databases.\ntable_1 contains quarterly data about growth rate of CPI inflation for several countries (FRA, GBR, USA, DEU). There 1084 observations from 1956 to 2023.\n\ntable_1.describe()\n\n\n\n\n\n\n\n\nperiod\nvalue\n\n\n\n\ncount\n1084\n1083.000000\n\n\nmean\n1989-09-30 18:46:29.667896704\n3.891054\n\n\nmin\n1956-01-01 00:00:00\n-1.623360\n\n\n25%\n1972-10-01 00:00:00\n1.680341\n\n\n50%\n1989-10-01 00:00:00\n2.724924\n\n\n75%\n2006-10-01 00:00:00\n5.002851\n\n\nmax\n2023-07-01 00:00:00\n26.565810\n\n\nstd\nNaN\n3.591647\n\n\n\n\n\n\n\ntable_2 contains quarterly data about unemployment rate from the Labour Force Survey for the same countries from 1956 to 2023.\n\ntable_2['series_name'].unique()\n\narray(['Germany – Labour Force Survey - quarterly rates &gt; Unemployment rate &gt; Aged 15 and over &gt; All persons – Level, rate or national currency, s.a. – Quarterly',\n       'France – Labour Force Survey - quarterly rates &gt; Unemployment rate &gt; Aged 15 and over &gt; All persons – Level, rate or national currency, s.a. – Quarterly',\n       'United States – Labour Force Survey - quarterly rates &gt; Unemployment rate &gt; Aged 15 and over &gt; All persons – Level, rate or national currency, s.a. – Quarterly',\n       'United Kingdom – Labour Force Survey - quarterly rates &gt; Unemployment rate &gt; Aged 15 and over &gt; All persons – Level, rate or national currency, s.a. – Quarterly'],\n      dtype=object)\n\n\n\ntable_2.describe()\n\n\n\n\n\n\n\n\nperiod\noriginal_value\nvalue\n\n\n\n\ncount\n817\n817.000000\n817.000000\n\n\nmean\n1994-11-08 05:59:33.561811584\n6.098550\n6.098550\n\n\nmin\n1955-01-01 00:00:00\n0.373774\n0.373774\n\n\n25%\n1979-07-01 00:00:00\n4.366667\n4.366667\n\n\n50%\n1996-07-01 00:00:00\n5.833333\n5.833333\n\n\n75%\n2011-01-01 00:00:00\n7.996948\n7.996948\n\n\nmax\n2023-10-01 00:00:00\n13.000000\n13.000000\n\n\nstd\nNaN\n2.550613\n2.550613\n\n\n\n\n\n\n\n\n# show onlye the few firs lines:\ntable_2.head(2)\n\n\n\n\n\n\n\n\n@frequency\nprovider_code\ndataset_code\ndataset_name\nseries_code\nseries_name\noriginal_period\nperiod\noriginal_value\nvalue\nLOCATION\nSUBJECT\nMEASURE\nFREQUENCY\nCountry\nSubject\nMeasure\nFrequency\n\n\n\n\n0\nquarterly\nOECD\nMEI\nMain Economic Indicators Publication\nDEU.LRUNTTTT.STSA.Q\nGermany – Labour Force Survey - quarterly rate...\n1962-Q1\n1962-01-01\n0.442249\n0.442249\nDEU\nLRUNTTTT\nSTSA\nQ\nGermany\nLabour Force Survey - quarterly rates &gt; Unempl...\nLevel, rate or national currency, s.a.\nQuarterly\n\n\n1\nquarterly\nOECD\nMEI\nMain Economic Indicators Publication\nDEU.LRUNTTTT.STSA.Q\nGermany – Labour Force Survey - quarterly rate...\n1962-Q2\n1962-04-01\n0.444882\n0.444882\nDEU\nLRUNTTTT\nSTSA\nQ\nGermany\nLabour Force Survey - quarterly rates &gt; Unempl...\nLevel, rate or national currency, s.a.\nQuarterly\n\n\n\n\n\n\n\nShow the first rows of each database. Make a list of all columns.\n\ntable_1.head(1)\n\n\n\n\n\n\n\n\n@frequency\nprovider_code\ndataset_code\ndataset_name\nseries_code\nseries_name\noriginal_period\nperiod\noriginal_value\nvalue\nLOCATION\nINDICATOR\nSUBJECT\nMEASURE\nFREQUENCY\nCountry\nIndicator\nSubject\nMeasure\nFrequency\n\n\n\n\n0\nquarterly\nOECD\nDP_LIVE\nOECD Data Live dataset\nFRA.CPI.TOT.AGRWTH.Q\nFrance – Inflation (CPI) – Total – Annual grow...\n1956-Q1\n1956-01-01\n1.746324\n1.746324\nFRA\nCPI\nTOT\nAGRWTH\nQ\nFrance\nInflation (CPI)\nTotal\nAnnual growth rate (%)\nQuarterly\n\n\n\n\n\n\n\nCompute standard statistics for all variables\n\ntable_1.describe()\n\n\n\n\n\n\n\n\nperiod\nvalue\n\n\n\n\ncount\n1084\n1083.000000\n\n\nmean\n1989-09-30 18:46:29.667896704\n3.891054\n\n\nmin\n1956-01-01 00:00:00\n-1.623360\n\n\n25%\n1972-10-01 00:00:00\n1.680341\n\n\n50%\n1989-10-01 00:00:00\n2.724924\n\n\n75%\n2006-10-01 00:00:00\n5.002851\n\n\nmax\n2023-07-01 00:00:00\n26.565810\n\n\nstd\nNaN\n3.591647\n\n\n\n\n\n\n\nCompute averages and standard deviations for unemployment and inflation, per country.\n\n# option 1: by using pandas boolean selection \n\n\n# extract sub dataframe for  France\n# table_1.query(\"Country=='France'\")\n\n# this is a vector with True on rows containing France, False otherwise\n\nfor country in ['France', 'United Kingdom', 'United States', 'Germany']:\n\n    sel = table_1[\"Country\"]==country\n    sdf = table_1[sel]\n    m = sdf['value'].mean()\n    s = sdf['value'].std()\n\n    print(f\" The mean inflation for {country} is {m}. The standard deviation is {s}\")\n\n The mean inflation for France is 4.218004559985239. The standard deviation is 3.85319032016491\n The mean inflation for United Kingdom is 5.003996036162361. The standard deviation is 4.768592756710978\n The mean inflation for United States is 3.678550917822878. The standard deviation is 2.7795046092217035\n The mean inflation for Germany is 2.659118566666667. The standard deviation is 1.8661314171203747\n\n\n\ntable_1['Country'].unique()\n\narray(['France', 'United Kingdom', 'United States', 'Germany'],\n      dtype=object)\n\n\n\n# option 2: by using groupby\n\nprint(\"Here are the means\")\ntable_1.groupby('Country')['value'].mean()\n\n\nHere are the means\n\n\nCountry\nFrance            4.218005\nGermany           2.659119\nUnited Kingdom    5.003996\nUnited States     3.678551\nName: value, dtype: float64\n\n\n\nprint(\"Here are the standard deviations\")\ntable_1.groupby('Country')['value'].std()\n\nHere are the standard deviations\n\n\nCountry\nFrance            3.853190\nGermany           1.866131\nUnited Kingdom    4.768593\nUnited States     2.779505\nName: value, dtype: float64\n\n\n\n# To get both mean and std:\ntable_1.groupby('Country')['value'].agg( ['mean', 'std'] )\n\n\n\n\n\n\n\n\nmean\nstd\n\n\nCountry\n\n\n\n\n\n\nFrance\n4.218005\n3.853190\n\n\nGermany\n2.659119\n1.866131\n\n\nUnited Kingdom\n5.003996\n4.768593\n\n\nUnited States\n3.678551\n2.779505\n\n\n\n\n\n\n\n\ntable_2.groupby('Country')['value'].mean()\n\nCountry\nFrance            8.680560\nGermany           4.989272\nUnited Kingdom    6.705114\nUnited States     5.851087\nName: value, dtype: float64\n\n\nThe following command merges the two databases together. Explain the role of argument on. What happened to the column names?\n\ntable_2.head(1)\n\n\n\n\n\n\n\n\n@frequency\nprovider_code\ndataset_code\ndataset_name\nseries_code\nseries_name\noriginal_period\nperiod\noriginal_value\nvalue\nLOCATION\nSUBJECT\nMEASURE\nFREQUENCY\nCountry\nSubject\nMeasure\nFrequency\n\n\n\n\n0\nquarterly\nOECD\nMEI\nMain Economic Indicators Publication\nDEU.LRUNTTTT.STSA.Q\nGermany – Labour Force Survey - quarterly rate...\n1962-Q1\n1962-01-01\n0.442249\n0.442249\nDEU\nLRUNTTTT\nSTSA\nQ\nGermany\nLabour Force Survey - quarterly rates &gt; Unempl...\nLevel, rate or national currency, s.a.\nQuarterly\n\n\n\n\n\n\n\n\ntable = table_1.merge(table_2, on=[\"period\", 'Country']) \n\nWe rename the new names for the sake of clarity and normalize everything with lower cases.\n\ntable = table.rename(\n    columns={\n    'period': 'date',         # because it sounds more natural\n    'Country': 'country',\n    'value_x': 'inflation',\n    'value_y': 'unemployment'\n    }\n)\n\nOn the merged table, compute at once all the statistics computed before (use groupby and agg).\n\ntable.groupby('country')[ ['inflation','unemployment'] ].agg(['mean','std'])\n\n\n\n\n\n\n\n\ninflation\nunemployment\n\n\n\nmean\nstd\nmean\nstd\n\n\ncountry\n\n\n\n\n\n\n\n\nFrance\n1.664349\n1.381470\n8.680560\n0.984035\n\n\nGermany\n2.730136\n1.918303\n4.989272\n3.067199\n\n\nUnited Kingdom\n5.404707\n5.253143\n6.705114\n2.388539\n\n\nUnited States\n3.678551\n2.779505\n5.880812\n1.668049\n\n\n\n\n\n\n\nBefore we process further, we should tidy the dataframe by keeping only what we need. - Keep only the columns date, country, inflation and unemployment - Drop all na values - Make a copy of the result\n\ndf = table[['date', 'country', 'inflation', 'unemployment']].dropna()\n\n\ndf = df.copy()\n# note: the copy() function is here to avoid keeping references to the original database\n\n\ndf\n\n\n\n\n\n\n\n\ndate\ncountry\ninflation\nunemployment\n\n\n\n\n0\n2003-01-01\nFrance\n2.366263\n7.922234\n\n\n1\n2003-04-01\nFrance\n1.912854\n8.089598\n\n\n2\n2003-07-01\nFrance\n1.932270\n8.036090\n\n\n3\n2003-10-01\nFrance\n2.184437\n8.349410\n\n\n4\n2004-01-01\nFrance\n1.800087\n8.518631\n\n\n...\n...\n...\n...\n...\n\n\n807\n2022-07-01\nGermany\n7.402639\n3.181081\n\n\n808\n2022-10-01\nGermany\n8.580543\n3.059473\n\n\n809\n2023-01-01\nGermany\n8.236768\n2.961556\n\n\n810\n2023-04-01\nGermany\n6.546894\n2.963810\n\n\n811\n2023-07-01\nGermany\n5.603836\n2.970260\n\n\n\n\n811 rows × 4 columns\n\n\n\nWhat is the maximum available interval for each country? How would you proceed to keep only those dates where all datas are available? In the following we keep the resulting “cylindric” database.\nOur DataFrame is now ready for further analysis !"
  },
  {
    "objectID": "tutorials/session_3/Phillips_curve.html#plotting-using-matplotlib",
    "href": "tutorials/session_3/Phillips_curve.html#plotting-using-matplotlib",
    "title": "Visualizing the Philips Curve",
    "section": "Plotting using matplotlib",
    "text": "Plotting using matplotlib\nOur goal now consists in plotting inflation against unemployment to see whether a pattern emerges. We will first work on France.\n\nfrom matplotlib import pyplot as plt\n\nCreate a database df_fr which contains only the data for France.\nThe following command create a line plot for inflation against unemployment. Can you transform it into a scatterplot ?\n\nplt.plot(df_fr['unemployment'], df_fr['inflation']) # missing 'o'\n\nExpand the above command to make the plot nicer (label, title, grid, …)"
  },
  {
    "objectID": "tutorials/session_3/Phillips_curve.html#visualizing-the-regression",
    "href": "tutorials/session_3/Phillips_curve.html#visualizing-the-regression",
    "title": "Visualizing the Philips Curve",
    "section": "Visualizing the regression",
    "text": "Visualizing the regression\nThe following piece of code regresses inflation on unemployment.\n\nfrom statsmodels.formula import api as sm\nmodel = sm.ols(formula='inflation ~ unemployment', data=df_fr)\nresult = model.fit()\n\nWe can use the resulting model to “predict” inflation from unemployment.\n\nresult.predict(df_fr['unemployment'])\n\nStore the result in df_fr as a new column reg_unemployment\nAdd the regression line to the scatter plot.\nNow we would like to compare all countries. Can you find a way to represent the data for all of them (all on one graph, using subplots…) ?\nAny comment on these results?"
  },
  {
    "objectID": "tutorials/session_3/Phillips_curve.html#bonus-visualizing-data-using-altair",
    "href": "tutorials/session_3/Phillips_curve.html#bonus-visualizing-data-using-altair",
    "title": "Visualizing the Philips Curve",
    "section": "Bonus: Visualizing data using altair",
    "text": "Bonus: Visualizing data using altair\nAltair is a visualization library (based on Vega-lite) which offers a different syntax to make plots.\nIt is well adapted to the exploration phase, as it can operate on a full database (without splitting it like we did for matplotlib). It also provides some data transformation tools like regressions, and ways to add some interactivity.\n\nimport altair as alt\n\nThe following command makes a basic plot from the dataframe df which contains all the countries. Can you enhance it by providing a title and encoding information to distinguish the various countries (for instance colors)?\n\nchart = alt.Chart(df).mark_point().encode(\n    x='unemployment',\n    y='inflation',\n    # add something here\n)\nchart\n\nThe following graph plots a regression line, but for all countries, it is rather meaningless. Can you restrict the data to France only?\n\n# modify the following code\nchart = alt.Chart(df).mark_point().encode(\n    x='unemployment',\n    y='inflation',\n)\nchart + chart.transform_regression('unemployment', 'inflation').mark_line()\n\nOne way to visualize data consists in adding some interactivity. Add some title and click on the legend\n\n#run first then modify the following code\n\nmulti = alt.selection_multi(fields=[\"country\"])\n\nlegend = alt.Chart(df).mark_point().encode(\n    y=alt.Y('country:N', axis=alt.Axis(orient='right')),\n    color=alt.condition(multi, 'country:N', alt.value('lightgray'), legend=None)\n).add_selection(multi)\n\nchart_2 = alt.Chart(df).mark_point().encode(\n    x='unemployment',\n    y='inflation',\n    color=alt.condition(multi, 'country:N', alt.value('lightgray')),\n    # find a way to separate on the graph data from France and US\n)\n\nchart_2 | legend\n\nBonus question: in the following graph you can select an interval in the left panel to select some subsample. Can you add the regression line(s) corresponding to the selected data to the last graph?\n\nbrush = alt.selection_interval(encodings=['x'],)\n\nhistorical_chart_1 = alt.Chart(df).mark_line().encode(\n    x='date',\n    y='unemployment',\n    color='country'\n).add_selection(\n    brush\n)\nhistorical_chart_2 = alt.Chart(df).mark_line().encode(\n    x='date',\n    y='inflation',\n    color='country'\n)\nchart = alt.Chart(df).mark_point().encode(\n    x='unemployment',\n    y='inflation',\n    # find a way to separate on the graph data from France and US\n    color=alt.condition(brush, 'country:N', alt.value('lightgray'))\n)\nalt.hconcat(historical_chart_1, historical_chart_2, chart,)"
  },
  {
    "objectID": "tutorials/session_3/Phillips_curve.html#bonus-2-plotly-express",
    "href": "tutorials/session_3/Phillips_curve.html#bonus-2-plotly-express",
    "title": "Visualizing the Philips Curve",
    "section": "Bonus 2: Plotly Express",
    "text": "Bonus 2: Plotly Express\nAnother popular option is the plotly library for nice-looking interactive plots. Combined with dash or shiny, it can be used to build very powerful interactive interfaces.\n\nimport plotly.express as px\n\n\nfig = px.scatter(df, x='unemployment', y='inflation', color='country', title=\"Philips Curves\")\nfig\n\nImprove the graph above in any way you like"
  },
  {
    "objectID": "tutorials/session_3/Philips_curve_pablo.html",
    "href": "tutorials/session_3/Philips_curve_pablo.html",
    "title": "Visualizing the Philips Curve",
    "section": "",
    "text": "The Philips Curve was initially discovered as a statistical relationship between unemployment and inflation. The original version used historical US data.\nOur goal here is to visually inspect the Philips curve using recent data, for several countries.\nIn the process we will learn to: - import dataframes, inspect them, merge them, clean the resulting data - use matplotlib to create graphs - bonus: experiment with other plotting libraries"
  },
  {
    "objectID": "tutorials/session_3/Philips_curve_pablo.html#importing-the-data",
    "href": "tutorials/session_3/Philips_curve_pablo.html#importing-the-data",
    "title": "Visualizing the Philips Curve",
    "section": "Importing the Data",
    "text": "Importing the Data\nWe start by loading library dbnomics which contains all the data we want. It is installed already on the nuvolos server.\n\nimport dbnomics\n\nThe following code imports data for from dbnomics for a few countries.\n\ntable_1 = dbnomics.fetch_series(\n    [\n    \"OECD/DP_LIVE/FRA.CPI.TOT.AGRWTH.Q\",\n    \"OECD/DP_LIVE/GBR.CPI.TOT.AGRWTH.Q\",\n    \"OECD/DP_LIVE/USA.CPI.TOT.AGRWTH.Q\",\n    \"OECD/DP_LIVE/DEU.CPI.TOT.AGRWTH.Q\"\n    ]\n)\n\n\ntable_2 = dbnomics.fetch_series([\n    \"OECD/MEI/DEU.LRUNTTTT.STSA.Q\",\n    \"OECD/MEI/FRA.LRUNTTTT.STSA.Q\",\n    \"OECD/MEI/USA.LRUNTTTT.STSA.Q\",\n    \"OECD/MEI/GBR.LRUNTTTT.STSA.Q\"\n])\n\nDescribe concisely the data that has been imported (periodicity, type of measure, …). You can either check dbnomics website or look at the databases.\nThe data comes from dbnomics. Provider is OECD. Database is “Data Live dataset” for inflation, and “Main Economic Indicators Publication” for unemployement.\nData is for several countries (Germany, France, USA, Great Britain).\n\ninflation: Consumer Price Index for all goods and services (total), in annual growth rate, measured every quarter\nunemployment: Labour Force Survey - quarterly rates , workers aged 15 or over\n\nShow the first rows of each database. Make a list of all columns.\n\ntable_1.head(2)\n\n\n\n\n\n\n\n\n@frequency\nprovider_code\ndataset_code\ndataset_name\nseries_code\nseries_name\noriginal_period\nperiod\noriginal_value\nvalue\nLOCATION\nINDICATOR\nSUBJECT\nMEASURE\nFREQUENCY\nCountry\nIndicator\nSubject\nMeasure\nFrequency\n\n\n\n\n0\nquarterly\nOECD\nDP_LIVE\nOECD Data Live dataset\nFRA.CPI.TOT.AGRWTH.Q\nFrance – Inflation (CPI) – Total – Annual grow...\n1956-Q1\n1956-01-01\n1.746324\n1.746324\nFRA\nCPI\nTOT\nAGRWTH\nQ\nFrance\nInflation (CPI)\nTotal\nAnnual growth rate (%)\nQuarterly\n\n\n1\nquarterly\nOECD\nDP_LIVE\nOECD Data Live dataset\nFRA.CPI.TOT.AGRWTH.Q\nFrance – Inflation (CPI) – Total – Annual grow...\n1956-Q2\n1956-04-01\n1.838658\n1.838658\nFRA\nCPI\nTOT\nAGRWTH\nQ\nFrance\nInflation (CPI)\nTotal\nAnnual growth rate (%)\nQuarterly\n\n\n\n\n\n\n\n\ntable_1.columns\n\nIndex(['@frequency', 'provider_code', 'dataset_code', 'dataset_name',\n       'series_code', 'series_name', 'original_period', 'period',\n       'original_value', 'value', 'LOCATION', 'INDICATOR', 'SUBJECT',\n       'MEASURE', 'FREQUENCY', 'Country', 'Indicator', 'Subject', 'Measure',\n       'Frequency'],\n      dtype='object')\n\n\n\ntable_2.columns\n\nIndex(['@frequency', 'provider_code', 'dataset_code', 'dataset_name',\n       'series_code', 'series_name', 'original_period', 'period',\n       'original_value', 'value', 'LOCATION', 'SUBJECT', 'MEASURE',\n       'FREQUENCY', 'Country', 'Subject', 'Measure', 'Frequency'],\n      dtype='object')\n\n\nCompute standard statistics for all variables\n\ntable_1.describe()\n\n\n\n\n\n\n\n\nperiod\nvalue\n\n\n\n\ncount\n1084\n1083.000000\n\n\nmean\n1989-09-30 18:46:29.667896704\n3.891054\n\n\nmin\n1956-01-01 00:00:00\n-1.623360\n\n\n25%\n1972-10-01 00:00:00\n1.680341\n\n\n50%\n1989-10-01 00:00:00\n2.724924\n\n\n75%\n2006-10-01 00:00:00\n5.002851\n\n\nmax\n2023-07-01 00:00:00\n26.565810\n\n\nstd\nNaN\n3.591647\n\n\n\n\n\n\n\n\ntable_2.describe()\n\n\n\n\n\n\n\n\nperiod\noriginal_value\nvalue\n\n\n\n\ncount\n817\n817.000000\n817.000000\n\n\nmean\n1994-11-08 05:59:33.561811584\n6.098632\n6.098632\n\n\nmin\n1955-01-01 00:00:00\n0.373774\n0.373774\n\n\n25%\n1979-07-01 00:00:00\n4.366667\n4.366667\n\n\n50%\n1996-07-01 00:00:00\n5.833333\n5.833333\n\n\n75%\n2011-01-01 00:00:00\n7.996948\n7.996948\n\n\nmax\n2023-10-01 00:00:00\n13.066667\n13.066667\n\n\nstd\nNaN\n2.550835\n2.550835\n\n\n\n\n\n\n\nAverage inflation over the period for all the countries is 3.89. Average unemployement over the period for all the countries is 6.09.\nCompute averages and standard deviations for unemployment and inflation, per country.\n\n# option 1: by using pandas boolean selection \n\n# we want to extract a subdataframe for each country\n\n\nind = table_1['Country'] == 'France' \ntable_1_fr = table_1[ ind ]\n\n\n# what are the unique values taken by the column country ?\n\n# set(table_1['Country']) # pure python\ntable_1['Country'].unique()\n\narray(['France', 'United Kingdom', 'United States', 'Germany'],\n      dtype=object)\n\n\n\ntable_1_fra = table_1.query(\"Country=='France'\")\ntable_1_gbr = table_1.query(\"Country=='United Kingdom'\")\ntable_1_deu = table_1.query(\"Country=='Germany'\")\ntable_1_usa = table_1.query(\"Country=='United States'\")\n\n\nd = dict()\nfor country in [\"France\", \"United Kingdom\", \"Germany\", \"United States\"]:\n    d[country] = table_1.query(f\"Country=='{country}'\")\n\n\n# list comprehension\n[table_1.query(f\"Country=='{country}'\") for country in table_1['Country'].unique()];\n\n\n# dictionary comprehension\nd = {country: table_1.query(f\"Country=='{country}'\") for country in table_1['Country'].unique()}\n\n\nfor k,v in d.items():\n    print(f\"{k}, mean: {v['value'].mean()}\")\n\nFrance, mean: 4.218004559985239\nUnited Kingdom, mean: 5.003996036162361\nUnited States, mean: 3.678550917822878\nGermany, mean: 2.659118566666667\n\n\n\n# option 2: by using groupby\n\ntable_1.groupby(\"Country\")['value'].agg('mean')\n\nCountry\nFrance            4.218005\nGermany           2.659119\nUnited Kingdom    5.003996\nUnited States     3.678551\nName: value, dtype: float64\n\n\n\n#standard devition\ntable_1.groupby(\"Country\")['value'].agg('std')\n\nCountry\nFrance            3.853190\nGermany           1.866131\nUnited Kingdom    4.768593\nUnited States     2.779505\nName: value, dtype: float64\n\n\n\ntable_1.groupby(\"Country\")['value'].agg(['mean','std'])\n\n\n\n\n\n\n\n\nmean\nstd\n\n\nCountry\n\n\n\n\n\n\nFrance\n4.218005\n3.853190\n\n\nGermany\n2.659119\n1.866131\n\n\nUnited Kingdom\n5.003996\n4.768593\n\n\nUnited States\n3.678551\n2.779505\n\n\n\n\n\n\n\n\ntable_1.groupby(\"Country\")['value'].agg('describe')\n\n\n\n\n\n\n\n\ncount\nmean\nstd\nmin\n25%\n50%\n75%\nmax\n\n\nCountry\n\n\n\n\n\n\n\n\n\n\n\n\nFrance\n271.0\n4.218005\n3.853190\n-0.423247\n1.660842\n2.670692\n5.765484\n18.565260\n\n\nGermany\n270.0\n2.659119\n1.866131\n-0.922850\n1.421377\n2.107098\n3.441268\n8.580543\n\n\nUnited Kingdom\n271.0\n5.003996\n4.768593\n-0.453172\n2.000000\n3.244983\n6.133533\n26.565810\n\n\nUnited States\n271.0\n3.678551\n2.779505\n-1.623360\n1.784109\n3.023983\n4.523969\n14.505600\n\n\n\n\n\n\n\nThe following command merges the two databases together. Explain the role of argument on. What happened to the column names?\n\n# we have two dataframes with similar columns\n\n\ntable_1.columns\n\nIndex(['@frequency', 'provider_code', 'dataset_code', 'dataset_name',\n       'series_code', 'series_name', 'original_period', 'period',\n       'original_value', 'value', 'LOCATION', 'INDICATOR', 'SUBJECT',\n       'MEASURE', 'FREQUENCY', 'Country', 'Indicator', 'Subject', 'Measure',\n       'Frequency'],\n      dtype='object')\n\n\n\ntable_2.columns\n\nIndex(['@frequency', 'provider_code', 'dataset_code', 'dataset_name',\n       'series_code', 'series_name', 'original_period', 'period',\n       'original_value', 'value', 'LOCATION', 'SUBJECT', 'MEASURE',\n       'FREQUENCY', 'Country', 'Subject', 'Measure', 'Frequency'],\n      dtype='object')\n\n\n\ntable = table_1.merge(table_2, on=[\"period\", 'Country']) \n\n\ntable.columns\n\nIndex(['@frequency_x', 'provider_code_x', 'dataset_code_x', 'dataset_name_x',\n       'series_code_x', 'series_name_x', 'original_period_x', 'period',\n       'original_value_x', 'value_x', 'LOCATION_x', 'INDICATOR', 'SUBJECT_x',\n       'MEASURE_x', 'FREQUENCY_x', 'Country', 'Indicator', 'Subject_x',\n       'Measure_x', 'Frequency_x', '@frequency_y', 'provider_code_y',\n       'dataset_code_y', 'dataset_name_y', 'series_code_y', 'series_name_y',\n       'original_period_y', 'original_value_y', 'value_y', 'LOCATION_y',\n       'SUBJECT_y', 'MEASURE_y', 'FREQUENCY_y', 'Subject_y', 'Measure_y',\n       'Frequency_y'],\n      dtype='object')\n\n\nWe rename the new names for the sake of clarity and normalize everything with lower cases.\n\ntable = table.rename(columns={\n    'period': 'date',         # because it sounds more natural\n    'Country': 'country',\n    'value_x': 'inflation',\n    'value_y': 'unemployment'\n})\n\nOn the merged table, compute at once all the statistics computed before (use groupby and agg).\n\ntable.groupby('country')[ ['unemployment', 'inflation'] ].agg('mean')\n\n\n\n\n\n\n\n\nunemployment\ninflation\n\n\ncountry\n\n\n\n\n\n\nFrance\n8.680560\n1.664349\n\n\nGermany\n4.989272\n2.730136\n\n\nUnited Kingdom\n6.705114\n5.404707\n\n\nUnited States\n5.880812\n3.678551\n\n\n\n\n\n\n\n\n# the resulting dataframe sitll has horrible column names\ntable.head()\n\n\n\n\n\n\n\n\n@frequency_x\nprovider_code_x\ndataset_code_x\ndataset_name_x\nseries_code_x\nseries_name_x\noriginal_period_x\ndate\noriginal_value_x\ninflation\n...\noriginal_period_y\noriginal_value_y\nunemployment\nLOCATION_y\nSUBJECT_y\nMEASURE_y\nFREQUENCY_y\nSubject_y\nMeasure_y\nFrequency_y\n\n\n\n\n0\nquarterly\nOECD\nDP_LIVE\nOECD Data Live dataset\nFRA.CPI.TOT.AGRWTH.Q\nFrance – Inflation (CPI) – Total – Annual grow...\n2003-Q1\n2003-01-01\n2.366263\n2.366263\n...\n2003-Q1\n7.922234\n7.922234\nFRA\nLRUNTTTT\nSTSA\nQ\nLabour Force Survey - quarterly rates &gt; Unempl...\nLevel, rate or national currency, s.a.\nQuarterly\n\n\n1\nquarterly\nOECD\nDP_LIVE\nOECD Data Live dataset\nFRA.CPI.TOT.AGRWTH.Q\nFrance – Inflation (CPI) – Total – Annual grow...\n2003-Q2\n2003-04-01\n1.912854\n1.912854\n...\n2003-Q2\n8.089598\n8.089598\nFRA\nLRUNTTTT\nSTSA\nQ\nLabour Force Survey - quarterly rates &gt; Unempl...\nLevel, rate or national currency, s.a.\nQuarterly\n\n\n2\nquarterly\nOECD\nDP_LIVE\nOECD Data Live dataset\nFRA.CPI.TOT.AGRWTH.Q\nFrance – Inflation (CPI) – Total – Annual grow...\n2003-Q3\n2003-07-01\n1.93227\n1.932270\n...\n2003-Q3\n8.036090\n8.036090\nFRA\nLRUNTTTT\nSTSA\nQ\nLabour Force Survey - quarterly rates &gt; Unempl...\nLevel, rate or national currency, s.a.\nQuarterly\n\n\n3\nquarterly\nOECD\nDP_LIVE\nOECD Data Live dataset\nFRA.CPI.TOT.AGRWTH.Q\nFrance – Inflation (CPI) – Total – Annual grow...\n2003-Q4\n2003-10-01\n2.184437\n2.184437\n...\n2003-Q4\n8.349410\n8.349410\nFRA\nLRUNTTTT\nSTSA\nQ\nLabour Force Survey - quarterly rates &gt; Unempl...\nLevel, rate or national currency, s.a.\nQuarterly\n\n\n4\nquarterly\nOECD\nDP_LIVE\nOECD Data Live dataset\nFRA.CPI.TOT.AGRWTH.Q\nFrance – Inflation (CPI) – Total – Annual grow...\n2004-Q1\n2004-01-01\n1.800087\n1.800087\n...\n2004-Q1\n8.518631\n8.518631\nFRA\nLRUNTTTT\nSTSA\nQ\nLabour Force Survey - quarterly rates &gt; Unempl...\nLevel, rate or national currency, s.a.\nQuarterly\n\n\n\n\n5 rows × 36 columns\n\n\n\nBefore we process further, we should tidy the dataframe by keeping only what we need. - Keep only the columns date, country, inflation and unemployment - Drop all na values - Make a copy of the result\n\n# there are some nas in the dataframe\nsum(df['inflation'].isna())\n\n1\n\n\n\ntable[\n    ['inflation', 'unemployment'] # list of columns to select\n];\ntable[['inflation', 'unemployment']];\n\n\ndf = table[['date', 'country', 'inflation', 'unemployment']].dropna()\n\n\ndf = df.copy()\n# note: the copy() function is here to avoid keeping references to the original database\n\nWhat is the maximum available interval for each country? How would you proceed to keep only those dates where all datas are available? In the following we keep the resulting “cylindric” database.\nOur DataFrame is now ready for further analysis !"
  },
  {
    "objectID": "tutorials/session_3/Philips_curve_pablo.html#plotting-using-matplotlib",
    "href": "tutorials/session_3/Philips_curve_pablo.html#plotting-using-matplotlib",
    "title": "Visualizing the Philips Curve",
    "section": "Plotting using matplotlib",
    "text": "Plotting using matplotlib\nOur goal now consists in plotting inflation against unemployment to see whether a pattern emerges. We will first work on France.\n\nfrom matplotlib import pyplot as plt\n\nCreate a database df_fr which contains only the data for France.\n\ndf_fr = df.query(\"country=='France'\")\n\nThe following command create a line plot for inflation against unemployment. Can you transform it into a scatterplot ?\n\nplt.plot(df_fr['unemployment'], df_fr['inflation']) # missing 'o'\n\n\n\n\n\n\n\n\n\n# create a scatter plot\nplt.plot(df_fr['unemployment'], df_fr['inflation'], 'o')\n\n\n\n\n\n\n\n\nExpand the above command to make the plot nicer (label, title, grid, …)\n\n# create a scatter plot\nplt.plot(df_fr['unemployment'], df_fr['inflation'], 'o')\nplt.title(\"Philips Curve\")\nplt.xlabel(\"Unemployment\")\nplt.ylabel(\"Inflation\")\nplt.grid()"
  },
  {
    "objectID": "tutorials/session_3/Philips_curve_pablo.html#visualizing-the-regression",
    "href": "tutorials/session_3/Philips_curve_pablo.html#visualizing-the-regression",
    "title": "Visualizing the Philips Curve",
    "section": "Visualizing the regression",
    "text": "Visualizing the regression\nThe following piece of code regresses inflation on unemployment.\n\nfrom statsmodels.formula import api as sm\nmodel = sm.ols(formula='inflation ~ unemployment', data=df_fr)\nresult = model.fit()\nresult.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\ninflation\nR-squared:\n0.435\n\n\nModel:\nOLS\nAdj. R-squared:\n0.428\n\n\nMethod:\nLeast Squares\nF-statistic:\n62.46\n\n\nDate:\nWed, 07 Feb 2024\nProb (F-statistic):\n1.17e-11\n\n\nTime:\n10:39:59\nLog-Likelihood:\n-120.37\n\n\nNo. Observations:\n83\nAIC:\n244.7\n\n\nDf Residuals:\n81\nBIC:\n249.6\n\n\nDf Model:\n1\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n9.7054\n1.024\n9.479\n0.000\n7.668\n11.743\n\n\nunemployment\n-0.9263\n0.117\n-7.903\n0.000\n-1.160\n-0.693\n\n\n\n\n\n\n\n\nOmnibus:\n9.014\nDurbin-Watson:\n0.241\n\n\nProb(Omnibus):\n0.011\nJarque-Bera (JB):\n10.906\n\n\nSkew:\n0.520\nProb(JB):\n0.00428\n\n\nKurtosis:\n4.439\nCond. No.\n79.0\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\nWe can use the resulting model to “predict” inflation from unemployment.\n\nresult.predict(df_fr['unemployment'])\n\n0     2.366810\n1     2.211777\n2     2.261342\n3     1.971104\n4     1.814349\n        ...   \n78    3.064908\n79    3.055976\n80    3.141252\n81    2.926298\n82    2.888369\nLength: 83, dtype: float64\n\n\nStore the result in df_fr as a new column reg_unemployment\n\n# df_fr.loc['reg_inflation'] = result.predict(df_fr['unemployment'])\n\n\n# no error message for full index specification\ndf_fr.loc[:,'reg_inflation'] = result.predict(df_fr['unemployment'])\n\n/tmp/ipykernel_63599/2161117277.py:2: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df_fr.loc[:,'reg_inflation'] = result.predict(df_fr['unemployment'])\n\n\n\ndf_fr.head()\n\n\n\n\n\n\n\n\ndate\ncountry\ninflation\nunemployment\nreg_inflation\n\n\n\n\n0\n2003-01-01\nFrance\n2.366263\n7.922234\n2.366810\n\n\n1\n2003-04-01\nFrance\n1.912854\n8.089598\n2.211777\n\n\n2\n2003-07-01\nFrance\n1.932270\n8.036090\n2.261342\n\n\n3\n2003-10-01\nFrance\n2.184437\n8.349410\n1.971104\n\n\n4\n2004-01-01\nFrance\n1.800087\n8.518631\n1.814349\n\n\n\n\n\n\n\nAdd the regression line to the scatter plot.\n\n# create a scatter plot\nplt.plot(df_fr['unemployment'], df_fr['inflation'], 'o')\nplt.plot(df_fr['unemployment'], df_fr['reg_inflation'])\n\nplt.title(\"Philips Curve\")\nplt.xlabel(\"Unemployment\")\nplt.ylabel(\"Inflation\")\nplt.grid()\n\n\n\n\n\n\n\n\nNow we would like to compare all countries. Can you find a way to represent the data for all of them (all on one graph, using subplots…) ?\n\ndf.head()\n\n\n\n\n\n\n\n\ndate\ncountry\ninflation\nunemployment\n\n\n\n\n0\n2003-01-01\nFrance\n2.366263\n7.922234\n\n\n1\n2003-04-01\nFrance\n1.912854\n8.089598\n\n\n2\n2003-07-01\nFrance\n1.932270\n8.036090\n\n\n3\n2003-10-01\nFrance\n2.184437\n8.349410\n\n\n4\n2004-01-01\nFrance\n1.800087\n8.518631\n\n\n\n\n\n\n\n\ncountries_list = df['country'].unique()\ncountries_list\n\narray(['France', 'United Kingdom', 'United States', 'Germany'],\n      dtype=object)\n\n\n\nfrom statsmodels.formula import api as sm\n\nfor country in countries_list:\n    print(f\"country=='{country}'\")\n    df_country = df.query(f\"country=='{country}'\")\n    model = sm.ols(formula='inflation ~ unemployment', data=df_country)\n    result = model.fit()\n    \n    df_country.loc[:,'reg_inflation'] = result.predict(df_country['unemployment'])\n    \n    # create a scatter plot\n    plt.plot(df_country['unemployment'], df_country['inflation'], '.', label=country, alpha=0.5)\n    plt.plot(df_country['unemployment'], df_country['reg_inflation'])\n    \n    plt.title(\"Philips Curve\")\n    plt.xlabel(\"Unemployment\")\n    plt.ylabel(\"Inflation\")\n    plt.legend()\n    plt.grid()\n\ncountry=='France'\ncountry=='United Kingdom'\ncountry=='United States'\ncountry=='Germany'\n\n\n/tmp/ipykernel_63599/2982871465.py:9: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df_country.loc[:,'reg_inflation'] = result.predict(df_country['unemployment'])\n/tmp/ipykernel_63599/2982871465.py:9: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df_country.loc[:,'reg_inflation'] = result.predict(df_country['unemployment'])\n/tmp/ipykernel_63599/2982871465.py:9: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df_country.loc[:,'reg_inflation'] = result.predict(df_country['unemployment'])\n/tmp/ipykernel_63599/2982871465.py:9: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df_country.loc[:,'reg_inflation'] = result.predict(df_country['unemployment'])\n\n\n\n\n\n\n\n\n\n\n# maybe nicer with subplots\n\nplt.subplot(2,2,1)\nplt.subplot(2,2,2)\nplt.subplot(2,2,3)\nplt.subplot(2,2,4)\n\n\n\n\n\n\n\n\n\n# i = 0\n\n# for country in countries_list:\n\n#     i = i + 1\n\n# enumeration syntax\n\nfor i,country in enumerate(countries_list):\n    \n    print(f\"country=='{country}'\")\n    df_country = df.query(f\"country=='{country}'\")\n    model = sm.ols(formula='inflation ~ unemployment', data=df_country)\n    result = model.fit()\n    \n    df_country.loc[:,'reg_inflation'] = result.predict(df_country['unemployment'])\n    \n    # create a scatter plot\n\n    plt.subplot(2,2, i+1)\n    plt.plot(df_country['unemployment'], df_country['inflation'], '.', label=country, alpha=0.5)\n    plt.plot(df_country['unemployment'], df_country['reg_inflation'])\n    \n    plt.title(\"Philips Curve\")\n    plt.xlabel(\"Unemployment\")\n    plt.ylabel(\"Inflation\")\n    plt.legend()\n    plt.grid()\nplt.tight_layout()\n\ncountry=='France'\ncountry=='United Kingdom'\ncountry=='United States'\ncountry=='Germany'\n\n\n/tmp/ipykernel_63599/566381394.py:16: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df_country.loc[:,'reg_inflation'] = result.predict(df_country['unemployment'])\n/tmp/ipykernel_63599/566381394.py:16: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df_country.loc[:,'reg_inflation'] = result.predict(df_country['unemployment'])\n/tmp/ipykernel_63599/566381394.py:16: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df_country.loc[:,'reg_inflation'] = result.predict(df_country['unemployment'])\n/tmp/ipykernel_63599/566381394.py:16: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df_country.loc[:,'reg_inflation'] = result.predict(df_country['unemployment'])\n\n\n\n\n\n\n\n\n\nAny comment on these results?"
  },
  {
    "objectID": "tutorials/session_3/Philips_curve_pablo.html#bonus-visualizing-data-using-altair",
    "href": "tutorials/session_3/Philips_curve_pablo.html#bonus-visualizing-data-using-altair",
    "title": "Visualizing the Philips Curve",
    "section": "Bonus: Visualizing data using altair",
    "text": "Bonus: Visualizing data using altair\nAltair is a visualization library (based on Vega-lite) which offers a different syntax to make plots.\nIt is well adapted to the exploration phase, as it can operate on a full database (without splitting it like we did for matplotlib). It also provides some data transformation tools like regressions, and ways to add some interactivity.\n\nimport altair as alt\n\n\nchart = alt.Chart(df).mark_point()\nchart\n\n\n\n\n\n\n\nThe following command makes a basic plot from the dataframe df which contains all the countries. Can you enhance it by providing a title and encoding information to distinguish the various countries (for instance colors)?\n\nchart = alt.Chart(df).mark_point().encode(\n    x='unemployment',\n    y='inflation',\n    # add something here\n)\nchart\n\n\n\n\n\n\n\nThe following graph plots a regression line, but for all countries, it is rather meaningless. Can you restrict the data to France only?\n\n# modify the following code\nchart = alt.Chart(df).mark_point().encode(\n    x='unemployment',\n    y='inflation',\n)\nchart + chart.transform_regression('unemployment', 'inflation').mark_line()\n\n\n\n\n\n\n\nOne way to visualize data consists in adding some interactivity. Add some title and click on the legend\n\n#run first then modify the following code\n\nmulti = alt.selection_multi(fields=[\"country\"])\n\nlegend = alt.Chart(df).mark_point().encode(\n    y=alt.Y('country:N', axis=alt.Axis(orient='right')),\n    color=alt.condition(multi, 'country:N', alt.value('lightgray'), legend=None)\n).add_selection(multi)\n\nchart_2 = alt.Chart(df).mark_point().encode(\n    x='unemployment',\n    y='inflation',\n    color=alt.condition(multi, 'country:N', alt.value('lightgray')),\n    # find a way to separate on the graph data from France and US\n)\n\nchart_2 | legend\n\n/home/pablo/.local/opt/micromamba/envs/escp/lib/python3.12/site-packages/altair/utils/deprecation.py:65: AltairDeprecationWarning: 'selection_multi' is deprecated.  Use 'selection_point'\n  warnings.warn(message, AltairDeprecationWarning, stacklevel=1)\n/home/pablo/.local/opt/micromamba/envs/escp/lib/python3.12/site-packages/altair/utils/deprecation.py:65: AltairDeprecationWarning: 'add_selection' is deprecated. Use 'add_params' instead.\n  warnings.warn(message, AltairDeprecationWarning, stacklevel=1)\n\n\n\n\n\n\n\n\nBonus question: in the following graph you can select an interval in the left panel to select some subsample. Can you add the regression line(s) corresponding to the selected data to the last graph?\n\nbrush = alt.selection_interval(encodings=['x'],)\n\nhistorical_chart_1 = alt.Chart(df).mark_line().encode(\n    x='date',\n    y='unemployment',\n    color='country'\n).add_selection(\n    brush\n)\nhistorical_chart_2 = alt.Chart(df).mark_line().encode(\n    x='date',\n    y='inflation',\n    color='country'\n)\nchart = alt.Chart(df).mark_point().encode(\n    x='unemployment',\n    y='inflation',\n    # find a way to separate on the graph data from France and US\n    color=alt.condition(brush, 'country:N', alt.value('lightgray'))\n)\nalt.hconcat(historical_chart_1, historical_chart_2, chart,)\n\n/home/pablo/.local/opt/micromamba/envs/escp/lib/python3.12/site-packages/altair/utils/deprecation.py:65: AltairDeprecationWarning: 'add_selection' is deprecated. Use 'add_params' instead.\n  warnings.warn(message, AltairDeprecationWarning, stacklevel=1)"
  },
  {
    "objectID": "tutorials/session_3/Philips_curve_pablo.html#bonus-2-plotly-express",
    "href": "tutorials/session_3/Philips_curve_pablo.html#bonus-2-plotly-express",
    "title": "Visualizing the Philips Curve",
    "section": "Bonus 2: Plotly Express",
    "text": "Bonus 2: Plotly Express\nAnother popular option is the plotly library for nice-looking interactive plots. Combined with dash or shiny, it can be used to build very powerful interactive interfaces.\n\nimport plotly.express as px\n\n\nfig = px.scatter(df, x='unemployment', y='inflation', color='country', title=\"Philips Curves\")\nfig\n\n/home/pablo/.local/opt/micromamba/envs/escp/lib/python3.12/site-packages/plotly/express/_core.py:2065: FutureWarning: When grouping with a length-1 list-like, you will need to pass a length-1 tuple to get_group in a future version of pandas. Pass `(name,)` instead of `name` to silence this warning.\n  sf: grouped.get_group(s if len(s) &gt; 1 else s[0])\n\n\n                                                \n\n\nImprove the graph above in any way you like"
  },
  {
    "objectID": "tutorials/session_8/old_homework.html",
    "href": "tutorials/session_8/old_homework.html",
    "title": "Data-Based Economics: Coursework",
    "section": "",
    "text": "Students (up to 3):\nWhen working on the questions below, don’t hesitate to take some initiatives. In particular, if you don’t find how to answer a particular question (and you have asked 😉), feel free to propose a workaround.\nYour work will be evaluated in the following dimensions:"
  },
  {
    "objectID": "tutorials/session_8/old_homework.html#co2-emissions-and-the-kusnetz-curve",
    "href": "tutorials/session_8/old_homework.html#co2-emissions-and-the-kusnetz-curve",
    "title": "Data-Based Economics: Coursework",
    "section": "CO2 Emissions and the Kusnetz curve",
    "text": "CO2 Emissions and the Kusnetz curve\nIn this exercise, you must use data from the WorldBank to check whether CO2 Emissions can be explained by income per capita.\n\nImporting the data\nImport the data from file data/API_EN.ATM.CO2E.PC_DS2_en_csv_v2_5177406.csv as a dataframe df_wide. (This table was downloaded from the worldbank website)\nHints: check the documentation from pandas.read_csv() to avoid the import error. You can check the first few lines of the file by typing in a cell: !data/API_EN.ATM.CO2E.PC_DS2_en_csv_v2_5177406.csv\nHint2: Check that all columns are well defined.\n\nimport pandas as pd\ndf_wide = pd.read_csv('data/API_EN.ATM.CO2E.PC_DS2_en_csv_v2_5177406.csv', skiprows=4)\n!data/API_EN.ATM.CO2E.PC_DS2_en_csv_v2_5177406.csv\n\n/bin/bash: line 1: data/API_EN.ATM.CO2E.PC_DS2_en_csv_v2_5177406.csv: Permission denied\n\n\nDescribe briefly the data.\nThe data contains information on the level of carbon dioxide (CO2) emissions per capita (in metric tons) for different countries and regions over the years 1960 to 2019. The data is sourced from the World Bank’s World Development Indicators and is reported annually.\nThe dataset contains 264 rows (corresponding to different countries and regions) and 61 columns (corresponding to the years 1960 to 2019 and additional columns with country and region information). The data is in a wide format, with each row representing a country/region and each column representing a year.\nThe data is useful for analyzing trends in CO2 emissions over time and comparing emissions across countries and regions. It can also be used for exploring the relationship between CO2 emissions and various economic and environmental factors.\n\ndf_wide.describe()\n\n\n\n\n\n\n\n\n1960\n1961\n1962\n1963\n1964\n1965\n1966\n1967\n1968\n1969\n...\n2013\n2014\n2015\n2016\n2017\n2018\n2019\n2020\n2021\nUnnamed: 66\n\n\n\n\ncount\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n...\n239.000000\n239.000000\n239.000000\n239.000000\n239.000000\n239.000000\n239.000000\n0.0\n0.0\n0.0\n\n\nmean\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n4.288766\n4.194242\n4.141210\n4.140690\n4.148584\n4.128191\n4.086604\nNaN\nNaN\nNaN\n\n\nstd\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n5.002821\n4.862196\n4.731198\n4.653372\n4.585664\n4.489473\n4.474616\nNaN\nNaN\nNaN\n\n\nmin\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n0.024987\n0.027090\n0.037289\n0.029718\n0.033815\n0.035826\n0.035704\nNaN\nNaN\nNaN\n\n\n25%\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n0.720891\n0.785259\n0.771880\n0.769068\n0.802179\n0.797275\n0.790333\nNaN\nNaN\nNaN\n\n\n50%\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n2.726281\n2.888558\n2.827949\n2.760181\n2.699348\n2.979403\n2.981762\nNaN\nNaN\nNaN\n\n\n75%\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n6.264131\n6.028664\n5.792812\n5.828931\n6.021844\n5.950694\n5.890683\nNaN\nNaN\nNaN\n\n\nmax\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n37.420762\n36.875726\n35.111798\n33.493040\n32.281678\n31.235406\n32.761775\nNaN\nNaN\nNaN\n\n\n\n\n8 rows × 63 columns\n\n\n\n\n\nCleaning up\nConvert the data into the long format using the function pandas.melt(). The columns of the new table df_long should be: [\"Country Name\",\"Country Code\",\"Indicator Name\",\"Indicator Code\", \"Date\", \"Emissions\"]\n\ndf_long=pd.melt(df_wide,id_vars=[\"Country Name\",\"Country Code\",\"Indicator Name\",\"Indicator Code\"],var_name=\"Date\",value_name= \"Emissions\")\ndf_long\n\n\n\n\n\n\n\n\nCountry Name\nCountry Code\nIndicator Name\nIndicator Code\nDate\nEmissions\n\n\n\n\n0\nAruba\nABW\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\n1960\nNaN\n\n\n1\nAfrica Eastern and Southern\nAFE\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\n1960\nNaN\n\n\n2\nAfghanistan\nAFG\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\n1960\nNaN\n\n\n3\nAfrica Western and Central\nAFW\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\n1960\nNaN\n\n\n4\nAngola\nAGO\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\n1960\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n16753\nKosovo\nXKX\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\nUnnamed: 66\nNaN\n\n\n16754\nYemen, Rep.\nYEM\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\nUnnamed: 66\nNaN\n\n\n16755\nSouth Africa\nZAF\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\nUnnamed: 66\nNaN\n\n\n16756\nZambia\nZMB\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\nUnnamed: 66\nNaN\n\n\n16757\nZimbabwe\nZWE\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\nUnnamed: 66\nNaN\n\n\n\n\n16758 rows × 6 columns\n\n\n\nEliminate all rows for which no emission data is available\n\ndf_long.dropna()\n\n\n\n\n\n\n\n\nCountry Name\nCountry Code\nIndicator Name\nIndicator Code\nDate\nEmissions\n\n\n\n\n7981\nAfrica Eastern and Southern\nAFE\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\n1990\n0.982136\n\n\n7982\nAfghanistan\nAFG\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\n1990\n0.222538\n\n\n7983\nAfrica Western and Central\nAFW\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\n1990\n0.473669\n\n\n7984\nAngola\nAGO\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\n1990\n0.554586\n\n\n7985\nAlbania\nALB\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\n1990\n1.819542\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n15954\nSamoa\nWSM\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\n2019\n1.415729\n\n\n15956\nYemen, Rep.\nYEM\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\n2019\n0.351859\n\n\n15957\nSouth Africa\nZAF\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\n2019\n7.568640\n\n\n15958\nZambia\nZMB\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\n2019\n0.369958\n\n\n15959\nZimbabwe\nZWE\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\n2019\n0.765894\n\n\n\n\n7147 rows × 6 columns\n\n\n\nConvert the Date column into a date format.\nHint: look for pandas.to_datetime() (This is not absolutely mandatory but makes graphs nicer)\n\ndf_long['Date'] = pd.to_datetime(df_long['Date'], format='%Y')\nprint(df_long['Date'].dtype)\n\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[20], line 1\n----&gt; 1 df_long['Date'] = pd.to_datetime(df_long['Date'], format='%Y')\n\nFile /opt/conda/envs/escpython/lib/python3.10/site-packages/pandas/core/tools/datetimes.py:1064, in to_datetime(arg, errors, dayfirst, yearfirst, utc, format, exact, unit, infer_datetime_format, origin, cache)\n   1062             result = arg.tz_localize(tz)\n   1063 elif isinstance(arg, ABCSeries):\n-&gt; 1064     cache_array = _maybe_cache(arg, format, cache, convert_listlike)\n   1065     if not cache_array.empty:\n   1066         result = arg.map(cache_array)\n\nFile /opt/conda/envs/escpython/lib/python3.10/site-packages/pandas/core/tools/datetimes.py:229, in _maybe_cache(arg, format, cache, convert_listlike)\n    227 unique_dates = unique(arg)\n    228 if len(unique_dates) &lt; len(arg):\n--&gt; 229     cache_dates = convert_listlike(unique_dates, format)\n    230     # GH#45319\n    231     try:\n\nFile /opt/conda/envs/escpython/lib/python3.10/site-packages/pandas/core/tools/datetimes.py:430, in _convert_listlike_datetimes(arg, format, name, tz, unit, errors, infer_datetime_format, dayfirst, yearfirst, exact)\n    427         format = None\n    429 if format is not None:\n--&gt; 430     res = _to_datetime_with_format(\n    431         arg, orig_arg, name, tz, format, exact, errors, infer_datetime_format\n    432     )\n    433     if res is not None:\n    434         return res\n\nFile /opt/conda/envs/escpython/lib/python3.10/site-packages/pandas/core/tools/datetimes.py:538, in _to_datetime_with_format(arg, orig_arg, name, tz, fmt, exact, errors, infer_datetime_format)\n    535         return _box_as_indexlike(result, utc=utc, name=name)\n    537 # fallback\n--&gt; 538 res = _array_strptime_with_fallback(\n    539     arg, name, tz, fmt, exact, errors, infer_datetime_format\n    540 )\n    541 return res\n\nFile /opt/conda/envs/escpython/lib/python3.10/site-packages/pandas/core/tools/datetimes.py:473, in _array_strptime_with_fallback(arg, name, tz, fmt, exact, errors, infer_datetime_format)\n    470 utc = tz == \"utc\"\n    472 try:\n--&gt; 473     result, timezones = array_strptime(arg, fmt, exact=exact, errors=errors)\n    474 except OutOfBoundsDatetime:\n    475     if errors == \"raise\":\n\nFile /opt/conda/envs/escpython/lib/python3.10/site-packages/pandas/_libs/tslibs/strptime.pyx:150, in pandas._libs.tslibs.strptime.array_strptime()\n\nValueError: time data 'Unnamed: 66' does not match format '%Y' (match)\n\n\n\n\n\nGraphical representation\nPlot the evolution over time of total recorded carbon emissions (ommiting dates where no information is available).\nHint: use groupby()\n\ntotal_emissions=df_long[df_long['Emissions'].notnull()].groupby(df_long['Date'])['Emissions'].sum()\ntotal_emissions\n\nDate\n1990     992.579902\n1991     971.488470\n1992     971.204768\n1993     955.914952\n1994     949.595751\n1995     948.978410\n1996     964.076804\n1997     970.839153\n1998     970.257143\n1999     964.693322\n2000     967.857097\n2001     984.230281\n2002     993.251894\n2003    1022.691228\n2004    1038.318099\n2005    1048.812274\n2006    1064.012494\n2007    1060.075753\n2008    1053.788436\n2009    1069.598447\n2010    1033.216694\n2011    1037.102602\n2012    1047.851826\n2013    1025.015035\n2014    1002.423899\n2015     989.749130\n2016     989.624913\n2017     991.511483\n2018     986.637647\n2019     976.698404\nName: Emissions, dtype: float64\n\n\n\nfrom matplotlib import pyplot as plt\nplt.plot(total_emissions)\nplt.xlabel(\"Years\")\nplt.ylabel(\"Emissions as metric tons per capita\")\nplt.title(\"Evolution of total CO2 emissions over time\")\nplt.show\n\n\n\n\n\n\n\n\nPlot cumulative carbon emissions\n\nimport numpy as np\nplt.plot(total_emissions.cumsum())\nplt.xlabel(\"Years\")\nplt.ylabel(\"Emissions as metric tons per capita\")\nplt.title(\"Evolution of cumulated CO2 emissions over time\")\nplt.show\n\n\n\n\n\n\n\n\nPropose some plots to visualize the contribution of the main contributors to yearly carbon emissions and to cumulative carbon emissions. You can get inspiration from ourworldindata.\nWe could use a pie Chart of Global Emissions by Top 10 Emitters. This plot would show us the percentage of global carbon emissions of the top 10 emitters, with each country’s contribution shown as a colored segment of a pie chart in order to provide the relative contributions of each country to global emissions. We could also use an area chart of cumulative emissions by top emitters: This plot shows the cumulative carbon emissions over time for the top emitters, with each country’s contribution shown as a colored area of a stacked area chart. This plot allows for easy comparison of the contributions of different countries to cumulative emissions.\n\n\nThe Kusnetz curve\nWe are now interested in the relation between carbon emission and economic development. To this purpose, we would like to run a simple regression\n\\[\\frac{ \\text{emissions}_{i t} }{ \\text{population}_{i t} } = \\alpha + \\beta*\\frac{ \\text{gdp}_{i t}}{\\text{population}_{i t}} + \\text{other factors}_{i t}\\]\nwhere \\(i\\) is the country index and \\(t\\) the time index. In a first step we will simply assume that the total effect of all other factors is normally distributed.\nWe would then like to consider variants of this regression in order to test the environment Kuznets curve hypothesis.\nBriefly summarize the environmental Kuznets curve hypothesis\n(hint: perform a small websearch. Try to identify your sources)\nThe Environmental Kuznets Curve hypothesis postulates an inverted-U-shaped relationship between different pollutants and per capita income, i.e., environmental pressure increases up to a certain level as income goes up; after that, it decreases. The environmental pollution increases at the beginning of economic growth. However, when it passes a certain level of income, the economic growth allows environmental remediation. from Environmental Kuznets Curve: The Evidence from BSEC Countries* - / EGE ACADEMIC REVIEW and “Environmental Kuznets Curve Hypothesis: A Survey” from Ecological Economics\nPrepare the data\nFrom the world bank website, download data for historical real gdp and population.\nPerform the same steps as in the first part for both series then merge the resulting long databases “on” the Country Code and Date columns.\nYou should obtain one single database data containing the columns [\"Country Name\",\"Country Code\",\"Indicator Name\",\"Indicator Code\",\"Date\", \"Emissions\", \"GDP\", \"Population\"]\n\ndf_gdp = pd.read_csv('data/API_NY.GDP.MKTP.CD_DS2_en_csv_v2_5358352.csv', skiprows=4)\ndf_gdp.describe()\n\n\n\n\n\n\n\n\n1960\n1961\n1962\n1963\n1964\n1965\n1966\n1967\n1968\n1969\n...\n2013\n2014\n2015\n2016\n2017\n2018\n2019\n2020\n2021\nUnnamed: 66\n\n\n\n\ncount\n1.340000e+02\n1.360000e+02\n1.380000e+02\n1.380000e+02\n1.380000e+02\n1.490000e+02\n1.520000e+02\n1.550000e+02\n1.600000e+02\n1.600000e+02\n...\n2.590000e+02\n2.600000e+02\n2.580000e+02\n2.570000e+02\n2.570000e+02\n2.570000e+02\n2.550000e+02\n2.520000e+02\n2.450000e+02\n0.0\n\n\nmean\n7.103309e+10\n7.186603e+10\n7.549842e+10\n8.144478e+10\n8.941392e+10\n9.084572e+10\n1.010890e+11\n1.048751e+11\n1.100032e+11\n1.216457e+11\n...\n2.477220e+12\n2.538873e+12\n2.400201e+12\n2.444669e+12\n2.619922e+12\n2.783541e+12\n2.845284e+12\n2.790295e+12\n3.276616e+12\nNaN\n\n\nstd\n2.132401e+11\n2.208573e+11\n2.354226e+11\n2.532708e+11\n2.769939e+11\n2.909741e+11\n3.185999e+11\n3.369853e+11\n3.589008e+11\n3.950250e+11\n...\n8.385432e+12\n8.597524e+12\n8.158733e+12\n8.314435e+12\n8.847933e+12\n9.417930e+12\n9.586893e+12\n9.387492e+12\n1.079655e+13\nNaN\n\n\nmin\n1.201201e+07\n1.159201e+07\n9.122751e+06\n1.084010e+07\n1.271247e+07\n1.359393e+07\n1.446908e+07\n1.583518e+07\n1.460000e+07\n1.585000e+07\n...\n3.861749e+07\n3.875969e+07\n3.681166e+07\n4.162950e+07\n4.521766e+07\n4.781829e+07\n5.422315e+07\n5.505471e+07\n6.310096e+07\nNaN\n\n\n25%\n5.151683e+08\n5.215510e+08\n5.354690e+08\n5.336845e+08\n5.526379e+08\n5.929812e+08\n6.427026e+08\n6.264909e+08\n6.454036e+08\n6.912229e+08\n...\n8.488220e+09\n9.029027e+09\n8.589120e+09\n8.595956e+09\n9.252834e+09\n9.880676e+09\n1.088080e+10\n1.016305e+10\n1.226939e+10\nNaN\n\n\n50%\n2.976974e+09\n2.966849e+09\n3.050700e+09\n3.570681e+09\n3.432183e+09\n3.120871e+09\n3.549759e+09\n3.384063e+09\n4.064739e+09\n4.759106e+09\n...\n5.094967e+10\n5.339963e+10\n4.966795e+10\n4.984049e+10\n5.472660e+10\n5.700369e+10\n6.113687e+10\n5.715932e+10\n6.740429e+10\nNaN\n\n\n75%\n2.976519e+10\n2.822553e+10\n2.788859e+10\n3.229580e+10\n2.974366e+10\n2.834471e+10\n2.947510e+10\n3.076382e+10\n3.420277e+10\n3.741948e+10\n...\n5.373933e+11\n5.478617e+11\n5.020845e+11\n5.156547e+11\n5.492678e+11\n5.554554e+11\n5.700678e+11\n6.254289e+11\n8.190352e+11\nNaN\n\n\nmax\n1.392273e+12\n1.448622e+12\n1.550544e+12\n1.671610e+12\n1.830287e+12\n1.993900e+12\n2.163894e+12\n2.302529e+12\n2.485213e+12\n2.741172e+12\n...\n7.760623e+13\n7.973264e+13\n7.518636e+13\n7.646936e+13\n8.140950e+13\n8.646696e+13\n8.765425e+13\n8.511634e+13\n9.652743e+13\nNaN\n\n\n\n\n8 rows × 63 columns\n\n\n\n\ndf_pop=pd.read_csv('data/API_SP.POP.TOTL_DS2_en_csv_v2_5358404.csv', skiprows=4)\ndf_pop.describe()\n\n\n\n\n\n\n\n\n1960\n1961\n1962\n1963\n1964\n1965\n1966\n1967\n1968\n1969\n...\n2013\n2014\n2015\n2016\n2017\n2018\n2019\n2020\n2021\nUnnamed: 66\n\n\n\n\ncount\n2.640000e+02\n2.640000e+02\n2.640000e+02\n2.640000e+02\n2.640000e+02\n2.640000e+02\n2.640000e+02\n2.640000e+02\n2.640000e+02\n2.640000e+02\n...\n2.650000e+02\n2.650000e+02\n2.650000e+02\n2.650000e+02\n2.650000e+02\n2.650000e+02\n2.650000e+02\n2.650000e+02\n2.650000e+02\n0.0\n\n\nmean\n1.172187e+08\n1.188268e+08\n1.209957e+08\n1.236763e+08\n1.263792e+08\n1.291211e+08\n1.319789e+08\n1.348350e+08\n1.377713e+08\n1.408128e+08\n...\n2.925870e+08\n2.964856e+08\n3.003545e+08\n3.042155e+08\n3.080704e+08\n3.118393e+08\n3.155191e+08\n3.190983e+08\n3.223248e+08\nNaN\n\n\nstd\n3.693371e+08\n3.738947e+08\n3.806132e+08\n3.893042e+08\n3.980380e+08\n4.069033e+08\n4.162308e+08\n4.255158e+08\n4.350875e+08\n4.450496e+08\n...\n9.184860e+08\n9.299558e+08\n9.412781e+08\n9.525129e+08\n9.637185e+08\n9.745580e+08\n9.850384e+08\n9.950997e+08\n1.004098e+09\nNaN\n\n\nmin\n2.646000e+03\n2.888000e+03\n3.171000e+03\n3.481000e+03\n3.811000e+03\n4.161000e+03\n4.531000e+03\n4.930000e+03\n5.354000e+03\n5.646000e+03\n...\n1.069400e+04\n1.089900e+04\n1.087700e+04\n1.085200e+04\n1.082800e+04\n1.086500e+04\n1.095600e+04\n1.106900e+04\n1.120400e+04\nNaN\n\n\n25%\n5.132212e+05\n5.231345e+05\n5.337595e+05\n5.449288e+05\n5.566630e+05\n5.651150e+05\n5.691470e+05\n5.773872e+05\n5.832700e+05\n5.875942e+05\n...\n1.697753e+06\n1.743309e+06\n1.788196e+06\n1.777557e+06\n1.791003e+06\n1.797085e+06\n1.788878e+06\n1.790133e+06\n1.786038e+06\nNaN\n\n\n50%\n3.757486e+06\n3.887144e+06\n4.023896e+06\n4.139356e+06\n4.224612e+06\n4.277636e+06\n4.331825e+06\n4.385700e+06\n4.450934e+06\n4.530800e+06\n...\n1.014958e+07\n1.028212e+07\n1.035808e+07\n1.032545e+07\n1.030030e+07\n1.039533e+07\n1.044767e+07\n1.060623e+07\n1.050577e+07\nNaN\n\n\n75%\n2.670606e+07\n2.748694e+07\n2.830289e+07\n2.914708e+07\n3.001684e+07\n3.084892e+07\n3.163010e+07\n3.209247e+07\n3.249927e+07\n3.277149e+07\n...\n6.023395e+07\n6.078914e+07\n6.073058e+07\n6.062750e+07\n6.053671e+07\n6.042176e+07\n5.987258e+07\n6.170452e+07\n6.358833e+07\nNaN\n\n\nmax\n3.031565e+09\n3.072511e+09\n3.126935e+09\n3.193509e+09\n3.260518e+09\n3.328285e+09\n3.398561e+09\n3.468457e+09\n3.540255e+09\n3.614669e+09\n...\n7.229185e+09\n7.317509e+09\n7.404911e+09\n7.491934e+09\n7.578158e+09\n7.661776e+09\n7.742682e+09\n7.820982e+09\n7.888409e+09\nNaN\n\n\n\n\n8 rows × 63 columns\n\n\n\n\ndf2_long=pd.melt(df_gdp,id_vars=[\"Country Name\",\"Country Code\",\"Indicator Name\",\"Indicator Code\"],var_name=\"Date\",value_name= \"GDP\")\ndf2_long.dropna()\n\n\n\n\n\n\n\n\nCountry Name\nCountry Code\nIndicator Name\nIndicator Code\nDate\nGDP\n\n\n\n\n1\nAfrica Eastern and Southern\nAFE\nGDP (current US$)\nNY.GDP.MKTP.CD\n1960\n2.129152e+10\n\n\n2\nAfghanistan\nAFG\nGDP (current US$)\nNY.GDP.MKTP.CD\n1960\n5.377778e+08\n\n\n3\nAfrica Western and Central\nAFW\nGDP (current US$)\nNY.GDP.MKTP.CD\n1960\n1.040414e+10\n\n\n13\nAustralia\nAUS\nGDP (current US$)\nNY.GDP.MKTP.CD\n1960\n1.860567e+10\n\n\n14\nAustria\nAUT\nGDP (current US$)\nNY.GDP.MKTP.CD\n1960\n6.592694e+09\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n16486\nSamoa\nWSM\nGDP (current US$)\nNY.GDP.MKTP.CD\n2021\n8.438424e+08\n\n\n16487\nKosovo\nXKX\nGDP (current US$)\nNY.GDP.MKTP.CD\n2021\n9.412034e+09\n\n\n16489\nSouth Africa\nZAF\nGDP (current US$)\nNY.GDP.MKTP.CD\n2021\n4.190150e+11\n\n\n16490\nZambia\nZMB\nGDP (current US$)\nNY.GDP.MKTP.CD\n2021\n2.214763e+10\n\n\n16491\nZimbabwe\nZWE\nGDP (current US$)\nNY.GDP.MKTP.CD\n2021\n2.837124e+10\n\n\n\n\n13156 rows × 6 columns\n\n\n\n\ndf3_long=pd.melt(df_pop,id_vars=[\"Country Name\",\"Country Code\",\"Indicator Name\",\"Indicator Code\"],var_name=\"Date\",value_name= \"Population\")\ndf3_long.dropna()\n\n\n\n\n\n\n\n\nCountry Name\nCountry Code\nIndicator Name\nIndicator Code\nDate\nPopulation\n\n\n\n\n0\nAruba\nABW\nPopulation, total\nSP.POP.TOTL\n1960\n54608.0\n\n\n1\nAfrica Eastern and Southern\nAFE\nPopulation, total\nSP.POP.TOTL\n1960\n130692579.0\n\n\n2\nAfghanistan\nAFG\nPopulation, total\nSP.POP.TOTL\n1960\n8622466.0\n\n\n3\nAfrica Western and Central\nAFW\nPopulation, total\nSP.POP.TOTL\n1960\n97256290.0\n\n\n4\nAngola\nAGO\nPopulation, total\nSP.POP.TOTL\n1960\n5357195.0\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n16487\nKosovo\nXKX\nPopulation, total\nSP.POP.TOTL\n2021\n1786038.0\n\n\n16488\nYemen, Rep.\nYEM\nPopulation, total\nSP.POP.TOTL\n2021\n32981641.0\n\n\n16489\nSouth Africa\nZAF\nPopulation, total\nSP.POP.TOTL\n2021\n59392255.0\n\n\n16490\nZambia\nZMB\nPopulation, total\nSP.POP.TOTL\n2021\n19473125.0\n\n\n16491\nZimbabwe\nZWE\nPopulation, total\nSP.POP.TOTL\n2021\n15993524.0\n\n\n\n\n16400 rows × 6 columns\n\n\n\n\ndf_kuznetz= df_long.merge(df2_long,on=[\"Date\",\"Country Name\",\"Country Code\"]).merge(df3_long, on=[\"Date\",\"Country Name\",\"Country Code\"])\ndf_kuznetz.dropna()\n\n\n\n\n\n\n\n\nCountry Name\nCountry Code\nIndicator Name_x\nIndicator Code_x\nDate\nEmissions\nIndicator Name_y\nIndicator Code_y\nGDP\nIndicator Name\nIndicator Code\nPopulation\n\n\n\n\n7981\nAfrica Eastern and Southern\nAFE\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\n1990\n0.982136\nGDP (current US$)\nNY.GDP.MKTP.CD\n2.532352e+11\nPopulation, total\nSP.POP.TOTL\n3.098907e+08\n\n\n7983\nAfrica Western and Central\nAFW\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\n1990\n0.473669\nGDP (current US$)\nNY.GDP.MKTP.CD\n1.218021e+11\nPopulation, total\nSP.POP.TOTL\n2.067390e+08\n\n\n7984\nAngola\nAGO\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\n1990\n0.554586\nGDP (current US$)\nNY.GDP.MKTP.CD\n1.122876e+10\nPopulation, total\nSP.POP.TOTL\n1.182864e+07\n\n\n7985\nAlbania\nALB\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\n1990\n1.819542\nGDP (current US$)\nNY.GDP.MKTP.CD\n2.028554e+09\nPopulation, total\nSP.POP.TOTL\n3.286542e+06\n\n\n7986\nAndorra\nAND\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\n1990\n7.653680\nGDP (current US$)\nNY.GDP.MKTP.CD\n1.029048e+09\nPopulation, total\nSP.POP.TOTL\n5.356900e+04\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n15953\nWorld\nWLD\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\n2019\n4.435673\nGDP (current US$)\nNY.GDP.MKTP.CD\n8.765425e+13\nPopulation, total\nSP.POP.TOTL\n7.742682e+09\n\n\n15954\nSamoa\nWSM\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\n2019\n1.415729\nGDP (current US$)\nNY.GDP.MKTP.CD\n9.129445e+08\nPopulation, total\nSP.POP.TOTL\n2.119050e+05\n\n\n15957\nSouth Africa\nZAF\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\n2019\n7.568640\nGDP (current US$)\nNY.GDP.MKTP.CD\n3.885320e+11\nPopulation, total\nSP.POP.TOTL\n5.808706e+07\n\n\n15958\nZambia\nZMB\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\n2019\n0.369958\nGDP (current US$)\nNY.GDP.MKTP.CD\n2.330867e+10\nPopulation, total\nSP.POP.TOTL\n1.838048e+07\n\n\n15959\nZimbabwe\nZWE\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\n2019\n0.765894\nGDP (current US$)\nNY.GDP.MKTP.CD\n2.183223e+10\nPopulation, total\nSP.POP.TOTL\n1.535461e+07\n\n\n\n\n6937 rows × 12 columns\n\n\n\nRegress per capita emissions on gdp per capita and comment.\n\nfrom statsmodels.formula import api as smf\ndf_kuznetz['GDP_per_capita']=df_kuznetz['GDP']/1000/df_kuznetz['Population']#on divise le PIB par mille car c'est en million et la population est en milliers\n\n\nmodel=smf.ols(\" Emissions ~ GDP_per_capita \", df_kuznetz)\nres=model.fit()\nres.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nEmissions\nR-squared:\n0.334\n\n\nModel:\nOLS\nAdj. R-squared:\n0.334\n\n\nMethod:\nLeast Squares\nF-statistic:\n3473.\n\n\nDate:\nMon, 03 Apr 2023\nProb (F-statistic):\n0.00\n\n\nTime:\n12:41:31\nLog-Likelihood:\n-19885.\n\n\nNo. Observations:\n6937\nAIC:\n3.977e+04\n\n\nDf Residuals:\n6935\nBIC:\n3.979e+04\n\n\nDf Model:\n1\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n2.4500\n0.059\n41.326\n0.000\n2.334\n2.566\n\n\nGDP_per_capita\n0.1852\n0.003\n58.931\n0.000\n0.179\n0.191\n\n\n\n\n\n\n\n\nOmnibus:\n3880.879\nDurbin-Watson:\n1.836\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n96298.037\n\n\nSkew:\n2.186\nProb(JB):\n0.00\n\n\nKurtosis:\n20.721\nCond. No.\n21.9\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\nThe estimated regresssion is emissions per capita = 2,45+ 0,1852 gdp per capita. Both the intercept and the coefficient are significant, indicating that higher GDP per capita is associated with higher per capita emissions, holding other factors constant. The R-squared of the model is relatively low at 0.334, suggesting that other factors not included in the model may also be important in explaining per capita emissions.\nSplit the sample into the three quantiles, based on gdp/capita in the last period. Run the same regression in all three subsamples. Comment.\n\ndf_kuznetz['Quantile']= pd.qcut(df_kuznetz['GDP_per_capita'],q = 3, labels=['low', 'medium', 'high'])\nmodel_low=smf.ols(\" Emissions ~ GDP_per_capita \", df_kuznetz[df_kuznetz['Quantile'] == \"low\"])\nres_low=model_low.fit()\nres_low.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nEmissions\nR-squared:\n0.044\n\n\nModel:\nOLS\nAdj. R-squared:\n0.043\n\n\nMethod:\nLeast Squares\nF-statistic:\n68.42\n\n\nDate:\nMon, 03 Apr 2023\nProb (F-statistic):\n2.89e-16\n\n\nTime:\n13:37:32\nLog-Likelihood:\n-2221.9\n\n\nNo. Observations:\n1493\nAIC:\n4448.\n\n\nDf Residuals:\n1491\nBIC:\n4458.\n\n\nDf Model:\n1\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n0.0444\n0.073\n0.605\n0.545\n-0.100\n0.189\n\n\nGDP_per_capita\n1.2173\n0.147\n8.272\n0.000\n0.929\n1.506\n\n\n\n\n\n\n\n\nOmnibus:\n1261.416\nDurbin-Watson:\n1.783\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n26143.353\n\n\nSkew:\n4.011\nProb(JB):\n0.00\n\n\nKurtosis:\n21.865\nCond. No.\n6.47\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\nmodel_medium=smf.ols(\" Emissions ~ GDP_per_capita \", df_kuznetz[df_kuznetz['Quantile'] == \"medium\"])\nres_medium=model_medium.fit()\nres_medium.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nEmissions\nR-squared:\n0.096\n\n\nModel:\nOLS\nAdj. R-squared:\n0.095\n\n\nMethod:\nLeast Squares\nF-statistic:\n274.8\n\n\nDate:\nMon, 03 Apr 2023\nProb (F-statistic):\n9.77e-59\n\n\nTime:\n13:38:08\nLog-Likelihood:\n-5698.0\n\n\nNo. Observations:\n2600\nAIC:\n1.140e+04\n\n\nDf Residuals:\n2598\nBIC:\n1.141e+04\n\n\nDf Model:\n1\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n0.7320\n0.099\n7.418\n0.000\n0.539\n0.926\n\n\nGDP_per_capita\n0.6774\n0.041\n16.576\n0.000\n0.597\n0.758\n\n\n\n\n\n\n\n\nOmnibus:\n1316.986\nDurbin-Watson:\n1.691\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n7900.449\n\n\nSkew:\n2.395\nProb(JB):\n0.00\n\n\nKurtosis:\n10.071\nCond. No.\n6.42\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\nmodel_high=smf.ols(\" Emissions ~ GDP_per_capita \", df_kuznetz[df_kuznetz['Quantile'] == \"high\"])\nres_high=model_high.fit()\nres_high.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nEmissions\nR-squared:\n0.131\n\n\nModel:\nOLS\nAdj. R-squared:\n0.130\n\n\nMethod:\nLeast Squares\nF-statistic:\n427.5\n\n\nDate:\nMon, 03 Apr 2023\nProb (F-statistic):\n1.37e-88\n\n\nTime:\n13:38:39\nLog-Likelihood:\n-8941.7\n\n\nNo. Observations:\n2844\nAIC:\n1.789e+04\n\n\nDf Residuals:\n2842\nBIC:\n1.790e+04\n\n\nDf Model:\n1\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n5.7100\n0.152\n37.652\n0.000\n5.413\n6.007\n\n\nGDP_per_capita\n0.1068\n0.005\n20.676\n0.000\n0.097\n0.117\n\n\n\n\n\n\n\n\nOmnibus:\n1447.885\nDurbin-Watson:\n1.902\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n12763.970\n\n\nSkew:\n2.245\nProb(JB):\n0.00\n\n\nKurtosis:\n12.357\nCond. No.\n42.3\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\nThese three linear regressions show us that the higher the GDP per capita of countries, the higher the R-squared. This means that the model is more predictive for countries with a “high” GDP, the higher their GDP per capita, the higher their per capita emissions. This partly confirms the Kuznetz curve hypothesis\nInstead of splitting the sample, run a nonlinear regression:\n\\[\\frac{ \\text{emissions}_{i t} }{ \\text{population}_{i t} } = \\alpha + \\beta_1*\\frac{ \\text{gdp}_{i t}}{\\text{population}_{i t}} + \\beta_2*\\left( \\frac{ \\text{gdp}_{i t}}{\\text{population}_{i t}} \\right)^2 + \\text{other factors}_{i t}\\]\nJustify why \\(\\beta_2&lt;0\\) can be interpreted as a proof of the environmental Kuznets hypothesis. Comment.\n\nimport numpy as np\nnonlinear_regression=smf.ols('Emissions ~ GDP_per_capita + np.power(GDP_per_capita, 2)',df_kuznetz)\nres_nl=nonlinear_regression.fit()\nres_nl.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nEmissions\nR-squared:\n0.465\n\n\nModel:\nOLS\nAdj. R-squared:\n0.465\n\n\nMethod:\nLeast Squares\nF-statistic:\n3019.\n\n\nDate:\nMon, 03 Apr 2023\nProb (F-statistic):\n0.00\n\n\nTime:\n13:49:50\nLog-Likelihood:\n-19121.\n\n\nNo. Observations:\n6937\nAIC:\n3.825e+04\n\n\nDf Residuals:\n6934\nBIC:\n3.827e+04\n\n\nDf Model:\n2\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n1.5088\n0.058\n26.113\n0.000\n1.395\n1.622\n\n\nGDP_per_capita\n0.3719\n0.005\n69.887\n0.000\n0.361\n0.382\n\n\nnp.power(GDP_per_capita, 2)\n-0.0024\n5.76e-05\n-41.345\n0.000\n-0.002\n-0.002\n\n\n\n\n\n\n\n\nOmnibus:\n4662.808\nDurbin-Watson:\n1.905\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n103561.456\n\n\nSkew:\n2.902\nProb(JB):\n0.00\n\n\nKurtosis:\n21.017\nCond. No.\n1.95e+03\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.[2] The condition number is large, 1.95e+03. This might indicate that there arestrong multicollinearity or other numerical problems.\n\n\nThe coefficient on the quadratic term, 𝛽2, is negative, standing at -0,0024, which support the hypothesis that the relationship between emissions and GDP per capita is U-shaped and consistent with the EKH.\n(Bonus) Suggest a way to improve the regression.\nthis result alone does not provide conclusive proof of the EKH, as the coefficient is not statistically significant and as there may be other factors that influence the relationship between emissions and GDP per capita"
  },
  {
    "objectID": "tutorials/session_8/old_homework.html#predicting-booking-cancellations",
    "href": "tutorials/session_8/old_homework.html#predicting-booking-cancellations",
    "title": "Data-Based Economics: Coursework",
    "section": "Predicting booking cancellations",
    "text": "Predicting booking cancellations\nThe scientific review Data-in-Brief, publishes raw data after a rigorous referee process.\nThe following entry contains booking data for two hotels in Portugal, with many informations about the clients.\nYour goal is to propose a machine learning model to predict whether a given booking will be cancelled.\n(note that the dataset is rather large and that some operations may take some time to complete)\n\nPreparation\nImport the dataset. Describe it.\n\nimport pandas\ndf = pandas.read_csv(\"hotel_booking.csv\")\n\n\ndf.describe()\n\n\n\n\n\n\n\n\nis_canceled\nlead_time\narrival_date_year\narrival_date_week_number\narrival_date_day_of_month\nstays_in_weekend_nights\nstays_in_week_nights\nadults\nchildren\nbabies\nis_repeated_guest\nprevious_cancellations\nprevious_bookings_not_canceled\nbooking_changes\nagent\ncompany\ndays_in_waiting_list\nadr\nrequired_car_parking_spaces\ntotal_of_special_requests\n\n\n\n\ncount\n119390.000000\n119390.000000\n119390.000000\n119390.000000\n119390.000000\n119390.000000\n119390.000000\n119390.000000\n119386.000000\n119390.000000\n119390.000000\n119390.000000\n119390.000000\n119390.000000\n103050.000000\n6797.000000\n119390.000000\n119390.000000\n119390.000000\n119390.000000\n\n\nmean\n0.370416\n104.011416\n2016.156554\n27.165173\n15.798241\n0.927599\n2.500302\n1.856403\n0.103890\n0.007949\n0.031912\n0.087118\n0.137097\n0.221124\n86.693382\n189.266735\n2.321149\n101.831122\n0.062518\n0.571363\n\n\nstd\n0.482918\n106.863097\n0.707476\n13.605138\n8.780829\n0.998613\n1.908286\n0.579261\n0.398561\n0.097436\n0.175767\n0.844336\n1.497437\n0.652306\n110.774548\n131.655015\n17.594721\n50.535790\n0.245291\n0.792798\n\n\nmin\n0.000000\n0.000000\n2015.000000\n1.000000\n1.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n1.000000\n6.000000\n0.000000\n-6.380000\n0.000000\n0.000000\n\n\n25%\n0.000000\n18.000000\n2016.000000\n16.000000\n8.000000\n0.000000\n1.000000\n2.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n9.000000\n62.000000\n0.000000\n69.290000\n0.000000\n0.000000\n\n\n50%\n0.000000\n69.000000\n2016.000000\n28.000000\n16.000000\n1.000000\n2.000000\n2.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n14.000000\n179.000000\n0.000000\n94.575000\n0.000000\n0.000000\n\n\n75%\n1.000000\n160.000000\n2017.000000\n38.000000\n23.000000\n2.000000\n3.000000\n2.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n229.000000\n270.000000\n0.000000\n126.000000\n0.000000\n1.000000\n\n\nmax\n1.000000\n737.000000\n2017.000000\n53.000000\n31.000000\n19.000000\n50.000000\n55.000000\n10.000000\n10.000000\n1.000000\n26.000000\n72.000000\n21.000000\n535.000000\n543.000000\n391.000000\n5400.000000\n8.000000\n5.000000\n\n\n\n\n\n\n\nSplit the dataset between a train set and a validation set.\nThe validation set should not be touched until the very end.\n\nimport sklearn\nimport sklearn.model_selection\n\n\ndf_ml, df_validation = sklearn.model_selection.train_test_split(df, test_size=0.2, random_state=56)\n# until the very last question, you should use *only* the training set\n\nSplit the df_ml dataframe between a training set and a test set.\n\ndf_train, df_test = sklearn.model_selection.train_test_split(df_ml)\n# the various algorithms can be trained and tested using df_train and df_test\n\n\n\nTraining\nJustify why a machine learning model seems appropriate to predict cancellation. Which one(s) could you use?\nImplement two or more classification models, to predict cancellation.\nCompare their performance on the test set. Which one would you choose?\n\n\nValidation\nUsing your preferred model, use the validation set to compute the confusion matrix. Comment.\n\ns='The rain in Spain stays mainly in the plane'\ns[s.index('m'):s.index('S')+5]\n\n\n'mainl'"
  },
  {
    "objectID": "tutorials/session_4/Regressions.html",
    "href": "tutorials/session_4/Regressions.html",
    "title": "Regressions",
    "section": "",
    "text": "Import the Duncan/carData dataset\n\nimport statsmodels.api as sm\ndataset = sm.datasets.get_rdataset(\"Duncan\", \"carData\")\ndf = dataset.data\ndf.head()\n\n\n\n\n\n\n\n\ntype\nincome\neducation\nprestige\n\n\nrownames\n\n\n\n\n\n\n\n\naccountant\nprof\n62\n86\n82\n\n\npilot\nprof\n72\n76\n83\n\n\narchitect\nprof\n75\n92\n90\n\n\nauthor\nprof\n55\n90\n76\n\n\nchemist\nprof\n64\n86\n90\n\n\n\n\n\n\n\n\ndf.describe()\n\n\n\n\n\n\n\n\nincome\neducation\nprestige\n\n\n\n\ncount\n45.000000\n45.000000\n45.000000\n\n\nmean\n41.866667\n52.555556\n47.688889\n\n\nstd\n24.435072\n29.760831\n31.510332\n\n\nmin\n7.000000\n7.000000\n3.000000\n\n\n25%\n21.000000\n26.000000\n16.000000\n\n\n50%\n42.000000\n45.000000\n41.000000\n\n\n75%\n64.000000\n84.000000\n81.000000\n\n\nmax\n81.000000\n100.000000\n97.000000\n\n\n\n\n\n\n\nEstimate by hand the model \\(\\text{income} = \\alpha + \\beta  \\times \\text{education}\\) . Plot.\n\nΣ = df[ ['income', 'education'] ].cov()\n\n\nβ = Σ.loc['income','education'] / Σ.loc['education','education']\n\n\nβ\n\n0.5948594400410561\n\n\n\nμ = df[ ['income', 'education'] ].mean()\nμ\n\nincome       41.866667\neducation    52.555556\ndtype: float64\n\n\n\nα = μ['income'] - β*μ['education']\n\n\nα\n\n10.603498317842273\n\n\n\nprediction = α + β*df['education']\n\n\nfrom matplotlib import pyplot as plt\nplt.plot(df['education'], df['income'], '.')\nplt.plot(df['education'], prediction)\n\n\n\n\n\n\n\n\nCompute total, explained, unexplained variance. Compute R^2 statistics\n\ndf['prediction'] = α + β*df['education']\ndf['error_term'] =  df['income'] - prediction\n\n\nSigma = df[['income', 'education', 'prediction', 'error_term']].cov()\n\n\ntotal_variance = Sigma.loc['income','income'] \n\n\nprediction_variance = Sigma.loc['prediction','prediction']\n\n\nerror_variance = Sigma.loc['error_term', 'error_term']\n\n\ntotal_variance\n\n597.0727272727273\n\n\n\nprediction_variance\n\n313.4143142161768\n\n\n\nerror_variance\n\n283.6584130565506\n\n\n\nprediction_variance + error_variance\n\n597.0727272727274\n\n\n\nmyRsquared = 1 - error_variance/total_variance\n\n\nmyRsquared\n\n0.5249181546907554\n\n\nUse statsmodels (formula API) to estimate \\(\\text{income} = \\alpha + \\beta  \\times \\text{education}\\). Comment regression statistics.\n\n#https://www.statsmodels.org/stable/generated/statsmodels.formula.api.ols.html\n\nfrom statsmodels.formula import api as smf\n\nmodel_1 = smf.ols(\"income ~ education\", df)\nres_1 = model_1.fit()\n\n\nres_1.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nincome\nR-squared:\n0.525\n\n\nModel:\nOLS\nAdj. R-squared:\n0.514\n\n\nMethod:\nLeast Squares\nF-statistic:\n47.51\n\n\nDate:\nWed, 07 Feb 2024\nProb (F-statistic):\n1.84e-08\n\n\nTime:\n11:30:20\nLog-Likelihood:\n-190.42\n\n\nNo. Observations:\n45\nAIC:\n384.8\n\n\nDf Residuals:\n43\nBIC:\n388.5\n\n\nDf Model:\n1\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n10.6035\n5.198\n2.040\n0.048\n0.120\n21.087\n\n\neducation\n0.5949\n0.086\n6.893\n0.000\n0.421\n0.769\n\n\n\n\n\n\n\n\nOmnibus:\n9.841\nDurbin-Watson:\n1.736\n\n\nProb(Omnibus):\n0.007\nJarque-Bera (JB):\n10.609\n\n\nSkew:\n0.776\nProb(JB):\n0.00497\n\n\nKurtosis:\n4.802\nCond. No.\n123.\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\nThe estimated regresssion is income = 10.6 + 0.59 education. At a 5% p-value level both the intercept and the coefficient are significant. R-squared is 0.52: the model explains half of the variance.\nUse statsmodels to estimate \\(\\text{income} = \\alpha + \\beta  \\times \\text{prestige}\\). Comment regression statistics.\n\nformula = \"income ~ education\"\n\n\ndf.head()\n\n\n\n\n\n\n\n\ntype\nincome\neducation\nprestige\n\n\n\n\naccountant\nprof\n62\n86\n82\n\n\npilot\nprof\n72\n76\n83\n\n\narchitect\nprof\n75\n92\n90\n\n\nauthor\nprof\n55\n90\n76\n\n\nchemist\nprof\n64\n86\n90\n\n\n\n\n\n\n\n\nmodel_2 = smf.ols(\"income ~ prestige\", df)\nres_2 = model_2.fit()\n\n\nres_2.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nincome\nR-squared:\n0.702\n\n\nModel:\nOLS\nAdj. R-squared:\n0.695\n\n\nMethod:\nLeast Squares\nF-statistic:\n101.3\n\n\nDate:\nTue, 02 Feb 2021\nProb (F-statistic):\n7.14e-13\n\n\nTime:\n11:55:59\nLog-Likelihood:\n-179.93\n\n\nNo. Observations:\n45\nAIC:\n363.9\n\n\nDf Residuals:\n43\nBIC:\n367.5\n\n\nDf Model:\n1\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n10.8840\n3.678\n2.959\n0.005\n3.467\n18.301\n\n\nprestige\n0.6497\n0.065\n10.062\n0.000\n0.519\n0.780\n\n\n\n\n\n\n\n\nOmnibus:\n8.893\nDurbin-Watson:\n2.048\n\n\nProb(Omnibus):\n0.012\nJarque-Bera (JB):\n19.848\n\n\nSkew:\n0.047\nProb(JB):\n4.90e-05\n\n\nKurtosis:\n6.252\nCond. No.\n104.\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\nThe estimated regresssion is income = 10.6 + 0.59 education. At a 0.5% p-value level both the intercept and the coefficient are significant. R-squared is 0.70: the model predicts income better than the former one.\n__Use statsmodels to estimate $ = + + _2 + $. Comment regression statistics.__\n\nmodel_3 = smf.ols(\"income ~ education + prestige\", df)\nres_3 = model_3.fit()\n\n\nres_3.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nincome\nR-squared:\n0.702\n\n\nModel:\nOLS\nAdj. R-squared:\n0.688\n\n\nMethod:\nLeast Squares\nF-statistic:\n49.55\n\n\nDate:\nTue, 02 Feb 2021\nProb (F-statistic):\n8.88e-12\n\n\nTime:\n11:56:03\nLog-Likelihood:\n-179.90\n\n\nNo. Observations:\n45\nAIC:\n365.8\n\n\nDf Residuals:\n42\nBIC:\n371.2\n\n\nDf Model:\n2\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n10.4264\n4.164\n2.504\n0.016\n2.024\n18.829\n\n\neducation\n0.0323\n0.132\n0.244\n0.808\n-0.234\n0.299\n\n\nprestige\n0.6237\n0.125\n5.003\n0.000\n0.372\n0.875\n\n\n\n\n\n\n\n\nOmnibus:\n9.200\nDurbin-Watson:\n2.053\n\n\nProb(Omnibus):\n0.010\nJarque-Bera (JB):\n21.265\n\n\nSkew:\n0.075\nProb(JB):\n2.41e-05\n\n\nKurtosis:\n6.364\nCond. No.\n168.\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\nThe \\(R^2\\) is only slightly higher than last model, but adjusted \\(R^2\\) is actually lower: the model has less predictive power.\nThe coefficient for education is not significant. It should be dropped from the regresssion.\nThis might happen, because education and prestige are correlated. Let’s check it:\n\ndf.corr()\n\n\n\n\n\n\n\n\nincome\neducation\nprestige\n\n\n\n\nincome\n1.000000\n0.724512\n0.837801\n\n\neducation\n0.724512\n1.000000\n0.851916\n\n\nprestige\n0.837801\n0.851916\n1.000000\n\n\n\n\n\n\n\nEducation and prestige are correlated at 83%. It makes no sense keeping the two in the same regression.\nWHich model would you recommend? For which purpose?\nIf the goal is to predict income, the one with prestige only, has the highest prediction power. If we are interested in the effect of education, we keep only education.\nPlot the regression with prestige\n\na = res_2.params.Intercept\nb = res_2.params.prestige\n\n\nx = df['prestige']\n\n\ny = a + b*x\n\n\nfrom matplotlib import pyplot as plt\nplt.plot(x, df['income'],'o')\nplt.plot(x, y)\nplt.xlabel(\"prestige\")\nplt.xlabel(\"income\")\n\nText(0.5, 0, 'income')\n\n\n\n\n\n\n\n\n\nCheck visually normality of residuals\n\npred = a + b*x\nactual = df['income']\nresid = actual - pred  # same as res_2.resid\n\n\nplt.plot(x,resid, 'o')\n\n\n\n\n\n\n\n\n\nplt.hist(resid)\n\n(array([0.00255915, 0.        , 0.        , 0.00511829, 0.0486238 ,\n        0.02815062, 0.01535488, 0.01023659, 0.00255915, 0.00255915]),\n array([-46.40643935, -37.72299114, -29.03954294, -20.35609473,\n        -11.67264653,  -2.98919832,   5.69424989,  14.37769809,\n         23.0611463 ,  31.74459451,  40.42804271]),\n &lt;BarContainer object of 10 artists&gt;)"
  },
  {
    "objectID": "tutorials/session_4/Regressions.html#linear-regressions",
    "href": "tutorials/session_4/Regressions.html#linear-regressions",
    "title": "Regressions",
    "section": "",
    "text": "Import the Duncan/carData dataset\n\nimport statsmodels.api as sm\ndataset = sm.datasets.get_rdataset(\"Duncan\", \"carData\")\ndf = dataset.data\ndf.head()\n\n\n\n\n\n\n\n\ntype\nincome\neducation\nprestige\n\n\nrownames\n\n\n\n\n\n\n\n\naccountant\nprof\n62\n86\n82\n\n\npilot\nprof\n72\n76\n83\n\n\narchitect\nprof\n75\n92\n90\n\n\nauthor\nprof\n55\n90\n76\n\n\nchemist\nprof\n64\n86\n90\n\n\n\n\n\n\n\n\ndf.describe()\n\n\n\n\n\n\n\n\nincome\neducation\nprestige\n\n\n\n\ncount\n45.000000\n45.000000\n45.000000\n\n\nmean\n41.866667\n52.555556\n47.688889\n\n\nstd\n24.435072\n29.760831\n31.510332\n\n\nmin\n7.000000\n7.000000\n3.000000\n\n\n25%\n21.000000\n26.000000\n16.000000\n\n\n50%\n42.000000\n45.000000\n41.000000\n\n\n75%\n64.000000\n84.000000\n81.000000\n\n\nmax\n81.000000\n100.000000\n97.000000\n\n\n\n\n\n\n\nEstimate by hand the model \\(\\text{income} = \\alpha + \\beta  \\times \\text{education}\\) . Plot.\n\nΣ = df[ ['income', 'education'] ].cov()\n\n\nβ = Σ.loc['income','education'] / Σ.loc['education','education']\n\n\nβ\n\n0.5948594400410561\n\n\n\nμ = df[ ['income', 'education'] ].mean()\nμ\n\nincome       41.866667\neducation    52.555556\ndtype: float64\n\n\n\nα = μ['income'] - β*μ['education']\n\n\nα\n\n10.603498317842273\n\n\n\nprediction = α + β*df['education']\n\n\nfrom matplotlib import pyplot as plt\nplt.plot(df['education'], df['income'], '.')\nplt.plot(df['education'], prediction)\n\n\n\n\n\n\n\n\nCompute total, explained, unexplained variance. Compute R^2 statistics\n\ndf['prediction'] = α + β*df['education']\ndf['error_term'] =  df['income'] - prediction\n\n\nSigma = df[['income', 'education', 'prediction', 'error_term']].cov()\n\n\ntotal_variance = Sigma.loc['income','income'] \n\n\nprediction_variance = Sigma.loc['prediction','prediction']\n\n\nerror_variance = Sigma.loc['error_term', 'error_term']\n\n\ntotal_variance\n\n597.0727272727273\n\n\n\nprediction_variance\n\n313.4143142161768\n\n\n\nerror_variance\n\n283.6584130565506\n\n\n\nprediction_variance + error_variance\n\n597.0727272727274\n\n\n\nmyRsquared = 1 - error_variance/total_variance\n\n\nmyRsquared\n\n0.5249181546907554\n\n\nUse statsmodels (formula API) to estimate \\(\\text{income} = \\alpha + \\beta  \\times \\text{education}\\). Comment regression statistics.\n\n#https://www.statsmodels.org/stable/generated/statsmodels.formula.api.ols.html\n\nfrom statsmodels.formula import api as smf\n\nmodel_1 = smf.ols(\"income ~ education\", df)\nres_1 = model_1.fit()\n\n\nres_1.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nincome\nR-squared:\n0.525\n\n\nModel:\nOLS\nAdj. R-squared:\n0.514\n\n\nMethod:\nLeast Squares\nF-statistic:\n47.51\n\n\nDate:\nWed, 07 Feb 2024\nProb (F-statistic):\n1.84e-08\n\n\nTime:\n11:30:20\nLog-Likelihood:\n-190.42\n\n\nNo. Observations:\n45\nAIC:\n384.8\n\n\nDf Residuals:\n43\nBIC:\n388.5\n\n\nDf Model:\n1\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n10.6035\n5.198\n2.040\n0.048\n0.120\n21.087\n\n\neducation\n0.5949\n0.086\n6.893\n0.000\n0.421\n0.769\n\n\n\n\n\n\n\n\nOmnibus:\n9.841\nDurbin-Watson:\n1.736\n\n\nProb(Omnibus):\n0.007\nJarque-Bera (JB):\n10.609\n\n\nSkew:\n0.776\nProb(JB):\n0.00497\n\n\nKurtosis:\n4.802\nCond. No.\n123.\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\nThe estimated regresssion is income = 10.6 + 0.59 education. At a 5% p-value level both the intercept and the coefficient are significant. R-squared is 0.52: the model explains half of the variance.\nUse statsmodels to estimate \\(\\text{income} = \\alpha + \\beta  \\times \\text{prestige}\\). Comment regression statistics.\n\nformula = \"income ~ education\"\n\n\ndf.head()\n\n\n\n\n\n\n\n\ntype\nincome\neducation\nprestige\n\n\n\n\naccountant\nprof\n62\n86\n82\n\n\npilot\nprof\n72\n76\n83\n\n\narchitect\nprof\n75\n92\n90\n\n\nauthor\nprof\n55\n90\n76\n\n\nchemist\nprof\n64\n86\n90\n\n\n\n\n\n\n\n\nmodel_2 = smf.ols(\"income ~ prestige\", df)\nres_2 = model_2.fit()\n\n\nres_2.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nincome\nR-squared:\n0.702\n\n\nModel:\nOLS\nAdj. R-squared:\n0.695\n\n\nMethod:\nLeast Squares\nF-statistic:\n101.3\n\n\nDate:\nTue, 02 Feb 2021\nProb (F-statistic):\n7.14e-13\n\n\nTime:\n11:55:59\nLog-Likelihood:\n-179.93\n\n\nNo. Observations:\n45\nAIC:\n363.9\n\n\nDf Residuals:\n43\nBIC:\n367.5\n\n\nDf Model:\n1\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n10.8840\n3.678\n2.959\n0.005\n3.467\n18.301\n\n\nprestige\n0.6497\n0.065\n10.062\n0.000\n0.519\n0.780\n\n\n\n\n\n\n\n\nOmnibus:\n8.893\nDurbin-Watson:\n2.048\n\n\nProb(Omnibus):\n0.012\nJarque-Bera (JB):\n19.848\n\n\nSkew:\n0.047\nProb(JB):\n4.90e-05\n\n\nKurtosis:\n6.252\nCond. No.\n104.\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\nThe estimated regresssion is income = 10.6 + 0.59 education. At a 0.5% p-value level both the intercept and the coefficient are significant. R-squared is 0.70: the model predicts income better than the former one.\n__Use statsmodels to estimate $ = + + _2 + $. Comment regression statistics.__\n\nmodel_3 = smf.ols(\"income ~ education + prestige\", df)\nres_3 = model_3.fit()\n\n\nres_3.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nincome\nR-squared:\n0.702\n\n\nModel:\nOLS\nAdj. R-squared:\n0.688\n\n\nMethod:\nLeast Squares\nF-statistic:\n49.55\n\n\nDate:\nTue, 02 Feb 2021\nProb (F-statistic):\n8.88e-12\n\n\nTime:\n11:56:03\nLog-Likelihood:\n-179.90\n\n\nNo. Observations:\n45\nAIC:\n365.8\n\n\nDf Residuals:\n42\nBIC:\n371.2\n\n\nDf Model:\n2\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n10.4264\n4.164\n2.504\n0.016\n2.024\n18.829\n\n\neducation\n0.0323\n0.132\n0.244\n0.808\n-0.234\n0.299\n\n\nprestige\n0.6237\n0.125\n5.003\n0.000\n0.372\n0.875\n\n\n\n\n\n\n\n\nOmnibus:\n9.200\nDurbin-Watson:\n2.053\n\n\nProb(Omnibus):\n0.010\nJarque-Bera (JB):\n21.265\n\n\nSkew:\n0.075\nProb(JB):\n2.41e-05\n\n\nKurtosis:\n6.364\nCond. No.\n168.\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\nThe \\(R^2\\) is only slightly higher than last model, but adjusted \\(R^2\\) is actually lower: the model has less predictive power.\nThe coefficient for education is not significant. It should be dropped from the regresssion.\nThis might happen, because education and prestige are correlated. Let’s check it:\n\ndf.corr()\n\n\n\n\n\n\n\n\nincome\neducation\nprestige\n\n\n\n\nincome\n1.000000\n0.724512\n0.837801\n\n\neducation\n0.724512\n1.000000\n0.851916\n\n\nprestige\n0.837801\n0.851916\n1.000000\n\n\n\n\n\n\n\nEducation and prestige are correlated at 83%. It makes no sense keeping the two in the same regression.\nWHich model would you recommend? For which purpose?\nIf the goal is to predict income, the one with prestige only, has the highest prediction power. If we are interested in the effect of education, we keep only education.\nPlot the regression with prestige\n\na = res_2.params.Intercept\nb = res_2.params.prestige\n\n\nx = df['prestige']\n\n\ny = a + b*x\n\n\nfrom matplotlib import pyplot as plt\nplt.plot(x, df['income'],'o')\nplt.plot(x, y)\nplt.xlabel(\"prestige\")\nplt.xlabel(\"income\")\n\nText(0.5, 0, 'income')\n\n\n\n\n\n\n\n\n\nCheck visually normality of residuals\n\npred = a + b*x\nactual = df['income']\nresid = actual - pred  # same as res_2.resid\n\n\nplt.plot(x,resid, 'o')\n\n\n\n\n\n\n\n\n\nplt.hist(resid)\n\n(array([0.00255915, 0.        , 0.        , 0.00511829, 0.0486238 ,\n        0.02815062, 0.01535488, 0.01023659, 0.00255915, 0.00255915]),\n array([-46.40643935, -37.72299114, -29.03954294, -20.35609473,\n        -11.67264653,  -2.98919832,   5.69424989,  14.37769809,\n         23.0611463 ,  31.74459451,  40.42804271]),\n &lt;BarContainer object of 10 artists&gt;)"
  },
  {
    "objectID": "tutorials/session_4/Regressions.html#finding-the-right-model",
    "href": "tutorials/session_4/Regressions.html#finding-the-right-model",
    "title": "Regressions",
    "section": "Finding the right model",
    "text": "Finding the right model\nImport dataset from data.dta. Explore dataset (statistics, plots)\nOur goal is to explain z by x and y. Run a regression.\nExamine the residuals of the regression. What’s wrong? Remedy?"
  },
  {
    "objectID": "tutorials/session_4/Regressions.html#taylor-rule",
    "href": "tutorials/session_4/Regressions.html#taylor-rule",
    "title": "Regressions",
    "section": "Taylor Rule",
    "text": "Taylor Rule\nIn 1993, John taylor, estimated, using US data the regression: \\(i_t = i^{\\star} + \\alpha_{\\pi} \\pi_t + \\alpha_{\\pi} y_t\\) where \\(\\pi_t\\) is inflation and \\(y_t\\) the output gap (let’s say deviation from real gdp from the trend). He found that both coefficients were not significantly different from \\(0.5\\). Our goal, is to replicate the same analysis.\nImport macro data from statsmodels (https://www.statsmodels.org/devel/datasets/generated/macrodata.html)\nCreate a database with all variables of interest including detrended gdp\nRun the basic regression\nWhich control variables would you propose to add? Does it increase prediction power? How do you interpret that?"
  },
  {
    "objectID": "tutorials/session_5/instrumental_variables_correction.html",
    "href": "tutorials/session_5/instrumental_variables_correction.html",
    "title": "Instrumental variables",
    "section": "",
    "text": "Create four random series of length \\(N=1000\\)\n\n\\(x\\): education\n\\(y\\): salary\n\\(z\\): ambition\n\\(q\\): early smoking\n\nsuch that:\n\n\\(x\\) and \\(z\\) cause \\(y\\)\n\\(z\\) causes \\(x\\)\n\\(q\\) is correlated with \\(x\\), not with \\(z\\)\n\nA problem arises when the confounding factor \\(z\\) is not observed. In that case, we can estimate the direct effect of \\(x\\) on \\(y\\) by using \\(q\\) as an instrument.\nRun the follwing code to create a mock dataset.\n\nimport numpy as np\nimport pandas as pd\n\n\nN = 100000\nϵ_z = np.random.randn(N)*0.1\nϵ_x = np.random.randn(N)*0.1\nϵ_q = np.random.randn(N)*0.01\nϵ_y = np.random.randn(N)*0.01\n\n\nz = 0.1 + ϵ_z\nq = 0.5 + 0.1234*ϵ_x + ϵ_q\n# here we must change the definition so that q affects x:\n# x = 0.1 + z + ϵ_x\nx = 0.1 + z + q + ϵ_x\ny  = 1.0 + 0.9*x + 0.4*z + ϵ_y\n\n\ndf = pd.DataFrame({\n    \"x\": x,\n    \"y\": y,\n    \"z\": z,\n    \"q\": q\n})\n\nDescribe the dataframe. Compute the correlations between the variables. Are they compatible with the hypotheses for IV?\nHere are the results from the database:\n\ndf.describe()\n\n\n\n\n\n\n\n\nx\ny\nz\nq\n\n\n\n\ncount\n100000.000000\n100000.000000\n100000.000000\n100000.000000\n\n\nmean\n0.700385\n1.670457\n0.100148\n0.500003\n\n\nstd\n0.150426\n0.165036\n0.099989\n0.015830\n\n\nmin\n0.094732\n1.001409\n-0.365794\n0.432416\n\n\n25%\n0.598821\n1.559262\n0.032510\n0.489311\n\n\n50%\n0.700130\n1.669901\n0.100245\n0.499985\n\n\n75%\n0.801383\n1.781243\n0.167538\n0.510676\n\n\nmax\n1.308864\n2.358062\n0.553339\n0.571994\n\n\n\n\n\n\n\n\ndf.corr()\n\n\n\n\n\n\n\n\nx\ny\nz\nq\n\n\n\n\nx\n1.000000\n0.981609\n0.664405\n0.617227\n\n\ny\n0.981609\n1.000000\n0.787542\n0.505723\n\n\nz\n0.664405\n0.787542\n1.000000\n-0.003407\n\n\nq\n0.617227\n0.505723\n-0.003407\n1.000000\n\n\n\n\n\n\n\nWe observe: - cor(q, x) non zero: the instrument is relevant - close to zero: might be a weak instrument (we would need to check significance) - cor(q, z) = 0 : the instrument is really exogenous\n\n\n\nUse linearmodels to run a regression estimating the effect of \\(x\\) on \\(y\\) (note the slight API change w.r.t. statsmodels). Comment.\nWhat is the problem with this regression? How can it be detected?\n\nfrom linearmodels import OLS\n\nmodel = OLS.from_formula(\"y ~ x\", df)\nres = model.fit()\nres.summary\n\n\nOLS Estimation Summary\n\n\nDep. Variable:\ny\nR-squared:\n0.9636\n\n\nEstimator:\nOLS\nAdj. R-squared:\n0.9636\n\n\nNo. Observations:\n100000\nF-statistic:\n2.64e+06\n\n\nDate:\nWed, Feb 21 2024\nP-value (F-stat)\n0.0000\n\n\nTime:\n15:10:57\nDistribution:\nchi2(1)\n\n\nCov. Estimator:\nrobust\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter Estimates\n\n\n\nParameter\nStd. Err.\nT-stat\nP-value\nLower CI\nUpper CI\n\n\nIntercept\n0.9162\n0.0005\n1928.2\n0.0000\n0.9153\n0.9171\n\n\nx\n1.0769\n0.0007\n1624.8\n0.0000\n1.0756\n1.0782\n\n\n\n\n\nRegression is globally significant (p-value for Fisher test &lt; 0.00001). The coefficient \\(\\beta=1.0999\\) in front of \\(x\\) is also very significant at a 0.001% level but does not match the true model for \\(y\\) (y  = 1.0 + 0.9*x + 0.4*z + ϵ_y).\n\n\n\n\nfrom linearmodels import IV2SLS\nformula = (\n    \"y ~ x + z\"\n)\nmod = IV2SLS.from_formula(formula, df)\nres = mod.fit()\nres\n\n\nOLS Estimation Summary\n\n\nDep. Variable:\ny\nR-squared:\n0.9964\n\n\nEstimator:\nOLS\nAdj. R-squared:\n0.9964\n\n\nNo. Observations:\n100000\nF-statistic:\n2.729e+07\n\n\nDate:\nWed, Feb 21 2024\nP-value (F-stat)\n0.0000\n\n\nTime:\n15:10:59\nDistribution:\nchi2(2)\n\n\nCov. Estimator:\nrobust\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter Estimates\n\n\n\nParameter\nStd. Err.\nT-stat\nP-value\nLower CI\nUpper CI\n\n\nIntercept\n0.9998\n0.0002\n5755.9\n0.0000\n0.9995\n1.0002\n\n\nx\n0.9003\n0.0003\n3219.2\n0.0000\n0.8998\n0.9008\n\n\nz\n0.4000\n0.0004\n949.12\n0.0000\n0.3991\n0.4008\n\n\n\nid: 0x7f4a249d7ef0\n\n\nNow we see that the coefficient in front of x is the correct one (that is 0.9).\n\n\n\nNow we try to run a regression without knowing the value of z.\nMake a causality graph, summarizing what you know from the equations.\nThe information about the model’s information structure can be summarized as:\n\ngraph TD; X–&gt;Y; Z–&gt;X; Z–&gt;Y; Q–&gt;X;\n\nUse \\(q\\) to instrument the effect of x on y. Comment.\n\nfrom linearmodels.iv import IV2SLS\n\nformula = \"y ~ 1 + [x ~ q]\"\nmodel = IV2SLS.from_formula(formula, df)\nresult = model.fit()\nresult\n\n\nIV-2SLS Estimation Summary\n\n\nDep. Variable:\ny\nR-squared:\n0.9372\n\n\nEstimator:\nIV-2SLS\nAdj. R-squared:\n0.9372\n\n\nNo. Observations:\n100000\nF-statistic:\n4.067e+05\n\n\nDate:\nWed, Feb 21 2024\nP-value (F-stat)\n0.0000\n\n\nTime:\n15:16:05\nDistribution:\nchi2(1)\n\n\nCov. Estimator:\nrobust\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter Estimates\n\n\n\nParameter\nStd. Err.\nT-stat\nP-value\nLower CI\nUpper CI\n\n\nIntercept\n1.0409\n0.0010\n1046.4\n0.0000\n1.0389\n1.0428\n\n\nx\n0.8989\n0.0014\n637.73\n0.0000\n0.8962\n0.9017\n\n\n\nEndogenous: xInstruments: qRobust Covariance (Heteroskedastic)Debiased: Falseid: 0x7f4a249d63c0\n\n\nWe observe that the result is, again, the correct one. This is especially impressive since we didn’t have access to the confounding factor z and couldn’t add it to the regression. Instead, we had another source of randomness q that we used to instrument the regression."
  },
  {
    "objectID": "tutorials/session_5/instrumental_variables_correction.html#iv-example-on-mock-dataset",
    "href": "tutorials/session_5/instrumental_variables_correction.html#iv-example-on-mock-dataset",
    "title": "Instrumental variables",
    "section": "",
    "text": "Create four random series of length \\(N=1000\\)\n\n\\(x\\): education\n\\(y\\): salary\n\\(z\\): ambition\n\\(q\\): early smoking\n\nsuch that:\n\n\\(x\\) and \\(z\\) cause \\(y\\)\n\\(z\\) causes \\(x\\)\n\\(q\\) is correlated with \\(x\\), not with \\(z\\)\n\nA problem arises when the confounding factor \\(z\\) is not observed. In that case, we can estimate the direct effect of \\(x\\) on \\(y\\) by using \\(q\\) as an instrument.\nRun the follwing code to create a mock dataset.\n\nimport numpy as np\nimport pandas as pd\n\n\nN = 100000\nϵ_z = np.random.randn(N)*0.1\nϵ_x = np.random.randn(N)*0.1\nϵ_q = np.random.randn(N)*0.01\nϵ_y = np.random.randn(N)*0.01\n\n\nz = 0.1 + ϵ_z\nq = 0.5 + 0.1234*ϵ_x + ϵ_q\n# here we must change the definition so that q affects x:\n# x = 0.1 + z + ϵ_x\nx = 0.1 + z + q + ϵ_x\ny  = 1.0 + 0.9*x + 0.4*z + ϵ_y\n\n\ndf = pd.DataFrame({\n    \"x\": x,\n    \"y\": y,\n    \"z\": z,\n    \"q\": q\n})\n\nDescribe the dataframe. Compute the correlations between the variables. Are they compatible with the hypotheses for IV?\nHere are the results from the database:\n\ndf.describe()\n\n\n\n\n\n\n\n\nx\ny\nz\nq\n\n\n\n\ncount\n100000.000000\n100000.000000\n100000.000000\n100000.000000\n\n\nmean\n0.700385\n1.670457\n0.100148\n0.500003\n\n\nstd\n0.150426\n0.165036\n0.099989\n0.015830\n\n\nmin\n0.094732\n1.001409\n-0.365794\n0.432416\n\n\n25%\n0.598821\n1.559262\n0.032510\n0.489311\n\n\n50%\n0.700130\n1.669901\n0.100245\n0.499985\n\n\n75%\n0.801383\n1.781243\n0.167538\n0.510676\n\n\nmax\n1.308864\n2.358062\n0.553339\n0.571994\n\n\n\n\n\n\n\n\ndf.corr()\n\n\n\n\n\n\n\n\nx\ny\nz\nq\n\n\n\n\nx\n1.000000\n0.981609\n0.664405\n0.617227\n\n\ny\n0.981609\n1.000000\n0.787542\n0.505723\n\n\nz\n0.664405\n0.787542\n1.000000\n-0.003407\n\n\nq\n0.617227\n0.505723\n-0.003407\n1.000000\n\n\n\n\n\n\n\nWe observe: - cor(q, x) non zero: the instrument is relevant - close to zero: might be a weak instrument (we would need to check significance) - cor(q, z) = 0 : the instrument is really exogenous\n\n\n\nUse linearmodels to run a regression estimating the effect of \\(x\\) on \\(y\\) (note the slight API change w.r.t. statsmodels). Comment.\nWhat is the problem with this regression? How can it be detected?\n\nfrom linearmodels import OLS\n\nmodel = OLS.from_formula(\"y ~ x\", df)\nres = model.fit()\nres.summary\n\n\nOLS Estimation Summary\n\n\nDep. Variable:\ny\nR-squared:\n0.9636\n\n\nEstimator:\nOLS\nAdj. R-squared:\n0.9636\n\n\nNo. Observations:\n100000\nF-statistic:\n2.64e+06\n\n\nDate:\nWed, Feb 21 2024\nP-value (F-stat)\n0.0000\n\n\nTime:\n15:10:57\nDistribution:\nchi2(1)\n\n\nCov. Estimator:\nrobust\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter Estimates\n\n\n\nParameter\nStd. Err.\nT-stat\nP-value\nLower CI\nUpper CI\n\n\nIntercept\n0.9162\n0.0005\n1928.2\n0.0000\n0.9153\n0.9171\n\n\nx\n1.0769\n0.0007\n1624.8\n0.0000\n1.0756\n1.0782\n\n\n\n\n\nRegression is globally significant (p-value for Fisher test &lt; 0.00001). The coefficient \\(\\beta=1.0999\\) in front of \\(x\\) is also very significant at a 0.001% level but does not match the true model for \\(y\\) (y  = 1.0 + 0.9*x + 0.4*z + ϵ_y).\n\n\n\n\nfrom linearmodels import IV2SLS\nformula = (\n    \"y ~ x + z\"\n)\nmod = IV2SLS.from_formula(formula, df)\nres = mod.fit()\nres\n\n\nOLS Estimation Summary\n\n\nDep. Variable:\ny\nR-squared:\n0.9964\n\n\nEstimator:\nOLS\nAdj. R-squared:\n0.9964\n\n\nNo. Observations:\n100000\nF-statistic:\n2.729e+07\n\n\nDate:\nWed, Feb 21 2024\nP-value (F-stat)\n0.0000\n\n\nTime:\n15:10:59\nDistribution:\nchi2(2)\n\n\nCov. Estimator:\nrobust\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter Estimates\n\n\n\nParameter\nStd. Err.\nT-stat\nP-value\nLower CI\nUpper CI\n\n\nIntercept\n0.9998\n0.0002\n5755.9\n0.0000\n0.9995\n1.0002\n\n\nx\n0.9003\n0.0003\n3219.2\n0.0000\n0.8998\n0.9008\n\n\nz\n0.4000\n0.0004\n949.12\n0.0000\n0.3991\n0.4008\n\n\n\nid: 0x7f4a249d7ef0\n\n\nNow we see that the coefficient in front of x is the correct one (that is 0.9).\n\n\n\nNow we try to run a regression without knowing the value of z.\nMake a causality graph, summarizing what you know from the equations.\nThe information about the model’s information structure can be summarized as:\n\ngraph TD; X–&gt;Y; Z–&gt;X; Z–&gt;Y; Q–&gt;X;\n\nUse \\(q\\) to instrument the effect of x on y. Comment.\n\nfrom linearmodels.iv import IV2SLS\n\nformula = \"y ~ 1 + [x ~ q]\"\nmodel = IV2SLS.from_formula(formula, df)\nresult = model.fit()\nresult\n\n\nIV-2SLS Estimation Summary\n\n\nDep. Variable:\ny\nR-squared:\n0.9372\n\n\nEstimator:\nIV-2SLS\nAdj. R-squared:\n0.9372\n\n\nNo. Observations:\n100000\nF-statistic:\n4.067e+05\n\n\nDate:\nWed, Feb 21 2024\nP-value (F-stat)\n0.0000\n\n\nTime:\n15:16:05\nDistribution:\nchi2(1)\n\n\nCov. Estimator:\nrobust\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter Estimates\n\n\n\nParameter\nStd. Err.\nT-stat\nP-value\nLower CI\nUpper CI\n\n\nIntercept\n1.0409\n0.0010\n1046.4\n0.0000\n1.0389\n1.0428\n\n\nx\n0.8989\n0.0014\n637.73\n0.0000\n0.8962\n0.9017\n\n\n\nEndogenous: xInstruments: qRobust Covariance (Heteroskedastic)Debiased: Falseid: 0x7f4a249d63c0\n\n\nWe observe that the result is, again, the correct one. This is especially impressive since we didn’t have access to the confounding factor z and couldn’t add it to the regression. Instead, we had another source of randomness q that we used to instrument the regression."
  },
  {
    "objectID": "tutorials/session_5/instrumental_variables_correction.html#return-on-education",
    "href": "tutorials/session_5/instrumental_variables_correction.html#return-on-education",
    "title": "Instrumental variables",
    "section": "Return on Education",
    "text": "Return on Education\nWe follow the excellent R tutorial from the (excellent) Econometrics with R book.\nThe goal is to measure the effect of schooling on earnings, while correcting the endogeneity bias by using distance to college as an instrument.\nDownload the college distance using get_dataset function and make a nice dataframe. Describe the dataset. Plot a histogram of distance (you can use matplotlib’s hist function or seaborn).\nhttps://vincentarelbundock.github.io/Rdatasets/datasets.html\n\nimport statsmodels.api as sm\nds = sm.datasets.get_rdataset(\"CollegeDistance\", \"AER\")\n\n\n# the dataframe must be retrieved from the dataset object\ndf = ds.data\n\n\ndf.head()\n\n\n\n\n\n\n\n\ngender\nethnicity\nscore\nfcollege\nmcollege\nhome\nurban\nunemp\nwage\ndistance\ntuition\neducation\nincome\nregion\n\n\nrownames\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\nmale\nother\n39.150002\nyes\nno\nyes\nyes\n6.2\n8.09\n0.2\n0.88915\n12\nhigh\nother\n\n\n2\nfemale\nother\n48.869999\nno\nno\nyes\nyes\n6.2\n8.09\n0.2\n0.88915\n12\nlow\nother\n\n\n3\nmale\nother\n48.740002\nno\nno\nyes\nyes\n6.2\n8.09\n0.2\n0.88915\n12\nlow\nother\n\n\n4\nmale\nafam\n40.400002\nno\nno\nyes\nyes\n6.2\n8.09\n0.2\n0.88915\n12\nlow\nother\n\n\n5\nfemale\nother\n40.480000\nno\nno\nno\nyes\n5.6\n8.09\n0.4\n0.88915\n13\nlow\nother\n\n\n\n\n\n\n\n\ndf.describe()\n\n\n\n\n\n\n\n\nscore\nunemp\nwage\ndistance\ntuition\neducation\n\n\n\n\ncount\n4739.000000\n4739.000000\n4739.000000\n4739.000000\n4739.000000\n4739.000000\n\n\nmean\n50.889029\n7.597215\n9.500506\n1.802870\n0.814608\n13.807765\n\n\nstd\n8.701910\n2.763581\n1.343067\n2.297128\n0.339504\n1.789107\n\n\nmin\n28.950001\n1.400000\n6.590000\n0.000000\n0.257510\n12.000000\n\n\n25%\n43.924999\n5.900000\n8.850000\n0.400000\n0.484990\n12.000000\n\n\n50%\n51.189999\n7.100000\n9.680000\n1.000000\n0.824480\n13.000000\n\n\n75%\n57.769999\n8.900000\n10.150000\n2.500000\n1.127020\n16.000000\n\n\nmax\n72.809998\n24.900000\n12.960000\n20.000000\n1.404160\n18.000000\n\n\n\n\n\n\n\nHow is education encoded? Create a binary variable education_binary to replace it.\n\ndf['income'].unique()\n# education variable takes string values (\"high\" or \"low\"). \n\narray(['high', 'low'], dtype=object)\n\n\n\n# we need to convert them into 1 and 0 first\ndf['income_binary'] = (df['income'] == \"high\")*1\n\n\n# other option 1\ndf['incomeb'] = df['income'].map({'high' : 1, 'low': 0})\n\n\n# other option 2\ndf['incomeb'] = (df['income'] == 'high')*1\n\nPlot an histogram of distance to college.\n\nfrom matplotlib import pyplot as plt\nplt.hist(df['distance'])\n\n(array([3241.,  831.,  399.,  156.,   45.,   17.,   10.,   19.,   17.,\n           4.]),\n array([ 0.,  2.,  4.,  6.,  8., 10., 12., 14., 16., 18., 20.]),\n &lt;BarContainer object of 10 artists&gt;)\n\n\n\n\n\n\n\n\n\n\n# same with seaborn\nimport seaborn as sns\nsns.histplot(df['distance'])\n\n\n\n\n\n\n\n\nRun the naive regression \\(\\text{incomeb}=\\beta_0 + \\beta_1 \\text{education} + u\\) using linearmodels. Comment.\n\nfrom linearmodels.iv import IV2SLS # we can use IV2SLS instead of OLS to run regular regressions\n\nformula = \"incomeb ~ education\"\nmodel = IV2SLS.from_formula(formula, df)\nresult = model.fit()\nresult\n\n\nOLS Estimation Summary\n\n\nDep. Variable:\nincomeb\nR-squared:\n0.0480\n\n\nEstimator:\nOLS\nAdj. R-squared:\n0.0478\n\n\nNo. Observations:\n4739\nF-statistic:\n227.43\n\n\nDate:\nWed, Feb 21 2024\nP-value (F-stat)\n0.0000\n\n\nTime:\n15:17:44\nDistribution:\nchi2(1)\n\n\nCov. Estimator:\nrobust\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter Estimates\n\n\n\nParameter\nStd. Err.\nT-stat\nP-value\nLower CI\nUpper CI\n\n\nIntercept\n-0.4780\n0.0499\n-9.5702\n0.0000\n-0.5759\n-0.3801\n\n\neducation\n0.0555\n0.0037\n15.081\n0.0000\n0.0483\n0.0627\n\n\n\nid: 0x7f4a182e7da0\n\n\nWe find that education explains higher income with a significant, but low coefficient 0.05.\nAugment the regression with unemp, hispanic, af-am, female and urban. Notice that categorical variables are encoded automatically. What are the treatment values? Change it using the syntax (C(var,Treatment='ref'))\n\nfrom linearmodels.iv import IV2SLS\n\nformula = \"incomeb ~ education + unemp + gender + ethnicity\"\nmodel = IV2SLS.from_formula(formula, df)\nresult = model.fit()\nresult\n\n\nOLS Estimation Summary\n\n\nDep. Variable:\nincomeb\nR-squared:\n0.0811\n\n\nEstimator:\nOLS\nAdj. R-squared:\n0.0802\n\n\nNo. Observations:\n4739\nF-statistic:\n443.38\n\n\nDate:\nWed, Feb 21 2024\nP-value (F-stat)\n0.0000\n\n\nTime:\n15:17:47\nDistribution:\nchi2(5)\n\n\nCov. Estimator:\nrobust\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter Estimates\n\n\n\nParameter\nStd. Err.\nT-stat\nP-value\nLower CI\nUpper CI\n\n\nIntercept\n-0.4361\n0.0533\n-8.1797\n0.0000\n-0.5406\n-0.3316\n\n\neducation\n0.0511\n0.0037\n13.982\n0.0000\n0.0439\n0.0582\n\n\nunemp\n-0.0111\n0.0022\n-4.9609\n0.0000\n-0.0155\n-0.0067\n\n\ngender[T.male]\n0.0484\n0.0128\n3.7866\n0.0002\n0.0234\n0.0735\n\n\nethnicity[T.hispanic]\n-0.0249\n0.0185\n-1.3425\n0.1794\n-0.0612\n0.0114\n\n\nethnicity[T.other]\n0.1347\n0.0163\n8.2871\n0.0000\n0.1029\n0.1666\n\n\n\nid: 0x7f4a18106ff0\n\n\n\ndf['ethnicity'].unique()\n\narray(['other', 'afam', 'hispanic'], dtype=object)\n\n\nIn the regression above, some variables have been created for each value of the categorical vairables (save for the reference value which doesn’t appear). In the case of variable ethnicity, we see that hispanic and other are two of the three values taken by variable ethnicity. This means that value afam was taken as reference.\nWe can change the reference variable as follows:\n\n# needed only if you use the function Treatment in the formulas\nfrom linearmodels.iv import IV2SLS\n\nformula = \"incomeb ~ education + unemp + C(gender) + C(ethnicity,Treatment(reference='other'))\"\nmodel = IV2SLS.from_formula(formula, df)\nresult = model.fit()\nresult\n\n\nOLS Estimation Summary\n\n\nDep. Variable:\nincomeb\nR-squared:\n0.0811\n\n\nEstimator:\nOLS\nAdj. R-squared:\n0.0802\n\n\nNo. Observations:\n4739\nF-statistic:\n443.38\n\n\nDate:\nWed, Feb 21 2024\nP-value (F-stat)\n0.0000\n\n\nTime:\n15:17:51\nDistribution:\nchi2(5)\n\n\nCov. Estimator:\nrobust\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter Estimates\n\n\n\nParameter\nStd. Err.\nT-stat\nP-value\nLower CI\nUpper CI\n\n\nIntercept\n-0.3014\n0.0540\n-5.5788\n0.0000\n-0.4073\n-0.1955\n\n\neducation\n0.0511\n0.0037\n13.982\n0.0000\n0.0439\n0.0582\n\n\nunemp\n-0.0111\n0.0022\n-4.9609\n0.0000\n-0.0155\n-0.0067\n\n\nC(gender)[T.male]\n0.0484\n0.0128\n3.7866\n0.0002\n0.0234\n0.0735\n\n\nC(ethnicity, Treatment(reference='other'))[T.afam]\n-0.1347\n0.0163\n-8.2871\n0.0000\n-0.1666\n-0.1029\n\n\nC(ethnicity, Treatment(reference='other'))[T.hispanic]\n-0.1596\n0.0149\n-10.710\n0.0000\n-0.1888\n-0.1304\n\n\n\nid: 0x7f4a181d6630\n\n\nComment the results and explain the endogeneity problem\nAdding additional regressors has increased the fit (adj. R^2 from 0.04 to 0.08) without changing the coefficient on the education level. This would imply that regression is robust.\nHowever, we might have an endogeneity issue with some potential other factors explaining both income level and salary (cf many discussions in the course).\nExplain why distance to college might be used to instrument the effect of schooling.\nAssuming that the decision to live in a given county does not depend on the presence of a college nearby, the distance to college should be exogenous.\nThe distance to college is probably correlated with the decision to go so the instrument should have some power (opposite of weak)\nRun an IV regression, where distance is used to instrument schooling.\nlook at: https://bashtage.github.io/linearmodels/ (two-stage least squares)\n\nfrom linearmodels.iv import IV2SLS\n \nformula = \"incomeb ~ [education ~ distance] + unemp + C(gender) + C(ethnicity, Treatment(reference='other'))\"\nmodel = IV2SLS.from_formula(formula, df)\nresult = model.fit()\nresult\n\n\nIV-2SLS Estimation Summary\n\n\nDep. Variable:\nincomeb\nR-squared:\n-0.1339\n\n\nEstimator:\nIV-2SLS\nAdj. R-squared:\n-0.1351\n\n\nNo. Observations:\n4739\nF-statistic:\n1748.5\n\n\nDate:\nWed, Feb 21 2024\nP-value (F-stat)\n0.0000\n\n\nTime:\n15:18:14\nDistribution:\nchi2(6)\n\n\nCov. Estimator:\nrobust\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter Estimates\n\n\n\nParameter\nStd. Err.\nT-stat\nP-value\nLower CI\nUpper CI\n\n\nunemp\n-0.0100\n0.0025\n-3.9704\n0.0001\n-0.0149\n-0.0051\n\n\nC(gender)[T.female]\n-1.9566\n0.5039\n-3.8830\n0.0001\n-2.9441\n-0.9690\n\n\nC(gender)[T.male]\n-1.9109\n0.5042\n-3.7897\n0.0002\n-2.8991\n-0.9226\n\n\nC(ethnicity, Treatment(reference='other'))[T.afam]\n-0.0753\n0.0259\n-2.9005\n0.0037\n-0.1261\n-0.0244\n\n\nC(ethnicity, Treatment(reference='other'))[T.hispanic]\n-0.1247\n0.0203\n-6.1432\n0.0000\n-0.1645\n-0.0849\n\n\neducation\n0.1692\n0.0358\n4.7261\n0.0000\n0.0990\n0.2393\n\n\n\nEndogenous: educationInstruments: distanceRobust Covariance (Heteroskedastic)Debiased: Falseid: 0x7f4a17f31190\n\n\nComment the results.\nThe estimate we get for the return on education is three times higher than without the instrument and highly significant."
  },
  {
    "objectID": "tutorials/session_5/happiness_regression.html",
    "href": "tutorials/session_5/happiness_regression.html",
    "title": "More Regressions",
    "section": "",
    "text": "We will analyse those data to find relationships between the happiness score and economy, family, health, freedom, trust, perception of corruption, generosity…\nThe dataset contains the following variables:\n\nCountry : Country name\nOverall rank : Country ranking based on happiness score\nScore : Individual personal happiness rating from 0 to 10.\nGDP per capita : GDP per capita of each country in terms of purchasing power parity (PPP) (in USD)\nSocial support : Individual rating that determines whether, when you have problems, your family or friends would help you. Binary responses (0 or 1).\nHealthy life expectancy : Healthy life expectancy at birth is based on data from the World Health Organization (WHO)\nFreedom to make life choices : Individual rating that determines whether you are atisfied or dissatisfied with your freedom to choose hat you do with your life. Binary responses (0 or 1).\nGenerosity : Generosity is the residual from the regression of the national mean of responses to the question “Have you donated money to a charity in the last month?” on GDP per capita.\nPerceptions of corruption : Average of binary responses to two GWP questions: corruption in government and corruption in business.\n\n\n\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom statsmodels.formula import api as smf\n\nOpen the csv “happiness_index_2019”\nExplore the dataset by using head function.\nCompute descriptive statistics using a Pandas function\nPlot variables that may have a positive correlation using matplotlib\nPlot the correlation matrix of the main variables using heatmap function of Seaborn package. It should already be installed on your Nuvolos instance (use escpython kernel).\nComment?"
  },
  {
    "objectID": "tutorials/session_5/happiness_regression.html#the-world-happiness-report.",
    "href": "tutorials/session_5/happiness_regression.html#the-world-happiness-report.",
    "title": "More Regressions",
    "section": "",
    "text": "We will analyse those data to find relationships between the happiness score and economy, family, health, freedom, trust, perception of corruption, generosity…\nThe dataset contains the following variables:\n\nCountry : Country name\nOverall rank : Country ranking based on happiness score\nScore : Individual personal happiness rating from 0 to 10.\nGDP per capita : GDP per capita of each country in terms of purchasing power parity (PPP) (in USD)\nSocial support : Individual rating that determines whether, when you have problems, your family or friends would help you. Binary responses (0 or 1).\nHealthy life expectancy : Healthy life expectancy at birth is based on data from the World Health Organization (WHO)\nFreedom to make life choices : Individual rating that determines whether you are atisfied or dissatisfied with your freedom to choose hat you do with your life. Binary responses (0 or 1).\nGenerosity : Generosity is the residual from the regression of the national mean of responses to the question “Have you donated money to a charity in the last month?” on GDP per capita.\nPerceptions of corruption : Average of binary responses to two GWP questions: corruption in government and corruption in business.\n\n\n\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom statsmodels.formula import api as smf\n\nOpen the csv “happiness_index_2019”\nExplore the dataset by using head function.\nCompute descriptive statistics using a Pandas function\nPlot variables that may have a positive correlation using matplotlib\nPlot the correlation matrix of the main variables using heatmap function of Seaborn package. It should already be installed on your Nuvolos instance (use escpython kernel).\nComment?"
  },
  {
    "objectID": "tutorials/session_5/happiness_regression.html#ii-linear-regression",
    "href": "tutorials/session_5/happiness_regression.html#ii-linear-regression",
    "title": "More Regressions",
    "section": "II) Linear regression",
    "text": "II) Linear regression"
  },
  {
    "objectID": "tutorials/session_5/happiness_regression.html#a-simple-linear-regression",
    "href": "tutorials/session_5/happiness_regression.html#a-simple-linear-regression",
    "title": "More Regressions",
    "section": "A) Simple linear regression",
    "text": "A) Simple linear regression\nPerform various linear regressions to predict the Happiness score using one of the variables available in the dataset."
  },
  {
    "objectID": "tutorials/session_5/happiness_regression.html#b-multiple-linear-regression",
    "href": "tutorials/session_5/happiness_regression.html#b-multiple-linear-regression",
    "title": "More Regressions",
    "section": "B) Multiple linear regression",
    "text": "B) Multiple linear regression\nPerform various linear regressions to predict the Happiness score using several of the variables available in the dataset.\nWhat would be the best model?"
  },
  {
    "objectID": "tutorials/session_9/kuznets_correction.html",
    "href": "tutorials/session_9/kuznets_correction.html",
    "title": "CO2 Emissions and the Kusnetz curve",
    "section": "",
    "text": "In this exercise, you must use data from the WorldBank to check whether CO2 Emissions can be explained by income per capita.\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt"
  },
  {
    "objectID": "tutorials/session_9/kuznets_correction.html#data-work",
    "href": "tutorials/session_9/kuznets_correction.html#data-work",
    "title": "CO2 Emissions and the Kusnetz curve",
    "section": "1. Data Work",
    "text": "1. Data Work\n\nImporting CO2 Data\nImport the data from file /files/tutorials/session_9/data/API_EN.ATM.CO2E.PC_DS2_en_csv_v2_5177406.csv as a dataframe df_wide. (This table was downloaded from the worldbank website)\nHints: check the documentation from pandas.read_csv() to avoid the import error. You can check the first few lines of the file by typing in a cell: !/files/tutorials/session_9_wrap_up/data/API_EN.ATM.CO2E.PC_DS2_en_csv_v2_5177406.csv\nHint2: Check that all columns are well defined.\n\npath_data='data/API_EN.ATM.CO2E.PC_DS2_en_csv_v2_5177406.csv'\n\ndf_wide = pd.read_csv(path_data, skiprows=4)\n\n\ndf_wide\n\n\n\n\n\n\n\n\nCountry Name\nCountry Code\nIndicator Name\nIndicator Code\n1960\n1961\n1962\n1963\n1964\n1965\n...\n2013\n2014\n2015\n2016\n2017\n2018\n2019\n2020\n2021\nUnnamed: 66\n\n\n\n\n0\nAruba\nABW\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\nAfrica Eastern and Southern\nAFE\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n0.995665\n1.006938\n0.956704\n0.938565\n0.928508\n0.908094\n0.903764\nNaN\nNaN\nNaN\n\n\n2\nAfghanistan\nAFG\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n0.189910\n0.149162\n0.176278\n0.153019\n0.134106\n0.165455\n0.160976\nNaN\nNaN\nNaN\n\n\n3\nAfrica Western and Central\nAFW\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n0.499219\n0.506918\n0.485478\n0.490807\n0.474882\n0.478305\n0.485884\nNaN\nNaN\nNaN\n\n\n4\nAngola\nAGO\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n1.031093\n1.092216\n1.125224\n1.020760\n0.802751\n0.766143\n0.779203\nNaN\nNaN\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n261\nKosovo\nXKX\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n262\nYemen, Rep.\nYEM\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n1.031352\n0.988351\n0.475163\n0.370636\n0.333285\n0.315682\n0.351859\nNaN\nNaN\nNaN\n\n\n263\nSouth Africa\nZAF\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n8.110093\n8.184427\n7.602659\n7.534968\n7.691396\n7.575040\n7.568640\nNaN\nNaN\nNaN\n\n\n264\nZambia\nZMB\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n0.278307\n0.298009\n0.305264\n0.317276\n0.393686\n0.433396\n0.369958\nNaN\nNaN\nNaN\n\n\n265\nZimbabwe\nZWE\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n0.905911\n0.871840\n0.878139\n0.762487\n0.700965\n0.822472\n0.765894\nNaN\nNaN\nNaN\n\n\n\n\n266 rows × 67 columns\n\n\n\nQuestion 1: Describe briefly the data. \nThe data contains information on the level of carbon dioxide (CO2) emissions per capita (in metric tons) for different countries and regions over the years 1960 to 2019. The data is sourced from the World Bank’s World Development Indicators and is reported annually.\nThe dataset contains 264 rows (corresponding to different countries and regions) and 61 columns (corresponding to the years 1960 to 2019 and additional columns with country and region information). The data is in a wide format, with each row representing a country/region and each column representing a year.\nThe data is useful for analyzing trends in CO2 emissions over time and comparing emissions across countries and regions. It can also be used for exploring the relationship between CO2 emissions and various economic and environmental factors.\n\ndf_wide.describe()\n\n\n\n\n\n\n\n\n1960\n1961\n1962\n1963\n1964\n1965\n1966\n1967\n1968\n1969\n...\n2013\n2014\n2015\n2016\n2017\n2018\n2019\n2020\n2021\nUnnamed: 66\n\n\n\n\ncount\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n...\n239.000000\n239.000000\n239.000000\n239.000000\n239.000000\n239.000000\n239.000000\n0.0\n0.0\n0.0\n\n\nmean\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n4.288766\n4.194242\n4.141210\n4.140690\n4.148584\n4.128191\n4.086604\nNaN\nNaN\nNaN\n\n\nstd\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n5.002821\n4.862196\n4.731198\n4.653372\n4.585664\n4.489473\n4.474616\nNaN\nNaN\nNaN\n\n\nmin\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n0.024987\n0.027090\n0.037289\n0.029718\n0.033815\n0.035826\n0.035704\nNaN\nNaN\nNaN\n\n\n25%\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n0.720891\n0.785259\n0.771880\n0.769068\n0.802179\n0.797275\n0.790333\nNaN\nNaN\nNaN\n\n\n50%\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n2.726281\n2.888558\n2.827949\n2.760181\n2.699348\n2.979403\n2.981762\nNaN\nNaN\nNaN\n\n\n75%\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n6.264131\n6.028664\n5.792812\n5.828931\n6.021844\n5.950694\n5.890683\nNaN\nNaN\nNaN\n\n\nmax\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n37.420762\n36.875726\n35.111798\n33.493040\n32.281678\n31.235406\n32.761775\nNaN\nNaN\nNaN\n\n\n\n\n8 rows × 63 columns\n\n\n\n\n# get rid of last column\ndf_wide = df_wide.iloc[:,:-1]\ndf_wide\n\n\n\n\n\n\n\n\nCountry Name\nCountry Code\nIndicator Name\nIndicator Code\n1960\n1961\n1962\n1963\n1964\n1965\n...\n2011\n2012\n2013\n2014\n2015\n2016\n2017\n2018\n2019\n2020\n\n\n\n\n0\nAruba\nABW\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\nAfrica Eastern and Southern\nAFE\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n0.970188\n0.983547\n0.995665\n1.006938\n0.956704\n0.938565\n0.928508\n0.908094\n0.903764\nNaN\n\n\n2\nAfghanistan\nAFG\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n0.305308\n0.265210\n0.189910\n0.149162\n0.176278\n0.153019\n0.134106\n0.165455\n0.160976\nNaN\n\n\n3\nAfrica Western and Central\nAFW\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n0.468718\n0.472242\n0.499219\n0.506918\n0.485478\n0.490807\n0.474882\n0.478305\n0.485884\nNaN\n\n\n4\nAngola\nAGO\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n0.983960\n0.947663\n1.031093\n1.092216\n1.125224\n1.020760\n0.802751\n0.766143\n0.779203\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n261\nKosovo\nXKX\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n262\nYemen, Rep.\nYEM\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n0.900862\n0.801193\n1.031352\n0.988351\n0.475163\n0.370636\n0.333285\n0.315682\n0.351859\nNaN\n\n\n263\nSouth Africa\nZAF\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n7.803853\n8.030478\n8.110093\n8.184427\n7.602659\n7.534968\n7.691396\n7.575040\n7.568640\nNaN\n\n\n264\nZambia\nZMB\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n0.213798\n0.273319\n0.278307\n0.298009\n0.305264\n0.317276\n0.393686\n0.433396\n0.369958\nNaN\n\n\n265\nZimbabwe\nZWE\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n0.875955\n0.905368\n0.905911\n0.871840\n0.878139\n0.762487\n0.700965\n0.822472\n0.765894\nNaN\n\n\n\n\n266 rows × 65 columns\n\n\n\nThe data contains yearly carbon emissions per capita, for all countries, starting in 1960 until 2021 (with some missing data)\n\n\nCleaning up CO2 Data\nQuestion 2: convert the data into the long format using the function pandas.melt(). The columns of the new table df_long should be: [\"Country Name\",\"Country Code\",\"Indicator Name\",\"Indicator Code\", \"Date\", \"Emissions\"] \n\ndf_long = pd.melt(df_wide,\n        id_vars=[\"Country Name\",\"Country Code\",\"Indicator Name\",\"Indicator Code\"],\n        var_name=\"Date\",\n        value_name=\"Emissions\"\n)\n\n\ndf_long.head()\n\n\n\n\n\n\n\n\nCountry Name\nCountry Code\nIndicator Name\nIndicator Code\nDate\nEmissions\n\n\n\n\n7981\nAfrica Eastern and Southern\nAFE\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\n1990\n0.982136\n\n\n7982\nAfghanistan\nAFG\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\n1990\n0.222538\n\n\n7983\nAfrica Western and Central\nAFW\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\n1990\n0.473669\n\n\n7984\nAngola\nAGO\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\n1990\n0.554586\n\n\n7985\nAlbania\nALB\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\n1990\n1.819542\n\n\n\n\n\n\n\nQuestion 3: Eliminate all rows for which no emission data is available\n\ndf_long = df_long.dropna()\n\nQuestion 4: Convert the Date column into a date format.\nHint: look for pandas.to_datetime() (This is not absolutely mandatory but makes graphs nicer)\n\ndf_long['Date']\n\n7981     1990\n7982     1990\n7983     1990\n7984     1990\n7985     1990\n         ... \n15954    2019\n15956    2019\n15957    2019\n15958    2019\n15959    2019\nName: Date, Length: 7147, dtype: object\n\n\n\ndf_long['Date'] = pd.to_datetime(df_long['Date'])\ndf_long['Date']\n\n7981    1990-01-01\n7982    1990-01-01\n7983    1990-01-01\n7984    1990-01-01\n7985    1990-01-01\n           ...    \n15954   2019-01-01\n15956   2019-01-01\n15957   2019-01-01\n15958   2019-01-01\n15959   2019-01-01\nName: Date, Length: 7147, dtype: datetime64[ns]\n\n\n\n\nImporting World Bank Data\nFrom the world bank website, we download data for historical real gdp and population.\nCheckout the wbdata library. Import time series for GDP and Total Population for all countries.\n\nimport wbdata\n\n\nindicators = {\n    \"NY.GDP.MKTP.CD\": \"GDP\",\n    \"SP.POP.TOTL\": \"Total Population\"\n}\ndf_wb = wbdata.get_dataframe(indicators).reset_index()\ndf_wb\n\n\n\n\n\n\n\n\ncountry\ndate\nGDP\nTotal Population\n\n\n\n\n0\nAfrica Eastern and Southern\n2023\nNaN\nNaN\n\n\n1\nAfrica Eastern and Southern\n2022\n1.185138e+12\n720859132.0\n\n\n2\nAfrica Eastern and Southern\n2021\n1.086531e+12\n702977106.0\n\n\n3\nAfrica Eastern and Southern\n2020\n9.288802e+11\n685112979.0\n\n\n4\nAfrica Eastern and Southern\n2019\n1.006191e+12\n667242986.0\n\n\n...\n...\n...\n...\n...\n\n\n17019\nZimbabwe\n1964\n1.217138e+09\n4310332.0\n\n\n17020\nZimbabwe\n1963\n1.159512e+09\n4177931.0\n\n\n17021\nZimbabwe\n1962\n1.117602e+09\n4049778.0\n\n\n17022\nZimbabwe\n1961\n1.096647e+09\n3925952.0\n\n\n17023\nZimbabwe\n1960\n1.052990e+09\n3806310.0\n\n\n\n\n17024 rows × 4 columns\n\n\n\nQuestion 5: Change the format of column date to datetime.\n\ndf_wb['date'] =  pd.to_datetime(df_wb['date'])\ndf_wb.head()\n\n\n\n\n\n\n\n\ncountry\ndate\nGDP\nTotal Population\n\n\n\n\n0\nAfrica Eastern and Southern\n2023-01-01\nNaN\nNaN\n\n\n1\nAfrica Eastern and Southern\n2022-01-01\n1.185138e+12\n720859132.0\n\n\n2\nAfrica Eastern and Southern\n2021-01-01\n1.086531e+12\n702977106.0\n\n\n3\nAfrica Eastern and Southern\n2020-01-01\n9.288802e+11\n685112979.0\n\n\n4\nAfrica Eastern and Southern\n2019-01-01\n1.006191e+12\n667242986.0\n\n\n\n\n\n\n\nQuestion 6: Change columns of df_wb to [“Country Name”, “Date”, “GDP”, “Population”].\n\ndf_wb.columns =  [\"Country Name\", \"Date\", \"GDP\", \"Population\"]\n\n\ndf_wb.columns\n\nIndex(['Country Name', 'Date', 'GDP', 'Population'], dtype='object')\n\n\n\n\nMerging CO2 and World Bank Data\nQuestion 7: Merge the datafames df_wb and df_long into a single dataframe df_kuznetz.\nWe perform the same steps as in the first part for both series then merge the resulting long databases “on” the Country Code and Date columns.\nYou should obtain one single database data containing the columns [\"Country Name\",\"Country Code\",\"Indicator Name\",\"Indicator Code\",\"Date\", \"Emissions\", \"GDP\", \"Population\"]\n\ndf_kuznets = df_long.merge(df_wb, on=[\"Country Name\",\"Date\"])"
  },
  {
    "objectID": "tutorials/session_9/kuznets_correction.html#data-exploration",
    "href": "tutorials/session_9/kuznets_correction.html#data-exploration",
    "title": "CO2 Emissions and the Kusnetz curve",
    "section": "2. Data exploration",
    "text": "2. Data exploration\n\n2.1 Graphical representation\nQuestion 8: Compute total emissions for each country.\n\n# Let' s compute total emissions (for each year):\n\ndf_kuznets[\"TEmissions\"] = df_kuznets[\"Emissions\"]*df_kuznets[\"Population\"]\n\n\ndf_kuznets.head()\n\n\n\n\n\n\n\n\nCountry Name\nCountry Code\nIndicator Name\nIndicator Code\nDate\nEmissions\nGDP\nPopulation\nTEmissions\n\n\n\n\n0\nAfrica Eastern and Southern\nAFE\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\n1990-01-01\n0.982136\n2.546735e+11\n309890664.0\n3.043549e+08\n\n\n1\nAfghanistan\nAFG\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\n1990-01-01\n0.222538\nNaN\n10694796.0\n2.380000e+06\n\n\n2\nAfrica Western and Central\nAFW\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\n1990-01-01\n0.473669\n1.218036e+11\n206739024.0\n9.792580e+07\n\n\n3\nAngola\nAGO\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\n1990-01-01\n0.554586\n1.123628e+10\n11828638.0\n6.560000e+06\n\n\n4\nAlbania\nALB\nCO2 emissions (metric tons per capita)\nEN.ATM.CO2E.PC\n1990-01-01\n1.819542\n2.028554e+09\n3286542.0\n5.980000e+06\n\n\n\n\n\n\n\n\n# solution 1: loop over each country\nfor country in df_kuznets['Country Name'].unique():\n    df_c = df_kuznets[df_kuznets['Country Name']==country]\n    te = df_c[\"TEmissions\"].sum()\n    print(f\"Total emissions for '{country}': {te}\")\n\nTotal emissions for 'Africa Eastern and Southern': 13404472170.208675\nTotal emissions for 'Afghanistan': 95460000.50544737\nTotal emissions for 'Africa Western and Central': 4638752133.020737\nTotal emissions for 'Angola': 553169997.2534183\nTotal emissions for 'Albania': 112550000.08583067\nTotal emissions for 'Andorra': 14629999.967813494\nTotal emissions for 'Arab World': 37093235321.97194\nTotal emissions for 'United Arab Emirates': 3725519996.948244\nTotal emissions for 'Argentina': 4374320037.231444\nTotal emissions for 'Armenia': 170760000.12397763\nTotal emissions for 'Antigua and Barbuda': 12969999.953508377\nTotal emissions for 'Australia': 10421789732.640446\nTotal emissions for 'Austria': 1971999996.7956543\nTotal emissions for 'Azerbaijan': 979830002.1362305\nTotal emissions for 'Burundi': 8450000.043511389\nTotal emissions for 'Belgium': 3206549994.5068383\nTotal emissions for 'Benin': 93380000.51498412\nTotal emissions for 'Burkina Faso': 53590000.25987626\nTotal emissions for 'Bangladesh': 1166459997.10083\nTotal emissions for 'Bulgaria': 1457500005.0354004\nTotal emissions for 'Bahrain': 627629998.3215332\nTotal emissions for 'Bahamas, The': 73319999.69482425\nTotal emissions for 'Bosnia and Herzegovina': 498559999.6948242\nTotal emissions for 'Belarus': 1852059995.4223633\nTotal emissions for 'Belize': 16319999.951124186\nTotal emissions for 'Bolivia': 398069999.73297113\nTotal emissions for 'Brazil': 10285349940.185558\nTotal emissions for 'Barbados': 42829999.6423721\nTotal emissions for 'Brunei Darussalam': 173419998.85559085\nTotal emissions for 'Bhutan': 12129999.851584433\nTotal emissions for 'Botswana': 131520000.4959107\nTotal emissions for 'Central African Republic': 5859999.993145463\nTotal emissions for 'Canada': 15436500048.82813\nTotal emissions for 'Central Europe and the Baltics': 22260059971.733093\nTotal emissions for 'Switzerland': 1290329992.3706055\nTotal emissions for 'Chile': 1781930004.8828123\nTotal emissions for 'China': 180722829257.81247\nTotal emissions for 'Cote d'Ivoire': 188249999.29428113\nTotal emissions for 'Cameroon': 188960001.33514407\nTotal emissions for 'Congo, Dem. Rep.': 74759999.85218048\nTotal emissions for 'Congo, Rep.': 128630000.61988828\nTotal emissions for 'Colombia': 1904849990.2343743\nTotal emissions for 'Comoros': 4220000.019073484\nTotal emissions for 'Cabo Verde': 10609999.954700474\nTotal emissions for 'Costa Rica': 183859999.52316266\nTotal emissions for 'Caribbean small states': 1034020002.796352\nTotal emissions for 'Cuba': 800550000.6103514\nTotal emissions for 'Cyprus': 208309999.80926514\nTotal emissions for 'Czechia': 3514870001.220703\nTotal emissions for 'Germany': 24367020053.710922\nTotal emissions for 'Djibouti': 11989999.972581863\nTotal emissions for 'Dominica': 4580000.049769873\nTotal emissions for 'Denmark': 1511560003.0517564\nTotal emissions for 'Dominican Republic': 544600000.3814697\nTotal emissions for 'Algeria': 3119610001.2207026\nTotal emissions for 'East Asia & Pacific (excluding high income)': 210861561722.85782\nTotal emissions for 'Early-demographic dividend': 145562461072.3832\nTotal emissions for 'East Asia & Pacific': 284535181803.9547\nTotal emissions for 'Europe & Central Asia (excluding high income)': 86155186226.18817\nTotal emissions for 'Europe & Central Asia': 200014743312.3924\nTotal emissions for 'Ecuador': 868449998.6267085\nTotal emissions for 'Egypt, Arab Rep.': 4778139994.506838\nTotal emissions for 'Euro area': 76501155164.6067\nTotal emissions for 'Spain': 8148009973.144532\nTotal emissions for 'Estonia': 539469997.7493286\nTotal emissions for 'Ethiopia': 201770000.4386903\nTotal emissions for 'European Union': 97925719867.62526\nTotal emissions for 'Fragile and conflict affected situations': 17546817743.23741\nTotal emissions for 'Finland': 1666099990.2343762\nTotal emissions for 'Fiji': 31849999.833107002\nTotal emissions for 'France': 10543269963.378906\nTotal emissions for 'Gabon': 166300000.20980832\nTotal emissions for 'United Kingdom': 14824209992.675781\nTotal emissions for 'Georgia': 261579998.69346607\nTotal emissions for 'Ghana': 272250000.05722034\nTotal emissions for 'Guinea': 58159999.77588653\nTotal emissions for 'Gambia, The': 10709999.989271168\nTotal emissions for 'Guinea-Bissau': 6550000.017881391\nTotal emissions for 'Equatorial Guinea': 156999998.83651733\nTotal emissions for 'Greece': 2522079996.948241\nTotal emissions for 'Grenada': 7829999.977350233\nTotal emissions for 'Guatemala': 318759997.9782105\nTotal emissions for 'Guyana': 52169999.84741211\nTotal emissions for 'High income': 381429144218.1322\nTotal emissions for 'Honduras': 200320001.18255627\nTotal emissions for 'Heavily indebted poor countries (HIPC)': 3573743664.391078\nTotal emissions for 'Croatia': 546570000.9918215\nTotal emissions for 'Haiti': 57419999.87602233\nTotal emissions for 'Hungary': 1587849992.6757812\nTotal emissions for 'IBRD only': 421106618483.8625\nTotal emissions for 'IDA & IBRD total': 441420268999.2764\nTotal emissions for 'IDA total': 18580350306.178776\nTotal emissions for 'IDA blend': 11192485878.57648\nTotal emissions for 'Indonesia': 10537130031.738277\nTotal emissions for 'IDA only': 7250607880.587167\nTotal emissions for 'India': 39882729992.67581\nTotal emissions for 'Ireland': 1160019997.2534175\nTotal emissions for 'Iran, Islamic Rep.': 12940629923.095703\nTotal emissions for 'Iraq': 3115859987.79297\nTotal emissions for 'Iceland': 61519999.81403353\nTotal emissions for 'Israel': 1735090004.8828127\nTotal emissions for 'Italy': 12092299953.613281\nTotal emissions for 'Jamaica': 265480001.6784669\nTotal emissions for 'Jordan': 555120000.3051757\nTotal emissions for 'Japan': 35076589707.03126\nTotal emissions for 'Kazakhstan': 5781750007.934571\nTotal emissions for 'Kenya': 312409999.38964856\nTotal emissions for 'Kyrgyz Republic': 250470001.62124643\nTotal emissions for 'Cambodia': 136179999.8855591\nTotal emissions for 'Kiribati': 1460000.002682209\nTotal emissions for 'St. Kitts and Nevis': 6769999.985694885\nTotal emissions for 'Korea, Rep.': 14407270002.441402\nTotal emissions for 'Kuwait': 1847130003.2043457\nTotal emissions for 'Latin America & Caribbean (excluding high income)': 33888466716.879837\nTotal emissions for 'Lao PDR': 120899998.85082251\nTotal emissions for 'Lebanon': 545699999.2752075\nTotal emissions for 'Liberia': 20639999.970197685\nTotal emissions for 'Libya': 1412920000.9155276\nTotal emissions for 'St. Lucia': 13999999.854564665\nTotal emissions for 'Latin America & Caribbean': 41457734332.9309\nTotal emissions for 'Least developed countries: UN classification': 5059057141.458361\nTotal emissions for 'Low income': 5012888259.405353\nTotal emissions for 'Liechtenstein': 6000000.012516974\nTotal emissions for 'Sri Lanka': 379898067.4122288\nTotal emissions for 'Lower middle income': 98016438244.47752\nTotal emissions for 'Low & middle income': 424716971152.3774\nTotal emissions for 'Lesotho': 14489999.991655348\nTotal emissions for 'Late-demographic dividend': 300556353021.18164\nTotal emissions for 'Lithuania': 421159999.65667725\nTotal emissions for 'Luxembourg': 301879997.253418\nTotal emissions for 'Latvia': 266580000.34332278\nTotal emissions for 'Morocco': 1292710004.2724612\nTotal emissions for 'Moldova': 312960001.56402576\nTotal emissions for 'Madagascar': 58730000.0\nTotal emissions for 'Maldives': 24459999.809265155\nTotal emissions for 'Middle East & North Africa': 51448783593.49841\nTotal emissions for 'Mexico': 12061159943.847656\nTotal emissions for 'Middle income': 421343696273.93274\nTotal emissions for 'North Macedonia': 261080000.95367432\nTotal emissions for 'Mali': 57979999.38964845\nTotal emissions for 'Malta': 69689999.53746796\nTotal emissions for 'Myanmar': 356640002.72750866\nTotal emissions for 'Middle East & North Africa (excluding high income)': 30549771751.404892\nTotal emissions for 'Montenegro': 58259999.651908875\nTotal emissions for 'Mongolia': 400310000.3051756\nTotal emissions for 'Mozambique': 83620000.10490419\nTotal emissions for 'Mauritania': 59070000.0667572\nTotal emissions for 'Mauritius': 84436126.501589\nTotal emissions for 'Malawi': 25650000.066757202\nTotal emissions for 'Malaysia': 4726920022.583006\nTotal emissions for 'North America': 173811979552.8526\nTotal emissions for 'Niger': 32690000.021457683\nTotal emissions for 'Nigeria': 2851099994.2016597\nTotal emissions for 'Nicaragua': 119380000.4196167\nTotal emissions for 'Netherlands': 4828429971.92383\nTotal emissions for 'Norway': 1087909998.4741213\nTotal emissions for 'Nepal': 136439998.78883356\nTotal emissions for 'Nauru': 2259999.990910291\nTotal emissions for 'New Zealand': 896769999.3133546\nTotal emissions for 'OECD members': 369789151172.5048\nTotal emissions for 'Oman': 1173599988.7847903\nTotal emissions for 'Other small states': 3905384609.417043\nTotal emissions for 'Pakistan': 3644140003.3569345\nTotal emissions for 'Panama': 213220000.43869013\nTotal emissions for 'Peru': 1082419998.550415\nTotal emissions for 'Philippines': 2406870005.798341\nTotal emissions for 'Papua New Guinea': 129339999.70436095\nTotal emissions for 'Poland': 9427509987.792973\nTotal emissions for 'Pre-demographic dividend': 9276277144.682013\nTotal emissions for 'Korea, Dem. People's Rep.': 2000129989.6240237\nTotal emissions for 'Portugal': 1588619999.0844727\nTotal emissions for 'Paraguay': 136610000.84877014\nTotal emissions for 'Pacific island small states': 70741718.58012676\nTotal emissions for 'Post-demographic dividend': 350760303482.3914\nTotal emissions for 'Qatar': 1398360010.3759763\nTotal emissions for 'Romania': 2911399988.0981445\nTotal emissions for 'Russian Federation': 50028669951.171906\nTotal emissions for 'Rwanda': 20270000.09536743\nTotal emissions for 'South Asia': 45343400845.31007\nTotal emissions for 'Saudi Arabia': 10411920042.72461\nTotal emissions for 'Sudan': 332709999.0272522\nTotal emissions for 'Senegal': 170990000.3242493\nTotal emissions for 'Singapore': 1201560001.3732905\nTotal emissions for 'Solomon Islands': 8430000.040531162\nTotal emissions for 'Sierra Leone': 16709999.892711634\nTotal emissions for 'El Salvador': 177360000.49591056\nTotal emissions for 'Somalia': 18379999.940395355\nTotal emissions for 'Serbia': 1451359998.1689453\nTotal emissions for 'Sub-Saharan Africa (excluding high income)': 18032804102.318497\nTotal emissions for 'South Sudan': 28209999.87840655\nTotal emissions for 'Sub-Saharan Africa': 18043772943.966446\nTotal emissions for 'Small states': 5011130172.532069\nTotal emissions for 'Sao Tome and Principe': 2439999.9956786614\nTotal emissions for 'Suriname': 58950000.26226043\nTotal emissions for 'Slovak Republic': 1143979996.3378909\nTotal emissions for 'Slovenia': 443170001.83105457\nTotal emissions for 'Sweden': 1479820005.645752\nTotal emissions for 'Eswatini': 20219999.961853024\nTotal emissions for 'Seychelles': 10969999.896287914\nTotal emissions for 'Syrian Arab Republic': 1275749998.168946\nTotal emissions for 'Chad': 28950000.39577481\nTotal emissions for 'East Asia & Pacific (IDA & IBRD countries)': 208866163833.433\nTotal emissions for 'Europe & Central Asia (IDA & IBRD countries)': 99031617869.10379\nTotal emissions for 'Togo': 48429999.98092651\nTotal emissions for 'Thailand': 5962840003.66211\nTotal emissions for 'Tajikistan': 127070000.65803534\nTotal emissions for 'Turkmenistan': 1524150001.8310547\nTotal emissions for 'Latin America & the Caribbean (IDA & IBRD countries)': 39929189946.39128\nTotal emissions for 'Middle East & North Africa (IDA & IBRD countries)': 30220799912.348984\nTotal emissions for 'Tonga': 3459999.9824166265\nTotal emissions for 'South Asia (IDA & IBRD)': 45343400845.31007\nTotal emissions for 'Sub-Saharan Africa (IDA & IBRD countries)': 18043772943.966446\nTotal emissions for 'Trinidad and Tobago': 471790001.86920196\nTotal emissions for 'Tunisia': 688229999.6185304\nTotal emissions for 'Turkiye': 7610738125.918941\nTotal emissions for 'Tuvalu': 299999.9959766866\nTotal emissions for 'Tanzania': 177129998.37875354\nTotal emissions for 'Uganda': 75739999.98092654\nTotal emissions for 'Ukraine': 9787780028.076176\nTotal emissions for 'Upper middle income': 345819862778.84344\nTotal emissions for 'Uruguay': 176480000.41961676\nTotal emissions for 'United States': 158317880683.59372\nTotal emissions for 'Uzbekistan': 3472670014.038089\nTotal emissions for 'St. Vincent and the Grenadines': 7010000.029802322\nTotal emissions for 'Venezuela, RB': 4126760028.0761766\nTotal emissions for 'Vanuatu': 3199999.978840349\nTotal emissions for 'World': 812874344727.8098\nTotal emissions for 'Samoa': 5420000.022053717\nTotal emissions for 'Yemen, Rep.': 484140003.2043458\nTotal emissions for 'South Africa': 10590620035.40039\nTotal emissions for 'Zambia': 94410000.32901764\nTotal emissions for 'Zimbabwe': 381210002.19345087\nTotal emissions for 'Namibia': 78659999.79972847\nTotal emissions for 'Eritrea': 18240000.00357628\nTotal emissions for 'Micronesia, Fed. Sts.': 3870000.0005960404\nTotal emissions for 'Marshall Islands': 3570000.0324845244\nTotal emissions for 'Palau': 6159999.950528143\nTotal emissions for 'Timor-Leste': 6330000.028014186\n\n\n\n# solution 2: use groupby\ntotal_emissions_per_country = df_kuznets.groupby('Country Name')['TEmissions'].sum()\ntotal_emissions_per_country\n\nCountry Name\nAfghanistan                    9.546000e+07\nAfrica Eastern and Southern    1.340447e+10\nAfrica Western and Central     4.638752e+09\nAlbania                        1.125500e+08\nAlgeria                        3.119610e+09\n                                   ...     \nVenezuela, RB                  4.126760e+09\nWorld                          8.128743e+11\nYemen, Rep.                    4.841400e+08\nZambia                         9.441000e+07\nZimbabwe                       3.812100e+08\nName: TEmissions, Length: 238, dtype: float64\n\n\nQuestion 9: Plot the evolution over time of total recorded carbon emissions (ommiting dates where no information is available).\nHint: use groupby()\n\ntotal_emissions_per_year = df_kuznets.groupby('Date')['TEmissions'].sum()\ntotal_emissions_per_year.head()\n\nDate\n1990-01-01    1.774377e+11\n1991-01-01    1.788978e+11\n1992-01-01    1.788542e+11\n1993-01-01    1.798608e+11\n1994-01-01    1.801915e+11\nName: TEmissions, dtype: float64\n\n\n\nfrom matplotlib import pyplot as plt\ntotal_emissions_per_year.plot()\nplt.title(\"Total Carbon Emissions (world)\")\n\nText(0.5, 1.0, 'Total Carbon Emissions (world)')\n\n\n\n\n\n\n\n\n\n\n# to get the cumulated emissions\ntotal_emissions_per_year.cumsum().plot()\nplt.title(\"Cumulated Carbon Emissions (world)\")\n\nText(0.5, 1.0, 'Cumulated Carbon Emissions (world)')\n\n\n\n\n\n\n\n\n\n(optional) Question 10 : Propose some plots to visualize the contribution of the main contributors to yearly carbon emissions and to cumulative carbon emissions. You can get inspiration from ourworldindata.\nWe could use a pie Chart of Global Emissions by Top 10 Emitters. This plot would show us the percentage of global carbon emissions of the top 10 emitters, with each country’s contribution shown as a colored segment of a pie chart in order to provide the relative contributions of each country to global emissions. We could also use an area chart of cumulative emissions by top emitters: This plot shows the cumulative carbon emissions over time for the top emitters, with each country’s contribution shown as a colored area of a stacked area chart. This plot allows for easy comparison of the contributions of different countries to cumulative emissions.\n\n\n2.2 Geo-analysis\n\nfrom plotly import express as px\n\n\n2.2.1. Total emissions per country\nQuestion 11 : Change the following piece of code so that it represents, total emission per country (over time).\n\n# we need to replace emissions per capita by \"total emissions\" (`TEmissions`)\n\n\nemissions_per_country=df_kuznets[df_kuznets['TEmissions'].notnull()].groupby([\"Country Name\",\"Country Code\"])['TEmissions'].sum().reset_index()\nemissions_per_country\n\n\n\n\n\n\n\n\nCountry Name\nCountry Code\nTEmissions\n\n\n\n\n0\nAfghanistan\nAFG\n9.546000e+07\n\n\n1\nAfrica Eastern and Southern\nAFE\n1.340447e+10\n\n\n2\nAfrica Western and Central\nAFW\n4.638752e+09\n\n\n3\nAlbania\nALB\n1.125500e+08\n\n\n4\nAlgeria\nDZA\n3.119610e+09\n\n\n...\n...\n...\n...\n\n\n233\nVenezuela, RB\nVEN\n4.126760e+09\n\n\n234\nWorld\nWLD\n8.128743e+11\n\n\n235\nYemen, Rep.\nYEM\n4.841400e+08\n\n\n236\nZambia\nZMB\n9.441000e+07\n\n\n237\nZimbabwe\nZWE\n3.812100e+08\n\n\n\n\n238 rows × 3 columns\n\n\n\n\nfig = px.choropleth(emissions_per_country, \n                    locations=\"Country Code\",\n                    color=\"TEmissions\", # lifeExp is a column of gapminder\n                    hover_name=\"Country Name\", # column to add to hover information\n                    color_continuous_scale='YlOrRd',\n                    title=\"Total Emissions per Country (1990-2019)\")\nfig.update_layout(width=900, height=500)\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n\n2.2.3 Emission evolution per country\nThe following plot represents the evolution of CO2 emission per capita for various countries.\n\n#Difference between the first and the last date, per country\nevol_per_country = df_long.groupby(['Country Name',\"Country Code\"])['Emissions'].agg(['first', 'last']).reset_index()\n\n# CO2 emission evolution\nevol_per_country['Evolution'] = evol_per_country['last'] - evol_per_country['first']\n\n\ndf_long['Date'].min(),df_long['Date'].max(),\n\n(Timestamp('1990-01-01 00:00:00'), Timestamp('2019-01-01 00:00:00'))\n\n\n\nfig = px.choropleth(evol_per_country, locations=\"Country Code\",\n                    color=\"Evolution\", # lifeExp is a column of gapminder\n                    hover_name=\"Country Name\", # column to add to hover information\n                    color_continuous_scale='YlOrRd',\n                    title=\"Increase of Emissions per Capita (1990-2019)\"\n                   )\nfig.update_layout(width=900, height=500)\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\nQuestion 12 : Adapt the preceding piece of code so that it represents, the evolution of total emission per country.\n\n#Difference between the first and the last date, per country\nevol_per_country_total = df_kuznets.groupby(['Country Name',\"Country Code\"])['TEmissions'].agg(['first', 'last']).reset_index()\n\n# CO2 emission evolution\nevol_per_country_total['Evolution'] = evol_per_country_total['last'] - evol_per_country_total['first']\n\n\nfig = px.choropleth(evol_per_country_total, locations=\"Country Code\",\n                    color=\"Evolution\", # lifeExp is a column of gapminder\n                    hover_name=\"Country Name\", # column to add to hover information\n                    color_continuous_scale='YlOrRd',\n                    title=\"Increase in total Emissions (1990-2019)\"\n)\n\nfig.update_layout(width=900, height=500)\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json"
  },
  {
    "objectID": "tutorials/session_9/kuznets_correction.html#the-kusnetz-curve",
    "href": "tutorials/session_9/kuznets_correction.html#the-kusnetz-curve",
    "title": "CO2 Emissions and the Kusnetz curve",
    "section": "3. The Kusnetz curve",
    "text": "3. The Kusnetz curve\nWe are now interested in the relation between carbon emission and economic development. To this purpose, we would like to run a simple regression\n\\[\\frac{ \\text{emissions}_{i t} }{ \\text{population}_{i t} } = \\alpha + \\beta*\\frac{ \\text{gdp}_{i t}}{\\text{population}_{i t}} + \\text{other factors}_{i t}\\]\nwhere \\(i\\) is the country index and \\(t\\) the time index. In a first step we will simply assume that the total effect of all other factors is normally distributed.\nWe would then like to consider variants of this regression in order to test the environment Kuznets curve hypothesis.\nQuestion 10: Briefly summarize the environmental Kuznets curve hypothesis\n(hint: perform a small websearch. Try to identify your sources)\nThe Environmental Kuznets Curve hypothesis postulates an inverted-U-shaped relationship between different pollutants and per capita income, i.e., environmental pressure increases up to a certain level as income goes up; after that, it decreases. The environmental pollution increases at the beginning of economic growth. However, when it passes a certain level of income, the economic growth allows environmental remediation. from Environmental Kuznets Curve: The Evidence from BSEC Countries* - / EGE ACADEMIC REVIEW and “Environmental Kuznets Curve Hypothesis: A Survey” from Ecological Economics\nQuestion 11: Regress per capita emissions on gdp per capita and comment.\n\nfrom statsmodels.formula import api as smf\ndf_kuznets['GDP_per_capita']=df_kuznets['GDP']/1000/df_kuznets['Population']\n#on divise le PIB par mille car c'est en million et la population est en milliers\n\n\nmodel=smf.ols(\" Emissions ~ GDP_per_capita \", df_kuznetz)\nres=model.fit()\nres.summary()\n\nThe estimated regresssion is emissions per capita = 2,45+ 0,1852 gdp per capita. Both the intercept and the coefficient are significant, indicating that higher GDP per capita is associated with higher per capita emissions, holding other factors constant. The R-squared of the model is relatively low at 0.334, suggesting that other factors not included in the model may also be important in explaining per capita emissions.\nQuestion 12: Split the sample into the three quantiles, based on gdp/capita in the last period. Run the same regression in all three subsamples. Comment.\n\ndf_kuznets['Quantile']= pd.qcut(df_kuznets['GDP_per_capita'],q = 3, labels=['low', 'medium', 'high'])\nmodel_low=smf.ols(\" Emissions ~ GDP_per_capita \", df_kuznets[df_kuznets['Quantile'] == \"low\"])\nres_low=model_low.fit()\nres_low.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nEmissions\nR-squared:\n0.080\n\n\nModel:\nOLS\nAdj. R-squared:\n0.080\n\n\nMethod:\nLeast Squares\nF-statistic:\n200.1\n\n\nDate:\nSun, 07 Apr 2024\nProb (F-statistic):\n1.27e-43\n\n\nTime:\n23:03:16\nLog-Likelihood:\n-4015.4\n\n\nNo. Observations:\n2303\nAIC:\n8035.\n\n\nDf Residuals:\n2301\nBIC:\n8046.\n\n\nDf Model:\n1\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n0.0768\n0.064\n1.205\n0.228\n-0.048\n0.202\n\n\nGDP_per_capita\n1.1274\n0.080\n14.145\n0.000\n0.971\n1.284\n\n\n\n\n\n\n\n\nOmnibus:\n1826.266\nDurbin-Watson:\n1.594\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n34369.056\n\n\nSkew:\n3.736\nProb(JB):\n0.00\n\n\nKurtosis:\n20.388\nCond. No.\n4.30\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\nmodel_medium=smf.ols(\" Emissions ~ GDP_per_capita \", df_kuznets[df_kuznets['Quantile'] == \"medium\"])\nres_medium=model_medium.fit()\nres_medium.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nEmissions\nR-squared:\n0.093\n\n\nModel:\nOLS\nAdj. R-squared:\n0.093\n\n\nMethod:\nLeast Squares\nF-statistic:\n236.0\n\n\nDate:\nSun, 07 Apr 2024\nProb (F-statistic):\n8.79e-51\n\n\nTime:\n23:03:47\nLog-Likelihood:\n-5186.0\n\n\nNo. Observations:\n2299\nAIC:\n1.038e+04\n\n\nDf Residuals:\n2297\nBIC:\n1.039e+04\n\n\nDf Model:\n1\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n1.1684\n0.124\n9.443\n0.000\n0.926\n1.411\n\n\nGDP_per_capita\n0.5272\n0.034\n15.364\n0.000\n0.460\n0.594\n\n\n\n\n\n\n\n\nOmnibus:\n922.711\nDurbin-Watson:\n1.907\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n3721.972\n\n\nSkew:\n1.961\nProb(JB):\n0.00\n\n\nKurtosis:\n7.844\nCond. No.\n9.87\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\nmodel_high=smf.ols(\" Emissions ~ GDP_per_capita \", df_kuznets[df_kuznets['Quantile'] == \"high\"])\nres_high=model_high.fit()\nres_high.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nEmissions\nR-squared:\n0.077\n\n\nModel:\nOLS\nAdj. R-squared:\n0.077\n\n\nMethod:\nLeast Squares\nF-statistic:\n192.4\n\n\nDate:\nSun, 07 Apr 2024\nProb (F-statistic):\n4.44e-42\n\n\nTime:\n23:04:03\nLog-Likelihood:\n-7386.5\n\n\nNo. Observations:\n2302\nAIC:\n1.478e+04\n\n\nDf Residuals:\n2300\nBIC:\n1.479e+04\n\n\nDf Model:\n1\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n6.8578\n0.194\n35.438\n0.000\n6.478\n7.237\n\n\nGDP_per_capita\n0.0824\n0.006\n13.872\n0.000\n0.071\n0.094\n\n\n\n\n\n\n\n\nOmnibus:\n1125.974\nDurbin-Watson:\n1.959\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n7949.756\n\n\nSkew:\n2.210\nProb(JB):\n0.00\n\n\nKurtosis:\n10.958\nCond. No.\n50.5\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\nThese three linear regressions show us that the higher the GDP per capita of countries, the higher the R-squared. This means that the model is more predictive for countries with a “high” GDP, the higher their GDP per capita, the higher their per capita emissions. This partly confirms the Kuznetz curve hypothesis\nQuestion 13. Instead of splitting the sample, run a nonlinear regression:\n\\[\\frac{ \\text{emissions}_{i t} }{ \\text{population}_{i t} } = \\alpha + \\beta_1*\\frac{ \\text{gdp}_{i t}}{\\text{population}_{i t}} + \\beta_2*\\left( \\frac{ \\text{gdp}_{i t}}{\\text{population}_{i t}} \\right)^2 + \\text{other factors}_{i t}\\]\nJustify why \\(\\beta_2&lt;0\\) can be interpreted as a proof of the environmental Kuznets hypothesis. Comment.\n\nimport numpy as np\nnonlinear_regression=smf.ols('Emissions ~ GDP_per_capita + np.power(GDP_per_capita, 2)',df_kuznets)\nres_nl=nonlinear_regression.fit()\nres_nl.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nEmissions\nR-squared:\n0.465\n\n\nModel:\nOLS\nAdj. R-squared:\n0.465\n\n\nMethod:\nLeast Squares\nF-statistic:\n2997.\n\n\nDate:\nSun, 07 Apr 2024\nProb (F-statistic):\n0.00\n\n\nTime:\n23:04:36\nLog-Likelihood:\n-19043.\n\n\nNo. Observations:\n6904\nAIC:\n3.809e+04\n\n\nDf Residuals:\n6901\nBIC:\n3.811e+04\n\n\nDf Model:\n2\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n1.5058\n0.058\n25.901\n0.000\n1.392\n1.620\n\n\nGDP_per_capita\n0.3718\n0.005\n69.641\n0.000\n0.361\n0.382\n\n\nnp.power(GDP_per_capita, 2)\n-0.0024\n5.77e-05\n-41.234\n0.000\n-0.002\n-0.002\n\n\n\n\n\n\n\n\nOmnibus:\n4635.223\nDurbin-Watson:\n1.906\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n102447.422\n\n\nSkew:\n2.899\nProb(JB):\n0.00\n\n\nKurtosis:\n20.959\nCond. No.\n1.96e+03\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.[2] The condition number is large, 1.96e+03. This might indicate that there arestrong multicollinearity or other numerical problems.\n\n\nThe coefficient on the quadratic term, 𝛽2, is negative, standing at -0,0024, which support the hypothesis that the relationship between emissions and GDP per capita is U-shaped and consistent with the EKH.\n(Bonus) Suggest a way to improve the regression.\nthis result alone does not provide conclusive proof of the EKH, as the coefficient is not statistically significant and as there may be other factors that influence the relationship between emissions and GDP per capita"
  },
  {
    "objectID": "slides/session_6/graphs/inference.html",
    "href": "slides/session_6/graphs/inference.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "from matplotlib import pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n\ndef generate_dataset(μ1, μ2, α, β, σ, N=10):\n    xvec = np.random.uniform(μ1, μ2, N)\n    yvec = α + β*xvec + np.random.normal(size=N)*σ\n    return pd.DataFrame({'x': xvec, 'y': yvec})\n\n\ndf = generate_dataset(0.0, 1.0, 0.1, 0.8, 0.1)\n\n\nplt.plot(df['x'], df['y'], 'o')\nplt.grid()\n\n\n\n\n\n\n\n\n\ndef plot_distribution(α, β, σ, N=100000, μ1=0.0, μ2=1.0):\n    xvec = np.random.uniform(μ1, μ2, N)\n    yvec = α + β*xvec + np.random.normal(size=N)*σ\n    plt.plot(xvec, yvec, '.r', alpha=0.005)\n    plt.plot(xvec, α + β*xvec, color='black')\n\n# missing ridge line\n\n\nimport statsmodels\n\n\nμ1 = 0\nμ2 = 1.0\nα = 0.1\nβ = 0.8\nσ = 0.2\nN = 20\nK = 1000\n\n\nimport statsmodels.formula.api as smf\n\n\ndf = generate_dataset(μ1, μ2, α, β, σ, N=N)\n\n\nres = smf.ols(formula='y ~ x + 1', data=df).fit()\nparams = res.params\nαhat = params['Intercept']\nβhat = params['x']\nσhat = res.resid.std()\n\n\nres.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\ny\nR-squared:\n0.692\n\n\nModel:\nOLS\nAdj. R-squared:\n0.675\n\n\nMethod:\nLeast Squares\nF-statistic:\n40.48\n\n\nDate:\nTue, 26 Jan 2021\nProb (F-statistic):\n5.41e-06\n\n\nTime:\n04:02:36\nLog-Likelihood:\n7.6662\n\n\nNo. Observations:\n20\nAIC:\n-11.33\n\n\nDf Residuals:\n18\nBIC:\n-9.341\n\n\nDf Model:\n1\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n0.1210\n0.077\n1.565\n0.135\n-0.041\n0.283\n\n\nx\n0.7941\n0.125\n6.362\n0.000\n0.532\n1.056\n\n\n\n\n\n\n\n\nOmnibus:\n1.410\nDurbin-Watson:\n1.507\n\n\nProb(Omnibus):\n0.494\nJarque-Bera (JB):\n0.890\n\n\nSkew:\n-0.081\nProb(JB):\n0.641\n\n\nKurtosis:\n1.979\nCond. No.\n4.20\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\nres.predict(df['x'])\n\n0     0.326200\n1     0.211704\n2     0.798819\n3     0.603306\n4     0.573319\n5     0.823919\n6     0.740622\n7     0.503227\n8     0.292622\n9     0.489566\n10    0.138720\n11    0.355157\n12    0.594171\n13    0.883917\n14    0.266229\n15    0.827021\n16    0.912376\n17    0.163088\n18    0.684858\n19    0.732782\ndtype: float64\n\n\n\nfor i in [1,2,3]:\n    \n    fig = plt.figure(figsize=(10,14))\n    plt.subplot(311)\n    plot_distribution(0.1, 0.8, 0.2)\n    plt.grid()\n    plt.title(f\"True Distribution: $y = {α:.2f} + {β:.2f} x + {σ:.2f} u$\")\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n\n    plt.subplot(312)\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n    if i&gt;=2:\n        plt.plot(df['x'], df['y'], 'o')\n    if i&gt;=3:\n        plt.plot(df['x'], res.predict(), label=f'$\\hat{{α}}={αhat:.2f}; \\hat{{β}}={βhat:.2f}$')\n        plt.legend(loc='lower right')\n    plt.title(\"Random Draw\")\n    plt.grid()\n    \n    plt.savefig(f\"regression_uncertainty_{i}.png\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport scipy.stats\n\n\ndatasets = [generate_dataset(μ1, μ2, αhat, βhat, σhat, N=N) for i in range(K)]\nall_params = [smf.ols(formula='x ~ y + 1', data=df).fit() for df in datasets]\nαvec = np.array( [e.params['Intercept'] for e in all_params] )\nβvec = np.array( [e.params['y'] for e in all_params] )\n\n\ngkd = scipy.stats.kde.gaussian_kde(βvec)\n\n\nfor i in [1,2,3,4,5,6,7,8,9,10,100]:\n\n    fig = plt.figure(figsize=(10,14))\n    plt.subplot(311)\n    plot_distribution(0.1, 0.8, 0.2)\n    plt.grid()\n    plt.title(f\"True Distribution: $y = {αhat:.2f} + {βhat:.2f} x + {σhat:.2f} u$\")\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n    \n    plt.subplot(312)\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n    df = datasets[i]\n    if i&gt;=2:\n        plt.plot(df['x'], df['y'], 'o')\n    plt.title(\"Random Draw\")\n    plt.grid()\n\n    plt.subplot(313)\n    if i==3:\n        plt.plot(βvec[i], βvec[i]*0, 'o')\n    if i&gt;4:\n        plt.plot(βvec[3:i], βvec[3:i]*0, 'o')\n    if i&gt;10:\n        xx = np.linspace(0.2, 1.4, 10000)\n        plt.plot( βvec, gkd.pdf(βvec), '.')\n    plt.title(\"Distribution of β\")\n    plt.xlim(0.2, 1.4)\n    plt.ylim(-0.1, 4)\n    plt.grid()\n\n    plt.tight_layout()\n\n    plt.savefig(f\"random_estimates_{i}.png\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplt.plot( βvec, βvec*0, 'o')"
  },
  {
    "objectID": "slides/session_10/index_handout.html",
    "href": "slides/session_10/index_handout.html",
    "title": "Final Exam 🤞",
    "section": "",
    "text": "Come back later!.",
    "crumbs": [
      "lectures",
      "Final Exam 🤞"
    ]
  },
  {
    "objectID": "slides/session_7/graphs/inference.html",
    "href": "slides/session_7/graphs/inference.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "from matplotlib import pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n\ndef generate_dataset(μ1, μ2, α, β, σ, N=10):\n    xvec = np.random.uniform(μ1, μ2, N)\n    yvec = α + β*xvec + np.random.normal(size=N)*σ\n    return pd.DataFrame({'x': xvec, 'y': yvec})\n\n\ndf = generate_dataset(0.0, 1.0, 0.1, 0.8, 0.1)\n\n\nplt.plot(df['x'], df['y'], 'o')\nplt.grid()\n\n\n\n\n\n\n\n\n\ndef plot_distribution(α, β, σ, N=100000, μ1=0.0, μ2=1.0):\n    xvec = np.random.uniform(μ1, μ2, N)\n    yvec = α + β*xvec + np.random.normal(size=N)*σ\n    plt.plot(xvec, yvec, '.r', alpha=0.005)\n    plt.plot(xvec, α + β*xvec, color='black')\n\n# missing ridge line\n\n\nimport statsmodels\n\n\nμ1 = 0\nμ2 = 1.0\nα = 0.1\nβ = 0.8\nσ = 0.2\nN = 20\nK = 1000\n\n\nimport statsmodels.formula.api as smf\n\n\ndf = generate_dataset(μ1, μ2, α, β, σ, N=N)\n\n\nres = smf.ols(formula='y ~ x + 1', data=df).fit()\nparams = res.params\nαhat = params['Intercept']\nβhat = params['x']\nσhat = res.resid.std()\n\n\nres.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\ny\nR-squared:\n0.692\n\n\nModel:\nOLS\nAdj. R-squared:\n0.675\n\n\nMethod:\nLeast Squares\nF-statistic:\n40.48\n\n\nDate:\nTue, 26 Jan 2021\nProb (F-statistic):\n5.41e-06\n\n\nTime:\n04:02:36\nLog-Likelihood:\n7.6662\n\n\nNo. Observations:\n20\nAIC:\n-11.33\n\n\nDf Residuals:\n18\nBIC:\n-9.341\n\n\nDf Model:\n1\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n0.1210\n0.077\n1.565\n0.135\n-0.041\n0.283\n\n\nx\n0.7941\n0.125\n6.362\n0.000\n0.532\n1.056\n\n\n\n\n\n\n\n\nOmnibus:\n1.410\nDurbin-Watson:\n1.507\n\n\nProb(Omnibus):\n0.494\nJarque-Bera (JB):\n0.890\n\n\nSkew:\n-0.081\nProb(JB):\n0.641\n\n\nKurtosis:\n1.979\nCond. No.\n4.20\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\nres.predict(df['x'])\n\n0     0.326200\n1     0.211704\n2     0.798819\n3     0.603306\n4     0.573319\n5     0.823919\n6     0.740622\n7     0.503227\n8     0.292622\n9     0.489566\n10    0.138720\n11    0.355157\n12    0.594171\n13    0.883917\n14    0.266229\n15    0.827021\n16    0.912376\n17    0.163088\n18    0.684858\n19    0.732782\ndtype: float64\n\n\n\nfor i in [1,2,3]:\n    \n    fig = plt.figure(figsize=(10,14))\n    plt.subplot(311)\n    plot_distribution(0.1, 0.8, 0.2)\n    plt.grid()\n    plt.title(f\"True Distribution: $y = {α:.2f} + {β:.2f} x + {σ:.2f} u$\")\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n\n    plt.subplot(312)\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n    if i&gt;=2:\n        plt.plot(df['x'], df['y'], 'o')\n    if i&gt;=3:\n        plt.plot(df['x'], res.predict(), label=f'$\\hat{{α}}={αhat:.2f}; \\hat{{β}}={βhat:.2f}$')\n        plt.legend(loc='lower right')\n    plt.title(\"Random Draw\")\n    plt.grid()\n    \n    plt.savefig(f\"regression_uncertainty_{i}.png\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport scipy.stats\n\n\ndatasets = [generate_dataset(μ1, μ2, αhat, βhat, σhat, N=N) for i in range(K)]\nall_params = [smf.ols(formula='x ~ y + 1', data=df).fit() for df in datasets]\nαvec = np.array( [e.params['Intercept'] for e in all_params] )\nβvec = np.array( [e.params['y'] for e in all_params] )\n\n\ngkd = scipy.stats.kde.gaussian_kde(βvec)\n\n\nfor i in [1,2,3,4,5,6,7,8,9,10,100]:\n\n    fig = plt.figure(figsize=(10,14))\n    plt.subplot(311)\n    plot_distribution(0.1, 0.8, 0.2)\n    plt.grid()\n    plt.title(f\"True Distribution: $y = {αhat:.2f} + {βhat:.2f} x + {σhat:.2f} u$\")\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n    \n    plt.subplot(312)\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n    df = datasets[i]\n    if i&gt;=2:\n        plt.plot(df['x'], df['y'], 'o')\n    plt.title(\"Random Draw\")\n    plt.grid()\n\n    plt.subplot(313)\n    if i==3:\n        plt.plot(βvec[i], βvec[i]*0, 'o')\n    if i&gt;4:\n        plt.plot(βvec[3:i], βvec[3:i]*0, 'o')\n    if i&gt;10:\n        xx = np.linspace(0.2, 1.4, 10000)\n        plt.plot( βvec, gkd.pdf(βvec), '.')\n    plt.title(\"Distribution of β\")\n    plt.xlim(0.2, 1.4)\n    plt.ylim(-0.1, 4)\n    plt.grid()\n\n    plt.tight_layout()\n\n    plt.savefig(f\"random_estimates_{i}.png\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplt.plot( βvec, βvec*0, 'o')"
  },
  {
    "objectID": "slides/session_3/index.html#a-simple-dataset",
    "href": "slides/session_3/index.html#a-simple-dataset",
    "title": "Linear Regression",
    "section": "A Simple Dataset",
    "text": "A Simple Dataset\nDuncan’s Occupational Prestige Data\n\nMany occupations in 1950.\nEducation and prestige associated to each occupation\n\\(x\\): education\n\nPercentage of occupational incumbents in 1950 who were high school graduates\n\n\\(y\\): income\n\nPercentage of occupational incumbents in the 1950 US Census who earned $3,500 or more per year\n\n\\(z\\): Percentage of respondents in a social survey who rated the occupation as “good” or better in prestige"
  },
  {
    "objectID": "slides/session_3/index.html#quick-look",
    "href": "slides/session_3/index.html#quick-look",
    "title": "Linear Regression",
    "section": "Quick look",
    "text": "Quick look\nImport the data from statsmodels’ dataset:\n\nimport statsmodels.api as sm\ndataset = sm.datasets.get_rdataset(\"Duncan\", \"carData\")\ndf = dataset.data\ndf.head()\n\n\n\n\n\n\n\n\ntype\nincome\neducation\nprestige\n\n\nrownames\n\n\n\n\n\n\n\n\naccountant\nprof\n62\n86\n82\n\n\npilot\nprof\n72\n76\n83\n\n\narchitect\nprof\n75\n92\n90\n\n\nauthor\nprof\n55\n90\n76\n\n\nchemist\nprof\n64\n86\n90"
  },
  {
    "objectID": "slides/session_3/index.html#descriptive-statistics-1",
    "href": "slides/session_3/index.html#descriptive-statistics-1",
    "title": "Linear Regression",
    "section": "Descriptive Statistics",
    "text": "Descriptive Statistics\n\n\nFor any variable \\(v\\) with \\(N\\) observations:\n\nmean: \\(\\overline{v} = \\frac{1}{N} \\sum_{i=1}^N v_i\\)\nvariance \\(V({v}) = \\frac{1}{N} \\sum_{i=1}^N \\left(v_i - \\overline{v} \\right)^2\\)\nstandard deviation : \\(\\sigma(v)=\\sqrt{V(v)}\\)\n\n\n\n\ndf.describe()\n\n\n\n\n\n\n\n\nincome\neducation\nprestige\n\n\n\n\ncount\n45.000000\n45.000000\n45.000000\n\n\nmean\n41.866667\n52.555556\n47.688889\n\n\nstd\n24.435072\n29.760831\n31.510332\n\n\nmin\n7.000000\n7.000000\n3.000000\n\n\n25%\n21.000000\n26.000000\n16.000000\n\n\n50%\n42.000000\n45.000000\n41.000000\n\n\n75%\n64.000000\n84.000000\n81.000000\n\n\nmax\n81.000000\n100.000000\n97.000000"
  },
  {
    "objectID": "slides/session_3/index.html#relation-between-variables",
    "href": "slides/session_3/index.html#relation-between-variables",
    "title": "Linear Regression",
    "section": "Relation between variables",
    "text": "Relation between variables\n\n\nHow do we measure relations between two variables (with \\(N\\) observations)\n\nCovariance: \\(Cov(x,y) = \\frac{1}{N}\\sum_i (x_i-\\overline{x})(y_i-\\overline{y})\\)\nCorrelation: \\(Cor(x,y) = \\frac{Cov(x,y)}{\\sigma(x)\\sigma(y)}\\)\n\nBy construction, \\(Cor(x,y)\\in[-1,1]\\)\n\nif \\(Cor(x,y)&gt;0\\), x and y are positively correlated\nif \\(Cor(x,y)&lt;0\\), x and y are negatively correlated\n\nInterpretation:\n\nno interpretation!\ncorrelation is not causality\nalso: data can be correlated by pure chance (spurious correlation)"
  },
  {
    "objectID": "slides/session_3/index.html#examples",
    "href": "slides/session_3/index.html#examples",
    "title": "Linear Regression",
    "section": "Examples",
    "text": "Examples\n\n\n\ndf[['income','education','prestige']].cov()\n\n\n\n\n\n\n\n\nincome\neducation\nprestige\n\n\n\n\nincome\n597.072727\n526.871212\n645.071212\n\n\neducation\n526.871212\n885.707071\n798.904040\n\n\nprestige\n645.071212\n798.904040\n992.901010\n\n\n\n\n\n\n\n\n\n\ndf[['income','education','prestige']].corr()\n\n\n\n\n\n\n\n\nincome\neducation\nprestige\n\n\n\n\nincome\n1.000000\n0.724512\n0.837801\n\n\neducation\n0.724512\n1.000000\n0.851916\n\n\nprestige\n0.837801\n0.851916\n1.000000\n\n\n\n\n\n\n\n\n\n\nCan we visualize correlations?"
  },
  {
    "objectID": "slides/session_3/index.html#quick",
    "href": "slides/session_3/index.html#quick",
    "title": "Linear Regression",
    "section": "Quick",
    "text": "Quick\n\n\n\nfrom matplotlib import pyplot as plt\nplt.plot(df['education'],df['income'],'o')\nplt.grid()\nplt.xlabel(\"Education\")\nplt.ylabel(\"Income\")\nplt.savefig(\"data_description.png\")\n\n\n\n\n\n\n\n\n\n\nfrom matplotlib import pyplot as plt\nplt.plot(df['education'],df['prestige'],'o')\nplt.grid()\nplt.xlabel(\"Education\")\nplt.ylabel(\"Prestige\")\nplt.savefig(\"data_description.png\")"
  },
  {
    "objectID": "slides/session_3/index.html#quick-look-1",
    "href": "slides/session_3/index.html#quick-look-1",
    "title": "Linear Regression",
    "section": "Quick look",
    "text": "Quick look\nUsing matplotlib (3d)"
  },
  {
    "objectID": "slides/session_3/index.html#quick-look-2",
    "href": "slides/session_3/index.html#quick-look-2",
    "title": "Linear Regression",
    "section": "Quick look",
    "text": "Quick look\n\nimport seaborn as sns\nsns.pairplot(df[['education', 'prestige', 'income']])\n\n\n\n\n\n\n\n\nThe pairplot made with seaborn gives a simple sense of correlations as well as information about the distribution of each variable."
  },
  {
    "objectID": "slides/session_3/index.html#a-linear-model",
    "href": "slides/session_3/index.html#a-linear-model",
    "title": "Linear Regression",
    "section": "A Linear Model",
    "text": "A Linear Model\n\n\nNow we want to build a model to represent the data:\nConsider the line: \\[y = α + β x\\]\n\nSeveral possibilities. Which one do we choose to represent the model?\n\n\nWe need some criterium."
  },
  {
    "objectID": "slides/session_3/index.html#least-square-criterium",
    "href": "slides/session_3/index.html#least-square-criterium",
    "title": "Linear Regression",
    "section": "Least Square Criterium",
    "text": "Least Square Criterium\n\n\n\nCompare the model to the data: \\[y_i = \\alpha + \\beta x_i + \\underbrace{e_i}_{\\text{prediction error}}\\]\nSquare Errors \\[{e_i}^2 = (y_i-\\alpha-\\beta x_i)^2\\]\nLoss Function: sum of squares \\[L(\\alpha,\\beta) = \\sum_{i=1}^N (e_i)^2\\]"
  },
  {
    "objectID": "slides/session_3/index.html#minimizing-least-squares",
    "href": "slides/session_3/index.html#minimizing-least-squares",
    "title": "Linear Regression",
    "section": "Minimizing Least Squares",
    "text": "Minimizing Least Squares\n\n\n\n\nTry to chose \\(\\alpha, \\beta\\) so as to minimize the sum of the squares \\(L(α, β)\\)\n\nIt is a convex minimization problem: unique solution\n\nThis direct iterative procedure is used in machine learning"
  },
  {
    "objectID": "slides/session_3/index.html#ordinary-least-squares-1",
    "href": "slides/session_3/index.html#ordinary-least-squares-1",
    "title": "Linear Regression",
    "section": "Ordinary Least Squares (1)",
    "text": "Ordinary Least Squares (1)\n\nThe mathematical problem \\(\\min_{\\alpha,\\beta} L(\\alpha,\\beta)\\) has one unique solution1\nSolution is given by the explicit formula: \\[\\hat{\\alpha} = \\overline{y} - \\hat{\\beta} \\overline{x}\\] \\[\\hat{\\beta} = \\frac{Cov({x,y})}{Var(x)} = Cor(x,y) \\frac{\\sigma(y)}{\\sigma({x})}\\]\n\\(\\hat{\\alpha}\\) and \\(\\hat{\\beta}\\) are estimators.\n\nHence the hats.\nMore on that later.\n\n\nProof not important here."
  },
  {
    "objectID": "slides/session_3/index.html#concrete-example",
    "href": "slides/session_3/index.html#concrete-example",
    "title": "Linear Regression",
    "section": "Concrete Example",
    "text": "Concrete Example\nIn our example we get the result: \\[\\underbrace{y}_{\\text{income}} = 10 + 0.59 \\underbrace{x}_{education}\\]\nWe can say:\n\nincome and education are positively correlated\na unit increase in education is associated with a 0.59 increase in income\na unit increase in education explains a 0.59 increase in income\n\n\nBut:\n\nhere explains does not mean cause"
  },
  {
    "objectID": "slides/session_3/index.html#predictions",
    "href": "slides/session_3/index.html#predictions",
    "title": "Linear Regression",
    "section": "Predictions",
    "text": "Predictions\nIt is possible to make predictions with the model:\n\nHow much would an occupation which hires 60% high schoolers fare salary-wise?\n\n\n\n\nPrediction: salary measure is \\(45.4\\)\n\n\n\nOK, but that seems noisy, how much do I really predict ? Can I get a sense of the precision of my prediction ?"
  },
  {
    "objectID": "slides/session_3/index.html#look-at-the-residuals",
    "href": "slides/session_3/index.html#look-at-the-residuals",
    "title": "Linear Regression",
    "section": "Look at the residuals",
    "text": "Look at the residuals\n\n\n\nPlot the residuals: \n\n\n\nAny abnormal observation?\nTheory requires residuals to be:\n\nzero-mean\nnon-correlated\nnormally distributed\n\nThat looks like a normal distribution\n\nstandard deviation is \\(\\sigma(e_i) = 16.84\\)\n\nA more honnest prediction would be \\(45.6 ± 16.84\\)"
  },
  {
    "objectID": "slides/session_3/index.html#what-could-go-wrong",
    "href": "slides/session_3/index.html#what-could-go-wrong",
    "title": "Linear Regression",
    "section": "What could go wrong?",
    "text": "What could go wrong?\n\n\na well specified model, residuals must look like white noise (i.i.d.: independent and identically distributed)\nwhen residuals are clearly abnormal, the model must be changed"
  },
  {
    "objectID": "slides/session_3/index.html#explained-variance-1",
    "href": "slides/session_3/index.html#explained-variance-1",
    "title": "Linear Regression",
    "section": "Explained Variance",
    "text": "Explained Variance\n\n\n\nWhat is the share of the total variance explained by the variance of my prediction? \\[R^2 = \\frac{\\overbrace{Var(\\hat{\\alpha} + \\hat{\\beta} x_i)}^{ \\text{MSS} } } {\\underbrace{Var(y_i)}_{ \\text{TSS} } } = \\frac{MSS}{TSS} = (Cor(x,y))^2\\] \\[R^2 = 1-\\frac{\\overbrace{Var(y_i - \\hat{\\alpha} + \\hat{\\beta} x_i)}^{\\text{RSS}} } { \\underbrace{Var(y_i)}_{ {\\text{TSS}  }}} = 1 - \\frac{RSS}{TSS} \\]\n\n\n\n\n\nMSS: model sum of squares, explained variance\nRSS: residual sum of square, unexplained variance\nTSS: total sum of squares, total variance\n\n\n\n\nCoefficient of determination is a measure of the explanatory power of a regression\n\nbut not of the significance of a coefficient\nwe’ll get back to it when we see multivariate regressions\n\nIn one-dimensional case, it is possible to have small R2, yet a very precise regression coefficient."
  },
  {
    "objectID": "slides/session_3/index.html#graphical-representation",
    "href": "slides/session_3/index.html#graphical-representation",
    "title": "Linear Regression",
    "section": "Graphical Representation",
    "text": "Graphical Representation"
  },
  {
    "objectID": "slides/session_3/index.html#statistical-model",
    "href": "slides/session_3/index.html#statistical-model",
    "title": "Linear Regression",
    "section": "Statistical model",
    "text": "Statistical model\n\n\n\n\nImagine the true model is: \\[y = α + β x + \\epsilon\\] \\[\\epsilon_i  \\sim \\mathcal{N}\\left({0,\\sigma^{2}}\\right)\\]\n\nerrors are independent …\nand normallly distributed …\nwith constant variance (homoscedastic)\n\n\n\nUsing this data-generation process, I have drawn randomly \\(N\\) data points (a.k.a. gathered the data)\n\nmaybe an acual sample (for instance \\(N\\) patients)\nan abstract sample otherwise\n\n\n\nThen computed my estimate \\(\\hat{α}\\), \\(\\hat{β}\\)\nHow confident am I in these estimates ?\n\nI could have gotten a completely different one…\nclearly, the bigger \\(N\\), the more confident I am…"
  },
  {
    "objectID": "slides/session_3/index.html#statistical-inference-2",
    "href": "slides/session_3/index.html#statistical-inference-2",
    "title": "Linear Regression",
    "section": "Statistical inference (2)",
    "text": "Statistical inference (2)\n\n\n\n\n\nAssume we have computed \\(\\hat{\\alpha}\\), \\(\\hat{\\beta}\\) from the data. Let’s make a thought experiment instead.\nImagine the actual data generating process was given by \\(\\hat{α} + \\hat{\\beta} x + \\epsilon\\) where \\(\\epsilon \\sim \\mathcal{N}(0,Var({e_i}))\\)\n\n\n\n\nIf I draw randomly \\(N\\) points using this D.G.P. I get new estimates.\nAnd if I make randomly many draws, I get a distribution for my estimate.\n\nI get an estimated \\(\\hat{\\sigma}(\\hat{\\beta})\\)\nwere my initial estimates very likely ?\nor could they have taken any value with another draw from the data ?\nin the example, we see that estimates around of 0.7 or 0.9, would be compatible with the data\n\nHow do we formalize these ideas?\n\nStatistical tests."
  },
  {
    "objectID": "slides/session_3/index.html#first-estimates",
    "href": "slides/session_3/index.html#first-estimates",
    "title": "Linear Regression",
    "section": "First estimates",
    "text": "First estimates\n\n\nGiven the true model, all estimators are random variables of the data generating process\nGiven the values \\(\\alpha\\), \\(\\beta\\), \\(\\sigma\\) of the true model, we can model the distribution of the estimates.\nSome closed forms:\n\n\\(\\hat{\\sigma}^2 = Var(y_i - \\alpha -\\beta x_i)\\) estimated variance of the residuals\n\\(mean(\\hat{\\beta}) = \\beta\\) (unbiased)\n\\(\\sigma(\\hat{\\beta}) =  \\frac{\\sigma^2}{Var(x_i)}\\)\n\nThese statististics or any function of them can be computed exactly, given the data.\nTheir distribution depends, on the data-generating process\nCan we produce statistics whose distribution is known given mild assumptions on the data-generating process?\n\nif so, we can assess how likely are our observations"
  },
  {
    "objectID": "slides/session_3/index.html#fisher-statistic",
    "href": "slides/session_3/index.html#fisher-statistic",
    "title": "Linear Regression",
    "section": "Fisher-Statistic",
    "text": "Fisher-Statistic\n\n\n\n\nTest\n\nHypothesis H0:\n\n\\(α=β=0\\)\nmodel explains nothing, i.e. \\(R^2=0\\)\n\nHypothesis H1: (model explains something)\n\nmodel explains something, i.e. \\(R^2&gt;0\\)\n\n\nFisher Statistics: \\[\\boxed{F=\\frac{Explained Variance}{Unexplained Variance}}\\]\n\n\nDistribution of \\(F\\) is known theoretically.\n\nAssuming the model is actually linear and the shocks normal.\nIt depends on the number of degrees of Freedom. (Here \\(N-2=18\\))\nNot on the actual parameters of the model.\n\n\n\nIn our case, \\(Fstat=40.48\\).\nWhat was the probability it was that big, under the \\(H0\\) hypothesis?\n\nextremely small: \\(Prob(F&gt;Fstat|H0)=5.41e-6\\)\nwe can reject \\(H0\\) with \\(p-value=5e-6\\)\n\nIn social science, typical required p-value is 5%.\nIn practice, we abstract from the precise calculation of the Fisher statistics, and look only at the p-value."
  },
  {
    "objectID": "slides/session_3/index.html#student-test",
    "href": "slides/session_3/index.html#student-test",
    "title": "Linear Regression",
    "section": "Student test",
    "text": "Student test\n\n\nSo our estimate is \\(y = \\underbrace{0.121}_{\\tilde{\\alpha}} + \\underbrace{0.794}_{\\tilde{\\beta}} x\\).\n\nwe know \\(\\tilde{\\beta}\\) is a bit random (it’s an estimator)\nare we even sure \\(\\tilde{\\beta}\\) could not have been zero?\n\nStudent Test:\n\nH0: \\(\\beta=0\\)\nH1: \\(\\beta \\neq 0\\)\nStatistics: \\(t=\\frac{\\hat{\\beta}}{\\sigma(\\hat{\\beta})}\\)\n\nintuitively: compare mean of estimator to its standard deviation\nalso a function of degrees of freedom\n\n\nSignificance levels (read in a table or use software):\n\nfor 18 degrees of freedom, \\(P(|t|&gt;t^{\\star})=0.05\\) with \\(t^{\\star}=1.734\\)\nif \\(t&gt;t^{\\star}\\) we are \\(95%\\) confident the coefficient is significant"
  },
  {
    "objectID": "slides/session_3/index.html#student-tables",
    "href": "slides/session_3/index.html#student-tables",
    "title": "Linear Regression",
    "section": "Student tables",
    "text": "Student tables"
  },
  {
    "objectID": "slides/session_3/index.html#confidence-intervals",
    "href": "slides/session_3/index.html#confidence-intervals",
    "title": "Linear Regression",
    "section": "Confidence intervals",
    "text": "Confidence intervals\nThe student test can also be used to construct confidence intervals.\n\nGiven estimate, \\(\\hat{\\beta}\\) with standard deviation \\(\\sigma(\\hat{\\beta})\\)\nGiven a probability threshold \\(\\alpha\\) (for instance \\(\\alpha=0.05\\)) we can compute \\(t^{\\star}\\) such that \\(P(|t|&gt;t*)=\\alpha\\)\nWe construct the confidence interval:\n\n\\[I^{\\alpha} = [\\hat{\\beta}-t\\sigma(\\hat{\\beta}), \\hat{\\beta}+t\\sigma(\\hat{\\beta})]\\]\n\nInterpretation:\n\nif the true value was outside of the confidence interval, the probability of obtaining the value that we got would be less than 5%.\nwe can say the true value is within the interval with 95% confidence level"
  },
  {
    "objectID": "slides/session_3/index_handout.html",
    "href": "slides/session_3/index_handout.html",
    "title": "Linear Regression",
    "section": "",
    "text": "Duncan’s Occupational Prestige Data\n\nMany occupations in 1950.\nEducation and prestige associated to each occupation\n\\(x\\): education\n\nPercentage of occupational incumbents in 1950 who were high school graduates\n\n\\(y\\): income\n\nPercentage of occupational incumbents in the 1950 US Census who earned $3,500 or more per year\n\n\\(z\\): Percentage of respondents in a social survey who rated the occupation as “good” or better in prestige\n\n\n\n\nImport the data from statsmodels’ dataset:\n\nimport statsmodels.api as sm\ndataset = sm.datasets.get_rdataset(\"Duncan\", \"carData\")\ndf = dataset.data\ndf.head()\n\n\n\n\n\n\n\n\ntype\nincome\neducation\nprestige\n\n\nrownames\n\n\n\n\n\n\n\n\naccountant\nprof\n62\n86\n82\n\n\npilot\nprof\n72\n76\n83\n\n\narchitect\nprof\n75\n92\n90\n\n\nauthor\nprof\n55\n90\n76\n\n\nchemist\nprof\n64\n86\n90\n\n\n\n\n\n\n\n\n\n\n\n\nFor any variable \\(v\\) with \\(N\\) observations:\n\nmean: \\(\\overline{v} = \\frac{1}{N} \\sum_{i=1}^N v_i\\)\nvariance \\(V({v}) = \\frac{1}{N} \\sum_{i=1}^N \\left(v_i - \\overline{v} \\right)^2\\)\nstandard deviation : \\(\\sigma(v)=\\sqrt{V(v)}\\)\n\n\n\n\ndf.describe()\n\n\n\n\n\n\n\n\nincome\neducation\nprestige\n\n\n\n\ncount\n45.000000\n45.000000\n45.000000\n\n\nmean\n41.866667\n52.555556\n47.688889\n\n\nstd\n24.435072\n29.760831\n31.510332\n\n\nmin\n7.000000\n7.000000\n3.000000\n\n\n25%\n21.000000\n26.000000\n16.000000\n\n\n50%\n42.000000\n45.000000\n41.000000\n\n\n75%\n64.000000\n84.000000\n81.000000\n\n\nmax\n81.000000\n100.000000\n97.000000\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHow do we measure relations between two variables (with \\(N\\) observations)\n\nCovariance: \\(Cov(x,y) = \\frac{1}{N}\\sum_i (x_i-\\overline{x})(y_i-\\overline{y})\\)\nCorrelation: \\(Cor(x,y) = \\frac{Cov(x,y)}{\\sigma(x)\\sigma(y)}\\)\n\nBy construction, \\(Cor(x,y)\\in[-1,1]\\)\n\nif \\(Cor(x,y)&gt;0\\), x and y are positively correlated\nif \\(Cor(x,y)&lt;0\\), x and y are negatively correlated\n\nInterpretation:\n\nno interpretation!\ncorrelation is not causality\nalso: data can be correlated by pure chance (spurious correlation)\n\n\n\n\n\n\n\n\n\ndf[['income','education','prestige']].cov()\n\n\n\n\n\n\n\n\nincome\neducation\nprestige\n\n\n\n\nincome\n597.072727\n526.871212\n645.071212\n\n\neducation\n526.871212\n885.707071\n798.904040\n\n\nprestige\n645.071212\n798.904040\n992.901010\n\n\n\n\n\n\n\n\n\n\ndf[['income','education','prestige']].corr()\n\n\n\n\n\n\n\n\nincome\neducation\nprestige\n\n\n\n\nincome\n1.000000\n0.724512\n0.837801\n\n\neducation\n0.724512\n1.000000\n0.851916\n\n\nprestige\n0.837801\n0.851916\n1.000000\n\n\n\n\n\n\n\n\n\n\n. . .\nCan we visualize correlations?\n\n\n\n\n\n\nfrom matplotlib import pyplot as plt\nplt.plot(df['education'],df['income'],'o')\nplt.grid()\nplt.xlabel(\"Education\")\nplt.ylabel(\"Income\")\nplt.savefig(\"data_description.png\")\n\n\n\n\n\n\n\n\n\n\nfrom matplotlib import pyplot as plt\nplt.plot(df['education'],df['prestige'],'o')\nplt.grid()\nplt.xlabel(\"Education\")\nplt.ylabel(\"Prestige\")\nplt.savefig(\"data_description.png\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing matplotlib (3d)\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport seaborn as sns\nsns.pairplot(df[['education', 'prestige', 'income']])\n\n\n\n\n\n\n\n\nThe pairplot made with seaborn gives a simple sense of correlations as well as information about the distribution of each variable.",
    "crumbs": [
      "lectures",
      "Linear Regression"
    ]
  },
  {
    "objectID": "slides/session_3/index_handout.html#a-simple-dataset",
    "href": "slides/session_3/index_handout.html#a-simple-dataset",
    "title": "Linear Regression",
    "section": "",
    "text": "Duncan’s Occupational Prestige Data\n\nMany occupations in 1950.\nEducation and prestige associated to each occupation\n\\(x\\): education\n\nPercentage of occupational incumbents in 1950 who were high school graduates\n\n\\(y\\): income\n\nPercentage of occupational incumbents in the 1950 US Census who earned $3,500 or more per year\n\n\\(z\\): Percentage of respondents in a social survey who rated the occupation as “good” or better in prestige",
    "crumbs": [
      "lectures",
      "Linear Regression"
    ]
  },
  {
    "objectID": "slides/session_3/index_handout.html#quick-look",
    "href": "slides/session_3/index_handout.html#quick-look",
    "title": "Linear Regression",
    "section": "",
    "text": "Import the data from statsmodels’ dataset:\n\nimport statsmodels.api as sm\ndataset = sm.datasets.get_rdataset(\"Duncan\", \"carData\")\ndf = dataset.data\ndf.head()\n\n\n\n\n\n\n\n\ntype\nincome\neducation\nprestige\n\n\nrownames\n\n\n\n\n\n\n\n\naccountant\nprof\n62\n86\n82\n\n\npilot\nprof\n72\n76\n83\n\n\narchitect\nprof\n75\n92\n90\n\n\nauthor\nprof\n55\n90\n76\n\n\nchemist\nprof\n64\n86\n90",
    "crumbs": [
      "lectures",
      "Linear Regression"
    ]
  },
  {
    "objectID": "slides/session_3/index_handout.html#descriptive-statistics-1",
    "href": "slides/session_3/index_handout.html#descriptive-statistics-1",
    "title": "Linear Regression",
    "section": "",
    "text": "For any variable \\(v\\) with \\(N\\) observations:\n\nmean: \\(\\overline{v} = \\frac{1}{N} \\sum_{i=1}^N v_i\\)\nvariance \\(V({v}) = \\frac{1}{N} \\sum_{i=1}^N \\left(v_i - \\overline{v} \\right)^2\\)\nstandard deviation : \\(\\sigma(v)=\\sqrt{V(v)}\\)\n\n\n\n\ndf.describe()\n\n\n\n\n\n\n\n\nincome\neducation\nprestige\n\n\n\n\ncount\n45.000000\n45.000000\n45.000000\n\n\nmean\n41.866667\n52.555556\n47.688889\n\n\nstd\n24.435072\n29.760831\n31.510332\n\n\nmin\n7.000000\n7.000000\n3.000000\n\n\n25%\n21.000000\n26.000000\n16.000000\n\n\n50%\n42.000000\n45.000000\n41.000000\n\n\n75%\n64.000000\n84.000000\n81.000000\n\n\nmax\n81.000000\n100.000000\n97.000000",
    "crumbs": [
      "lectures",
      "Linear Regression"
    ]
  },
  {
    "objectID": "slides/session_3/index_handout.html#relation-between-variables",
    "href": "slides/session_3/index_handout.html#relation-between-variables",
    "title": "Linear Regression",
    "section": "",
    "text": "How do we measure relations between two variables (with \\(N\\) observations)\n\nCovariance: \\(Cov(x,y) = \\frac{1}{N}\\sum_i (x_i-\\overline{x})(y_i-\\overline{y})\\)\nCorrelation: \\(Cor(x,y) = \\frac{Cov(x,y)}{\\sigma(x)\\sigma(y)}\\)\n\nBy construction, \\(Cor(x,y)\\in[-1,1]\\)\n\nif \\(Cor(x,y)&gt;0\\), x and y are positively correlated\nif \\(Cor(x,y)&lt;0\\), x and y are negatively correlated\n\nInterpretation:\n\nno interpretation!\ncorrelation is not causality\nalso: data can be correlated by pure chance (spurious correlation)",
    "crumbs": [
      "lectures",
      "Linear Regression"
    ]
  },
  {
    "objectID": "slides/session_3/index_handout.html#examples",
    "href": "slides/session_3/index_handout.html#examples",
    "title": "Linear Regression",
    "section": "",
    "text": "df[['income','education','prestige']].cov()\n\n\n\n\n\n\n\n\nincome\neducation\nprestige\n\n\n\n\nincome\n597.072727\n526.871212\n645.071212\n\n\neducation\n526.871212\n885.707071\n798.904040\n\n\nprestige\n645.071212\n798.904040\n992.901010\n\n\n\n\n\n\n\n\n\n\ndf[['income','education','prestige']].corr()\n\n\n\n\n\n\n\n\nincome\neducation\nprestige\n\n\n\n\nincome\n1.000000\n0.724512\n0.837801\n\n\neducation\n0.724512\n1.000000\n0.851916\n\n\nprestige\n0.837801\n0.851916\n1.000000\n\n\n\n\n\n\n\n\n\n\n. . .\nCan we visualize correlations?",
    "crumbs": [
      "lectures",
      "Linear Regression"
    ]
  },
  {
    "objectID": "slides/session_3/index_handout.html#quick",
    "href": "slides/session_3/index_handout.html#quick",
    "title": "Linear Regression",
    "section": "",
    "text": "from matplotlib import pyplot as plt\nplt.plot(df['education'],df['income'],'o')\nplt.grid()\nplt.xlabel(\"Education\")\nplt.ylabel(\"Income\")\nplt.savefig(\"data_description.png\")\n\n\n\n\n\n\n\n\n\n\nfrom matplotlib import pyplot as plt\nplt.plot(df['education'],df['prestige'],'o')\nplt.grid()\nplt.xlabel(\"Education\")\nplt.ylabel(\"Prestige\")\nplt.savefig(\"data_description.png\")",
    "crumbs": [
      "lectures",
      "Linear Regression"
    ]
  },
  {
    "objectID": "slides/session_3/index_handout.html#quick-look-1",
    "href": "slides/session_3/index_handout.html#quick-look-1",
    "title": "Linear Regression",
    "section": "",
    "text": "Using matplotlib (3d)",
    "crumbs": [
      "lectures",
      "Linear Regression"
    ]
  },
  {
    "objectID": "slides/session_3/index_handout.html#quick-look-2",
    "href": "slides/session_3/index_handout.html#quick-look-2",
    "title": "Linear Regression",
    "section": "",
    "text": "import seaborn as sns\nsns.pairplot(df[['education', 'prestige', 'income']])\n\n\n\n\n\n\n\n\nThe pairplot made with seaborn gives a simple sense of correlations as well as information about the distribution of each variable.",
    "crumbs": [
      "lectures",
      "Linear Regression"
    ]
  },
  {
    "objectID": "slides/session_3/index_handout.html#a-linear-model",
    "href": "slides/session_3/index_handout.html#a-linear-model",
    "title": "Linear Regression",
    "section": "A Linear Model",
    "text": "A Linear Model\n\n\nNow we want to build a model to represent the data:\nConsider the line: \\[y = α + β x\\]\n\nSeveral possibilities. Which one do we choose to represent the model?\n\n\nWe need some criterium.",
    "crumbs": [
      "lectures",
      "Linear Regression"
    ]
  },
  {
    "objectID": "slides/session_3/index_handout.html#least-square-criterium",
    "href": "slides/session_3/index_handout.html#least-square-criterium",
    "title": "Linear Regression",
    "section": "Least Square Criterium",
    "text": "Least Square Criterium\n\n\n\nCompare the model to the data: \\[y_i = \\alpha + \\beta x_i + \\underbrace{e_i}_{\\text{prediction error}}\\]\nSquare Errors \\[{e_i}^2 = (y_i-\\alpha-\\beta x_i)^2\\]\nLoss Function: sum of squares \\[L(\\alpha,\\beta) = \\sum_{i=1}^N (e_i)^2\\]",
    "crumbs": [
      "lectures",
      "Linear Regression"
    ]
  },
  {
    "objectID": "slides/session_3/index_handout.html#minimizing-least-squares",
    "href": "slides/session_3/index_handout.html#minimizing-least-squares",
    "title": "Linear Regression",
    "section": "Minimizing Least Squares",
    "text": "Minimizing Least Squares\n\n\n\n\nTry to chose \\(\\alpha, \\beta\\) so as to minimize the sum of the squares \\(L(α, β)\\)\n\nIt is a convex minimization problem: unique solution\n\nThis direct iterative procedure is used in machine learning",
    "crumbs": [
      "lectures",
      "Linear Regression"
    ]
  },
  {
    "objectID": "slides/session_3/index_handout.html#ordinary-least-squares-1",
    "href": "slides/session_3/index_handout.html#ordinary-least-squares-1",
    "title": "Linear Regression",
    "section": "Ordinary Least Squares (1)",
    "text": "Ordinary Least Squares (1)\n\nThe mathematical problem \\(\\min_{\\alpha,\\beta} L(\\alpha,\\beta)\\) has one unique solution1\nSolution is given by the explicit formula: \\[\\hat{\\alpha} = \\overline{y} - \\hat{\\beta} \\overline{x}\\] \\[\\hat{\\beta} = \\frac{Cov({x,y})}{Var(x)} = Cor(x,y) \\frac{\\sigma(y)}{\\sigma({x})}\\]\n\\(\\hat{\\alpha}\\) and \\(\\hat{\\beta}\\) are estimators.\n\nHence the hats.\nMore on that later.",
    "crumbs": [
      "lectures",
      "Linear Regression"
    ]
  },
  {
    "objectID": "slides/session_3/index_handout.html#concrete-example",
    "href": "slides/session_3/index_handout.html#concrete-example",
    "title": "Linear Regression",
    "section": "Concrete Example",
    "text": "Concrete Example\nIn our example we get the result: \\[\\underbrace{y}_{\\text{income}} = 10 + 0.59 \\underbrace{x}_{education}\\]\nWe can say:\n\nincome and education are positively correlated\na unit increase in education is associated with a 0.59 increase in income\na unit increase in education explains a 0.59 increase in income\n\n. . .\nBut:\n\nhere explains does not mean cause",
    "crumbs": [
      "lectures",
      "Linear Regression"
    ]
  },
  {
    "objectID": "slides/session_3/index_handout.html#predictions",
    "href": "slides/session_3/index_handout.html#predictions",
    "title": "Linear Regression",
    "section": "Predictions",
    "text": "Predictions\nIt is possible to make predictions with the model:\n\nHow much would an occupation which hires 60% high schoolers fare salary-wise?\n\n\n. . .\n\nPrediction: salary measure is \\(45.4\\)\n\n. . .\nOK, but that seems noisy, how much do I really predict ? Can I get a sense of the precision of my prediction ?",
    "crumbs": [
      "lectures",
      "Linear Regression"
    ]
  },
  {
    "objectID": "slides/session_3/index_handout.html#look-at-the-residuals",
    "href": "slides/session_3/index_handout.html#look-at-the-residuals",
    "title": "Linear Regression",
    "section": "Look at the residuals",
    "text": "Look at the residuals\n\n\n\nPlot the residuals: \n\n\n\nAny abnormal observation?\nTheory requires residuals to be:\n\nzero-mean\nnon-correlated\nnormally distributed\n\nThat looks like a normal distribution\n\nstandard deviation is \\(\\sigma(e_i) = 16.84\\)\n\nA more honnest prediction would be \\(45.6 ± 16.84\\)",
    "crumbs": [
      "lectures",
      "Linear Regression"
    ]
  },
  {
    "objectID": "slides/session_3/index_handout.html#what-could-go-wrong",
    "href": "slides/session_3/index_handout.html#what-could-go-wrong",
    "title": "Linear Regression",
    "section": "What could go wrong?",
    "text": "What could go wrong?\n\n\na well specified model, residuals must look like white noise (i.i.d.: independent and identically distributed)\nwhen residuals are clearly abnormal, the model must be changed",
    "crumbs": [
      "lectures",
      "Linear Regression"
    ]
  },
  {
    "objectID": "slides/session_3/index_handout.html#explained-variance-1",
    "href": "slides/session_3/index_handout.html#explained-variance-1",
    "title": "Linear Regression",
    "section": "Explained Variance",
    "text": "Explained Variance\n\n\n\nWhat is the share of the total variance explained by the variance of my prediction? \\[R^2 = \\frac{\\overbrace{Var(\\hat{\\alpha} + \\hat{\\beta} x_i)}^{ \\text{MSS} } } {\\underbrace{Var(y_i)}_{ \\text{TSS} } } = \\frac{MSS}{TSS} = (Cor(x,y))^2\\] \\[R^2 = 1-\\frac{\\overbrace{Var(y_i - \\hat{\\alpha} + \\hat{\\beta} x_i)}^{\\text{RSS}} } { \\underbrace{Var(y_i)}_{ {\\text{TSS}  }}} = 1 - \\frac{RSS}{TSS} \\]\n\n\n\n\n\nMSS: model sum of squares, explained variance\nRSS: residual sum of square, unexplained variance\nTSS: total sum of squares, total variance\n\n\n\n\nCoefficient of determination is a measure of the explanatory power of a regression\n\nbut not of the significance of a coefficient\nwe’ll get back to it when we see multivariate regressions\n\nIn one-dimensional case, it is possible to have small R2, yet a very precise regression coefficient.",
    "crumbs": [
      "lectures",
      "Linear Regression"
    ]
  },
  {
    "objectID": "slides/session_3/index_handout.html#graphical-representation",
    "href": "slides/session_3/index_handout.html#graphical-representation",
    "title": "Linear Regression",
    "section": "Graphical Representation",
    "text": "Graphical Representation",
    "crumbs": [
      "lectures",
      "Linear Regression"
    ]
  },
  {
    "objectID": "slides/session_3/index_handout.html#statistical-model",
    "href": "slides/session_3/index_handout.html#statistical-model",
    "title": "Linear Regression",
    "section": "Statistical model",
    "text": "Statistical model\n\n\n\n\nImagine the true model is: \\[y = α + β x + \\epsilon\\] \\[\\epsilon_i  \\sim \\mathcal{N}\\left({0,\\sigma^{2}}\\right)\\]\n\nerrors are independent …\nand normallly distributed …\nwith constant variance (homoscedastic)\n\n\n\nUsing this data-generation process, I have drawn randomly \\(N\\) data points (a.k.a. gathered the data)\n\nmaybe an acual sample (for instance \\(N\\) patients)\nan abstract sample otherwise\n\n\n\nThen computed my estimate \\(\\hat{α}\\), \\(\\hat{β}\\)\nHow confident am I in these estimates ?\n\nI could have gotten a completely different one…\nclearly, the bigger \\(N\\), the more confident I am…",
    "crumbs": [
      "lectures",
      "Linear Regression"
    ]
  },
  {
    "objectID": "slides/session_3/index_handout.html#statistical-inference-2",
    "href": "slides/session_3/index_handout.html#statistical-inference-2",
    "title": "Linear Regression",
    "section": "Statistical inference (2)",
    "text": "Statistical inference (2)\n\n\n\n\n\nAssume we have computed \\(\\hat{\\alpha}\\), \\(\\hat{\\beta}\\) from the data. Let’s make a thought experiment instead.\nImagine the actual data generating process was given by \\(\\hat{α} + \\hat{\\beta} x + \\epsilon\\) where \\(\\epsilon \\sim \\mathcal{N}(0,Var({e_i}))\\)\n\n\n\n\nIf I draw randomly \\(N\\) points using this D.G.P. I get new estimates.\nAnd if I make randomly many draws, I get a distribution for my estimate.\n\nI get an estimated \\(\\hat{\\sigma}(\\hat{\\beta})\\)\nwere my initial estimates very likely ?\nor could they have taken any value with another draw from the data ?\nin the example, we see that estimates around of 0.7 or 0.9, would be compatible with the data\n\nHow do we formalize these ideas?\n\nStatistical tests.",
    "crumbs": [
      "lectures",
      "Linear Regression"
    ]
  },
  {
    "objectID": "slides/session_3/index_handout.html#first-estimates",
    "href": "slides/session_3/index_handout.html#first-estimates",
    "title": "Linear Regression",
    "section": "First estimates",
    "text": "First estimates\n\n\nGiven the true model, all estimators are random variables of the data generating process\nGiven the values \\(\\alpha\\), \\(\\beta\\), \\(\\sigma\\) of the true model, we can model the distribution of the estimates.\nSome closed forms:\n\n\\(\\hat{\\sigma}^2 = Var(y_i - \\alpha -\\beta x_i)\\) estimated variance of the residuals\n\\(mean(\\hat{\\beta}) = \\beta\\) (unbiased)\n\\(\\sigma(\\hat{\\beta}) =  \\frac{\\sigma^2}{Var(x_i)}\\)\n\nThese statististics or any function of them can be computed exactly, given the data.\nTheir distribution depends, on the data-generating process\nCan we produce statistics whose distribution is known given mild assumptions on the data-generating process?\n\nif so, we can assess how likely are our observations",
    "crumbs": [
      "lectures",
      "Linear Regression"
    ]
  },
  {
    "objectID": "slides/session_3/index_handout.html#fisher-statistic",
    "href": "slides/session_3/index_handout.html#fisher-statistic",
    "title": "Linear Regression",
    "section": "Fisher-Statistic",
    "text": "Fisher-Statistic\n\n\n\n\nTest\n\nHypothesis H0:\n\n\\(α=β=0\\)\nmodel explains nothing, i.e. \\(R^2=0\\)\n\nHypothesis H1: (model explains something)\n\nmodel explains something, i.e. \\(R^2&gt;0\\)\n\n\nFisher Statistics: \\[\\boxed{F=\\frac{Explained Variance}{Unexplained Variance}}\\]\n\n\nDistribution of \\(F\\) is known theoretically.\n\nAssuming the model is actually linear and the shocks normal.\nIt depends on the number of degrees of Freedom. (Here \\(N-2=18\\))\nNot on the actual parameters of the model.\n\n\n\nIn our case, \\(Fstat=40.48\\).\nWhat was the probability it was that big, under the \\(H0\\) hypothesis?\n\nextremely small: \\(Prob(F&gt;Fstat|H0)=5.41e-6\\)\nwe can reject \\(H0\\) with \\(p-value=5e-6\\)\n\nIn social science, typical required p-value is 5%.\nIn practice, we abstract from the precise calculation of the Fisher statistics, and look only at the p-value.",
    "crumbs": [
      "lectures",
      "Linear Regression"
    ]
  },
  {
    "objectID": "slides/session_3/index_handout.html#student-test",
    "href": "slides/session_3/index_handout.html#student-test",
    "title": "Linear Regression",
    "section": "Student test",
    "text": "Student test\n\n\nSo our estimate is \\(y = \\underbrace{0.121}_{\\tilde{\\alpha}} + \\underbrace{0.794}_{\\tilde{\\beta}} x\\).\n\nwe know \\(\\tilde{\\beta}\\) is a bit random (it’s an estimator)\nare we even sure \\(\\tilde{\\beta}\\) could not have been zero?\n\nStudent Test:\n\nH0: \\(\\beta=0\\)\nH1: \\(\\beta \\neq 0\\)\nStatistics: \\(t=\\frac{\\hat{\\beta}}{\\sigma(\\hat{\\beta})}\\)\n\nintuitively: compare mean of estimator to its standard deviation\nalso a function of degrees of freedom\n\n\nSignificance levels (read in a table or use software):\n\nfor 18 degrees of freedom, \\(P(|t|&gt;t^{\\star})=0.05\\) with \\(t^{\\star}=1.734\\)\nif \\(t&gt;t^{\\star}\\) we are \\(95%\\) confident the coefficient is significant",
    "crumbs": [
      "lectures",
      "Linear Regression"
    ]
  },
  {
    "objectID": "slides/session_3/index_handout.html#student-tables",
    "href": "slides/session_3/index_handout.html#student-tables",
    "title": "Linear Regression",
    "section": "Student tables",
    "text": "Student tables",
    "crumbs": [
      "lectures",
      "Linear Regression"
    ]
  },
  {
    "objectID": "slides/session_3/index_handout.html#confidence-intervals",
    "href": "slides/session_3/index_handout.html#confidence-intervals",
    "title": "Linear Regression",
    "section": "Confidence intervals",
    "text": "Confidence intervals\nThe student test can also be used to construct confidence intervals.\n\nGiven estimate, \\(\\hat{\\beta}\\) with standard deviation \\(\\sigma(\\hat{\\beta})\\)\nGiven a probability threshold \\(\\alpha\\) (for instance \\(\\alpha=0.05\\)) we can compute \\(t^{\\star}\\) such that \\(P(|t|&gt;t*)=\\alpha\\)\nWe construct the confidence interval:\n\n\\[I^{\\alpha} = [\\hat{\\beta}-t\\sigma(\\hat{\\beta}), \\hat{\\beta}+t\\sigma(\\hat{\\beta})]\\]\n. . .\nInterpretation:\n\nif the true value was outside of the confidence interval, the probability of obtaining the value that we got would be less than 5%.\nwe can say the true value is within the interval with 95% confidence level",
    "crumbs": [
      "lectures",
      "Linear Regression"
    ]
  },
  {
    "objectID": "slides/session_3/index_handout.html#footnotes",
    "href": "slides/session_3/index_handout.html#footnotes",
    "title": "Linear Regression",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nProof not important here.↩︎",
    "crumbs": [
      "lectures",
      "Linear Regression"
    ]
  },
  {
    "objectID": "slides/session_3/graphs/inference.html",
    "href": "slides/session_3/graphs/inference.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "from matplotlib import pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n\ndef generate_dataset(μ1, μ2, α, β, σ, N=10):\n    xvec = np.random.uniform(μ1, μ2, N)\n    yvec = α + β*xvec + np.random.normal(size=N)*σ\n    return pd.DataFrame({'x': xvec, 'y': yvec})\n\n\ndf = generate_dataset(0.0, 1.0, 0.1, 0.8, 0.1)\n\n\nplt.plot(df['x'], df['y'], 'o')\nplt.grid()\n\n\n\n\n\n\n\n\n\ndef plot_distribution(α, β, σ, N=100000, μ1=0.0, μ2=1.0):\n    xvec = np.random.uniform(μ1, μ2, N)\n    yvec = α + β*xvec + np.random.normal(size=N)*σ\n    plt.plot(xvec, yvec, '.r', alpha=0.005)\n    plt.plot(xvec, α + β*xvec, color='black')\n\n# missing ridge line\n\n\nimport statsmodels\n\n\nμ1 = 0\nμ2 = 1.0\nα = 0.1\nβ = 0.8\nσ = 0.2\nN = 20\nK = 1000\n\n\nimport statsmodels.formula.api as smf\n\n\ndf = generate_dataset(μ1, μ2, α, β, σ, N=N)\n\n\nres = smf.ols(formula='y ~ x + 1', data=df).fit()\nparams = res.params\nαhat = params['Intercept']\nβhat = params['x']\nσhat = res.resid.std()\n\n\nres.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\ny\nR-squared:\n0.692\n\n\nModel:\nOLS\nAdj. R-squared:\n0.675\n\n\nMethod:\nLeast Squares\nF-statistic:\n40.48\n\n\nDate:\nTue, 26 Jan 2021\nProb (F-statistic):\n5.41e-06\n\n\nTime:\n04:02:36\nLog-Likelihood:\n7.6662\n\n\nNo. Observations:\n20\nAIC:\n-11.33\n\n\nDf Residuals:\n18\nBIC:\n-9.341\n\n\nDf Model:\n1\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n0.1210\n0.077\n1.565\n0.135\n-0.041\n0.283\n\n\nx\n0.7941\n0.125\n6.362\n0.000\n0.532\n1.056\n\n\n\n\n\n\n\n\nOmnibus:\n1.410\nDurbin-Watson:\n1.507\n\n\nProb(Omnibus):\n0.494\nJarque-Bera (JB):\n0.890\n\n\nSkew:\n-0.081\nProb(JB):\n0.641\n\n\nKurtosis:\n1.979\nCond. No.\n4.20\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\nres.predict(df['x'])\n\n0     0.326200\n1     0.211704\n2     0.798819\n3     0.603306\n4     0.573319\n5     0.823919\n6     0.740622\n7     0.503227\n8     0.292622\n9     0.489566\n10    0.138720\n11    0.355157\n12    0.594171\n13    0.883917\n14    0.266229\n15    0.827021\n16    0.912376\n17    0.163088\n18    0.684858\n19    0.732782\ndtype: float64\n\n\n\nfor i in [1,2,3]:\n    \n    fig = plt.figure(figsize=(10,14))\n    plt.subplot(311)\n    plot_distribution(0.1, 0.8, 0.2)\n    plt.grid()\n    plt.title(f\"True Distribution: $y = {α:.2f} + {β:.2f} x + {σ:.2f} u$\")\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n\n    plt.subplot(312)\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n    if i&gt;=2:\n        plt.plot(df['x'], df['y'], 'o')\n    if i&gt;=3:\n        plt.plot(df['x'], res.predict(), label=f'$\\hat{{α}}={αhat:.2f}; \\hat{{β}}={βhat:.2f}$')\n        plt.legend(loc='lower right')\n    plt.title(\"Random Draw\")\n    plt.grid()\n    \n    plt.savefig(f\"regression_uncertainty_{i}.png\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport scipy.stats\n\n\ndatasets = [generate_dataset(μ1, μ2, αhat, βhat, σhat, N=N) for i in range(K)]\nall_params = [smf.ols(formula='x ~ y + 1', data=df).fit() for df in datasets]\nαvec = np.array( [e.params['Intercept'] for e in all_params] )\nβvec = np.array( [e.params['y'] for e in all_params] )\n\n\ngkd = scipy.stats.kde.gaussian_kde(βvec)\n\n\nfor i in [1,2,3,4,5,6,7,8,9,10,100]:\n\n    fig = plt.figure(figsize=(10,14))\n    plt.subplot(311)\n    plot_distribution(0.1, 0.8, 0.2)\n    plt.grid()\n    plt.title(f\"True Distribution: $y = {αhat:.2f} + {βhat:.2f} x + {σhat:.2f} u$\")\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n    \n    plt.subplot(312)\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n    df = datasets[i]\n    if i&gt;=2:\n        plt.plot(df['x'], df['y'], 'o')\n    plt.title(\"Random Draw\")\n    plt.grid()\n\n    plt.subplot(313)\n    if i==3:\n        plt.plot(βvec[i], βvec[i]*0, 'o')\n    if i&gt;4:\n        plt.plot(βvec[3:i], βvec[3:i]*0, 'o')\n    if i&gt;10:\n        xx = np.linspace(0.2, 1.4, 10000)\n        plt.plot( βvec, gkd.pdf(βvec), '.')\n    plt.title(\"Distribution of β\")\n    plt.xlim(0.2, 1.4)\n    plt.ylim(-0.1, 4)\n    plt.grid()\n\n    plt.tight_layout()\n\n    plt.savefig(f\"random_estimates_{i}.png\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplt.plot( βvec, βvec*0, 'o')"
  },
  {
    "objectID": "slides/session_8/index.html#how-to-deal-with-text",
    "href": "slides/session_8/index.html#how-to-deal-with-text",
    "title": "Text Analysis",
    "section": "How to deal with text?",
    "text": "How to deal with text?\n\nRecall: big data contains heterogenous data\n\ntext / images / sound"
  },
  {
    "objectID": "slides/session_8/index.html#example-1-fomc-meetings",
    "href": "slides/session_8/index.html#example-1-fomc-meetings",
    "title": "Text Analysis",
    "section": "Example 1: FOMC meetings",
    "text": "Example 1: FOMC meetings\nTaking the Fed at its Word: A New Approach to Estimating Central Bank Objectives using Text Analysis by Adam H. Shapiro and Daniel J. Wilson link\n\nRemember the Taylor rule? We tried to estimate it from the data.\nGeneralized version: \\(i_t = \\alpha_\\pi (\\pi_t-\\pi^{\\star}) + \\alpha_y (y_t-y)\\)\nIs there a way to measure the preferences of the central bank? (coefficients and inflation target?)\nShapiro and Wilson: let’s look at the FOMC meeting transcripts\nExcerpts (there are tons of them: 704,499)\n\n\n\n\nI had several conversations at Jackson Hole with Wall Street economists and journalists, and they said, quite frankly, that they really do not believe that our effective inflation target is 1 to 2 percent. They believe we have morphed into 1+1/2 to 2+1/2 percent, and no one thought that we were really going to do anything over time to bring it down to 1 to 2.\n\nSep 2006 St. Louis Federal Reserve President William Poole\n\n\n\nLike most of you, I am not at all alarmist about inflation. I think the worst that is likely to happen would be 20 or 30 basis points over the next year. But even that amount is a little disconcerting for me. I think it is very important for us to maintain our credibility on inflation and it would be somewhat expensive to bring that additional inflation back down.\n\nMarch 2006 Chairman Ben Bernanke\n\n\n\nWith inflation remaining at such rates, we could begin to lose credibility if markets mistakenly inferred that our comfort zone had drifted higher. When we stop raising rates, we ought to be reasonably confident that policy is restrictive enough to bring inflation back toward the center of our comfort zone, which I believe is 1+1/2 percent…So for today, we should move forward with an increase of 25 basis points…\n\nJan 2006 Chicago Federal Reserve President Michael Moskow\n\n\nWe are determined to ensure that inflation returns to our two per cent medium-term target in a timely manner. Based on our current assessment, we consider that the key ECB interest rates are at levels that, maintained for a sufficiently long duration, will make a substantial contribution to this goal. Our future decisions will ensure that our policy rates will be set at sufficiently restrictive levels for as long as necessary.\nMar 2024 Press conference from Christine Lagarde"
  },
  {
    "objectID": "slides/session_8/index.html#example-2",
    "href": "slides/session_8/index.html#example-2",
    "title": "Text Analysis",
    "section": "Example 2",
    "text": "Example 2\n\n\n\nSuppose you work in the trading floor of a financial instutition\nThese kind of tweets have disturbing impact on the markets. You need to react quickly.\nYou need a machine to assess the risk in real time.\nMore generally, tweeter is a quite unique source of real-time data\nHow do you analyse the content of the tweets?\nComment: actually it’s not only the content of the tweets, but who reads, who retweets: graph analysis"
  },
  {
    "objectID": "slides/session_8/index.html#text-mining-what-can-we-extract-from-texts",
    "href": "slides/session_8/index.html#text-mining-what-can-we-extract-from-texts",
    "title": "Text Analysis",
    "section": "Text-mining: what can we extract from texts",
    "text": "Text-mining: what can we extract from texts\n\n\nThe main branches of text analysis are:\n\nsentiment analysis\n\nassociate positivity/negativity to a text\nprecise meaning of “sentiment” is context dependent\n\n\ntopic modeling\n\nclassify texts as belonging to known categories (supervised)\nfinding likely texts (unsupervised)\n\nnamed-entity recognition\n\nfind who gets mentioned in the text\nexample: A Cross-verified Database of Notable People, 3500BC-2018AD\n\nevent-extraction\n\nrecognize mention of events\n\nplus everything that can be done with a language model like GPT-4…"
  },
  {
    "objectID": "slides/session_8/index.html#clarification",
    "href": "slides/session_8/index.html#clarification",
    "title": "Text Analysis",
    "section": "Clarification",
    "text": "Clarification\n\n\n\nText analysis / text mining are somewhat used interchangeably\nIn general they consist in quantifying information used in a text…\n… so that it can be incorporated in machine learning analysis\nRecently, deep learning (and GPT-4) has changed this state of facts:\n\nsome models get trained direcly on text (intermediary phases are not explicited)"
  },
  {
    "objectID": "slides/session_8/index.html#the-even-less-glamorous-part",
    "href": "slides/session_8/index.html#the-even-less-glamorous-part",
    "title": "Text Analysis",
    "section": "The even-less glamorous part",
    "text": "The even-less glamorous part\nBefore getting started with text analysis, one needs to get hold of the text in the first place\n\n\nhow to extract\n\nwebscraping: automate a bot to visit website and download text\ndocument extraction: for instance extract the text from pdf docs, get rid of everything irrelevant\n\nhow to store it\n\nwhat kind of database? (sql, mongodb, …)\nimportant problem when database is big\n\n\n\n\nshow github copilot"
  },
  {
    "objectID": "slides/session_8/index.html#processing-steps",
    "href": "slides/session_8/index.html#processing-steps",
    "title": "Text Analysis",
    "section": "Processing steps",
    "text": "Processing steps\n\nLet’s briefly see how text gets processed.\nGoal is to transform the text into a numerical vector of features\n\nStupid approach: “abc”-&gt;[1,2,3]\nwe need to capture some form of language structure\n\nAll the steps can be done fairly easily with nltk …\n\nnltk is comparable to sklearn in terms of widespread adoption\n\n… or with sklearn"
  },
  {
    "objectID": "slides/session_8/index.html#processing-steps-2",
    "href": "slides/session_8/index.html#processing-steps-2",
    "title": "Text Analysis",
    "section": "Processing steps (2)",
    "text": "Processing steps (2)\n\nSteps:\n\ntokenization\nstopwords\nlexicon normalization\n\nstemming\nlemmatization\n\nPOS tagging"
  },
  {
    "objectID": "slides/session_8/index.html#tokenization",
    "href": "slides/session_8/index.html#tokenization",
    "title": "Text Analysis",
    "section": "Tokenization",
    "text": "Tokenization\n\n\n\nTokenization: split input into atomic elements.\n\nWe can recognize sentences.\n\nOr words.\n\nIt is enough for some basic analysis:\n\n\nfrom nltk.probability import FreqDist\nfdist = FreqDist(words)\nprint(fdist.most_common(2))\n[('It', 1), (\"'s\", 1)]\n\n\n\n\nfrom nltk.tokenize import sent_tokenize\ntxt = \"\"\"Animal Farm is a short novel by George Orwell. It was\nwritten during World War II and published in 1945. It is about \na group of farm animals who rebel against their farmer. They \nhope to create a place where the animals can be equal, free,\n and happy.\"\"\"\nsentences  = sent_tokenize(txt)\nprint(sentences)\n\n\n['Animal Farm is a short novel by George Orwell.',\n 'It was\\nwritten during World War II and published in 1945.', \n 'It is about \\na group of farm animals who rebel against their farmer.', \n 'They \\nhope to create a place where the animals can be equal, free,\\n and happy.']\n\n\nfrom nltk.tokenize import word_tokenize\ntxt = \"It's a beautiful thing, the destruction of words.\"\nwords  = word_tokenize(txt)\nprint(words)\n['It', \"'s\", 'a', 'beautiful', 'thing', ',', 'the', 'destruction', 'of', 'words', '.']"
  },
  {
    "objectID": "slides/session_8/index.html#part-of-speech-tagging",
    "href": "slides/session_8/index.html#part-of-speech-tagging",
    "title": "Text Analysis",
    "section": "Part-of speech tagging",
    "text": "Part-of speech tagging\n\n\n\nSometimes we need information about the kind of tokens that we have\n\nWe can perform part-of-speech tagging (aka grammatical tagging)\n\nThis is useful to refine interpretation of some words\n\n“it’s not a beautiful thing”\nvs “it’s a beautiful thing”\nconnotation of beautiful changes\n\n\n\n\nfrom nltk.tokenize import word_tokenize\ntagged = nltk.pos_tag(words)\ntagged\n[('It', 'PRP'),\n (\"'s\", 'VBZ'),\n ('a', 'DT'),\n ('beautiful', 'JJ'),\n ('thing', 'NN'),\n (',', ','),\n ('the', 'DT'),\n ('destruction', 'NN'),\n ('of', 'IN'),\n ('words', 'NNS'),\n ('.', '.')]"
  },
  {
    "objectID": "slides/session_8/index.html#simplifying-the-text-1-stopwords",
    "href": "slides/session_8/index.html#simplifying-the-text-1-stopwords",
    "title": "Text Analysis",
    "section": "Simplifying the text (1): stopwords",
    "text": "Simplifying the text (1): stopwords\n\n\n\nSome words are very frequent and carry no useful meaning\n\n\nThey are called stopwords\n\n\nWe typically remove them from our word list\n\n\n\n\nfrom nltk.corpus import stopwords\nstop_words=set(stopwords.words(\"english\"))\nprint(stop_words)\n{'their', 'then', 'not', 'ma', 'here', ...}\n\n\n\nfiltered_words = [w for w in words if w not in stop_words]\nfiltered_words\n['beautiful', 'thing' 'destruction', 'words']"
  },
  {
    "objectID": "slides/session_8/index.html#simplifying-the-text-2-lexicon-normalization",
    "href": "slides/session_8/index.html#simplifying-the-text-2-lexicon-normalization",
    "title": "Text Analysis",
    "section": "Simplifying the text (2): lexicon normalization",
    "text": "Simplifying the text (2): lexicon normalization\n\n\n\nSometimes, there are several variants of a given word\n\ntight, tightening, tighten\n\n\nStemming: keeping the word root\n\nLemmatization: keeps the word base\n\nlinguistically correct contrary to stemming\n\n\n\n\nfrom nltk.stem import PorterStemmer\nps = PorterStemmer()\n\nwords =  [\"tight\", \"tightening\", \"tighten\"]\nstemmed_words=[ps.stem(w) for w in words]\n['tight', 'tighten', 'tighten']\n\n\nfrom nltk.stem.wordnet import WordNetLemmatizer\nlem = WordNetLemmatizer()\n\nwords =  [\"flying\", \"flyers\", \"fly\"]\nstemmed_words=[ps.stem(w) for w in words]\nlemmatized_words=[lem.lemmatize(w) for w in words]\n# lemmatized\n['flying', 'flyer', 'fly']\n# stemmed\n['fli', 'flyer', 'fli']"
  },
  {
    "objectID": "slides/session_8/index.html#sentiment-analysis-1",
    "href": "slides/session_8/index.html#sentiment-analysis-1",
    "title": "Text Analysis",
    "section": "Sentiment analysis",
    "text": "Sentiment analysis\n\nWhat do we do now that we have reduced a text to a series of word occurrences?\nTwo main approaches:\n\nlexical analysis\nmachine learning"
  },
  {
    "objectID": "slides/session_8/index.html#lexical-analysis",
    "href": "slides/session_8/index.html#lexical-analysis",
    "title": "Text Analysis",
    "section": "Lexical analysis",
    "text": "Lexical analysis\n\n\nUse a “sentiment dictionary” to provide a value (positive or negative) for each word\n\nsum the weights to get positive or negative sentiment\n\nExample: \\[\\underbrace{\\text{Sadly}}_{-}\\text{, there wasn't a glimpse of }\\underbrace{\\text{light}}_{+} \\text{ in his } \\text{world } \\text{ of intense }\\underbrace{\\text{suffering.}}_{-}\\]\nTotal:\n\n-1+1-1. Sentiment is negative.\n\n\n\n\nProblems:?\n\n\ndoesn’t capture irony\nhere, taking grammar into account would change everything\nour dictionary doesn’t have weights for what matters to us\n\n\n\\[ \\text{the central bank forecasts increased }\\underbrace{\\text{inflation}}_{?}\\]"
  },
  {
    "objectID": "slides/session_8/index.html#machine-learning",
    "href": "slides/session_8/index.html#machine-learning",
    "title": "Text Analysis",
    "section": "Machine learning",
    "text": "Machine learning\n\nIdea: we would like the weights to be endogenously determined \\[ \\underbrace{\\text{the}}_{x_1} \\underbrace{\\text{ central}}_{x_2} \\underbrace{\\text{ bank}}_{x_3} \\underbrace{\\text{ forecasts}}_{x_4} \\underbrace{\\text{ increased} }_{x_5} \\underbrace{\\text{ inflation}}_{x_6}\\]\nSuppose we had several texts: we can generate features by counting words in each of them\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nthe\ncentral\nbank\nforecasts\nincreased\ninflation\neconomy\nexchange rate\ncrisis\nsentiment\n\n\n\n\ntext1\n1\n1\n2\n1\n1\n2\n\n\n\n-1\n\n\ntext2\n3\n\n\n\n\n1\n1\n2\n\n+1\n\n\ntext3\n4\n\n1\n\n\n1\n\n1\n1\n-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe can the train the model: \\(y = x_1 w_1 + \\cdots x_K w_K\\) where \\(y\\) is the sentiment and \\(w_i\\) is wordcount of word \\(w_i\\)\n\nof course, we need a similar procedure as before (split the training set and evaluation set, …)\nwe can use any model (like naive bayesian updating)\n\nThis approach is called Bag of Words (BOW)"
  },
  {
    "objectID": "slides/session_8/index.html#some-issues",
    "href": "slides/session_8/index.html#some-issues",
    "title": "Text Analysis",
    "section": "Some issues",
    "text": "Some issues\nBag of words approach with raw word count has a few issues:\n\n\nit requires a big training set with labels\nit overweights long documents\nthere is noise due to the very frequent words that don’t affect sentiment\n\n\n\nImprovement: TF-IDF (Term-Frequency*Inverse-Distribution-Frequency)\n\nreplace word frequency \\(w\\) by \\[\\text{tf-idf} = wd\\frac{\\text{number of documents}}{\\text{number of documents containing $w$}}\\]\nreduces noise due to frequent words"
  },
  {
    "objectID": "slides/session_8/index.html#conclusion",
    "href": "slides/session_8/index.html#conclusion",
    "title": "Text Analysis",
    "section": "Conclusion",
    "text": "Conclusion\n    Recent trends for text analysis:\n\n\ndeep learning\n\nvery flexible model\nreplace tokenization by abstract embedding\n\ngenerative AI\n\ncan perform many text analysis text without pretraining!\n\n\n\n\nNext week:\nIntroduction to Large Language Models for Finance, by Emilie Rannou, partner at Ekimetrics\nBring your laptops!"
  },
  {
    "objectID": "slides/session_8/index_handout.html",
    "href": "slides/session_8/index_handout.html",
    "title": "Text Analysis",
    "section": "",
    "text": "Recall: big data contains heterogenous data\n\ntext / images / sound\n\n\n\n\n\n\nTaking the Fed at its Word: A New Approach to Estimating Central Bank Objectives using Text Analysis by Adam H. Shapiro and Daniel J. Wilson link\n\nRemember the Taylor rule? We tried to estimate it from the data.\nGeneralized version: \\(i_t = \\alpha_\\pi (\\pi_t-\\pi^{\\star}) + \\alpha_y (y_t-y)\\)\nIs there a way to measure the preferences of the central bank? (coefficients and inflation target?)\nShapiro and Wilson: let’s look at the FOMC meeting transcripts\nExcerpts (there are tons of them: 704,499)\n\n\n\n\nI had several conversations at Jackson Hole with Wall Street economists and journalists, and they said, quite frankly, that they really do not believe that our effective inflation target is 1 to 2 percent. They believe we have morphed into 1+1/2 to 2+1/2 percent, and no one thought that we were really going to do anything over time to bring it down to 1 to 2.\n\nSep 2006 St. Louis Federal Reserve President William Poole\n\n\n\nLike most of you, I am not at all alarmist about inflation. I think the worst that is likely to happen would be 20 or 30 basis points over the next year. But even that amount is a little disconcerting for me. I think it is very important for us to maintain our credibility on inflation and it would be somewhat expensive to bring that additional inflation back down.\n\nMarch 2006 Chairman Ben Bernanke\n\n\n\nWith inflation remaining at such rates, we could begin to lose credibility if markets mistakenly inferred that our comfort zone had drifted higher. When we stop raising rates, we ought to be reasonably confident that policy is restrictive enough to bring inflation back toward the center of our comfort zone, which I believe is 1+1/2 percent…So for today, we should move forward with an increase of 25 basis points…\n\nJan 2006 Chicago Federal Reserve President Michael Moskow\n\n\nWe are determined to ensure that inflation returns to our two per cent medium-term target in a timely manner. Based on our current assessment, we consider that the key ECB interest rates are at levels that, maintained for a sufficiently long duration, will make a substantial contribution to this goal. Our future decisions will ensure that our policy rates will be set at sufficiently restrictive levels for as long as necessary.\nMar 2024 Press conference from Christine Lagarde\n\n\n\n\n\n\n\n\nSuppose you work in the trading floor of a financial instutition\nThese kind of tweets have disturbing impact on the markets. You need to react quickly.\nYou need a machine to assess the risk in real time.\nMore generally, tweeter is a quite unique source of real-time data\nHow do you analyse the content of the tweets?\nComment: actually it’s not only the content of the tweets, but who reads, who retweets: graph analysis\n\n\n\n\n\n\n\nThe main branches of text analysis are:\n\nsentiment analysis\n\nassociate positivity/negativity to a text\nprecise meaning of “sentiment” is context dependent\n\n\ntopic modeling\n\nclassify texts as belonging to known categories (supervised)\nfinding likely texts (unsupervised)\n\nnamed-entity recognition\n\nfind who gets mentioned in the text\nexample: A Cross-verified Database of Notable People, 3500BC-2018AD\n\nevent-extraction\n\nrecognize mention of events\n\nplus everything that can be done with a language model like GPT-4…\n\n\n\n\n\n\n\n\n\nText analysis / text mining are somewhat used interchangeably\nIn general they consist in quantifying information used in a text…\n… so that it can be incorporated in machine learning analysis\nRecently, deep learning (and GPT-4) has changed this state of facts:\n\nsome models get trained direcly on text (intermediary phases are not explicited)\n\n\n\n\n\n\nBefore getting started with text analysis, one needs to get hold of the text in the first place\n\n\nhow to extract\n\nwebscraping: automate a bot to visit website and download text\ndocument extraction: for instance extract the text from pdf docs, get rid of everything irrelevant\n\nhow to store it\n\nwhat kind of database? (sql, mongodb, …)\nimportant problem when database is big\n\n\n\n\nshow github copilot",
    "crumbs": [
      "lectures",
      "Text Analysis"
    ]
  },
  {
    "objectID": "slides/session_8/index_handout.html#how-to-deal-with-text",
    "href": "slides/session_8/index_handout.html#how-to-deal-with-text",
    "title": "Text Analysis",
    "section": "",
    "text": "Recall: big data contains heterogenous data\n\ntext / images / sound",
    "crumbs": [
      "lectures",
      "Text Analysis"
    ]
  },
  {
    "objectID": "slides/session_8/index_handout.html#example-1-fomc-meetings",
    "href": "slides/session_8/index_handout.html#example-1-fomc-meetings",
    "title": "Text Analysis",
    "section": "",
    "text": "Taking the Fed at its Word: A New Approach to Estimating Central Bank Objectives using Text Analysis by Adam H. Shapiro and Daniel J. Wilson link\n\nRemember the Taylor rule? We tried to estimate it from the data.\nGeneralized version: \\(i_t = \\alpha_\\pi (\\pi_t-\\pi^{\\star}) + \\alpha_y (y_t-y)\\)\nIs there a way to measure the preferences of the central bank? (coefficients and inflation target?)\nShapiro and Wilson: let’s look at the FOMC meeting transcripts\nExcerpts (there are tons of them: 704,499)\n\n\n\n\nI had several conversations at Jackson Hole with Wall Street economists and journalists, and they said, quite frankly, that they really do not believe that our effective inflation target is 1 to 2 percent. They believe we have morphed into 1+1/2 to 2+1/2 percent, and no one thought that we were really going to do anything over time to bring it down to 1 to 2.\n\nSep 2006 St. Louis Federal Reserve President William Poole\n\n\n\nLike most of you, I am not at all alarmist about inflation. I think the worst that is likely to happen would be 20 or 30 basis points over the next year. But even that amount is a little disconcerting for me. I think it is very important for us to maintain our credibility on inflation and it would be somewhat expensive to bring that additional inflation back down.\n\nMarch 2006 Chairman Ben Bernanke\n\n\n\nWith inflation remaining at such rates, we could begin to lose credibility if markets mistakenly inferred that our comfort zone had drifted higher. When we stop raising rates, we ought to be reasonably confident that policy is restrictive enough to bring inflation back toward the center of our comfort zone, which I believe is 1+1/2 percent…So for today, we should move forward with an increase of 25 basis points…\n\nJan 2006 Chicago Federal Reserve President Michael Moskow\n\n\nWe are determined to ensure that inflation returns to our two per cent medium-term target in a timely manner. Based on our current assessment, we consider that the key ECB interest rates are at levels that, maintained for a sufficiently long duration, will make a substantial contribution to this goal. Our future decisions will ensure that our policy rates will be set at sufficiently restrictive levels for as long as necessary.\nMar 2024 Press conference from Christine Lagarde",
    "crumbs": [
      "lectures",
      "Text Analysis"
    ]
  },
  {
    "objectID": "slides/session_8/index_handout.html#example-2",
    "href": "slides/session_8/index_handout.html#example-2",
    "title": "Text Analysis",
    "section": "",
    "text": "Suppose you work in the trading floor of a financial instutition\nThese kind of tweets have disturbing impact on the markets. You need to react quickly.\nYou need a machine to assess the risk in real time.\nMore generally, tweeter is a quite unique source of real-time data\nHow do you analyse the content of the tweets?\nComment: actually it’s not only the content of the tweets, but who reads, who retweets: graph analysis",
    "crumbs": [
      "lectures",
      "Text Analysis"
    ]
  },
  {
    "objectID": "slides/session_8/index_handout.html#text-mining-what-can-we-extract-from-texts",
    "href": "slides/session_8/index_handout.html#text-mining-what-can-we-extract-from-texts",
    "title": "Text Analysis",
    "section": "",
    "text": "The main branches of text analysis are:\n\nsentiment analysis\n\nassociate positivity/negativity to a text\nprecise meaning of “sentiment” is context dependent\n\n\ntopic modeling\n\nclassify texts as belonging to known categories (supervised)\nfinding likely texts (unsupervised)\n\nnamed-entity recognition\n\nfind who gets mentioned in the text\nexample: A Cross-verified Database of Notable People, 3500BC-2018AD\n\nevent-extraction\n\nrecognize mention of events\n\nplus everything that can be done with a language model like GPT-4…",
    "crumbs": [
      "lectures",
      "Text Analysis"
    ]
  },
  {
    "objectID": "slides/session_8/index_handout.html#clarification",
    "href": "slides/session_8/index_handout.html#clarification",
    "title": "Text Analysis",
    "section": "",
    "text": "Text analysis / text mining are somewhat used interchangeably\nIn general they consist in quantifying information used in a text…\n… so that it can be incorporated in machine learning analysis\nRecently, deep learning (and GPT-4) has changed this state of facts:\n\nsome models get trained direcly on text (intermediary phases are not explicited)",
    "crumbs": [
      "lectures",
      "Text Analysis"
    ]
  },
  {
    "objectID": "slides/session_8/index_handout.html#the-even-less-glamorous-part",
    "href": "slides/session_8/index_handout.html#the-even-less-glamorous-part",
    "title": "Text Analysis",
    "section": "",
    "text": "Before getting started with text analysis, one needs to get hold of the text in the first place\n\n\nhow to extract\n\nwebscraping: automate a bot to visit website and download text\ndocument extraction: for instance extract the text from pdf docs, get rid of everything irrelevant\n\nhow to store it\n\nwhat kind of database? (sql, mongodb, …)\nimportant problem when database is big\n\n\n\n\nshow github copilot",
    "crumbs": [
      "lectures",
      "Text Analysis"
    ]
  },
  {
    "objectID": "slides/session_8/index_handout.html#processing-steps",
    "href": "slides/session_8/index_handout.html#processing-steps",
    "title": "Text Analysis",
    "section": "Processing steps",
    "text": "Processing steps\n\nLet’s briefly see how text gets processed.\nGoal is to transform the text into a numerical vector of features\n\nStupid approach: “abc”-&gt;[1,2,3]\nwe need to capture some form of language structure\n\nAll the steps can be done fairly easily with nltk …\n\nnltk is comparable to sklearn in terms of widespread adoption\n\n… or with sklearn",
    "crumbs": [
      "lectures",
      "Text Analysis"
    ]
  },
  {
    "objectID": "slides/session_8/index_handout.html#processing-steps-2",
    "href": "slides/session_8/index_handout.html#processing-steps-2",
    "title": "Text Analysis",
    "section": "Processing steps (2)",
    "text": "Processing steps (2)\n\nSteps:\n\ntokenization\nstopwords\nlexicon normalization\n\nstemming\nlemmatization\n\nPOS tagging",
    "crumbs": [
      "lectures",
      "Text Analysis"
    ]
  },
  {
    "objectID": "slides/session_8/index_handout.html#tokenization",
    "href": "slides/session_8/index_handout.html#tokenization",
    "title": "Text Analysis",
    "section": "Tokenization",
    "text": "Tokenization\n\n\n\nTokenization: split input into atomic elements.\n\nWe can recognize sentences.\n\nOr words.\n\nIt is enough for some basic analysis:\n\n\nfrom nltk.probability import FreqDist\nfdist = FreqDist(words)\nprint(fdist.most_common(2))\n[('It', 1), (\"'s\", 1)]\n\n\n\n\nfrom nltk.tokenize import sent_tokenize\ntxt = \"\"\"Animal Farm is a short novel by George Orwell. It was\nwritten during World War II and published in 1945. It is about \na group of farm animals who rebel against their farmer. They \nhope to create a place where the animals can be equal, free,\n and happy.\"\"\"\nsentences  = sent_tokenize(txt)\nprint(sentences)\n\n\n['Animal Farm is a short novel by George Orwell.',\n 'It was\\nwritten during World War II and published in 1945.', \n 'It is about \\na group of farm animals who rebel against their farmer.', \n 'They \\nhope to create a place where the animals can be equal, free,\\n and happy.']\n\n\nfrom nltk.tokenize import word_tokenize\ntxt = \"It's a beautiful thing, the destruction of words.\"\nwords  = word_tokenize(txt)\nprint(words)\n['It', \"'s\", 'a', 'beautiful', 'thing', ',', 'the', 'destruction', 'of', 'words', '.']",
    "crumbs": [
      "lectures",
      "Text Analysis"
    ]
  },
  {
    "objectID": "slides/session_8/index_handout.html#part-of-speech-tagging",
    "href": "slides/session_8/index_handout.html#part-of-speech-tagging",
    "title": "Text Analysis",
    "section": "Part-of speech tagging",
    "text": "Part-of speech tagging\n\n\n\nSometimes we need information about the kind of tokens that we have\n\nWe can perform part-of-speech tagging (aka grammatical tagging)\n\nThis is useful to refine interpretation of some words\n\n“it’s not a beautiful thing”\nvs “it’s a beautiful thing”\nconnotation of beautiful changes\n\n\n\n\nfrom nltk.tokenize import word_tokenize\ntagged = nltk.pos_tag(words)\ntagged\n[('It', 'PRP'),\n (\"'s\", 'VBZ'),\n ('a', 'DT'),\n ('beautiful', 'JJ'),\n ('thing', 'NN'),\n (',', ','),\n ('the', 'DT'),\n ('destruction', 'NN'),\n ('of', 'IN'),\n ('words', 'NNS'),\n ('.', '.')]",
    "crumbs": [
      "lectures",
      "Text Analysis"
    ]
  },
  {
    "objectID": "slides/session_8/index_handout.html#simplifying-the-text-1-stopwords",
    "href": "slides/session_8/index_handout.html#simplifying-the-text-1-stopwords",
    "title": "Text Analysis",
    "section": "Simplifying the text (1): stopwords",
    "text": "Simplifying the text (1): stopwords\n\n\n\nSome words are very frequent and carry no useful meaning\n\n\nThey are called stopwords\n\n\nWe typically remove them from our word list\n\n\n\n\nfrom nltk.corpus import stopwords\nstop_words=set(stopwords.words(\"english\"))\nprint(stop_words)\n{'their', 'then', 'not', 'ma', 'here', ...}\n\n\n\nfiltered_words = [w for w in words if w not in stop_words]\nfiltered_words\n['beautiful', 'thing' 'destruction', 'words']",
    "crumbs": [
      "lectures",
      "Text Analysis"
    ]
  },
  {
    "objectID": "slides/session_8/index_handout.html#simplifying-the-text-2-lexicon-normalization",
    "href": "slides/session_8/index_handout.html#simplifying-the-text-2-lexicon-normalization",
    "title": "Text Analysis",
    "section": "Simplifying the text (2): lexicon normalization",
    "text": "Simplifying the text (2): lexicon normalization\n\n\n\nSometimes, there are several variants of a given word\n\ntight, tightening, tighten\n\n\nStemming: keeping the word root\n\nLemmatization: keeps the word base\n\nlinguistically correct contrary to stemming\n\n\n\n\nfrom nltk.stem import PorterStemmer\nps = PorterStemmer()\n\nwords =  [\"tight\", \"tightening\", \"tighten\"]\nstemmed_words=[ps.stem(w) for w in words]\n['tight', 'tighten', 'tighten']\n\n\nfrom nltk.stem.wordnet import WordNetLemmatizer\nlem = WordNetLemmatizer()\n\nwords =  [\"flying\", \"flyers\", \"fly\"]\nstemmed_words=[ps.stem(w) for w in words]\nlemmatized_words=[lem.lemmatize(w) for w in words]\n# lemmatized\n['flying', 'flyer', 'fly']\n# stemmed\n['fli', 'flyer', 'fli']",
    "crumbs": [
      "lectures",
      "Text Analysis"
    ]
  },
  {
    "objectID": "slides/session_8/index_handout.html#sentiment-analysis-1",
    "href": "slides/session_8/index_handout.html#sentiment-analysis-1",
    "title": "Text Analysis",
    "section": "Sentiment analysis",
    "text": "Sentiment analysis\n\nWhat do we do now that we have reduced a text to a series of word occurrences?\nTwo main approaches:\n\nlexical analysis\nmachine learning",
    "crumbs": [
      "lectures",
      "Text Analysis"
    ]
  },
  {
    "objectID": "slides/session_8/index_handout.html#lexical-analysis",
    "href": "slides/session_8/index_handout.html#lexical-analysis",
    "title": "Text Analysis",
    "section": "Lexical analysis",
    "text": "Lexical analysis\n\n\nUse a “sentiment dictionary” to provide a value (positive or negative) for each word\n\nsum the weights to get positive or negative sentiment\n\nExample: \\[\\underbrace{\\text{Sadly}}_{-}\\text{, there wasn't a glimpse of }\\underbrace{\\text{light}}_{+} \\text{ in his } \\text{world } \\text{ of intense }\\underbrace{\\text{suffering.}}_{-}\\]\nTotal:\n\n-1+1-1. Sentiment is negative.\n\n\n\n. . .\nProblems:?\n\n\ndoesn’t capture irony\nhere, taking grammar into account would change everything\nour dictionary doesn’t have weights for what matters to us\n\n\n\\[ \\text{the central bank forecasts increased }\\underbrace{\\text{inflation}}_{?}\\]",
    "crumbs": [
      "lectures",
      "Text Analysis"
    ]
  },
  {
    "objectID": "slides/session_8/index_handout.html#machine-learning",
    "href": "slides/session_8/index_handout.html#machine-learning",
    "title": "Text Analysis",
    "section": "Machine learning",
    "text": "Machine learning\n\nIdea: we would like the weights to be endogenously determined \\[ \\underbrace{\\text{the}}_{x_1} \\underbrace{\\text{ central}}_{x_2} \\underbrace{\\text{ bank}}_{x_3} \\underbrace{\\text{ forecasts}}_{x_4} \\underbrace{\\text{ increased} }_{x_5} \\underbrace{\\text{ inflation}}_{x_6}\\]\nSuppose we had several texts: we can generate features by counting words in each of them\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nthe\ncentral\nbank\nforecasts\nincreased\ninflation\neconomy\nexchange rate\ncrisis\nsentiment\n\n\n\n\ntext1\n1\n1\n2\n1\n1\n2\n\n\n\n-1\n\n\ntext2\n3\n\n\n\n\n1\n1\n2\n\n+1\n\n\ntext3\n4\n\n1\n\n\n1\n\n1\n1\n-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe can the train the model: \\(y = x_1 w_1 + \\cdots x_K w_K\\) where \\(y\\) is the sentiment and \\(w_i\\) is wordcount of word \\(w_i\\)\n\nof course, we need a similar procedure as before (split the training set and evaluation set, …)\nwe can use any model (like naive bayesian updating)\n\nThis approach is called Bag of Words (BOW)",
    "crumbs": [
      "lectures",
      "Text Analysis"
    ]
  },
  {
    "objectID": "slides/session_8/index_handout.html#some-issues",
    "href": "slides/session_8/index_handout.html#some-issues",
    "title": "Text Analysis",
    "section": "Some issues",
    "text": "Some issues\nBag of words approach with raw word count has a few issues:\n\n\nit requires a big training set with labels\nit overweights long documents\nthere is noise due to the very frequent words that don’t affect sentiment\n\n\n\nImprovement: TF-IDF (Term-Frequency*Inverse-Distribution-Frequency)\n\nreplace word frequency \\(w\\) by \\[\\text{tf-idf} = wd\\frac{\\text{number of documents}}{\\text{number of documents containing $w$}}\\]\nreduces noise due to frequent words",
    "crumbs": [
      "lectures",
      "Text Analysis"
    ]
  },
  {
    "objectID": "slides/session_8/index_handout.html#conclusion",
    "href": "slides/session_8/index_handout.html#conclusion",
    "title": "Text Analysis",
    "section": "Conclusion",
    "text": "Conclusion\n    Recent trends for text analysis:\n\n\ndeep learning\n\nvery flexible model\nreplace tokenization by abstract embedding\n\ngenerative AI\n\ncan perform many text analysis text without pretraining!\n\n\n\n. . .\nNext week:\nIntroduction to Large Language Models for Finance, by Emilie Rannou, partner at Ekimetrics\nBring your laptops!",
    "crumbs": [
      "lectures",
      "Text Analysis"
    ]
  },
  {
    "objectID": "slides/session_8/graphs/Untitled1.html",
    "href": "slides/session_8/graphs/Untitled1.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "from matplotlib import pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n\nimport statsmodels.api as sm\n\n\ndf.describe()\n\n\n\n\n\n\n\n\nincome\neducation\nprestige\n\n\n\n\ncount\n45.000000\n45.000000\n45.000000\n\n\nmean\n41.866667\n52.555556\n47.688889\n\n\nstd\n24.435072\n29.760831\n31.510332\n\n\nmin\n7.000000\n7.000000\n3.000000\n\n\n25%\n21.000000\n26.000000\n16.000000\n\n\n50%\n42.000000\n45.000000\n41.000000\n\n\n75%\n64.000000\n84.000000\n81.000000\n\n\nmax\n81.000000\n100.000000\n97.000000\n\n\n\n\n\n\n\n\ndf.cov()\n\n\n\n\n\n\n\n\nincome\neducation\nprestige\n\n\n\n\nincome\n597.072727\n526.871212\n645.071212\n\n\neducation\n526.871212\n885.707071\n798.904040\n\n\nprestige\n645.071212\n798.904040\n992.901010\n\n\n\n\n\n\n\n\nfrom matplotlib import pyplot as plt\n\n\nplt.figure(figsize=(8,6))\nplt.plot(df['education'],df['income'],'o')\nplt.grid()\nplt.xlabel(\"x (Education)\")\nplt.ylabel(\"y (Income)\")\nplt.savefig(\"data_description.png\")\n\n\n\n\n\n\n\n\n\nfor i in [1,2,3]:\n    xvec = np.linspace(10,100)\n\n    plt.figure(figsize=(12,8))\n    plt.plot(df['education'],df['income'],'o')\n\n    plt.plot(xvec, xvec * 0 + 50)\n    if i&gt;=2:\n        plt.plot(xvec, xvec )\n    if i&gt;=3:\n        plt.plot(xvec,  90- 0.6*xvec )\n\n    plt.grid()\n    plt.xlabel(\"x (Education)\")\n    plt.ylabel(\"y (Income)\")\n    plt.savefig(f\"which_line_{i}.png\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfrom ipywidgets import interact\n\n\nimport matplotlib.patches as patches\n\n\na = 0.1\nb = 1.0\nind = 23\n\n\napprox =  a + b*xvec\n\n# Create figure and axes\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\nplt.plot(df['education'],df['income'],'o')\nplt.plot(xvec, approx, color='red')\n\nx, y = df['education'][ind], df['income'][ind]\nplt.plot(x, y, 'o', color='red' )\np = a+b*x\nplt.grid(True)\nh = abs(p-y)\nplt.vlines(x, y+h, y, color='red')\n\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.savefig(f\"error_0.png\")\n\n\n\n\n\n\n\n\n\nplt.vlines?\n\n\nSignature:\nplt.vlines(\n    x,\n    ymin,\n    ymax,\n    colors=None,\n    linestyles='solid',\n    label='',\n    *,\n    data=None,\n    **kwargs,\n)\nDocstring:\nPlot vertical lines.\nPlot vertical lines at each *x* from *ymin* to *ymax*.\nParameters\n----------\nx : float or array-like\n    x-indexes where to plot the lines.\nymin, ymax : float or array-like\n    Respective beginning and end of each line. If scalars are\n    provided, all lines will have same length.\ncolors : list of colors, default: :rc:`lines.color`\nlinestyles : {'solid', 'dashed', 'dashdot', 'dotted'}, optional\nlabel : str, default: ''\nReturns\n-------\n`~matplotlib.collections.LineCollection`\nOther Parameters\n----------------\n**kwargs : `~matplotlib.collections.LineCollection` properties.\nSee Also\n--------\nhlines : horizontal lines\naxvline: vertical line across the axes\nNotes\n-----\n.. note::\n    In addition to the above described arguments, this function can take\n    a *data* keyword argument. If such a *data* argument is given,\n    the following arguments can also be string ``s``, which is\n    interpreted as ``data[s]`` (unless this raises an exception):\n    *x*, *ymin*, *ymax*, *colors*.\n    Objects passed as **data** must support item access (``data[s]``) and\n    membership test (``s in data``).\nFile:      ~/.local/opt/miniconda/lib/python3.8/site-packages/matplotlib/pyplot.py\nType:      function\n\n\n\n\n\na = 0.1\nb = 1.0\nind = 23\n\n\napprox =  a + b*xvec\n\n# Create figure and axes\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\nplt.plot(df['education'],df['income'],'o')\nplt.plot(xvec, approx, color='red')\n\nx, y = df['education'][ind], df['income'][ind]\nplt.plot(x, y, 'o', color='red' )\np = a+b*x\nplt.grid(True)\nh = abs(p-y)\nif p-y&gt;0:\n    # Create a Rectangle patch\n    rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n    ax.add_patch(rect)\n    \nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.savefig(f\"errors_{1}.png\")\n\n\n\n\n\n\n\n\n\ndef L(a,b):\n    Δ = a + b*df['education'] - df['income']\n    return (Δ**2).sum()\n\n\na = 0.1\nb = 0.8\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red')\n\nplt.grid(True)\nfor ind in range(df.shape[0]):\n    \n    x, y = df['education'][ind], df['income'][ind]\n    p = a+b*x\n\n    h = abs(p-y)\n    if p-y&gt;0:\n        # Create a Rectangle patch\n        rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\n    else:\n        rect = patches.Rectangle((x,y-h),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"errors_2.png\")\n\n\n\n\n\n\n\n\n\na = 90\nb = -0.6\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red')\n\nplt.grid(True)\nfor ind in range(df.shape[0]):\n    \n    x, y = df['education'][ind], df['income'][ind]\n    p = a+b*x\n\n    h = abs(p-y)\n    if p-y&gt;0:\n        # Create a Rectangle patch\n        rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\n    else:\n        rect = patches.Rectangle((x,y-h),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"errors_3.png\")\n\n\n\n\n\n\n\n\n\nimport scipy.optimize\n\n\nscipy.optimize.minimize(lambda x: L(x[0], x[1]),np.array([0.5, 0.5]))\n\n      fun: 12480.970174488397\n hess_inv: array([[ 7.14169839e-09, -3.91281920e-09],\n       [-3.91281920e-09,  2.46663613e-09]])\n      jac: array([0.00024414, 0.00012207])\n  message: 'Desired error not necessarily achieved due to precision loss.'\n     nfev: 57\n      nit: 7\n     njev: 19\n   status: 2\n  success: False\n        x: array([10.60350224,  0.59485938])\n\n\n\na = 10\nb = 0.59\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red')\n\nplt.grid(True)\nfor ind in range(df.shape[0]):\n    \n    x, y = df['education'][ind], df['income'][ind]\n    p = a+b*x\n\n    h = abs(p-y)\n    if p-y&gt;0:\n        # Create a Rectangle patch\n        rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\n    else:\n        rect = patches.Rectangle((x,y-h),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"errors_4.png\")\n\n\n\n\n\n\n\n\n\na = 10\nb = 0.59\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red', alpha=0.5)\n\nplt.plot(60, a + b*60, 'o', color='red',)\n\nprint(a+b*60)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"prediction.png\")\n\n45.4\n\n\n\n\n\n\n\n\n\n\na = 10\nb = 0.59\n\napprox =  (a + b*df['education'] - df['income'])\n\nplt.figure(figsize=(12,6))\n\nplt.subplot(121)\nplt.plot(approx)\nplt.grid(False)\nplt.title(\"Residuals\")\n\n\nplt.subplot(122)\ndistplot(approx)\nplt.title(\"Distribution of residuals\")\nplt.grid()\n\nplt.savefig(\"residuals.png\")\n\n/home/pablo/.local/opt/miniconda/lib/python3.8/site-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n  warnings.warn(msg, FutureWarning)\n\n\n\n\n\n\n\n\n\n\n(a + b*df['education'] - df['income']).std()\n\n16.842782676352154\n\n\n\n\n\n/home/pablo/.local/opt/miniconda/lib/python3.8/site-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n  warnings.warn(msg, FutureWarning)\n\n\n\n\n\n\n\n\n\n\nfrom scipy.stats import f\n\n\nf(0.3)\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n&lt;ipython-input-191-91b22dc02480&gt; in &lt;module&gt;\n----&gt; 1 f(0.3)\n\n~/.local/opt/miniconda/lib/python3.8/site-packages/scipy/stats/_distn_infrastructure.py in __call__(self, *args, **kwds)\n    778 \n    779     def __call__(self, *args, **kwds):\n--&gt; 780         return self.freeze(*args, **kwds)\n    781     __call__.__doc__ = freeze.__doc__\n    782 \n\n~/.local/opt/miniconda/lib/python3.8/site-packages/scipy/stats/_distn_infrastructure.py in freeze(self, *args, **kwds)\n    775 \n    776         \"\"\"\n--&gt; 777         return rv_frozen(self, *args, **kwds)\n    778 \n    779     def __call__(self, *args, **kwds):\n\n~/.local/opt/miniconda/lib/python3.8/site-packages/scipy/stats/_distn_infrastructure.py in __init__(self, dist, *args, **kwds)\n    422         self.dist = dist.__class__(**dist._updated_ctor_param())\n    423 \n--&gt; 424         shapes, _, _ = self.dist._parse_args(*args, **kwds)\n    425         self.a, self.b = self.dist._get_support(*shapes)\n    426 \n\nTypeError: _parse_args() missing 1 required positional argument: 'dfd'\n\n\n\n\nnp.rand\n\n\nK = 100\nxvec = np.linspace(0,1,K)\ne1 = np.random.randn(K)*0.1\nyvec = 0.1 + xvec*0.4 + e1\ne2 = np.random.randn(K)*0.05\nyvec2 = 0.1 + xvec*(xvec-1)/2 + e2\ne3 = np.random.randn(K)*xvec/2\nyvec3 = 0.1 + xvec + e3\n\nyvec4 = 0.1 + np.sin(xvec*6) + np.random.randn(K)*xvec/2\n\n\nfrom dolo.numeric.processes import VAR1\n\n\nsim = VAR1( ρ=0.8, Σ=0.001).simulate(N=1,T=100)\nyvec4 = 0.1 + xvec*0.4 + sim.ravel()\n\n\nplt.figure(figsize=(18,6))\nplt.subplot(241)\nplt.plot(xvec, yvec,'o')\nplt.plot(xvec, 0.1 + xvec*0.4 )\nplt.ylabel(\"Series\")\nplt.title(\"white noise\")\nplt.subplot(242)\nplt.plot(xvec, yvec2, 'o')\nplt.plot(xvec, yvec2*0)\nplt.title('nonlinear')\nplt.subplot(243)\nplt.plot(xvec, yvec3,'o')\nplt.plot(xvec, 0.1 + xvec)\nplt.title('heteroskedastic')\nplt.subplot(244)\nplt.plot(xvec, yvec4,'o')\nplt.plot(xvec, xvec*0.6)\n\nplt.title('correlated')\n\n\nplt.subplot(245)\nplt.plot(xvec, e1,'o')\nplt.ylabel(\"Residuals\")\nplt.subplot(246)\nplt.plot(xvec, yvec2-0.075, 'o')\n\nplt.subplot(247)\nplt.plot(xvec, e3,'o')\nplt.subplot(248)\nplt.plot(xvec, sim.ravel(),'o')\n\nplt.tight_layout()\n\nplt.savefig(\"residuals_circus.png\")"
  },
  {
    "objectID": "slides/session_4/index.html#remember-dataset-from-last-time",
    "href": "slides/session_4/index.html#remember-dataset-from-last-time",
    "title": "Multiple Regression",
    "section": "Remember dataset from last time",
    "text": "Remember dataset from last time\n\n\n\n\n\n\ntype\nincome\neducation\nprestige\n\n\n\n\naccountant\nprof\n62\n86\n82\n\n\npilot\nprof\n72\n76\n83\n\n\narchitect\nprof\n75\n92\n90\n\n\nauthor\nprof\n55\n90\n76\n\n\nchemist\nprof\n64\n86\n90\n\n\n\n\n\nLast week we “ran” a linear regression: \\(y = \\alpha + \\beta x\\). Result: \\[\\text{income} = xx + 0.72 \\text{education}\\]\nShould we have looked at “prestige” instead ? \\[\\text{income} = xx + 0.83 \\text{prestige}\\]\nWhich one is better?"
  },
  {
    "objectID": "slides/session_4/index.html#prestige-or-education",
    "href": "slides/session_4/index.html#prestige-or-education",
    "title": "Multiple Regression",
    "section": "Prestige or Education",
    "text": "Prestige or Education\n\n\nif the goal is to predict: the one with higher explained variance\n\nprestige has higher \\(R^2\\) (\\(0.83^2\\))\n\nunless we are interested in the effect of education"
  },
  {
    "objectID": "slides/session_4/index.html#multiple-regression",
    "href": "slides/session_4/index.html#multiple-regression",
    "title": "Multiple Regression",
    "section": "Multiple regression",
    "text": "Multiple regression\n\nWhat about using both?\n\n2 variables model: \\[\\text{income} = \\alpha + \\beta_1 \\text{education} + \\beta_2 \\text{prestige}\\]\nwill probably improve prediction power (explained variance)\n\\(\\beta_1\\) might not be meaningful on its own anymore (education and prestige are correlated)"
  },
  {
    "objectID": "slides/session_4/index.html#fitting-a-model",
    "href": "slides/session_4/index.html#fitting-a-model",
    "title": "Multiple Regression",
    "section": "Fitting a model",
    "text": "Fitting a model\nNow we are trying to fit a plane to a cloud of points."
  },
  {
    "objectID": "slides/session_4/index.html#minimization-criterium",
    "href": "slides/session_4/index.html#minimization-criterium",
    "title": "Multiple Regression",
    "section": "Minimization Criterium",
    "text": "Minimization Criterium\n\nTake all observations: \\((\\text{income}_n,\\text{education}_n,\\text{prestige}_n)_{n\\in[0,N]}\\)\nObjective: sum of squares \\[ L(\\alpha, \\beta_1, \\beta_2) = \\sum_i \\left( \\underbrace{ \\alpha + \\beta_1 \\text{education}_n + \\beta_2 \\text{prestige}_n - \\text{income}_n }_{e_n=\\text{prediction error} }\\right)^2 \\]\nMinimize loss function in \\(\\alpha\\), \\(\\beta_1\\), \\(\\beta_2\\)\nAgain, we can perform numerical optimization (machine learning approach)\n\n… but there is an explicit formula"
  },
  {
    "objectID": "slides/session_4/index.html#ordinary-least-square",
    "href": "slides/session_4/index.html#ordinary-least-square",
    "title": "Multiple Regression",
    "section": "Ordinary Least Square",
    "text": "Ordinary Least Square\n\n\n\n\\[Y = \\begin{bmatrix}\n\\text{income}_1 \\\\\\\\\n\\vdots \\\\\\\\\n\\text{income}_N\n\\end{bmatrix}\\] \\[X = \\begin{bmatrix}\n1 & \\text{education}_1 & \\text{prestige}_1 \\\\\\\\\n\\vdots & \\vdots & \\vdots \\\\\\\\\n1 &\\text{education}_N & \\text{prestige}_N\n\\end{bmatrix}\\]\n\n\nMatrix Version (look for \\(B = \\left( \\alpha,  \\beta_1 , \\beta_2 \\right)\\)): \\[Y =  X B + E\\]\nNote that constant can be interpreted as a “variable”\nLoss function \\[L(A,B) = (Y - X B)' (Y - X B)\\]\nResult of minimization \\(\\min_{(A,B)} L(A,B)\\) : \\[\\begin{bmatrix}\\alpha & \\beta_1 & \\beta_2 \\end{bmatrix} = (X'X)^{-1} X' Y \\]"
  },
  {
    "objectID": "slides/session_4/index.html#solution",
    "href": "slides/session_4/index.html#solution",
    "title": "Multiple Regression",
    "section": "Solution",
    "text": "Solution\n\nResult: \\[\\text{income} = 10.43  + 0.03 \\times \\text{education} + 0.62 \\times \\text{prestige}\\]\nQuestions:\n\nis it a better regression than the other?\nis the coefficient in front of education significant?\nhow do we interpret it?\ncan we build confidence intervals?"
  },
  {
    "objectID": "slides/session_4/index.html#explained-variance-1",
    "href": "slides/session_4/index.html#explained-variance-1",
    "title": "Multiple Regression",
    "section": "Explained Variance",
    "text": "Explained Variance\nAs in the 1d case we can compare: - the variability of the model predictions (\\(MSS\\)) - the variance of the data (\\(TSS\\), T for total)\nCoefficient of determination (same formula):\n\\[R^2 = \\frac{MSS}{TSS}\\]\nOr:\n\\[R^2 = 1-\\frac{RSS}{SST}\\]\nwhere \\(RSS\\) is the non explained variance"
  },
  {
    "objectID": "slides/session_4/index.html#adjusted-r-squared",
    "href": "slides/session_4/index.html#adjusted-r-squared",
    "title": "Multiple Regression",
    "section": "Adjusted R squared",
    "text": "Adjusted R squared\n\n\nFact:\n\nadding more regressors always improve \\(R^2\\)\nwhy not throw everything in? (kitchen sink regressions)\ntwo many regressors: overfitting the data\n\n\nPenalise additional regressors: adjusted R^2\n\\[R^2_{adj} = 1-(1-R^2)\\frac{N-1}{N-p-1}\\]\nWhere:\n\n\\(N\\): number of observations\n\\(p\\) number of variables\n\n\n\nIn our example:\n\n\n\n\n\n\n\n\nRegression\n\\(R^2\\)\n \\(R^2_{adj}\\) \n\n\n\n\neducation\n0.525\n 0.514 \n\n\nprestige\n0.702\n 0.695 \n\n\neducation + prestige\n0.7022\n 0.688"
  },
  {
    "objectID": "slides/session_4/index.html#making-a-regression-with-statsmodels",
    "href": "slides/session_4/index.html#making-a-regression-with-statsmodels",
    "title": "Multiple Regression",
    "section": "Making a regression with statsmodels",
    "text": "Making a regression with statsmodels\nimport statsmodels\nWe use a special API inspired by R:\nimport statsmodels.formula.api as smf"
  },
  {
    "objectID": "slides/session_4/index.html#performing-a-regression",
    "href": "slides/session_4/index.html#performing-a-regression",
    "title": "Multiple Regression",
    "section": "Performing a regression",
    "text": "Performing a regression\n\nRunning a regression with statsmodels\n\nmodel = smf.ols('income ~ education',  df)  # model\nres = model.fit()  # perform the regression\nres.describe()\n\n‘income ~ education’ is the model formula\n\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:                 income   R-squared:                       0.525\nModel:                            OLS   Adj. R-squared:                  0.514\nMethod:                 Least Squares   F-statistic:                     47.51\nDate:                Tue, 02 Feb 2021   Prob (F-statistic):           1.84e-08\nTime:                        05:21:25   Log-Likelihood:                -190.42\nNo. Observations:                  45   AIC:                             384.8\nDf Residuals:                      43   BIC:                             388.5\nDf Model:                           1                                         \nCovariance Type:            nonrobust                                         \n==============================================================================\n                 coef    std err          t      P&gt;|t|      [0.025      0.975]\n==============================================================================\nIntercept     10.6035      5.198      2.040      0.048       0.120      21.087\neducation      0.5949      0.086      6.893      0.000       0.421       0.769\n==============================================================================\nOmnibus:                        9.841   Durbin-Watson:                   1.736\nProb(Omnibus):                  0.007   Jarque-Bera (JB):               10.609\nSkew:                           0.776   Prob(JB):                      0.00497\nKurtosis:                       4.802   Cond. No.                         123.\n=============================================================================="
  },
  {
    "objectID": "slides/session_4/index.html#formula-mini-language",
    "href": "slides/session_4/index.html#formula-mini-language",
    "title": "Multiple Regression",
    "section": "Formula mini-language",
    "text": "Formula mini-language\n\nWith statsmodels formulas, can be supplied with R-style syntax\nExamples:\n\n\n\n\n\n\n\n\nFormula\nModel\n\n\n\n\nincome ~ education\n\\(\\text{income}_i = \\alpha + \\beta \\text{education}_i\\)\n\n\nincome ~ prestige\n\\(\\text{income}_i = \\alpha + \\beta \\text{prestige}_i\\)\n\n\nincome ~ prestige - 1\n\\(\\text{income}_i = \\beta \\text{prestige}_i\\) (no intercept)\n\n\nincome ~ education + prestige\n\\(\\text{income}_i = \\alpha + \\beta_1 \\text{education}_i + \\beta_2 \\text{prestige}_i\\)"
  },
  {
    "objectID": "slides/session_4/index.html#formula-mini-language-1",
    "href": "slides/session_4/index.html#formula-mini-language-1",
    "title": "Multiple Regression",
    "section": "Formula mini-language",
    "text": "Formula mini-language\n\nOne can use formulas to apply transformations to variables\n\n\n\n\n\n\n\n\nFormula\nModel\n\n\n\n\nlog(P) ~ log(M) + log(Y)\n\\(\\log(P_i) = \\alpha + \\alpha_1 \\log(M_i) + \\alpha_2 \\log(Y_i)\\) (log-log)\n\n\nlog(Y) ~ i\n\\(\\log(P_i) = \\alpha + i_i\\) (semi-logs)\n\n\n\n\nThis is useful if the true relationship is nonlinear\nAlso useful, to interpret the coefficients"
  },
  {
    "objectID": "slides/session_4/index.html#coefficients-interpetation",
    "href": "slides/session_4/index.html#coefficients-interpetation",
    "title": "Multiple Regression",
    "section": "Coefficients interpetation",
    "text": "Coefficients interpetation\nExample:\n\n(police_spending and prevention_policies in million dollars) \\[\\text{number_or_crimes} = 0.005\\% - 0.001 \\text{pol_spend} - 0.005 \\text{prev_pol} + 0.002 \\text{population density}\\]\nreads: when holding other variables constant a 0.1 million increase in police spending reduces crime rate by 0.001%\n\n\n\nIinterpretation?\n\nproblematic because variables have different units\nwe can say that prevention policies are more efficient than police spending ceteris paribus\n\n\n\nTake logs: \\[\\log(\\text{number_or_crimes}) = 0.005\\% - 0.15 \\log(\\text{pol_spend}) - 0.4 \\log(\\text{prev_pol}) + 0.2 \\log(\\text{population density})\\]\n\nnow we have an estimate of elasticities\na \\(1\\%\\) increase in police spending leads to a \\(0.15\\%\\) decrease in the number of crimes"
  },
  {
    "objectID": "slides/session_4/index.html#hypotheses",
    "href": "slides/session_4/index.html#hypotheses",
    "title": "Multiple Regression",
    "section": "Hypotheses",
    "text": "Hypotheses\n\n\n\n\nRecall what we do:\n\nwe have the data \\(X,Y\\)\nwe choose a model: \\[ Y = \\alpha + X \\beta \\]\nfrom the data we compute estimates: \\[\\hat{\\beta}  = (X'X)^{-1} X' Y \\] \\[\\hat{\\alpha} = Y- X \\beta \\]\nestimates are a precise function of data\n\nexact formula not important here\n\n\n\n\n\n\nWe need some hypotheses on the data generation process:\n\n\\(Y = X \\beta + \\epsilon\\)\n\\(\\mathbb{E}\\left[ \\epsilon \\right] = 0\\)\n\\(\\epsilon\\) multivariate normal with covariance matrix \\(\\sigma^2 I_n\\)\n\n\\(\\forall i, \\sigma(\\epsilon_i) = \\sigma\\)\n\\(\\forall i,j, cov(\\epsilon_i, \\epsilon_j) = 0\\)\n\n\n\n\nUnder these hypotheses:\n\n\\(\\hat{\\beta}\\) is an unbiased estimate of true parameter \\(\\beta\\)\n\ni.e. \\(\\mathbb{E} [\\hat{\\beta}] = \\beta\\)\n\none can prove \\(Var(\\hat{\\beta}) = \\sigma^2 I_n\\)\n\\(\\sigma\\) can be estimated by \\(\\hat{\\sigma}=S\\frac{\\sum_i (y_i-{pred}_i)^2}{N-p}\\)\n\n\\(N-p\\): degrees of freedoms\n\none can estimate: \\(\\sigma(\\hat{\\beta_k})\\)\n\nit is the \\(i\\)-th diagonal element of \\(\\hat{\\sigma}^2 X'X\\)"
  },
  {
    "objectID": "slides/session_4/index.html#is-the-regression-significant",
    "href": "slides/session_4/index.html#is-the-regression-significant",
    "title": "Multiple Regression",
    "section": "Is the regression significant?",
    "text": "Is the regression significant?\n\n\n\nApproach is very similar to the one-dimensional case\n\n\n\n\n\n\n\n\nFisher Criterium (F-test)\n\n\n\n\\(H0\\): all coeficients are 0\n\ni.e. true model is \\(y=\\alpha + \\epsilon\\)\n\n\\(H1\\): some coefficients are not 0\n\n\n\n\n\nStatistics: \\[F=\\frac{MSR}{MSE}\\] (same as 1d)\n\n\\(MSR\\): mean-squared error of constant model\n\\(MSE\\): mean-squared error of full model\n\n\n\nUnder:\n\nthe model assumptions about the data generation process\nthe H0 hypothesis\n\n\n\n… the distribution of \\(F\\) is known\n\n\nIt is remarkable that it doesn’t depend on \\(\\sigma\\) !\n\n\nOne can produce a p-value.\n\nprobability to obtain this statistics given hypothesis H0\nif very low, H0 is rejected"
  },
  {
    "objectID": "slides/session_4/index.html#is-each-coefficient-significant",
    "href": "slides/session_4/index.html#is-each-coefficient-significant",
    "title": "Multiple Regression",
    "section": "Is each coefficient significant ?",
    "text": "Is each coefficient significant ?\n\n\n\n\n\n\n\n\n\nStudent Test\n\n\nGiven a coefficient \\(\\beta_k\\):\n\n\\(H0\\): true coefficient is 0\n\\(H1\\): true coefficient is not zero\n\n\n\n\n\nStatistics (student-t): \\[t = \\frac{\\hat{\\beta_k}}{\\hat{\\sigma}(\\hat{\\beta_k})}\\]\n\nwhere \\(\\hat{\\sigma}(\\beta_k)\\) is \\(i\\)-th diagonal element of \\(\\hat{\\sigma}^2 X'X\\)\nit compares the estimated value of a coefficient to its estimated standard deviation\n\n\n\nUnder the inference hypotheses, distribution of \\(t\\) is known.\n\nit is a student distribution\n\n\n\nProcedure:\n\nCompute \\(t\\). Check acceptance threshold \\(t*\\) at probability \\(\\alpha\\) (ex 5%)\nCoefficient is significant with probability \\(1-\\alpha\\) if \\(t&gt;t*\\)\n\n\n\nOr just look at the p-value:\n\nprobability that \\(t\\) would be as high as it is, assuming \\(H0\\)"
  },
  {
    "objectID": "slides/session_4/index.html#confidence-intervals",
    "href": "slides/session_4/index.html#confidence-intervals",
    "title": "Multiple Regression",
    "section": "Confidence intervals",
    "text": "Confidence intervals\nSame as in the 1d case.\n\nTake estimate \\(\\color{red}{\\beta_i}\\) with an estimate of its standard deviation \\(\\color{red}{\\hat{\\sigma}(\\beta_i)}\\)\nCompute student \\(\\color{red}{t^{\\star}}\\) at \\(\\color{red}{\\alpha}\\) confidence level (ex: \\(\\alpha=5\\\\%\\)) such that:\n\n\\(P(|t|&gt;t^{\\star})&lt;\\alpha\\)\n\n\n\nProduce confidence intervals at \\(\\alpha\\) confidence level:\n\n\\([\\color{red}{\\beta_i} - t^{\\star} \\color{red}{\\hat{\\sigma}(\\beta_i)}, \\color{red}{\\beta_i} + t^{\\star} \\color{red}{\\hat{\\sigma}(\\beta_i)}]\\)\n\nInterpretation:\n\nfor a given confidence interval at confidence level \\(\\alpha\\)…\nthe probability that our coefficient was obtained, if the true coefficient were outside of it, is smaller than \\(\\alpha\\)"
  },
  {
    "objectID": "slides/session_4/index.html#other-tests",
    "href": "slides/session_4/index.html#other-tests",
    "title": "Multiple Regression",
    "section": "Other tests",
    "text": "Other tests\n\nThe tests seen so far rely on strong statistical assumptions (normality, homoscedasticity, etc..)\nSome tests can be used to test these assumptions:\n\nJarque-Bera: is the distribution of data truly normal\nDurbin-Watson: are residuals autocorrelated (makes sense for time-series)\n…\n\nIn case assumptions are not met…\n\n… still possible to do econometrics\n… but beyond the scope of this course"
  },
  {
    "objectID": "slides/session_4/index.html#variable-selection-1",
    "href": "slides/session_4/index.html#variable-selection-1",
    "title": "Multiple Regression",
    "section": "Variable selection",
    "text": "Variable selection\n\n\n\nI’ve got plenty of data:\n\n\\(y\\): gdp\n\\(x_1\\): investment\n\\(x_2\\): inflation\n\\(x_3\\): education\n\\(x_4\\): unemployment\n…\n\n\n\n\nMany possible regressions:\n\n\\(y = α + \\beta_1 x_1\\)\n\\(y = α + \\beta_2 x_2 + \\beta_3 x_4\\)\n…\n\n\n\n\n\nWhich one do I choose ?\n\nputting everything together is not an option (kitchen sink regression)"
  },
  {
    "objectID": "slides/session_4/index.html#not-enough-coefficients",
    "href": "slides/session_4/index.html#not-enough-coefficients",
    "title": "Multiple Regression",
    "section": "Not enough coefficients",
    "text": "Not enough coefficients\nSuppose you run a regression: \\[y = \\alpha + \\beta_1 x_1 + \\epsilon\\] and are genuinely interested in coefficient \\(\\beta_1\\)\n\nBut unknowingly to you, the actual model is \\[y = \\alpha + \\beta_1 x_1 + \\beta_2 x_2 + \\eta\\]\n\n\nThe residual \\(y - \\alpha - \\beta_1 x_1\\) is not white noise\n\nspecification hypotheses are violated\nestimated \\(\\hat{\\beta_1}\\) will have a bias (omitted variable bias)\nto correct the bias we add \\(x_2\\)\n\neven though we are not interested in \\(x_2\\) by itself\nwe control for \\(x_2\\)"
  },
  {
    "objectID": "slides/session_4/index.html#example",
    "href": "slides/session_4/index.html#example",
    "title": "Multiple Regression",
    "section": "Example",
    "text": "Example\n\n\nSuppose I want to check Okun’s law. I consider the following model: \\[\\text{gdp_growth} = \\alpha + \\beta \\times \\text{unemployment}\\]\nI obtain: \\[\\text{gdp_growth} = 0.01 - 0.1 \\times \\text{unemployment} + e_i\\]\nThen I inspect visually the residuals: not normal at all!\nConclusion: my regression is misspecified, \\(0.1\\) is a biased (useless) estimate\nI need to control for additional variables. For instance: \\[\\text{gdp_growth} = \\alpha + \\beta_1 \\text{unemployment} + \\beta_2 \\text{interest rate}\\]\nUntil the residuals are actually white noise"
  },
  {
    "objectID": "slides/session_4/index.html#colinear-regressors",
    "href": "slides/session_4/index.html#colinear-regressors",
    "title": "Multiple Regression",
    "section": "Colinear regressors",
    "text": "Colinear regressors\n\n\nWhat happens if two regressors are (almost) colinear? \\[y = \\alpha + \\beta_1 x_1 + \\beta_2 x_2\\] where \\(x_2 = \\kappa x_1\\)\nIntuitively: parameters are not unique\n\nif \\(y = \\alpha + \\beta_1 x_1\\) is the right model…\nthen \\(y = \\alpha + \\beta_1 \\lambda x_1 + \\beta_2 (1-\\lambda) \\frac{1}{\\kappa} x_2\\) is exactly as good…\n\nMathematically: \\((X'X)\\) is not invertible.\nWhen regressors are almost colinear, coefficients can have a lot of variability.\nTest:\n\ncorrelation statistics\ncorrelation plot"
  },
  {
    "objectID": "slides/session_4/index.html#choosing-regressors",
    "href": "slides/session_4/index.html#choosing-regressors",
    "title": "Multiple Regression",
    "section": "Choosing regressors",
    "text": "Choosing regressors\n\\[y = \\alpha + \\beta_1 x_1 + ... \\beta_n x_n\\]\nWhich regressors to choose ?\n\n\nMethod 1 : remove coefficients with lowest t (less significant) to maximize adjusted R-squared\n\nremove regressors with lowest t\n\nnot the one you are interested in ;)\n\nregress again\nsee if adjusted \\(R^2\\) is decreasing\n\nif so continue\notherwise cancel last step and stop\n\n\n\n\nMethod 2 : choose combination to maximize Akaike Information Criterium\n\nAIC: \\(p - log(L)\\)\n\\(L\\) is likelihood\ncomputed by all good econometric softwares"
  },
  {
    "objectID": "slides/session_4/index_handout.html",
    "href": "slides/session_4/index_handout.html",
    "title": "Multiple Regression",
    "section": "",
    "text": "type\nincome\neducation\nprestige\n\n\n\n\naccountant\nprof\n62\n86\n82\n\n\npilot\nprof\n72\n76\n83\n\n\narchitect\nprof\n75\n92\n90\n\n\nauthor\nprof\n55\n90\n76\n\n\nchemist\nprof\n64\n86\n90\n\n\n\n\n\nLast week we “ran” a linear regression: \\(y = \\alpha + \\beta x\\). Result: \\[\\text{income} = xx + 0.72 \\text{education}\\]\nShould we have looked at “prestige” instead ? \\[\\text{income} = xx + 0.83 \\text{prestige}\\]\nWhich one is better?\n\n\n\n\n\n\n\n\n\nif the goal is to predict: the one with higher explained variance\n\nprestige has higher \\(R^2\\) (\\(0.83^2\\))\n\nunless we are interested in the effect of education\n\n\n\n\n\n\nWhat about using both?\n\n2 variables model: \\[\\text{income} = \\alpha + \\beta_1 \\text{education} + \\beta_2 \\text{prestige}\\]\nwill probably improve prediction power (explained variance)\n\\(\\beta_1\\) might not be meaningful on its own anymore (education and prestige are correlated)\n\n\n\n\n\n\nNow we are trying to fit a plane to a cloud of points.\n \n\n\n\n\n\nTake all observations: \\((\\text{income}_n,\\text{education}_n,\\text{prestige}_n)_{n\\in[0,N]}\\)\nObjective: sum of squares \\[ L(\\alpha, \\beta_1, \\beta_2) = \\sum_i \\left( \\underbrace{ \\alpha + \\beta_1 \\text{education}_n + \\beta_2 \\text{prestige}_n - \\text{income}_n }_{e_n=\\text{prediction error} }\\right)^2 \\]\nMinimize loss function in \\(\\alpha\\), \\(\\beta_1\\), \\(\\beta_2\\)\nAgain, we can perform numerical optimization (machine learning approach)\n\n… but there is an explicit formula\n\n\n\n\n\n\n\n\n\n\\[Y = \\begin{bmatrix}\n\\text{income}_1 \\\\\\\\\n\\vdots \\\\\\\\\n\\text{income}_N\n\\end{bmatrix}\\] \\[X = \\begin{bmatrix}\n1 & \\text{education}_1 & \\text{prestige}_1 \\\\\\\\\n\\vdots & \\vdots & \\vdots \\\\\\\\\n1 &\\text{education}_N & \\text{prestige}_N\n\\end{bmatrix}\\]\n\n\nMatrix Version (look for \\(B = \\left( \\alpha,  \\beta_1 , \\beta_2 \\right)\\)): \\[Y =  X B + E\\]\nNote that constant can be interpreted as a “variable”\nLoss function \\[L(A,B) = (Y - X B)' (Y - X B)\\]\nResult of minimization \\(\\min_{(A,B)} L(A,B)\\) : \\[\\begin{bmatrix}\\alpha & \\beta_1 & \\beta_2 \\end{bmatrix} = (X'X)^{-1} X' Y \\]\n\n\n\n\n\n\n\nResult: \\[\\text{income} = 10.43  + 0.03 \\times \\text{education} + 0.62 \\times \\text{prestige}\\]\nQuestions:\n\nis it a better regression than the other?\nis the coefficient in front of education significant?\nhow do we interpret it?\ncan we build confidence intervals?",
    "crumbs": [
      "lectures",
      "Multiple Regression"
    ]
  },
  {
    "objectID": "slides/session_4/index_handout.html#remember-dataset-from-last-time",
    "href": "slides/session_4/index_handout.html#remember-dataset-from-last-time",
    "title": "Multiple Regression",
    "section": "",
    "text": "type\nincome\neducation\nprestige\n\n\n\n\naccountant\nprof\n62\n86\n82\n\n\npilot\nprof\n72\n76\n83\n\n\narchitect\nprof\n75\n92\n90\n\n\nauthor\nprof\n55\n90\n76\n\n\nchemist\nprof\n64\n86\n90\n\n\n\n\n\nLast week we “ran” a linear regression: \\(y = \\alpha + \\beta x\\). Result: \\[\\text{income} = xx + 0.72 \\text{education}\\]\nShould we have looked at “prestige” instead ? \\[\\text{income} = xx + 0.83 \\text{prestige}\\]\nWhich one is better?",
    "crumbs": [
      "lectures",
      "Multiple Regression"
    ]
  },
  {
    "objectID": "slides/session_4/index_handout.html#prestige-or-education",
    "href": "slides/session_4/index_handout.html#prestige-or-education",
    "title": "Multiple Regression",
    "section": "",
    "text": "if the goal is to predict: the one with higher explained variance\n\nprestige has higher \\(R^2\\) (\\(0.83^2\\))\n\nunless we are interested in the effect of education",
    "crumbs": [
      "lectures",
      "Multiple Regression"
    ]
  },
  {
    "objectID": "slides/session_4/index_handout.html#multiple-regression",
    "href": "slides/session_4/index_handout.html#multiple-regression",
    "title": "Multiple Regression",
    "section": "",
    "text": "What about using both?\n\n2 variables model: \\[\\text{income} = \\alpha + \\beta_1 \\text{education} + \\beta_2 \\text{prestige}\\]\nwill probably improve prediction power (explained variance)\n\\(\\beta_1\\) might not be meaningful on its own anymore (education and prestige are correlated)",
    "crumbs": [
      "lectures",
      "Multiple Regression"
    ]
  },
  {
    "objectID": "slides/session_4/index_handout.html#fitting-a-model",
    "href": "slides/session_4/index_handout.html#fitting-a-model",
    "title": "Multiple Regression",
    "section": "",
    "text": "Now we are trying to fit a plane to a cloud of points.",
    "crumbs": [
      "lectures",
      "Multiple Regression"
    ]
  },
  {
    "objectID": "slides/session_4/index_handout.html#minimization-criterium",
    "href": "slides/session_4/index_handout.html#minimization-criterium",
    "title": "Multiple Regression",
    "section": "",
    "text": "Take all observations: \\((\\text{income}_n,\\text{education}_n,\\text{prestige}_n)_{n\\in[0,N]}\\)\nObjective: sum of squares \\[ L(\\alpha, \\beta_1, \\beta_2) = \\sum_i \\left( \\underbrace{ \\alpha + \\beta_1 \\text{education}_n + \\beta_2 \\text{prestige}_n - \\text{income}_n }_{e_n=\\text{prediction error} }\\right)^2 \\]\nMinimize loss function in \\(\\alpha\\), \\(\\beta_1\\), \\(\\beta_2\\)\nAgain, we can perform numerical optimization (machine learning approach)\n\n… but there is an explicit formula",
    "crumbs": [
      "lectures",
      "Multiple Regression"
    ]
  },
  {
    "objectID": "slides/session_4/index_handout.html#ordinary-least-square",
    "href": "slides/session_4/index_handout.html#ordinary-least-square",
    "title": "Multiple Regression",
    "section": "",
    "text": "\\[Y = \\begin{bmatrix}\n\\text{income}_1 \\\\\\\\\n\\vdots \\\\\\\\\n\\text{income}_N\n\\end{bmatrix}\\] \\[X = \\begin{bmatrix}\n1 & \\text{education}_1 & \\text{prestige}_1 \\\\\\\\\n\\vdots & \\vdots & \\vdots \\\\\\\\\n1 &\\text{education}_N & \\text{prestige}_N\n\\end{bmatrix}\\]\n\n\nMatrix Version (look for \\(B = \\left( \\alpha,  \\beta_1 , \\beta_2 \\right)\\)): \\[Y =  X B + E\\]\nNote that constant can be interpreted as a “variable”\nLoss function \\[L(A,B) = (Y - X B)' (Y - X B)\\]\nResult of minimization \\(\\min_{(A,B)} L(A,B)\\) : \\[\\begin{bmatrix}\\alpha & \\beta_1 & \\beta_2 \\end{bmatrix} = (X'X)^{-1} X' Y \\]",
    "crumbs": [
      "lectures",
      "Multiple Regression"
    ]
  },
  {
    "objectID": "slides/session_4/index_handout.html#solution",
    "href": "slides/session_4/index_handout.html#solution",
    "title": "Multiple Regression",
    "section": "",
    "text": "Result: \\[\\text{income} = 10.43  + 0.03 \\times \\text{education} + 0.62 \\times \\text{prestige}\\]\nQuestions:\n\nis it a better regression than the other?\nis the coefficient in front of education significant?\nhow do we interpret it?\ncan we build confidence intervals?",
    "crumbs": [
      "lectures",
      "Multiple Regression"
    ]
  },
  {
    "objectID": "slides/session_4/index_handout.html#explained-variance-1",
    "href": "slides/session_4/index_handout.html#explained-variance-1",
    "title": "Multiple Regression",
    "section": "Explained Variance",
    "text": "Explained Variance\nAs in the 1d case we can compare: - the variability of the model predictions (\\(MSS\\)) - the variance of the data (\\(TSS\\), T for total)\nCoefficient of determination (same formula):\n\\[R^2 = \\frac{MSS}{TSS}\\]\nOr:\n\\[R^2 = 1-\\frac{RSS}{SST}\\]\nwhere \\(RSS\\) is the non explained variance",
    "crumbs": [
      "lectures",
      "Multiple Regression"
    ]
  },
  {
    "objectID": "slides/session_4/index_handout.html#adjusted-r-squared",
    "href": "slides/session_4/index_handout.html#adjusted-r-squared",
    "title": "Multiple Regression",
    "section": "Adjusted R squared",
    "text": "Adjusted R squared\n\n\nFact:\n\nadding more regressors always improve \\(R^2\\)\nwhy not throw everything in? (kitchen sink regressions)\ntwo many regressors: overfitting the data\n\n\nPenalise additional regressors: adjusted R^2\n\\[R^2_{adj} = 1-(1-R^2)\\frac{N-1}{N-p-1}\\]\nWhere:\n\n\\(N\\): number of observations\n\\(p\\) number of variables\n\n\n\nIn our example:\n\n\n\n\n\n\n\n\nRegression\n\\(R^2\\)\n \\(R^2_{adj}\\) \n\n\n\n\neducation\n0.525\n 0.514 \n\n\nprestige\n0.702\n 0.695 \n\n\neducation + prestige\n0.7022\n 0.688",
    "crumbs": [
      "lectures",
      "Multiple Regression"
    ]
  },
  {
    "objectID": "slides/session_4/index_handout.html#making-a-regression-with-statsmodels",
    "href": "slides/session_4/index_handout.html#making-a-regression-with-statsmodels",
    "title": "Multiple Regression",
    "section": "Making a regression with statsmodels",
    "text": "Making a regression with statsmodels\nimport statsmodels\nWe use a special API inspired by R:\nimport statsmodels.formula.api as smf",
    "crumbs": [
      "lectures",
      "Multiple Regression"
    ]
  },
  {
    "objectID": "slides/session_4/index_handout.html#performing-a-regression",
    "href": "slides/session_4/index_handout.html#performing-a-regression",
    "title": "Multiple Regression",
    "section": "Performing a regression",
    "text": "Performing a regression\n\nRunning a regression with statsmodels\n\nmodel = smf.ols('income ~ education',  df)  # model\nres = model.fit()  # perform the regression\nres.describe()\n\n‘income ~ education’ is the model formula\n\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:                 income   R-squared:                       0.525\nModel:                            OLS   Adj. R-squared:                  0.514\nMethod:                 Least Squares   F-statistic:                     47.51\nDate:                Tue, 02 Feb 2021   Prob (F-statistic):           1.84e-08\nTime:                        05:21:25   Log-Likelihood:                -190.42\nNo. Observations:                  45   AIC:                             384.8\nDf Residuals:                      43   BIC:                             388.5\nDf Model:                           1                                         \nCovariance Type:            nonrobust                                         \n==============================================================================\n                 coef    std err          t      P&gt;|t|      [0.025      0.975]\n==============================================================================\nIntercept     10.6035      5.198      2.040      0.048       0.120      21.087\neducation      0.5949      0.086      6.893      0.000       0.421       0.769\n==============================================================================\nOmnibus:                        9.841   Durbin-Watson:                   1.736\nProb(Omnibus):                  0.007   Jarque-Bera (JB):               10.609\nSkew:                           0.776   Prob(JB):                      0.00497\nKurtosis:                       4.802   Cond. No.                         123.\n==============================================================================",
    "crumbs": [
      "lectures",
      "Multiple Regression"
    ]
  },
  {
    "objectID": "slides/session_4/index_handout.html#formula-mini-language",
    "href": "slides/session_4/index_handout.html#formula-mini-language",
    "title": "Multiple Regression",
    "section": "Formula mini-language",
    "text": "Formula mini-language\n\nWith statsmodels formulas, can be supplied with R-style syntax\nExamples:\n\n\n\n\n\n\n\n\nFormula\nModel\n\n\n\n\nincome ~ education\n\\(\\text{income}_i = \\alpha + \\beta \\text{education}_i\\)\n\n\nincome ~ prestige\n\\(\\text{income}_i = \\alpha + \\beta \\text{prestige}_i\\)\n\n\nincome ~ prestige - 1\n\\(\\text{income}_i = \\beta \\text{prestige}_i\\) (no intercept)\n\n\nincome ~ education + prestige\n\\(\\text{income}_i = \\alpha + \\beta_1 \\text{education}_i + \\beta_2 \\text{prestige}_i\\)",
    "crumbs": [
      "lectures",
      "Multiple Regression"
    ]
  },
  {
    "objectID": "slides/session_4/index_handout.html#formula-mini-language-1",
    "href": "slides/session_4/index_handout.html#formula-mini-language-1",
    "title": "Multiple Regression",
    "section": "Formula mini-language",
    "text": "Formula mini-language\n\nOne can use formulas to apply transformations to variables\n\n\n\n\n\n\n\n\nFormula\nModel\n\n\n\n\nlog(P) ~ log(M) + log(Y)\n\\(\\log(P_i) = \\alpha + \\alpha_1 \\log(M_i) + \\alpha_2 \\log(Y_i)\\) (log-log)\n\n\nlog(Y) ~ i\n\\(\\log(P_i) = \\alpha + i_i\\) (semi-logs)\n\n\n\n\nThis is useful if the true relationship is nonlinear\nAlso useful, to interpret the coefficients",
    "crumbs": [
      "lectures",
      "Multiple Regression"
    ]
  },
  {
    "objectID": "slides/session_4/index_handout.html#coefficients-interpetation",
    "href": "slides/session_4/index_handout.html#coefficients-interpetation",
    "title": "Multiple Regression",
    "section": "Coefficients interpetation",
    "text": "Coefficients interpetation\nExample:\n\n(police_spending and prevention_policies in million dollars) \\[\\text{number_or_crimes} = 0.005\\% - 0.001 \\text{pol_spend} - 0.005 \\text{prev_pol} + 0.002 \\text{population density}\\]\nreads: when holding other variables constant a 0.1 million increase in police spending reduces crime rate by 0.001%\n\n\n\nIinterpretation?\n\nproblematic because variables have different units\nwe can say that prevention policies are more efficient than police spending ceteris paribus\n\n\n\nTake logs: \\[\\log(\\text{number_or_crimes}) = 0.005\\% - 0.15 \\log(\\text{pol_spend}) - 0.4 \\log(\\text{prev_pol}) + 0.2 \\log(\\text{population density})\\]\n\nnow we have an estimate of elasticities\na \\(1\\%\\) increase in police spending leads to a \\(0.15\\%\\) decrease in the number of crimes",
    "crumbs": [
      "lectures",
      "Multiple Regression"
    ]
  },
  {
    "objectID": "slides/session_4/index_handout.html#hypotheses",
    "href": "slides/session_4/index_handout.html#hypotheses",
    "title": "Multiple Regression",
    "section": "Hypotheses",
    "text": "Hypotheses\n\n\n\n\nRecall what we do:\n\nwe have the data \\(X,Y\\)\nwe choose a model: \\[ Y = \\alpha + X \\beta \\]\nfrom the data we compute estimates: \\[\\hat{\\beta}  = (X'X)^{-1} X' Y \\] \\[\\hat{\\alpha} = Y- X \\beta \\]\nestimates are a precise function of data\n\nexact formula not important here\n\n\n\n\n\n\nWe need some hypotheses on the data generation process:\n\n\\(Y = X \\beta + \\epsilon\\)\n\\(\\mathbb{E}\\left[ \\epsilon \\right] = 0\\)\n\\(\\epsilon\\) multivariate normal with covariance matrix \\(\\sigma^2 I_n\\)\n\n\\(\\forall i, \\sigma(\\epsilon_i) = \\sigma\\)\n\\(\\forall i,j, cov(\\epsilon_i, \\epsilon_j) = 0\\)\n\n\n\n\nUnder these hypotheses:\n\n\\(\\hat{\\beta}\\) is an unbiased estimate of true parameter \\(\\beta\\)\n\ni.e. \\(\\mathbb{E} [\\hat{\\beta}] = \\beta\\)\n\none can prove \\(Var(\\hat{\\beta}) = \\sigma^2 I_n\\)\n\\(\\sigma\\) can be estimated by \\(\\hat{\\sigma}=S\\frac{\\sum_i (y_i-{pred}_i)^2}{N-p}\\)\n\n\\(N-p\\): degrees of freedoms\n\none can estimate: \\(\\sigma(\\hat{\\beta_k})\\)\n\nit is the \\(i\\)-th diagonal element of \\(\\hat{\\sigma}^2 X'X\\)",
    "crumbs": [
      "lectures",
      "Multiple Regression"
    ]
  },
  {
    "objectID": "slides/session_4/index_handout.html#is-the-regression-significant",
    "href": "slides/session_4/index_handout.html#is-the-regression-significant",
    "title": "Multiple Regression",
    "section": "Is the regression significant?",
    "text": "Is the regression significant?\n\n\n\nApproach is very similar to the one-dimensional case\n\n\n\n\n\n\n\nFisher Criterium (F-test)\n\n\n\n\n\\(H0\\): all coeficients are 0\n\ni.e. true model is \\(y=\\alpha + \\epsilon\\)\n\n\\(H1\\): some coefficients are not 0\n\n\n\nStatistics: \\[F=\\frac{MSR}{MSE}\\] (same as 1d)\n\n\\(MSR\\): mean-squared error of constant model\n\\(MSE\\): mean-squared error of full model\n\n\n\nUnder:\n\nthe model assumptions about the data generation process\nthe H0 hypothesis\n\n\n\n… the distribution of \\(F\\) is known\n\n\nIt is remarkable that it doesn’t depend on \\(\\sigma\\) !\n\n\nOne can produce a p-value.\n\nprobability to obtain this statistics given hypothesis H0\nif very low, H0 is rejected",
    "crumbs": [
      "lectures",
      "Multiple Regression"
    ]
  },
  {
    "objectID": "slides/session_4/index_handout.html#is-each-coefficient-significant",
    "href": "slides/session_4/index_handout.html#is-each-coefficient-significant",
    "title": "Multiple Regression",
    "section": "Is each coefficient significant ?",
    "text": "Is each coefficient significant ?\n\n\n\n\n\n\n\n\nStudent Test\n\n\n\nGiven a coefficient \\(\\beta_k\\):\n\n\\(H0\\): true coefficient is 0\n\\(H1\\): true coefficient is not zero\n\n\n\nStatistics (student-t): \\[t = \\frac{\\hat{\\beta_k}}{\\hat{\\sigma}(\\hat{\\beta_k})}\\]\n\nwhere \\(\\hat{\\sigma}(\\beta_k)\\) is \\(i\\)-th diagonal element of \\(\\hat{\\sigma}^2 X'X\\)\nit compares the estimated value of a coefficient to its estimated standard deviation\n\n\n\nUnder the inference hypotheses, distribution of \\(t\\) is known.\n\nit is a student distribution\n\n\n\nProcedure:\n\nCompute \\(t\\). Check acceptance threshold \\(t*\\) at probability \\(\\alpha\\) (ex 5%)\nCoefficient is significant with probability \\(1-\\alpha\\) if \\(t&gt;t*\\)\n\n\n\nOr just look at the p-value:\n\nprobability that \\(t\\) would be as high as it is, assuming \\(H0\\)",
    "crumbs": [
      "lectures",
      "Multiple Regression"
    ]
  },
  {
    "objectID": "slides/session_4/index_handout.html#confidence-intervals",
    "href": "slides/session_4/index_handout.html#confidence-intervals",
    "title": "Multiple Regression",
    "section": "Confidence intervals",
    "text": "Confidence intervals\nSame as in the 1d case.\n\nTake estimate \\(\\color{red}{\\beta_i}\\) with an estimate of its standard deviation \\(\\color{red}{\\hat{\\sigma}(\\beta_i)}\\)\nCompute student \\(\\color{red}{t^{\\star}}\\) at \\(\\color{red}{\\alpha}\\) confidence level (ex: \\(\\alpha=5\\\\%\\)) such that:\n\n\\(P(|t|&gt;t^{\\star})&lt;\\alpha\\)\n\n\n. . .\nProduce confidence intervals at \\(\\alpha\\) confidence level:\n\n\\([\\color{red}{\\beta_i} - t^{\\star} \\color{red}{\\hat{\\sigma}(\\beta_i)}, \\color{red}{\\beta_i} + t^{\\star} \\color{red}{\\hat{\\sigma}(\\beta_i)}]\\)\n\nInterpretation:\n\nfor a given confidence interval at confidence level \\(\\alpha\\)…\nthe probability that our coefficient was obtained, if the true coefficient were outside of it, is smaller than \\(\\alpha\\)",
    "crumbs": [
      "lectures",
      "Multiple Regression"
    ]
  },
  {
    "objectID": "slides/session_4/index_handout.html#other-tests",
    "href": "slides/session_4/index_handout.html#other-tests",
    "title": "Multiple Regression",
    "section": "Other tests",
    "text": "Other tests\n\nThe tests seen so far rely on strong statistical assumptions (normality, homoscedasticity, etc..)\nSome tests can be used to test these assumptions:\n\nJarque-Bera: is the distribution of data truly normal\nDurbin-Watson: are residuals autocorrelated (makes sense for time-series)\n…\n\nIn case assumptions are not met…\n\n… still possible to do econometrics\n… but beyond the scope of this course",
    "crumbs": [
      "lectures",
      "Multiple Regression"
    ]
  },
  {
    "objectID": "slides/session_4/index_handout.html#variable-selection-1",
    "href": "slides/session_4/index_handout.html#variable-selection-1",
    "title": "Multiple Regression",
    "section": "Variable selection",
    "text": "Variable selection\n\n\n\nI’ve got plenty of data:\n\n\\(y\\): gdp\n\\(x_1\\): investment\n\\(x_2\\): inflation\n\\(x_3\\): education\n\\(x_4\\): unemployment\n…\n\n\n\n\nMany possible regressions:\n\n\\(y = α + \\beta_1 x_1\\)\n\\(y = α + \\beta_2 x_2 + \\beta_3 x_4\\)\n…\n\n\n\n\n. . .\n\nWhich one do I choose ?\n\nputting everything together is not an option (kitchen sink regression)",
    "crumbs": [
      "lectures",
      "Multiple Regression"
    ]
  },
  {
    "objectID": "slides/session_4/index_handout.html#not-enough-coefficients",
    "href": "slides/session_4/index_handout.html#not-enough-coefficients",
    "title": "Multiple Regression",
    "section": "Not enough coefficients",
    "text": "Not enough coefficients\nSuppose you run a regression: \\[y = \\alpha + \\beta_1 x_1 + \\epsilon\\] and are genuinely interested in coefficient \\(\\beta_1\\)\n. . .\nBut unknowingly to you, the actual model is \\[y = \\alpha + \\beta_1 x_1 + \\beta_2 x_2 + \\eta\\]\n. . .\nThe residual \\(y - \\alpha - \\beta_1 x_1\\) is not white noise\n\nspecification hypotheses are violated\nestimated \\(\\hat{\\beta_1}\\) will have a bias (omitted variable bias)\nto correct the bias we add \\(x_2\\)\n\neven though we are not interested in \\(x_2\\) by itself\nwe control for \\(x_2\\)",
    "crumbs": [
      "lectures",
      "Multiple Regression"
    ]
  },
  {
    "objectID": "slides/session_4/index_handout.html#example",
    "href": "slides/session_4/index_handout.html#example",
    "title": "Multiple Regression",
    "section": "Example",
    "text": "Example\n\n\nSuppose I want to check Okun’s law. I consider the following model: \\[\\text{gdp_growth} = \\alpha + \\beta \\times \\text{unemployment}\\]\nI obtain: \\[\\text{gdp_growth} = 0.01 - 0.1 \\times \\text{unemployment} + e_i\\]\nThen I inspect visually the residuals: not normal at all!\nConclusion: my regression is misspecified, \\(0.1\\) is a biased (useless) estimate\nI need to control for additional variables. For instance: \\[\\text{gdp_growth} = \\alpha + \\beta_1 \\text{unemployment} + \\beta_2 \\text{interest rate}\\]\nUntil the residuals are actually white noise",
    "crumbs": [
      "lectures",
      "Multiple Regression"
    ]
  },
  {
    "objectID": "slides/session_4/index_handout.html#colinear-regressors",
    "href": "slides/session_4/index_handout.html#colinear-regressors",
    "title": "Multiple Regression",
    "section": "Colinear regressors",
    "text": "Colinear regressors\n\n\nWhat happens if two regressors are (almost) colinear? \\[y = \\alpha + \\beta_1 x_1 + \\beta_2 x_2\\] where \\(x_2 = \\kappa x_1\\)\nIntuitively: parameters are not unique\n\nif \\(y = \\alpha + \\beta_1 x_1\\) is the right model…\nthen \\(y = \\alpha + \\beta_1 \\lambda x_1 + \\beta_2 (1-\\lambda) \\frac{1}{\\kappa} x_2\\) is exactly as good…\n\nMathematically: \\((X'X)\\) is not invertible.\nWhen regressors are almost colinear, coefficients can have a lot of variability.\nTest:\n\ncorrelation statistics\ncorrelation plot",
    "crumbs": [
      "lectures",
      "Multiple Regression"
    ]
  },
  {
    "objectID": "slides/session_4/index_handout.html#choosing-regressors",
    "href": "slides/session_4/index_handout.html#choosing-regressors",
    "title": "Multiple Regression",
    "section": "Choosing regressors",
    "text": "Choosing regressors\n\\[y = \\alpha + \\beta_1 x_1 + ... \\beta_n x_n\\]\nWhich regressors to choose ?\n\n\nMethod 1 : remove coefficients with lowest t (less significant) to maximize adjusted R-squared\n\nremove regressors with lowest t\n\nnot the one you are interested in ;)\n\nregress again\nsee if adjusted \\(R^2\\) is decreasing\n\nif so continue\notherwise cancel last step and stop\n\n\n\n\nMethod 2 : choose combination to maximize Akaike Information Criterium\n\nAIC: \\(p - log(L)\\)\n\\(L\\) is likelihood\ncomputed by all good econometric softwares",
    "crumbs": [
      "lectures",
      "Multiple Regression"
    ]
  },
  {
    "objectID": "slides/session_4/graphs/index.html",
    "href": "slides/session_4/graphs/index.html",
    "title": "Multiple Regressions",
    "section": "",
    "text": "type\nincome\neducation\nprestige\n\n\n\n\naccountant\nprof\n62\n86\n82\n\n\npilot\nprof\n72\n76\n83\n\n\narchitect\nprof\n75\n92\n90\n\n\nauthor\nprof\n55\n90\n76\n\n\nchemist\nprof\n64\n86\n90\n\n\n\n\n\n\nLast week we “ran” a linear regression: \\(y = \\alpha + \\beta x\\). Result: \\[\\text{income} = xx + 0.72 \\text{education}\\]\nShould we have looked at “prestige” instead ? \\[\\text{income} = xx + 0.83 \\text{prestige}\\]\nWhich one is better?\n\n\n\n\n\n\n\n\n\nif the goal is to predict: the one with higher explained variance\n\nprestige has higher \\(R^2\\) (\\(0.83^2\\))\n\nunless we are interested in the effect of education\n\n\n\n\n\n\nWhat about using both?\n\n2 variables model: \\[\\text{income} = \\alpha + \\beta_1 \\text{education} + \\beta_2 \\text{prestige}\\]\nwill probably improve prediction power (explained variance)\n\\(\\beta_1\\) might not be meaningful on its own anymore (education and prestige are correlated)\n\n\n\n\n\n\nNow we are trying to fit a plane to a cloud of points.\n \n\n\n\n\n\nTake all observations: \\((\\text{income}\\_n,\\text{education}\\_n,\\text{prestige}\\_n)\\_{n\\in[0,N]}\\)\nObjective: sum of squares \\[ L(\\alpha, \\beta_1, \\beta_2) = \\sum_i \\left( \\underbrace{ \\alpha + \\beta_1 \\text{education}\\_n + \\beta_2 \\text{prestige}\\_n - \\text{income}\\_n }\\_{e_n=\\text{prediction error} }\\right)^2 \\]\nMinimize loss function in \\(\\alpha\\), \\(\\beta_1\\), \\(\\beta_2\\)\nAgain, we can perform numerical optimization (machine learning approach)\n\n… but there is an explicit formula\n\n\n\n\n\n\n\n\n\n\\[Y = \\begin{bmatrix}\n\\text{income}_1 \\\\\\\\\n\\vdots \\\\\\\\\n\\text{income}_N\n\\end{bmatrix}\\] \\[X = \\begin{bmatrix}\n1 & \\text{education}_1 & \\text{prestige}_1 \\\\\\\\\n\\vdots & \\vdots & \\vdots \\\\\\\\\n1 &\\text{education}_N & \\text{prestige}_N\n\\end{bmatrix}\\]\n\n\n\nMatrix Version (look for \\(B = \\left( \\alpha,  \\beta_1 , \\beta_2 \\right)\\)): \\[Y =  X B + E\\]\nNote that constant can be interpreted as a “variable”\nLoss function \\[L(A,B) = (Y - X B)' (Y - X B)\\]\nResult of minimization \\(\\min_{(A,B)} L(A,B)\\) : \\[\\begin{bmatrix}\\alpha & \\beta_1 & \\beta_2 \\end{bmatrix} = (X'X)^{-1} X' Y \\]\n\n\n\n\n\n\n\n\nResult: \\[\\text{income} = 10.43  + 0.03 \\times \\text{education} + 0.62 \\times \\text{prestige}\\]\nQuestions:\n\nis it a better regression than the other?\nis the coefficient in front of education significant?\nhow do we interpret it?\ncan we build confidence intervals?\n\n\n\n\n\n\n\n\nAs in the 1d case we can compare:\n\nthe variability of the model predictions (\\(MSS\\))\nthe variance of the data (\\(TSS\\), T for total)\n\nCoefficient of determination: \\[R^2 = \\frac{MSS}{TSS}\\]\nOr: \\[R^2 = 1-\\frac{RSS}{SST}\\] where \\(RSS\\) is the non explained variance\n\n\n\n\n\n\n\nIn our example:\n\n\n\n\n\n\n\n\n\nRegression\n\\(R^2\\)\n \\(R^2_{adj}\\) \n\n\n\n\neducation\n0.525\n 0.514 \n\n\nprestige\n0.702\n 0.695 \n\n\neducation + prestige\n0.7022\n 0.688 \n\n\n\n\n\n\n\nFact:\n\nadding more regressors always improve \\(R^2\\)\nwhy not throw everything in? (kitchen sink regressions)\n\ntwo many regressors: overfitting the data\n\n\nPenalise additional regressors: adjusted R^2\n\nexample formula:\n\n\\(N\\): number of observations\n\\(p\\) number of variables \\[R^2_{adj} = 1-(1-R^2)\\frac{N-1}{N-p-1}\\]\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport statsmodels\nWe use a special API inspired by R:\nimport statsmodels.formula.api as smf\n\n\n\n\nRunning a regression with statsmodels\nmodel = smf.ols('income ~ education',  df)  # model\nres = model.fit()  # perform the regression\nres.describe()\n\n‘income ~ education’ is the model formula\n\nResult:\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:                 income   R-squared:                       0.525\nModel:                            OLS   Adj. R-squared:                  0.514\nMethod:                 Least Squares   F-statistic:                     47.51\nDate:                Tue, 02 Feb 2021   Prob (F-statistic):           1.84e-08\nTime:                        05:21:25   Log-Likelihood:                -190.42\nNo. Observations:                  45   AIC:                             384.8\nDf Residuals:                      43   BIC:                             388.5\nDf Model:                           1                                         \nCovariance Type:            nonrobust                                         \n==============================================================================\n                 coef    std err          t      P&gt;|t|      [0.025      0.975]\n==============================================================================\nIntercept     10.6035      5.198      2.040      0.048       0.120      21.087\neducation      0.5949      0.086      6.893      0.000       0.421       0.769\n==============================================================================\nOmnibus:                        9.841   Durbin-Watson:                   1.736\nProb(Omnibus):                  0.007   Jarque-Bera (JB):               10.609\nSkew:                           0.776   Prob(JB):                      0.00497\nKurtosis:                       4.802   Cond. No.                         123.\n==============================================================================\n\n\n\n\n\nWith statsmodels formulas, can be supplied with R-style syntax\nExamples:\n\n\n\n\n\n\n\n\nFormula\nModel\n\n\n\n\nincome ~ education\n\\(\\text{income}_i = \\alpha + \\beta \\text{education}_i\\)\n\n\nincome ~ prestige\n\\(\\text{income}_i = \\alpha + \\beta \\text{prestige}_i\\)\n\n\nincome ~ prestige - 1\n\\(\\text{income}_i = \\beta \\text{prestige}_i\\) (no intercept)\n\n\nincome ~ education + prestige\n\\(\\text{income}_i = \\alpha + \\beta_1 \\text{education}_i + \\beta_2 \\text{prestige}_i\\)\n\n\n\n\n\n\n\n\nOne can use formulas to apply transformations to variables\n\n\n\n\n\n\n\n\nFormula\nModel\n\n\n\n\nlog(P) ~ log(M) + log(Y)\n\\(\\log(P_i) = \\alpha + \\alpha_1 \\log(M_i) + \\alpha_2 \\log(Y_i)\\) (log-log)\n\n\nlog(Y) ~ i\n\\(\\log(P_i) = \\alpha + i_i\\) (semi-logs)\n\n\n\n\nThis is useful if the true relationship is nonlinear\nAlso useful, to interpret the coefficients\n\n\n\n\n\n\nExample:\n\n(police_spending and prevention_policies in million dollars) \\[ \\text{number_or_crimes} = 0.005\\\\% - 0.001 \\text{pol_spend} - 0.005 \\text{prev_pol} + 0.002 \\text{population density}\\]\n\nreads: when holding other variables constant a 0.1 million increase in police spending reduces crime rate by 0.001%\ninterpretation?\n\nproblematic because variables have different units\nwe can say that prevention policies are more efficient than police spending ceteris paribus\n\nTake logs: \\[ \\log(\\text{number_or_crimes}) = 0.005\\\\% - 0.15 \\log(\\text{pol_spend}) - 0.4 \\log(\\text{prev_pol}) + 0.2 \\log(\\text{population density})\\]\n\nnow we have an estimate of elasticities\na \\(1\\%\\) increase in police spending leads to a \\(0.15\\%\\) decrease in the number of crimes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRecall what we do:\n\nwe have the data \\(X,Y\\)\nwe choose a model: \\[ Y = \\alpha + X \\beta \\]\nfrom the data we compute estimates: \\[\\hat{\\beta}  = (X'X)^{-1} X' Y \\] \\[\\hat{\\alpha} = Y- X \\beta \\]\nestimates are a precise function of data\n\nexact formula not important here\n\n\n\n\n\n\n\nWe make some hypotheses on the data generation process:\n\n\\(Y = X \\beta + \\epsilon\\)\n\\(\\mathbb{E}\\left[ \\epsilon \\right] = 0\\)\n\\(\\epsilon\\) multivariate normal with covariance matrix \\(\\sigma^2 I_n\\)\n\n\\(\\forall i, \\sigma(\\epsilon_i) = \\sigma\\)\n\\(\\forall i,j, cov(\\epsilon_i, \\epsilon_j) = 0\\)\n\n\n\nUnder these hypotheses:\n\n\\(\\hat{\\beta}\\) is an unbiased estimate of true parameter \\(\\beta\\)\n\ni.e. \\(\\mathbb{E} [\\hat{\\beta}] = \\beta\\)\n\none can prove \\(Var(\\hat{\\beta}) = \\sigma^2 I_n\\)\n\\(\\sigma\\) can be estimated by \\(\\hat{\\sigma}=S\\frac{\\sum_i (y_i-{pred}_i)^2}{N-p}\\)\n\n\\(N-p\\): degrees of freedoms\n\none can estimate: \\(\\sigma(\\hat{\\beta_k})\\)\n\nit is the \\(i\\)-th diagonal element of \\(\\hat{\\sigma}^2 X'X\\)\n\n\n\n\n\n\n\n\n\n\n\nApproach is very similar to the one-dimensional case\n\nFisher criterium (F-test):\n\n\n\\(H0\\): all coeficients are 0\n\ni.e. true model is \\(y=\\alpha + \\epsilon\\)\n\n\n\\(H1\\): some coefficients are not 0\n\nstatistics: \\[F=\\frac{MSR}{MSE}\\]\n\n\\(MSR\\): mean-squared error of constant model\n\\(MSE\\): mean-squared error of full model\n\n\n\nUnder the model assumptions, distribution of \\(F\\) is known\n\nit is remarkable that it doesn’t depend on \\(\\sigma\\) !\n\n\nOne can produce a p-value.\n\nprobability to obtain this statistics given hypotheses 0\nif very low, H0 is rejected\n\n\n\n\n\n\n\n\nStudent test. Given a an coefficient \\(\\beta_k\\):\n\n\n\\(H0\\): coefficient is 0\n\n\\(H1\\): coefficient is not zero\n\nstatistics: \\(t = \\frac{\\hat{\\beta_k}}{\\hat{\\sigma}(\\hat{\\beta_k})}\\)\n\nwhere \\(\\hat{\\sigma}(\\beta_k)\\) is \\(i\\)-th diagonal element of \\(\\hat{\\sigma}^2 X'X\\)\n\n\n\nUnder the inference hypotheses, distribution of \\(t\\) is known.\n\nit is a student distribution\n\n\nProcedure:\n\n\nCompute \\(t\\). Check acceptance threshold \\(t*\\) at probability \\(\\alpha\\).\n\nCoefficient is significant with probability \\(1-\\alpha\\) if \\(t&gt;t*\\)\n\nOr compute implied acceptance rate \\(\\alpha\\) for \\(t\\).\n\nif \\(t\\) is high enough, null hypothesis is rejected\n\n\n\n\n\n\n\n\nSame as in the 1d case.\nTake estimate \\(\\color{red}{\\beta_i}\\) with an estimate of its standard deviation \\(\\color{red}{\\hat{\\sigma}(\\beta_i)}\\)\nCompute student \\(\\color{red}{t^{\\star}}\\) at \\(\\color{red}{\\alpha}\\) confidence level (ex: \\(\\alpha=5\\\\%\\)) such that:\n\n\\(P(|t|&gt;t^{\\star})&lt;\\alpha\\)\n\nProduce confidence intervals at \\(\\alpha\\) confidence level:\n\n\\([\\color{red}{\\beta_i} - t^{\\star} \\color{red}{\\hat{\\sigma}(\\beta_i)}, \\color{red}{\\beta_i} + t^{\\star} \\color{red}{\\hat{\\sigma}(\\beta_i)}]\\)\n\n\n\n\n\n\n\nThe tests seen so far rely on strong statistical assumptions (normality, homoscedasticity, etc..)\nSome tests can be used to test these assumptions:\n\nJarque-Bera: is the distribution of data truly normal\nDurbin-Watson: are residuals autocorrelated (makes sense for time-series)\n…\n\nIn case assumptions are not met…\n\n… still possible to do econometrics\n… but beyond the scope of this course\n\n\n\n\n\n\n\n\n\n\n\n\nI’ve got plenty of data:\n\n\\(y\\): gdp\n\\(x_1\\): investment\n\\(x_2\\): inflation\n\\(x_3\\): education\n\\(x_4\\): unemployment\n…\n\n\nMany possible regressions:\n\n\\(y = α + \\beta_1 x_1\\)\n\\(y = α + \\beta_2 x_2 + \\beta_3 x_4\\)\n…\n\n\nWhich one do I choose ?\n\nputting everything together is not an option (kitchen sink regression)\n\n\n\n\n\n\n\nSuppose you run a regression: \\[y = \\alpha + \\beta_1 x_1 + \\epsilon\\]\nBut unknowingly to you, the actual model is \\[y = \\alpha + \\beta_1 x_1 + \\beta_2 x_2 + \\eta\\]\nThe residual \\(y - \\alpha - \\beta_1 x_1\\) is not white noise\n\nspecification hypotheses are violated\nestimate \\(\\hat{\\beta_1}\\) will have a bias (omitted variable bias)\nto correct the bias we add \\(x_2\\) (“control” for \\(x_2\\))\n\n\n\n\n\n\n\nSuppose I want to check Okun’s law. I consider the following model: \\[\\text{gdp_growth} = \\alpha + \\beta \\times \\text{unemployment}\\]\nI obtain: \\[\\text{gdp_growth} = 0.01 - 0.1 \\times \\text{unemployment} + e_i\\]\nThen I inspect visually the residuals: not normal at all!\nConclusion: my regression is misspecified, \\(0.1\\) is a biased (useless) estimate\nI need to control for additional variables. For instance: \\[\\text{gdp_growth} = \\alpha + \\beta_1 \\text{unemployment} + \\beta_2 \\text{interest rate}\\]\nUntil the residuals are actually white noise\n\n\n\n\n\n\nWhat happens if two regressors are (almost) colinear? \\[y = \\alpha + \\beta_1 x_1 + \\beta_2 x_2\\] where \\(x_2 = \\kappa x_1\\)\nIntuitively: parameters are not unique\n\nif \\(y = \\alpha + \\beta_1 x_1\\) is the right model…\nthen \\(y = \\alpha + \\beta_1 \\lambda x_1 + \\beta_2 (1-\\lambda) \\frac{1}{\\kappa} x_2\\) is exactly as good…\n\nMathematically: \\((X'X)\\) is not invertible.\nWhen regressors are almost colinear, coefficients can have a lot of variability.\nTest: correlation plot, correlation statistics\n\n\n\n\n\n\\[y = \\alpha + \\beta_1 x_1 + ... \\beta_n x_n\\]\nWhich regressors to choose ?\n\nMethod 1 : remove coefficients with lowest t (less significant) to maximize adjusted R-squared\n\nremove regressors with lowest t\nregress again\nsee if adjusted \\(R^2\\) is decreasing\n\nif so continue\notherwise cancel last step and stop\n\n\nMethod 2 : choose combination to maximize Akaike Information Criterium\n\nAIC: \\(p - log(L)\\)\n\\(L\\) is likelihood\ncomputed by all good econometric softwares\n\n\n\n\n\n\n\n\n\nIntro to causality"
  },
  {
    "objectID": "slides/session_4/graphs/index.html#the-problem",
    "href": "slides/session_4/graphs/index.html#the-problem",
    "title": "Multiple Regressions",
    "section": "",
    "text": "type\nincome\neducation\nprestige\n\n\n\n\naccountant\nprof\n62\n86\n82\n\n\npilot\nprof\n72\n76\n83\n\n\narchitect\nprof\n75\n92\n90\n\n\nauthor\nprof\n55\n90\n76\n\n\nchemist\nprof\n64\n86\n90\n\n\n\n\n\n\nLast week we “ran” a linear regression: \\(y = \\alpha + \\beta x\\). Result: \\[\\text{income} = xx + 0.72 \\text{education}\\]\nShould we have looked at “prestige” instead ? \\[\\text{income} = xx + 0.83 \\text{prestige}\\]\nWhich one is better?\n\n\n\n\n\n\n\n\n\nif the goal is to predict: the one with higher explained variance\n\nprestige has higher \\(R^2\\) (\\(0.83^2\\))\n\nunless we are interested in the effect of education\n\n\n\n\n\n\nWhat about using both?\n\n2 variables model: \\[\\text{income} = \\alpha + \\beta_1 \\text{education} + \\beta_2 \\text{prestige}\\]\nwill probably improve prediction power (explained variance)\n\\(\\beta_1\\) might not be meaningful on its own anymore (education and prestige are correlated)\n\n\n\n\n\n\nNow we are trying to fit a plane to a cloud of points.\n \n\n\n\n\n\nTake all observations: \\((\\text{income}\\_n,\\text{education}\\_n,\\text{prestige}\\_n)\\_{n\\in[0,N]}\\)\nObjective: sum of squares \\[ L(\\alpha, \\beta_1, \\beta_2) = \\sum_i \\left( \\underbrace{ \\alpha + \\beta_1 \\text{education}\\_n + \\beta_2 \\text{prestige}\\_n - \\text{income}\\_n }\\_{e_n=\\text{prediction error} }\\right)^2 \\]\nMinimize loss function in \\(\\alpha\\), \\(\\beta_1\\), \\(\\beta_2\\)\nAgain, we can perform numerical optimization (machine learning approach)\n\n… but there is an explicit formula\n\n\n\n\n\n\n\n\n\n\\[Y = \\begin{bmatrix}\n\\text{income}_1 \\\\\\\\\n\\vdots \\\\\\\\\n\\text{income}_N\n\\end{bmatrix}\\] \\[X = \\begin{bmatrix}\n1 & \\text{education}_1 & \\text{prestige}_1 \\\\\\\\\n\\vdots & \\vdots & \\vdots \\\\\\\\\n1 &\\text{education}_N & \\text{prestige}_N\n\\end{bmatrix}\\]\n\n\n\nMatrix Version (look for \\(B = \\left( \\alpha,  \\beta_1 , \\beta_2 \\right)\\)): \\[Y =  X B + E\\]\nNote that constant can be interpreted as a “variable”\nLoss function \\[L(A,B) = (Y - X B)' (Y - X B)\\]\nResult of minimization \\(\\min_{(A,B)} L(A,B)\\) : \\[\\begin{bmatrix}\\alpha & \\beta_1 & \\beta_2 \\end{bmatrix} = (X'X)^{-1} X' Y \\]\n\n\n\n\n\n\n\n\nResult: \\[\\text{income} = 10.43  + 0.03 \\times \\text{education} + 0.62 \\times \\text{prestige}\\]\nQuestions:\n\nis it a better regression than the other?\nis the coefficient in front of education significant?\nhow do we interpret it?\ncan we build confidence intervals?"
  },
  {
    "objectID": "slides/session_4/graphs/index.html#explained-variance",
    "href": "slides/session_4/graphs/index.html#explained-variance",
    "title": "Multiple Regressions",
    "section": "",
    "text": "As in the 1d case we can compare:\n\nthe variability of the model predictions (\\(MSS\\))\nthe variance of the data (\\(TSS\\), T for total)\n\nCoefficient of determination: \\[R^2 = \\frac{MSS}{TSS}\\]\nOr: \\[R^2 = 1-\\frac{RSS}{SST}\\] where \\(RSS\\) is the non explained variance\n\n\n\n\n\n\n\nIn our example:\n\n\n\n\n\n\n\n\n\nRegression\n\\(R^2\\)\n \\(R^2_{adj}\\) \n\n\n\n\neducation\n0.525\n 0.514 \n\n\nprestige\n0.702\n 0.695 \n\n\neducation + prestige\n0.7022\n 0.688 \n\n\n\n\n\n\n\nFact:\n\nadding more regressors always improve \\(R^2\\)\nwhy not throw everything in? (kitchen sink regressions)\n\ntwo many regressors: overfitting the data\n\n\nPenalise additional regressors: adjusted R^2\n\nexample formula:\n\n\\(N\\): number of observations\n\\(p\\) number of variables \\[R^2_{adj} = 1-(1-R^2)\\frac{N-1}{N-p-1}\\]"
  },
  {
    "objectID": "slides/session_4/graphs/index.html#interpretation-and-variable-change",
    "href": "slides/session_4/graphs/index.html#interpretation-and-variable-change",
    "title": "Multiple Regressions",
    "section": "",
    "text": "import statsmodels\nWe use a special API inspired by R:\nimport statsmodels.formula.api as smf\n\n\n\n\nRunning a regression with statsmodels\nmodel = smf.ols('income ~ education',  df)  # model\nres = model.fit()  # perform the regression\nres.describe()\n\n‘income ~ education’ is the model formula\n\nResult:\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:                 income   R-squared:                       0.525\nModel:                            OLS   Adj. R-squared:                  0.514\nMethod:                 Least Squares   F-statistic:                     47.51\nDate:                Tue, 02 Feb 2021   Prob (F-statistic):           1.84e-08\nTime:                        05:21:25   Log-Likelihood:                -190.42\nNo. Observations:                  45   AIC:                             384.8\nDf Residuals:                      43   BIC:                             388.5\nDf Model:                           1                                         \nCovariance Type:            nonrobust                                         \n==============================================================================\n                 coef    std err          t      P&gt;|t|      [0.025      0.975]\n==============================================================================\nIntercept     10.6035      5.198      2.040      0.048       0.120      21.087\neducation      0.5949      0.086      6.893      0.000       0.421       0.769\n==============================================================================\nOmnibus:                        9.841   Durbin-Watson:                   1.736\nProb(Omnibus):                  0.007   Jarque-Bera (JB):               10.609\nSkew:                           0.776   Prob(JB):                      0.00497\nKurtosis:                       4.802   Cond. No.                         123.\n==============================================================================\n\n\n\n\n\nWith statsmodels formulas, can be supplied with R-style syntax\nExamples:\n\n\n\n\n\n\n\n\nFormula\nModel\n\n\n\n\nincome ~ education\n\\(\\text{income}_i = \\alpha + \\beta \\text{education}_i\\)\n\n\nincome ~ prestige\n\\(\\text{income}_i = \\alpha + \\beta \\text{prestige}_i\\)\n\n\nincome ~ prestige - 1\n\\(\\text{income}_i = \\beta \\text{prestige}_i\\) (no intercept)\n\n\nincome ~ education + prestige\n\\(\\text{income}_i = \\alpha + \\beta_1 \\text{education}_i + \\beta_2 \\text{prestige}_i\\)\n\n\n\n\n\n\n\n\nOne can use formulas to apply transformations to variables\n\n\n\n\n\n\n\n\nFormula\nModel\n\n\n\n\nlog(P) ~ log(M) + log(Y)\n\\(\\log(P_i) = \\alpha + \\alpha_1 \\log(M_i) + \\alpha_2 \\log(Y_i)\\) (log-log)\n\n\nlog(Y) ~ i\n\\(\\log(P_i) = \\alpha + i_i\\) (semi-logs)\n\n\n\n\nThis is useful if the true relationship is nonlinear\nAlso useful, to interpret the coefficients\n\n\n\n\n\n\nExample:\n\n(police_spending and prevention_policies in million dollars) \\[ \\text{number_or_crimes} = 0.005\\\\% - 0.001 \\text{pol_spend} - 0.005 \\text{prev_pol} + 0.002 \\text{population density}\\]\n\nreads: when holding other variables constant a 0.1 million increase in police spending reduces crime rate by 0.001%\ninterpretation?\n\nproblematic because variables have different units\nwe can say that prevention policies are more efficient than police spending ceteris paribus\n\nTake logs: \\[ \\log(\\text{number_or_crimes}) = 0.005\\\\% - 0.15 \\log(\\text{pol_spend}) - 0.4 \\log(\\text{prev_pol}) + 0.2 \\log(\\text{population density})\\]\n\nnow we have an estimate of elasticities\na \\(1\\%\\) increase in police spending leads to a \\(0.15\\%\\) decrease in the number of crimes"
  },
  {
    "objectID": "slides/session_4/graphs/index.html#statistical-inference",
    "href": "slides/session_4/graphs/index.html#statistical-inference",
    "title": "Multiple Regressions",
    "section": "",
    "text": "Recall what we do:\n\nwe have the data \\(X,Y\\)\nwe choose a model: \\[ Y = \\alpha + X \\beta \\]\nfrom the data we compute estimates: \\[\\hat{\\beta}  = (X'X)^{-1} X' Y \\] \\[\\hat{\\alpha} = Y- X \\beta \\]\nestimates are a precise function of data\n\nexact formula not important here\n\n\n\n\n\n\n\nWe make some hypotheses on the data generation process:\n\n\\(Y = X \\beta + \\epsilon\\)\n\\(\\mathbb{E}\\left[ \\epsilon \\right] = 0\\)\n\\(\\epsilon\\) multivariate normal with covariance matrix \\(\\sigma^2 I_n\\)\n\n\\(\\forall i, \\sigma(\\epsilon_i) = \\sigma\\)\n\\(\\forall i,j, cov(\\epsilon_i, \\epsilon_j) = 0\\)\n\n\n\nUnder these hypotheses:\n\n\\(\\hat{\\beta}\\) is an unbiased estimate of true parameter \\(\\beta\\)\n\ni.e. \\(\\mathbb{E} [\\hat{\\beta}] = \\beta\\)\n\none can prove \\(Var(\\hat{\\beta}) = \\sigma^2 I_n\\)\n\\(\\sigma\\) can be estimated by \\(\\hat{\\sigma}=S\\frac{\\sum_i (y_i-{pred}_i)^2}{N-p}\\)\n\n\\(N-p\\): degrees of freedoms\n\none can estimate: \\(\\sigma(\\hat{\\beta_k})\\)\n\nit is the \\(i\\)-th diagonal element of \\(\\hat{\\sigma}^2 X'X\\)\n\n\n\n\n\n\n\n\n\n\n\nApproach is very similar to the one-dimensional case\n\nFisher criterium (F-test):\n\n\n\\(H0\\): all coeficients are 0\n\ni.e. true model is \\(y=\\alpha + \\epsilon\\)\n\n\n\\(H1\\): some coefficients are not 0\n\nstatistics: \\[F=\\frac{MSR}{MSE}\\]\n\n\\(MSR\\): mean-squared error of constant model\n\\(MSE\\): mean-squared error of full model\n\n\n\nUnder the model assumptions, distribution of \\(F\\) is known\n\nit is remarkable that it doesn’t depend on \\(\\sigma\\) !\n\n\nOne can produce a p-value.\n\nprobability to obtain this statistics given hypotheses 0\nif very low, H0 is rejected\n\n\n\n\n\n\n\n\nStudent test. Given a an coefficient \\(\\beta_k\\):\n\n\n\\(H0\\): coefficient is 0\n\n\\(H1\\): coefficient is not zero\n\nstatistics: \\(t = \\frac{\\hat{\\beta_k}}{\\hat{\\sigma}(\\hat{\\beta_k})}\\)\n\nwhere \\(\\hat{\\sigma}(\\beta_k)\\) is \\(i\\)-th diagonal element of \\(\\hat{\\sigma}^2 X'X\\)\n\n\n\nUnder the inference hypotheses, distribution of \\(t\\) is known.\n\nit is a student distribution\n\n\nProcedure:\n\n\nCompute \\(t\\). Check acceptance threshold \\(t*\\) at probability \\(\\alpha\\).\n\nCoefficient is significant with probability \\(1-\\alpha\\) if \\(t&gt;t*\\)\n\nOr compute implied acceptance rate \\(\\alpha\\) for \\(t\\).\n\nif \\(t\\) is high enough, null hypothesis is rejected\n\n\n\n\n\n\n\n\nSame as in the 1d case.\nTake estimate \\(\\color{red}{\\beta_i}\\) with an estimate of its standard deviation \\(\\color{red}{\\hat{\\sigma}(\\beta_i)}\\)\nCompute student \\(\\color{red}{t^{\\star}}\\) at \\(\\color{red}{\\alpha}\\) confidence level (ex: \\(\\alpha=5\\\\%\\)) such that:\n\n\\(P(|t|&gt;t^{\\star})&lt;\\alpha\\)\n\nProduce confidence intervals at \\(\\alpha\\) confidence level:\n\n\\([\\color{red}{\\beta_i} - t^{\\star} \\color{red}{\\hat{\\sigma}(\\beta_i)}, \\color{red}{\\beta_i} + t^{\\star} \\color{red}{\\hat{\\sigma}(\\beta_i)}]\\)\n\n\n\n\n\n\n\nThe tests seen so far rely on strong statistical assumptions (normality, homoscedasticity, etc..)\nSome tests can be used to test these assumptions:\n\nJarque-Bera: is the distribution of data truly normal\nDurbin-Watson: are residuals autocorrelated (makes sense for time-series)\n…\n\nIn case assumptions are not met…\n\n… still possible to do econometrics\n… but beyond the scope of this course"
  },
  {
    "objectID": "slides/session_4/graphs/index.html#variable-selection",
    "href": "slides/session_4/graphs/index.html#variable-selection",
    "title": "Multiple Regressions",
    "section": "",
    "text": "I’ve got plenty of data:\n\n\\(y\\): gdp\n\\(x_1\\): investment\n\\(x_2\\): inflation\n\\(x_3\\): education\n\\(x_4\\): unemployment\n…\n\n\nMany possible regressions:\n\n\\(y = α + \\beta_1 x_1\\)\n\\(y = α + \\beta_2 x_2 + \\beta_3 x_4\\)\n…\n\n\nWhich one do I choose ?\n\nputting everything together is not an option (kitchen sink regression)\n\n\n\n\n\n\n\nSuppose you run a regression: \\[y = \\alpha + \\beta_1 x_1 + \\epsilon\\]\nBut unknowingly to you, the actual model is \\[y = \\alpha + \\beta_1 x_1 + \\beta_2 x_2 + \\eta\\]\nThe residual \\(y - \\alpha - \\beta_1 x_1\\) is not white noise\n\nspecification hypotheses are violated\nestimate \\(\\hat{\\beta_1}\\) will have a bias (omitted variable bias)\nto correct the bias we add \\(x_2\\) (“control” for \\(x_2\\))\n\n\n\n\n\n\n\nSuppose I want to check Okun’s law. I consider the following model: \\[\\text{gdp_growth} = \\alpha + \\beta \\times \\text{unemployment}\\]\nI obtain: \\[\\text{gdp_growth} = 0.01 - 0.1 \\times \\text{unemployment} + e_i\\]\nThen I inspect visually the residuals: not normal at all!\nConclusion: my regression is misspecified, \\(0.1\\) is a biased (useless) estimate\nI need to control for additional variables. For instance: \\[\\text{gdp_growth} = \\alpha + \\beta_1 \\text{unemployment} + \\beta_2 \\text{interest rate}\\]\nUntil the residuals are actually white noise\n\n\n\n\n\n\nWhat happens if two regressors are (almost) colinear? \\[y = \\alpha + \\beta_1 x_1 + \\beta_2 x_2\\] where \\(x_2 = \\kappa x_1\\)\nIntuitively: parameters are not unique\n\nif \\(y = \\alpha + \\beta_1 x_1\\) is the right model…\nthen \\(y = \\alpha + \\beta_1 \\lambda x_1 + \\beta_2 (1-\\lambda) \\frac{1}{\\kappa} x_2\\) is exactly as good…\n\nMathematically: \\((X'X)\\) is not invertible.\nWhen regressors are almost colinear, coefficients can have a lot of variability.\nTest: correlation plot, correlation statistics\n\n\n\n\n\n\\[y = \\alpha + \\beta_1 x_1 + ... \\beta_n x_n\\]\nWhich regressors to choose ?\n\nMethod 1 : remove coefficients with lowest t (less significant) to maximize adjusted R-squared\n\nremove regressors with lowest t\nregress again\nsee if adjusted \\(R^2\\) is decreasing\n\nif so continue\notherwise cancel last step and stop\n\n\nMethod 2 : choose combination to maximize Akaike Information Criterium\n\nAIC: \\(p - log(L)\\)\n\\(L\\) is likelihood\ncomputed by all good econometric softwares"
  },
  {
    "objectID": "slides/session_4/graphs/index.html#coming-next",
    "href": "slides/session_4/graphs/index.html#coming-next",
    "title": "Multiple Regressions",
    "section": "",
    "text": "Intro to causality"
  },
  {
    "objectID": "slides/session_4/graphs/Untitled1.html",
    "href": "slides/session_4/graphs/Untitled1.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "from matplotlib import pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n\nimport statsmodels.api as sm\n\n\ndf.describe()\n\n\n\n\n\n\n\n\nincome\neducation\nprestige\n\n\n\n\ncount\n45.000000\n45.000000\n45.000000\n\n\nmean\n41.866667\n52.555556\n47.688889\n\n\nstd\n24.435072\n29.760831\n31.510332\n\n\nmin\n7.000000\n7.000000\n3.000000\n\n\n25%\n21.000000\n26.000000\n16.000000\n\n\n50%\n42.000000\n45.000000\n41.000000\n\n\n75%\n64.000000\n84.000000\n81.000000\n\n\nmax\n81.000000\n100.000000\n97.000000\n\n\n\n\n\n\n\n\ndf.cov()\n\n\n\n\n\n\n\n\nincome\neducation\nprestige\n\n\n\n\nincome\n597.072727\n526.871212\n645.071212\n\n\neducation\n526.871212\n885.707071\n798.904040\n\n\nprestige\n645.071212\n798.904040\n992.901010\n\n\n\n\n\n\n\n\nfrom matplotlib import pyplot as plt\n\n\nplt.figure(figsize=(8,6))\nplt.plot(df['education'],df['income'],'o')\nplt.grid()\nplt.xlabel(\"x (Education)\")\nplt.ylabel(\"y (Income)\")\nplt.savefig(\"data_description.png\")\n\n\n\n\n\n\n\n\n\nfor i in [1,2,3]:\n    xvec = np.linspace(10,100)\n\n    plt.figure(figsize=(12,8))\n    plt.plot(df['education'],df['income'],'o')\n\n    plt.plot(xvec, xvec * 0 + 50)\n    if i&gt;=2:\n        plt.plot(xvec, xvec )\n    if i&gt;=3:\n        plt.plot(xvec,  90- 0.6*xvec )\n\n    plt.grid()\n    plt.xlabel(\"x (Education)\")\n    plt.ylabel(\"y (Income)\")\n    plt.savefig(f\"which_line_{i}.png\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfrom ipywidgets import interact\n\n\nimport matplotlib.patches as patches\n\n\na = 0.1\nb = 1.0\nind = 23\n\n\napprox =  a + b*xvec\n\n# Create figure and axes\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\nplt.plot(df['education'],df['income'],'o')\nplt.plot(xvec, approx, color='red')\n\nx, y = df['education'][ind], df['income'][ind]\nplt.plot(x, y, 'o', color='red' )\np = a+b*x\nplt.grid(True)\nh = abs(p-y)\nplt.vlines(x, y+h, y, color='red')\n\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.savefig(f\"error_0.png\")\n\n\n\n\n\n\n\n\n\nplt.vlines?\n\n\nSignature:\nplt.vlines(\n    x,\n    ymin,\n    ymax,\n    colors=None,\n    linestyles='solid',\n    label='',\n    *,\n    data=None,\n    **kwargs,\n)\nDocstring:\nPlot vertical lines.\nPlot vertical lines at each *x* from *ymin* to *ymax*.\nParameters\n----------\nx : float or array-like\n    x-indexes where to plot the lines.\nymin, ymax : float or array-like\n    Respective beginning and end of each line. If scalars are\n    provided, all lines will have same length.\ncolors : list of colors, default: :rc:`lines.color`\nlinestyles : {'solid', 'dashed', 'dashdot', 'dotted'}, optional\nlabel : str, default: ''\nReturns\n-------\n`~matplotlib.collections.LineCollection`\nOther Parameters\n----------------\n**kwargs : `~matplotlib.collections.LineCollection` properties.\nSee Also\n--------\nhlines : horizontal lines\naxvline: vertical line across the axes\nNotes\n-----\n.. note::\n    In addition to the above described arguments, this function can take\n    a *data* keyword argument. If such a *data* argument is given,\n    the following arguments can also be string ``s``, which is\n    interpreted as ``data[s]`` (unless this raises an exception):\n    *x*, *ymin*, *ymax*, *colors*.\n    Objects passed as **data** must support item access (``data[s]``) and\n    membership test (``s in data``).\nFile:      ~/.local/opt/miniconda/lib/python3.8/site-packages/matplotlib/pyplot.py\nType:      function\n\n\n\n\n\na = 0.1\nb = 1.0\nind = 23\n\n\napprox =  a + b*xvec\n\n# Create figure and axes\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\nplt.plot(df['education'],df['income'],'o')\nplt.plot(xvec, approx, color='red')\n\nx, y = df['education'][ind], df['income'][ind]\nplt.plot(x, y, 'o', color='red' )\np = a+b*x\nplt.grid(True)\nh = abs(p-y)\nif p-y&gt;0:\n    # Create a Rectangle patch\n    rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n    ax.add_patch(rect)\n    \nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.savefig(f\"errors_{1}.png\")\n\n\n\n\n\n\n\n\n\ndef L(a,b):\n    Δ = a + b*df['education'] - df['income']\n    return (Δ**2).sum()\n\n\na = 0.1\nb = 0.8\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red')\n\nplt.grid(True)\nfor ind in range(df.shape[0]):\n    \n    x, y = df['education'][ind], df['income'][ind]\n    p = a+b*x\n\n    h = abs(p-y)\n    if p-y&gt;0:\n        # Create a Rectangle patch\n        rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\n    else:\n        rect = patches.Rectangle((x,y-h),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"errors_2.png\")\n\n\n\n\n\n\n\n\n\na = 90\nb = -0.6\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red')\n\nplt.grid(True)\nfor ind in range(df.shape[0]):\n    \n    x, y = df['education'][ind], df['income'][ind]\n    p = a+b*x\n\n    h = abs(p-y)\n    if p-y&gt;0:\n        # Create a Rectangle patch\n        rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\n    else:\n        rect = patches.Rectangle((x,y-h),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"errors_3.png\")\n\n\n\n\n\n\n\n\n\nimport scipy.optimize\n\n\nscipy.optimize.minimize(lambda x: L(x[0], x[1]),np.array([0.5, 0.5]))\n\n      fun: 12480.970174488397\n hess_inv: array([[ 7.14169839e-09, -3.91281920e-09],\n       [-3.91281920e-09,  2.46663613e-09]])\n      jac: array([0.00024414, 0.00012207])\n  message: 'Desired error not necessarily achieved due to precision loss.'\n     nfev: 57\n      nit: 7\n     njev: 19\n   status: 2\n  success: False\n        x: array([10.60350224,  0.59485938])\n\n\n\na = 10\nb = 0.59\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red')\n\nplt.grid(True)\nfor ind in range(df.shape[0]):\n    \n    x, y = df['education'][ind], df['income'][ind]\n    p = a+b*x\n\n    h = abs(p-y)\n    if p-y&gt;0:\n        # Create a Rectangle patch\n        rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\n    else:\n        rect = patches.Rectangle((x,y-h),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"errors_4.png\")\n\n\n\n\n\n\n\n\n\na = 10\nb = 0.59\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red', alpha=0.5)\n\nplt.plot(60, a + b*60, 'o', color='red',)\n\nprint(a+b*60)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"prediction.png\")\n\n45.4\n\n\n\n\n\n\n\n\n\n\na = 10\nb = 0.59\n\napprox =  (a + b*df['education'] - df['income'])\n\nplt.figure(figsize=(12,6))\n\nplt.subplot(121)\nplt.plot(approx)\nplt.grid(False)\nplt.title(\"Residuals\")\n\n\nplt.subplot(122)\ndistplot(approx)\nplt.title(\"Distribution of residuals\")\nplt.grid()\n\nplt.savefig(\"residuals.png\")\n\n/home/pablo/.local/opt/miniconda/lib/python3.8/site-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n  warnings.warn(msg, FutureWarning)\n\n\n\n\n\n\n\n\n\n\n(a + b*df['education'] - df['income']).std()\n\n16.842782676352154\n\n\n\n\n\n/home/pablo/.local/opt/miniconda/lib/python3.8/site-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n  warnings.warn(msg, FutureWarning)\n\n\n\n\n\n\n\n\n\n\nfrom scipy.stats import f\n\n\nf(0.3)\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n&lt;ipython-input-191-91b22dc02480&gt; in &lt;module&gt;\n----&gt; 1 f(0.3)\n\n~/.local/opt/miniconda/lib/python3.8/site-packages/scipy/stats/_distn_infrastructure.py in __call__(self, *args, **kwds)\n    778 \n    779     def __call__(self, *args, **kwds):\n--&gt; 780         return self.freeze(*args, **kwds)\n    781     __call__.__doc__ = freeze.__doc__\n    782 \n\n~/.local/opt/miniconda/lib/python3.8/site-packages/scipy/stats/_distn_infrastructure.py in freeze(self, *args, **kwds)\n    775 \n    776         \"\"\"\n--&gt; 777         return rv_frozen(self, *args, **kwds)\n    778 \n    779     def __call__(self, *args, **kwds):\n\n~/.local/opt/miniconda/lib/python3.8/site-packages/scipy/stats/_distn_infrastructure.py in __init__(self, dist, *args, **kwds)\n    422         self.dist = dist.__class__(**dist._updated_ctor_param())\n    423 \n--&gt; 424         shapes, _, _ = self.dist._parse_args(*args, **kwds)\n    425         self.a, self.b = self.dist._get_support(*shapes)\n    426 \n\nTypeError: _parse_args() missing 1 required positional argument: 'dfd'\n\n\n\n\nnp.rand\n\n\nK = 100\nxvec = np.linspace(0,1,K)\ne1 = np.random.randn(K)*0.1\nyvec = 0.1 + xvec*0.4 + e1\ne2 = np.random.randn(K)*0.05\nyvec2 = 0.1 + xvec*(xvec-1)/2 + e2\ne3 = np.random.randn(K)*xvec/2\nyvec3 = 0.1 + xvec + e3\n\nyvec4 = 0.1 + np.sin(xvec*6) + np.random.randn(K)*xvec/2\n\n\nfrom dolo.numeric.processes import VAR1\n\n\nsim = VAR1( ρ=0.8, Σ=0.001).simulate(N=1,T=100)\nyvec4 = 0.1 + xvec*0.4 + sim.ravel()\n\n\nplt.figure(figsize=(18,6))\nplt.subplot(241)\nplt.plot(xvec, yvec,'o')\nplt.plot(xvec, 0.1 + xvec*0.4 )\nplt.ylabel(\"Series\")\nplt.title(\"white noise\")\nplt.subplot(242)\nplt.plot(xvec, yvec2, 'o')\nplt.plot(xvec, yvec2*0)\nplt.title('nonlinear')\nplt.subplot(243)\nplt.plot(xvec, yvec3,'o')\nplt.plot(xvec, 0.1 + xvec)\nplt.title('heteroskedastic')\nplt.subplot(244)\nplt.plot(xvec, yvec4,'o')\nplt.plot(xvec, xvec*0.6)\n\nplt.title('correlated')\n\n\nplt.subplot(245)\nplt.plot(xvec, e1,'o')\nplt.ylabel(\"Residuals\")\nplt.subplot(246)\nplt.plot(xvec, yvec2-0.075, 'o')\n\nplt.subplot(247)\nplt.plot(xvec, e3,'o')\nplt.subplot(248)\nplt.plot(xvec, sim.ravel(),'o')\n\nplt.tight_layout()\n\nplt.savefig(\"residuals_circus.png\")"
  },
  {
    "objectID": "slides/session_4/Regressions_correction_2022.html",
    "href": "slides/session_4/Regressions_correction_2022.html",
    "title": "Regressions",
    "section": "",
    "text": "Import the Duncan/carData dataset\n\nimport statsmodels.api as sm\ndataset = sm.datasets.get_rdataset(\"Duncan\", \"carData\")\ndf = dataset.data\ndf.head()\n\n\n\n\n\n\n\n\ntype\nincome\neducation\nprestige\n\n\n\n\naccountant\nprof\n62\n86\n82\n\n\npilot\nprof\n72\n76\n83\n\n\narchitect\nprof\n75\n92\n90\n\n\nauthor\nprof\n55\n90\n76\n\n\nchemist\nprof\n64\n86\n90\n\n\n\n\n\n\n\nEstimate by hand the model \\(\\text{income} = \\alpha + \\beta  \\times \\text{education}\\) . Plot.\n\n# skipped. requires the formula from the course\n\nCompute total, explained, unexplained variance. Compute R^2 statistics\n\n# skipped. requires the formula from the course\n\nUse statsmodels (formula API) to estimate \\(\\text{income} = \\alpha + \\beta  \\times \\text{education}\\). Comment regression statistics.\n\n#https://www.statsmodels.org/stable/generated/statsmodels.formula.api.ols.html\n\nfrom statsmodels.formula import api as smf\n\nmodel_1 = smf.ols(\"income ~ education\", df)\nres_1 = model_1.fit()\n\n&lt;statsmodels.regression.linear_model.RegressionResultsWrapper at 0x7ffad5b135e0&gt;\n\n\n\nres_1.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nincome\nR-squared:\n0.525\n\n\nModel:\nOLS\nAdj. R-squared:\n0.514\n\n\nMethod:\nLeast Squares\nF-statistic:\n47.51\n\n\nDate:\nTue, 02 Feb 2021\nProb (F-statistic):\n1.84e-08\n\n\nTime:\n11:29:50\nLog-Likelihood:\n-190.42\n\n\nNo. Observations:\n45\nAIC:\n384.8\n\n\nDf Residuals:\n43\nBIC:\n388.5\n\n\nDf Model:\n1\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n10.6035\n5.198\n2.040\n0.048\n0.120\n21.087\n\n\neducation\n0.5949\n0.086\n6.893\n0.000\n0.421\n0.769\n\n\n\n\n\n\n\n\nOmnibus:\n9.841\nDurbin-Watson:\n1.736\n\n\nProb(Omnibus):\n0.007\nJarque-Bera (JB):\n10.609\n\n\nSkew:\n0.776\nProb(JB):\n0.00497\n\n\nKurtosis:\n4.802\nCond. No.\n123.\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\nThe estimated regresssion is income = 10.6 + 0.59 education. At a 5% p-value level both the intercept and the coefficient are significant. R-squared is 0.52: the model explains half of the variance.\nUse statsmodels to estimate \\(\\text{income} = \\alpha + \\beta  \\times \\text{prestige}\\). Comment regression statistics.\n\nformula = \"income ~ education\"\n\n\ndf.head()\n\n\n\n\n\n\n\n\ntype\nincome\neducation\nprestige\n\n\n\n\naccountant\nprof\n62\n86\n82\n\n\npilot\nprof\n72\n76\n83\n\n\narchitect\nprof\n75\n92\n90\n\n\nauthor\nprof\n55\n90\n76\n\n\nchemist\nprof\n64\n86\n90\n\n\n\n\n\n\n\n\nmodel_2 = smf.ols(\"income ~ prestige\", df)\nres_2 = model_2.fit()\n\n\nres_2.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nincome\nR-squared:\n0.702\n\n\nModel:\nOLS\nAdj. R-squared:\n0.695\n\n\nMethod:\nLeast Squares\nF-statistic:\n101.3\n\n\nDate:\nTue, 02 Feb 2021\nProb (F-statistic):\n7.14e-13\n\n\nTime:\n11:55:59\nLog-Likelihood:\n-179.93\n\n\nNo. Observations:\n45\nAIC:\n363.9\n\n\nDf Residuals:\n43\nBIC:\n367.5\n\n\nDf Model:\n1\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n10.8840\n3.678\n2.959\n0.005\n3.467\n18.301\n\n\nprestige\n0.6497\n0.065\n10.062\n0.000\n0.519\n0.780\n\n\n\n\n\n\n\n\nOmnibus:\n8.893\nDurbin-Watson:\n2.048\n\n\nProb(Omnibus):\n0.012\nJarque-Bera (JB):\n19.848\n\n\nSkew:\n0.047\nProb(JB):\n4.90e-05\n\n\nKurtosis:\n6.252\nCond. No.\n104.\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\nThe estimated regresssion is income = 10.6 + 0.59 education. At a 0.5% p-value level both the intercept and the coefficient are significant. R-squared is 0.70: the model predicts income better than the former one.\nUse statsmodels to estimate \\(\\text{income} = \\alpha + \\beta  \\times \\text{education}  + \\beta_2  \\times \\text{prestige}\\). Comment regression statistics.\n\nmodel_3 = smf.ols(\"income ~ education + prestige\", df)\nres_3 = model_3.fit()\n\n\nres_3.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nincome\nR-squared:\n0.702\n\n\nModel:\nOLS\nAdj. R-squared:\n0.688\n\n\nMethod:\nLeast Squares\nF-statistic:\n49.55\n\n\nDate:\nTue, 02 Feb 2021\nProb (F-statistic):\n8.88e-12\n\n\nTime:\n11:56:03\nLog-Likelihood:\n-179.90\n\n\nNo. Observations:\n45\nAIC:\n365.8\n\n\nDf Residuals:\n42\nBIC:\n371.2\n\n\nDf Model:\n2\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n10.4264\n4.164\n2.504\n0.016\n2.024\n18.829\n\n\neducation\n0.0323\n0.132\n0.244\n0.808\n-0.234\n0.299\n\n\nprestige\n0.6237\n0.125\n5.003\n0.000\n0.372\n0.875\n\n\n\n\n\n\n\n\nOmnibus:\n9.200\nDurbin-Watson:\n2.053\n\n\nProb(Omnibus):\n0.010\nJarque-Bera (JB):\n21.265\n\n\nSkew:\n0.075\nProb(JB):\n2.41e-05\n\n\nKurtosis:\n6.364\nCond. No.\n168.\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\nThe \\(R^2\\) is only slightly higher than last model, but adjusted \\(R^2\\) is actually lower: the model has less predictive power.\nThe coefficient for education is not significant. It should be dropped from the regresssion.\nThis might happen, because education and prestige are correlated. Let’s check it:\n\ndf.corr()\n\n\n\n\n\n\n\n\nincome\neducation\nprestige\n\n\n\n\nincome\n1.000000\n0.724512\n0.837801\n\n\neducation\n0.724512\n1.000000\n0.851916\n\n\nprestige\n0.837801\n0.851916\n1.000000\n\n\n\n\n\n\n\nEducation and prestige are correlated at 83%. It makes no sense keeping the two in the same regression.\nWHich model would you recommend? For which purpose?\nIf the goal is to predict income, the one with prestige only, has the highest prediction power. If we are interested in the effect of education, we keep only education.\nPlot the regression with prestige\n\na = res_2.params.Intercept\nb = res_2.params.prestige\n\n\nx = df['prestige']\n\n\ny = a + b*x\n\n\nfrom matplotlib import pyplot as plt\nplt.plot(x, df['income'],'o')\nplt.plot(x, y)\nplt.xlabel(\"prestige\")\nplt.xlabel(\"income\")\n\nText(0.5, 0, 'income')\n\n\n\n\n\n\n\n\n\nCheck visually normality of residuals\n\npred = a + b*x\nactual = df['income']\nresid = actual - pred  # same as res_2.resid\n\n\nplt.plot(x,resid, 'o')\n\n\n\n\n\n\n\n\n\nplt.hist(resid)\n\n(array([0.00255915, 0.        , 0.        , 0.00511829, 0.0486238 ,\n        0.02815062, 0.01535488, 0.01023659, 0.00255915, 0.00255915]),\n array([-46.40643935, -37.72299114, -29.03954294, -20.35609473,\n        -11.67264653,  -2.98919832,   5.69424989,  14.37769809,\n         23.0611463 ,  31.74459451,  40.42804271]),\n &lt;BarContainer object of 10 artists&gt;)"
  },
  {
    "objectID": "slides/session_4/Regressions_correction_2022.html#linear-regressions",
    "href": "slides/session_4/Regressions_correction_2022.html#linear-regressions",
    "title": "Regressions",
    "section": "",
    "text": "Import the Duncan/carData dataset\n\nimport statsmodels.api as sm\ndataset = sm.datasets.get_rdataset(\"Duncan\", \"carData\")\ndf = dataset.data\ndf.head()\n\n\n\n\n\n\n\n\ntype\nincome\neducation\nprestige\n\n\n\n\naccountant\nprof\n62\n86\n82\n\n\npilot\nprof\n72\n76\n83\n\n\narchitect\nprof\n75\n92\n90\n\n\nauthor\nprof\n55\n90\n76\n\n\nchemist\nprof\n64\n86\n90\n\n\n\n\n\n\n\nEstimate by hand the model \\(\\text{income} = \\alpha + \\beta  \\times \\text{education}\\) . Plot.\n\n# skipped. requires the formula from the course\n\nCompute total, explained, unexplained variance. Compute R^2 statistics\n\n# skipped. requires the formula from the course\n\nUse statsmodels (formula API) to estimate \\(\\text{income} = \\alpha + \\beta  \\times \\text{education}\\). Comment regression statistics.\n\n#https://www.statsmodels.org/stable/generated/statsmodels.formula.api.ols.html\n\nfrom statsmodels.formula import api as smf\n\nmodel_1 = smf.ols(\"income ~ education\", df)\nres_1 = model_1.fit()\n\n&lt;statsmodels.regression.linear_model.RegressionResultsWrapper at 0x7ffad5b135e0&gt;\n\n\n\nres_1.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nincome\nR-squared:\n0.525\n\n\nModel:\nOLS\nAdj. R-squared:\n0.514\n\n\nMethod:\nLeast Squares\nF-statistic:\n47.51\n\n\nDate:\nTue, 02 Feb 2021\nProb (F-statistic):\n1.84e-08\n\n\nTime:\n11:29:50\nLog-Likelihood:\n-190.42\n\n\nNo. Observations:\n45\nAIC:\n384.8\n\n\nDf Residuals:\n43\nBIC:\n388.5\n\n\nDf Model:\n1\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n10.6035\n5.198\n2.040\n0.048\n0.120\n21.087\n\n\neducation\n0.5949\n0.086\n6.893\n0.000\n0.421\n0.769\n\n\n\n\n\n\n\n\nOmnibus:\n9.841\nDurbin-Watson:\n1.736\n\n\nProb(Omnibus):\n0.007\nJarque-Bera (JB):\n10.609\n\n\nSkew:\n0.776\nProb(JB):\n0.00497\n\n\nKurtosis:\n4.802\nCond. No.\n123.\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\nThe estimated regresssion is income = 10.6 + 0.59 education. At a 5% p-value level both the intercept and the coefficient are significant. R-squared is 0.52: the model explains half of the variance.\nUse statsmodels to estimate \\(\\text{income} = \\alpha + \\beta  \\times \\text{prestige}\\). Comment regression statistics.\n\nformula = \"income ~ education\"\n\n\ndf.head()\n\n\n\n\n\n\n\n\ntype\nincome\neducation\nprestige\n\n\n\n\naccountant\nprof\n62\n86\n82\n\n\npilot\nprof\n72\n76\n83\n\n\narchitect\nprof\n75\n92\n90\n\n\nauthor\nprof\n55\n90\n76\n\n\nchemist\nprof\n64\n86\n90\n\n\n\n\n\n\n\n\nmodel_2 = smf.ols(\"income ~ prestige\", df)\nres_2 = model_2.fit()\n\n\nres_2.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nincome\nR-squared:\n0.702\n\n\nModel:\nOLS\nAdj. R-squared:\n0.695\n\n\nMethod:\nLeast Squares\nF-statistic:\n101.3\n\n\nDate:\nTue, 02 Feb 2021\nProb (F-statistic):\n7.14e-13\n\n\nTime:\n11:55:59\nLog-Likelihood:\n-179.93\n\n\nNo. Observations:\n45\nAIC:\n363.9\n\n\nDf Residuals:\n43\nBIC:\n367.5\n\n\nDf Model:\n1\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n10.8840\n3.678\n2.959\n0.005\n3.467\n18.301\n\n\nprestige\n0.6497\n0.065\n10.062\n0.000\n0.519\n0.780\n\n\n\n\n\n\n\n\nOmnibus:\n8.893\nDurbin-Watson:\n2.048\n\n\nProb(Omnibus):\n0.012\nJarque-Bera (JB):\n19.848\n\n\nSkew:\n0.047\nProb(JB):\n4.90e-05\n\n\nKurtosis:\n6.252\nCond. No.\n104.\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\nThe estimated regresssion is income = 10.6 + 0.59 education. At a 0.5% p-value level both the intercept and the coefficient are significant. R-squared is 0.70: the model predicts income better than the former one.\nUse statsmodels to estimate \\(\\text{income} = \\alpha + \\beta  \\times \\text{education}  + \\beta_2  \\times \\text{prestige}\\). Comment regression statistics.\n\nmodel_3 = smf.ols(\"income ~ education + prestige\", df)\nres_3 = model_3.fit()\n\n\nres_3.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nincome\nR-squared:\n0.702\n\n\nModel:\nOLS\nAdj. R-squared:\n0.688\n\n\nMethod:\nLeast Squares\nF-statistic:\n49.55\n\n\nDate:\nTue, 02 Feb 2021\nProb (F-statistic):\n8.88e-12\n\n\nTime:\n11:56:03\nLog-Likelihood:\n-179.90\n\n\nNo. Observations:\n45\nAIC:\n365.8\n\n\nDf Residuals:\n42\nBIC:\n371.2\n\n\nDf Model:\n2\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n10.4264\n4.164\n2.504\n0.016\n2.024\n18.829\n\n\neducation\n0.0323\n0.132\n0.244\n0.808\n-0.234\n0.299\n\n\nprestige\n0.6237\n0.125\n5.003\n0.000\n0.372\n0.875\n\n\n\n\n\n\n\n\nOmnibus:\n9.200\nDurbin-Watson:\n2.053\n\n\nProb(Omnibus):\n0.010\nJarque-Bera (JB):\n21.265\n\n\nSkew:\n0.075\nProb(JB):\n2.41e-05\n\n\nKurtosis:\n6.364\nCond. No.\n168.\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\nThe \\(R^2\\) is only slightly higher than last model, but adjusted \\(R^2\\) is actually lower: the model has less predictive power.\nThe coefficient for education is not significant. It should be dropped from the regresssion.\nThis might happen, because education and prestige are correlated. Let’s check it:\n\ndf.corr()\n\n\n\n\n\n\n\n\nincome\neducation\nprestige\n\n\n\n\nincome\n1.000000\n0.724512\n0.837801\n\n\neducation\n0.724512\n1.000000\n0.851916\n\n\nprestige\n0.837801\n0.851916\n1.000000\n\n\n\n\n\n\n\nEducation and prestige are correlated at 83%. It makes no sense keeping the two in the same regression.\nWHich model would you recommend? For which purpose?\nIf the goal is to predict income, the one with prestige only, has the highest prediction power. If we are interested in the effect of education, we keep only education.\nPlot the regression with prestige\n\na = res_2.params.Intercept\nb = res_2.params.prestige\n\n\nx = df['prestige']\n\n\ny = a + b*x\n\n\nfrom matplotlib import pyplot as plt\nplt.plot(x, df['income'],'o')\nplt.plot(x, y)\nplt.xlabel(\"prestige\")\nplt.xlabel(\"income\")\n\nText(0.5, 0, 'income')\n\n\n\n\n\n\n\n\n\nCheck visually normality of residuals\n\npred = a + b*x\nactual = df['income']\nresid = actual - pred  # same as res_2.resid\n\n\nplt.plot(x,resid, 'o')\n\n\n\n\n\n\n\n\n\nplt.hist(resid)\n\n(array([0.00255915, 0.        , 0.        , 0.00511829, 0.0486238 ,\n        0.02815062, 0.01535488, 0.01023659, 0.00255915, 0.00255915]),\n array([-46.40643935, -37.72299114, -29.03954294, -20.35609473,\n        -11.67264653,  -2.98919832,   5.69424989,  14.37769809,\n         23.0611463 ,  31.74459451,  40.42804271]),\n &lt;BarContainer object of 10 artists&gt;)"
  },
  {
    "objectID": "slides/session_4/Regressions_correction_2022.html#finding-the-right-model",
    "href": "slides/session_4/Regressions_correction_2022.html#finding-the-right-model",
    "title": "Regressions",
    "section": "Finding the right model",
    "text": "Finding the right model\nImport dataset from data.dta. Explore dataset (statistics, plots)\n\nimport pandas\n\n\ndf = pandas.read_stata('data.dta')\ndf.head()\n\n\n\n\n\n\n\n\nindex\nx\ny\nz\n\n\n\n\n0\n0\n1.504053\n0.543556\n1.917895\n\n\n1\n1\n43.619758\n0.543113\n4.058487\n\n\n2\n2\n1.226398\n0.736955\n1.785403\n\n\n3\n3\n89.103260\n0.996219\n6.321152\n\n\n4\n4\n32.117073\n0.140142\n3.445228\n\n\n\n\n\n\n\nOur goal is to explain z by x and y. Run a regression.\n\nfrom statsmodels.formula import api as smf\n\n\nmodel = smf.ols('z ~ x + y', data=df)\nres = model.fit()\n\n\nres.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nz\nR-squared:\n0.800\n\n\nModel:\nOLS\nAdj. R-squared:\n0.791\n\n\nMethod:\nLeast Squares\nF-statistic:\n93.90\n\n\nDate:\nTue, 23 Feb 2021\nProb (F-statistic):\n3.82e-17\n\n\nTime:\n10:41:10\nLog-Likelihood:\n-57.244\n\n\nNo. Observations:\n50\nAIC:\n120.5\n\n\nDf Residuals:\n47\nBIC:\n126.2\n\n\nDf Model:\n2\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n1.2177\n0.243\n5.019\n0.000\n0.730\n1.706\n\n\nx\n0.0356\n0.003\n12.235\n0.000\n0.030\n0.041\n\n\ny\n1.9128\n0.369\n5.177\n0.000\n1.169\n2.656\n\n\n\n\n\n\n\n\nOmnibus:\n3.205\nDurbin-Watson:\n1.859\n\n\nProb(Omnibus):\n0.201\nJarque-Bera (JB):\n2.349\n\n\nSkew:\n0.277\nProb(JB):\n0.309\n\n\nKurtosis:\n3.906\nCond. No.\n187.\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\nComments: regression looks significant. \\(R^2\\) looks good. Fisher statistics, is conclusive (the hypothesis H0 that all coefficients are zero is rejected at a 3.82e-17 confidence level.. The student statistics are also quite high. For each coefficient, the hypothesis H0 that coefficient is zero is rejected at a 0.001 confidence level.\nExamine the residuals of the regression. What’s wrong? Remedy?\n\nfrom matplotlib import pyplot as plt\n\n\nplt.plot(res.resid, 'o')\n\n\n\n\n\n\n\n\n\nplt.subplot(131)\nplt.plot(df['x'], df['y'],'o')\nplt.subplot(132)\nplt.plot(df['y'], df['z'],'o')\nplt.subplot(133)\nplt.plot(df['x'], df['z'],'o')\nplt.xlabel(\"x\")\nplt.ylabel(\"z\")\n\nplt.tight_layout()\n\n\n\n\n\n\n\n\n\nimport numpy as np\nplt.plot( np.log(df['z']), np.log(df['x']), 'o' )\n\n\n\n\n\n\n\n\nApparently, there is a linear relationship between ‘log(x)’ and log(y)\n\nfrom numpy import log\n\n\nmodel = smf.ols('log(z) ~ log(x) + y', data=df)\nres = model.fit()\n\n\nres.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nlog(z)\nR-squared:\n0.957\n\n\nModel:\nOLS\nAdj. R-squared:\n0.955\n\n\nMethod:\nLeast Squares\nF-statistic:\n525.6\n\n\nDate:\nTue, 23 Feb 2021\nProb (F-statistic):\n6.89e-33\n\n\nTime:\n10:41:56\nLog-Likelihood:\n44.223\n\n\nNo. Observations:\n50\nAIC:\n-82.45\n\n\nDf Residuals:\n47\nBIC:\n-76.71\n\n\nDf Model:\n2\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n0.0128\n0.039\n0.326\n0.746\n-0.066\n0.092\n\n\nlog(x)\n0.2957\n0.010\n29.878\n0.000\n0.276\n0.316\n\n\ny\n0.6164\n0.048\n12.735\n0.000\n0.519\n0.714\n\n\n\n\n\n\n\n\nOmnibus:\n4.351\nDurbin-Watson:\n2.490\n\n\nProb(Omnibus):\n0.114\nJarque-Bera (JB):\n1.936\n\n\nSkew:\n0.089\nProb(JB):\n0.380\n\n\nKurtosis:\n2.052\nCond. No.\n12.1\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\nplt.plot(res.resid, 'o')"
  },
  {
    "objectID": "slides/session_4/Regressions_correction_2022.html#taylor-rule",
    "href": "slides/session_4/Regressions_correction_2022.html#taylor-rule",
    "title": "Regressions",
    "section": "Taylor Rule",
    "text": "Taylor Rule\nIn 1993, John taylor, estimated, using US data the regression: \\(i_t = i^{\\star} + \\alpha_{\\pi} \\pi_t + \\alpha_{\\pi} y_t\\) where \\(\\pi_t\\) is inflation and \\(y_t\\) the output gap (let’s say deviation from real gdp from the trend). He found that both coefficients were not significantly different from \\(0.5\\). Our goal, is to replicate the same analysis.\nImport macro data from statsmodels (https://www.statsmodels.org/devel/datasets/generated/macrodata.html)\n\nimport statsmodels\n\n## google: stats models macrodata\n## google: statsmodels datasets  -&gt; example in the tutorial\n\n# https://www.statsmodels.org/0.6.1/datasets/index.html\n# example about how to use lengley database\n\n\nimport statsmodels.api as sm\n\n\nsm.datasets.macrodata\n\n&lt;module 'statsmodels.datasets.macrodata' from '/home/pablo/.local/opt/miniconda3/lib/python3.8/site-packages/statsmodels/datasets/macrodata/__init__.py'&gt;\n\n\n\nds = sm.datasets.macrodata.load_pandas()\n\n\ndf = ds.raw_data\ndf.head()\n\n\n\n\n\n\n\n\nyear\nquarter\nrealgdp\nrealcons\nrealinv\nrealgovt\nrealdpi\ncpi\nm1\ntbilrate\nunemp\npop\ninfl\nrealint\n\n\n\n\n0\n1959.0\n1.0\n2710.349\n1707.4\n286.898\n470.045\n1886.9\n28.98\n139.7\n2.82\n5.8\n177.146\n0.00\n0.00\n\n\n1\n1959.0\n2.0\n2778.801\n1733.7\n310.859\n481.301\n1919.7\n29.15\n141.7\n3.08\n5.1\n177.830\n2.34\n0.74\n\n\n2\n1959.0\n3.0\n2775.488\n1751.8\n289.226\n491.260\n1916.4\n29.35\n140.5\n3.82\n5.3\n178.657\n2.74\n1.09\n\n\n3\n1959.0\n4.0\n2785.204\n1753.7\n299.356\n484.052\n1931.3\n29.37\n140.0\n4.33\n5.6\n179.386\n0.27\n4.06\n\n\n4\n1960.0\n1.0\n2847.699\n1770.5\n331.722\n462.199\n1955.5\n29.54\n139.6\n3.50\n5.2\n180.007\n2.31\n1.19\n\n\n\n\n\n\n\nCreate a database with all variables of interest including detrended gdp\n\ngdp = df['realgdp']\ninflation = df['infl']\nrealint = df['realint']\n\n\nddf = df # \n\n\nddf.head()\n\n\n\n\n\n\n\n\nyear\nquarter\nrealgdp\nrealcons\nrealinv\nrealgovt\nrealdpi\ncpi\nm1\ntbilrate\nunemp\npop\ninfl\nrealint\n\n\n\n\n0\n1959.0\n1.0\n2710.349\n1707.4\n286.898\n470.045\n1886.9\n28.98\n139.7\n2.82\n5.8\n177.146\n0.00\n0.00\n\n\n1\n1959.0\n2.0\n2778.801\n1733.7\n310.859\n481.301\n1919.7\n29.15\n141.7\n3.08\n5.1\n177.830\n2.34\n0.74\n\n\n2\n1959.0\n3.0\n2775.488\n1751.8\n289.226\n491.260\n1916.4\n29.35\n140.5\n3.82\n5.3\n178.657\n2.74\n1.09\n\n\n3\n1959.0\n4.0\n2785.204\n1753.7\n299.356\n484.052\n1931.3\n29.37\n140.0\n4.33\n5.6\n179.386\n0.27\n4.06\n\n\n4\n1960.0\n1.0\n2847.699\n1770.5\n331.722\n462.199\n1955.5\n29.54\n139.6\n3.50\n5.2\n180.007\n2.31\n1.19\n\n\n\n\n\n\n\nWe use the fisher relation: \\(r_t = i_t - \\pi_t\\)\n\nddf['ir'] = ddf['realint'] + ddf['infl']\n\nto detrend the gdp, we use hp-filter function from scipy google: hpfilter scipy\n\nfrom statsmodels.tsa.filters.hp_filter import hpfilter\n\n\ncycle, trend = hpfilter(ddf['realgdp'])\n\n\nddf['gdp'] = cycle/trend*100 # nominal interest rate and inflation are in percent\n\n\nddf.head()\n\n\n\n\n\n\n\n\nyear\nquarter\nrealgdp\nrealcons\nrealinv\nrealgovt\nrealdpi\ncpi\nm1\ntbilrate\nunemp\npop\ninfl\nrealint\nir\ngdp\n\n\n\n\n0\n1959.0\n1.0\n2710.349\n1707.4\n286.898\n470.045\n1886.9\n28.98\n139.7\n2.82\n5.8\n177.146\n0.00\n0.00\n0.00\n1.479383\n\n\n1\n1959.0\n2.0\n2778.801\n1733.7\n310.859\n481.301\n1919.7\n29.15\n141.7\n3.08\n5.1\n177.830\n2.34\n0.74\n3.08\n2.967657\n\n\n2\n1959.0\n3.0\n2775.488\n1751.8\n289.226\n491.260\n1916.4\n29.35\n140.5\n3.82\n5.3\n178.657\n2.74\n1.09\n3.83\n1.792534\n\n\n3\n1959.0\n4.0\n2785.204\n1753.7\n299.356\n484.052\n1931.3\n29.37\n140.0\n4.33\n5.6\n179.386\n0.27\n4.06\n4.33\n1.110571\n\n\n4\n1960.0\n1.0\n2847.699\n1770.5\n331.722\n462.199\n1955.5\n29.54\n139.6\n3.50\n5.2\n180.007\n2.31\n1.19\n3.50\n2.331547\n\n\n\n\n\n\n\nRun the basic regression\n\nfrom statsmodels.formula import api as sm\n\n\nmodel = sm.ols(\"ir ~ infl + gdp\", data=ddf) # no intercept\nresults = model.fit()\nresults.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nir\nR-squared:\n0.389\n\n\nModel:\nOLS\nAdj. R-squared:\n0.383\n\n\nMethod:\nLeast Squares\nF-statistic:\n63.65\n\n\nDate:\nTue, 02 Mar 2021\nProb (F-statistic):\n4.06e-22\n\n\nTime:\n11:54:15\nLog-Likelihood:\n-448.17\n\n\nNo. Observations:\n203\nAIC:\n902.3\n\n\nDf Residuals:\n200\nBIC:\n912.3\n\n\nDf Model:\n2\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n3.2035\n0.252\n12.696\n0.000\n2.706\n3.701\n\n\ninfl\n0.5288\n0.050\n10.557\n0.000\n0.430\n0.628\n\n\ngdp\n0.0795\n0.105\n0.759\n0.449\n-0.127\n0.286\n\n\n\n\n\n\n\n\nOmnibus:\n30.222\nDurbin-Watson:\n0.417\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n50.662\n\n\nSkew:\n0.796\nProb(JB):\n9.98e-12\n\n\nKurtosis:\n4.858\nCond. No.\n8.56\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\nWhich control variables would you propose to add? Does it increase prediction power? How do you interpret that?\n\nddf.head()\n\n\n\n\n\n\n\n\nyear\nquarter\nrealgdp\nrealcons\nrealinv\nrealgovt\nrealdpi\ncpi\nm1\ntbilrate\nunemp\npop\ninfl\nrealint\nir\ngdp\n\n\n\n\n0\n1959.0\n1.0\n2710.349\n1707.4\n286.898\n470.045\n1886.9\n28.98\n139.7\n2.82\n5.8\n177.146\n0.00\n0.00\n0.00\n1.479383\n\n\n1\n1959.0\n2.0\n2778.801\n1733.7\n310.859\n481.301\n1919.7\n29.15\n141.7\n3.08\n5.1\n177.830\n2.34\n0.74\n3.08\n2.967657\n\n\n2\n1959.0\n3.0\n2775.488\n1751.8\n289.226\n491.260\n1916.4\n29.35\n140.5\n3.82\n5.3\n178.657\n2.74\n1.09\n3.83\n1.792534\n\n\n3\n1959.0\n4.0\n2785.204\n1753.7\n299.356\n484.052\n1931.3\n29.37\n140.0\n4.33\n5.6\n179.386\n0.27\n4.06\n4.33\n1.110571\n\n\n4\n1960.0\n1.0\n2847.699\n1770.5\n331.722\n462.199\n1955.5\n29.54\n139.6\n3.50\n5.2\n180.007\n2.31\n1.19\n3.50\n2.331547\n\n\n\n\n\n\n\n\nmodel = sm.ols(\"ir ~ infl + gdp + pop + unemp -1\", data=ddf) # no intercept\nresults = model.fit()\nresults.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nir\nR-squared (uncentered):\n0.884\n\n\nModel:\nOLS\nAdj. R-squared (uncentered):\n0.882\n\n\nMethod:\nLeast Squares\nF-statistic:\n380.2\n\n\nDate:\nTue, 02 Mar 2021\nProb (F-statistic):\n5.64e-92\n\n\nTime:\n11:58:05\nLog-Likelihood:\n-432.84\n\n\nNo. Observations:\n203\nAIC:\n873.7\n\n\nDf Residuals:\n199\nBIC:\n886.9\n\n\nDf Model:\n4\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\ninfl\n0.4380\n0.049\n8.895\n0.000\n0.341\n0.535\n\n\ngdp\n0.5710\n0.120\n4.739\n0.000\n0.333\n0.809\n\n\npop\n-0.0050\n0.002\n-2.068\n0.040\n-0.010\n-0.000\n\n\nunemp\n0.8064\n0.108\n7.458\n0.000\n0.593\n1.020\n\n\n\n\n\n\n\n\nOmnibus:\n5.307\nDurbin-Watson:\n0.391\n\n\nProb(Omnibus):\n0.070\nJarque-Bera (JB):\n7.501\n\n\nSkew:\n0.070\nProb(JB):\n0.0235\n\n\nKurtosis:\n3.931\nCond. No.\n247.\n\n\n\nNotes:[1] R² is computed without centering (uncentered) since the model does not contain a constant.[2] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\nAt confidence level 2.5% gdp is between 0.333 and 0.809.\nAt confidence level 2.5% infl is between 0.341 and 0.535.\nThe coefficients would be significantly different from 0.5 if 0.5 was not in the condifence interval."
  },
  {
    "objectID": "slides/session_5/transcript.html",
    "href": "slides/session_5/transcript.html",
    "title": "Introduction to Instrumental Variables",
    "section": "",
    "text": "Our multilinear regression: \\[y = \\alpha + \\beta x_1 + \\cdots + \\beta x_n\\]\nSo far, we have only considered real variables: (\\(x_i \\in \\mathbb{R}\\)).\n\nex: \\(x_{\\text{gdp}} = \\alpha + \\beta_1 x_{\\text{unemployment}} + \\beta_2 x_{\\text{inflation}}\\)\n\nHow do we deal with the following cases?\n\nbinary variable: \\(x\\in \\{0,1\\}\\) (or \\(\\{True, False}\\))\n\nex: \\(\\text{gonetowar}\\), \\(\\text{hasdegree}\\)\n\ncategorical variable:\n\nex: survey result (0: I don’t know, 1: I strongly disagree, 2: I disagree, 3: I agree, 4: I strongly agree)\nthere is no ranking of answers\nwhen there is ranking: hierarchical index\n\nnonnumerical variables:\n\nex: (flower type: \\(x\\in \\text{myosotis}, \\text{rose}, ...\\))\n\n\n\n\n\n\n\nNothing to be done: just make sure variables take values 0 or 1. \\[y_\\text{salary} = \\alpha + \\beta x_{\\text{gonetowar}}\\]\nInterpretation:\n\nhaving gone to war is associated with a \\(\\beta\\) increase (or decrease?) in salary (still no causality)\n\n\n\n\n\n\nLook at the model: \\[y_{\\text{CO2 emission}} = \\alpha + \\beta x_{\\text{yellow vest support}} \\]\nWhere \\(y_{\\text{CO2 emission}}\\) is an individual’s CO2 emissions and \\(x_{\\text{yellow vest support}}\\) is the response the the question Are you in agreement with the yellow vests demands?.\nResponse is coded up as:\n\n0: Strongly disagree\n1: Disagree\n2: Neutral\n3: Agree\n4: Strongly agree\n\nIf the variable was used directly, how would you intepret the coefficient \\(\\beta\\) ?\n\nindex is hierarchical\nbut the distances between 1 and 2 or 2 and 3 are not comparable…\n\n\n\n\n\n\nWe use one dummy variable per possible answer.\n\n\n\n\n\n\n\n\n\n\n\n\\(D_{\\text{Strongly Disagree}}\\)\n\\(D_{\\text{Disagree}}\\)\n\\(D_{\\text{Neutral}}\\)\n\\(D_{\\text{Agree}}\\)\n\\(D_{\\text{Strongly Agree}}\\)\n\n\n\n\n1\n0\n0\n0\n0\n\n\n0\n1\n0\n0\n0\n\n\n0\n0\n0\n0\n0\n\n\n0\n0\n0\n1\n0\n\n\n0\n0\n0\n0\n1\n\n\n\n\nValues are linked by the specific dummy coding.\n\nthe choice of the reference group (with 0) is not completely neutral\n\nfor linear regressions, we can ignore its implications\n\nit must be frequent enough in the data\neffects coding: reference group takes -1 instead of 0\n\nNote that hierarchy is lost. The same treatment can be applied to non-hierachical variables\nNow our variables are perfectly colinear:\n\nwe can deduce one from all the others\nwe drop one from the regression: the reference group TODO\n\n\n\n\n\n\\[y_{\\text{CO2 emission}} = \\alpha + \\beta_1 x_{\\text{strdis}} + \\beta_2 x_{\\text{dis}} + \\beta_3 x_{\\text{agr}} + \\beta_4 x_{\\text{stragr}}\\]\n\nInterpretation:\n\nbeing in the group which strongly agrees to the yellow vest’s claim is associated with an additional \\(\\beta_4\\) increase in CO2 consumption compared with members of the neutral group\n\n\n\n\n\n\n\n\n\nWhat about nonnumerical variables?\n\nWhen variables take nonnumerical variables, we convert them to numerical variables.\n\nExample:\n\n\n\n\nactivity\ncode\n\n\n\n\nmassage therapist\n1\n\n\nmortician\n2\n\n\narcheologist\n3\n\n\nfinancial clerks\n4\n\n\n\n\n\n\nThen we convert to dummy variables exactly like hierarchical indices\n\nhere \\(\\text{massage therapist}\\) is taken as reference\n\n\n\n\n\n\n\n\n\n\n\\(D_{\\text{mortician}}\\)\n\\(D_{\\text{archeologist}}\\)\n\\(D_{\\text{financial clerks}}\\)\n\n\n\n\n1\n0\n0\n\n\n0\n1\n0\n\n\n0\n0\n1\n\n\n\n\n\n\n\n\nUse statsmodels to create dummy variables with formula API.\n\nReplace\n\nsalary ~ activity\n\nby:\n\nsalary ~ C(activity)\nThere is an options to choose the reference group\nsalary ~ C(activity, Treatment(reference=\"archeologist\"))"
  },
  {
    "objectID": "slides/session_5/transcript.html#data",
    "href": "slides/session_5/transcript.html#data",
    "title": "Introduction to Instrumental Variables",
    "section": "",
    "text": "Our multilinear regression: \\[y = \\alpha + \\beta x_1 + \\cdots + \\beta x_n\\]\nSo far, we have only considered real variables: (\\(x_i \\in \\mathbb{R}\\)).\n\nex: \\(x_{\\text{gdp}} = \\alpha + \\beta_1 x_{\\text{unemployment}} + \\beta_2 x_{\\text{inflation}}\\)\n\nHow do we deal with the following cases?\n\nbinary variable: \\(x\\in \\{0,1\\}\\) (or \\(\\{True, False}\\))\n\nex: \\(\\text{gonetowar}\\), \\(\\text{hasdegree}\\)\n\ncategorical variable:\n\nex: survey result (0: I don’t know, 1: I strongly disagree, 2: I disagree, 3: I agree, 4: I strongly agree)\nthere is no ranking of answers\nwhen there is ranking: hierarchical index\n\nnonnumerical variables:\n\nex: (flower type: \\(x\\in \\text{myosotis}, \\text{rose}, ...\\))"
  },
  {
    "objectID": "slides/session_5/transcript.html#binary-variable",
    "href": "slides/session_5/transcript.html#binary-variable",
    "title": "Introduction to Instrumental Variables",
    "section": "",
    "text": "Nothing to be done: just make sure variables take values 0 or 1. \\[y_\\text{salary} = \\alpha + \\beta x_{\\text{gonetowar}}\\]\nInterpretation:\n\nhaving gone to war is associated with a \\(\\beta\\) increase (or decrease?) in salary (still no causality)"
  },
  {
    "objectID": "slides/session_5/transcript.html#categorical-variable",
    "href": "slides/session_5/transcript.html#categorical-variable",
    "title": "Introduction to Instrumental Variables",
    "section": "",
    "text": "Look at the model: \\[y_{\\text{CO2 emission}} = \\alpha + \\beta x_{\\text{yellow vest support}} \\]\nWhere \\(y_{\\text{CO2 emission}}\\) is an individual’s CO2 emissions and \\(x_{\\text{yellow vest support}}\\) is the response the the question Are you in agreement with the yellow vests demands?.\nResponse is coded up as:\n\n0: Strongly disagree\n1: Disagree\n2: Neutral\n3: Agree\n4: Strongly agree\n\nIf the variable was used directly, how would you intepret the coefficient \\(\\beta\\) ?\n\nindex is hierarchical\nbut the distances between 1 and 2 or 2 and 3 are not comparable…"
  },
  {
    "objectID": "slides/session_5/transcript.html#hierarchical-index-2",
    "href": "slides/session_5/transcript.html#hierarchical-index-2",
    "title": "Introduction to Instrumental Variables",
    "section": "",
    "text": "We use one dummy variable per possible answer.\n\n\n\n\n\n\n\n\n\n\n\n\\(D_{\\text{Strongly Disagree}}\\)\n\\(D_{\\text{Disagree}}\\)\n\\(D_{\\text{Neutral}}\\)\n\\(D_{\\text{Agree}}\\)\n\\(D_{\\text{Strongly Agree}}\\)\n\n\n\n\n1\n0\n0\n0\n0\n\n\n0\n1\n0\n0\n0\n\n\n0\n0\n0\n0\n0\n\n\n0\n0\n0\n1\n0\n\n\n0\n0\n0\n0\n1\n\n\n\n\nValues are linked by the specific dummy coding.\n\nthe choice of the reference group (with 0) is not completely neutral\n\nfor linear regressions, we can ignore its implications\n\nit must be frequent enough in the data\neffects coding: reference group takes -1 instead of 0\n\nNote that hierarchy is lost. The same treatment can be applied to non-hierachical variables\nNow our variables are perfectly colinear:\n\nwe can deduce one from all the others\nwe drop one from the regression: the reference group TODO"
  },
  {
    "objectID": "slides/session_5/transcript.html#hierarchical-index-3",
    "href": "slides/session_5/transcript.html#hierarchical-index-3",
    "title": "Introduction to Instrumental Variables",
    "section": "",
    "text": "\\[y_{\\text{CO2 emission}} = \\alpha + \\beta_1 x_{\\text{strdis}} + \\beta_2 x_{\\text{dis}} + \\beta_3 x_{\\text{agr}} + \\beta_4 x_{\\text{stragr}}\\]\n\nInterpretation:\n\nbeing in the group which strongly agrees to the yellow vest’s claim is associated with an additional \\(\\beta_4\\) increase in CO2 consumption compared with members of the neutral group"
  },
  {
    "objectID": "slides/session_5/transcript.html#nonnumerical-variables",
    "href": "slides/session_5/transcript.html#nonnumerical-variables",
    "title": "Introduction to Instrumental Variables",
    "section": "",
    "text": "What about nonnumerical variables?\n\nWhen variables take nonnumerical variables, we convert them to numerical variables.\n\nExample:\n\n\n\n\nactivity\ncode\n\n\n\n\nmassage therapist\n1\n\n\nmortician\n2\n\n\narcheologist\n3\n\n\nfinancial clerks\n4\n\n\n\n\n\n\nThen we convert to dummy variables exactly like hierarchical indices\n\nhere \\(\\text{massage therapist}\\) is taken as reference\n\n\n\n\n\n\n\n\n\n\n\\(D_{\\text{mortician}}\\)\n\\(D_{\\text{archeologist}}\\)\n\\(D_{\\text{financial clerks}}\\)\n\n\n\n\n1\n0\n0\n\n\n0\n1\n0\n\n\n0\n0\n1"
  },
  {
    "objectID": "slides/session_5/transcript.html#hands-on",
    "href": "slides/session_5/transcript.html#hands-on",
    "title": "Introduction to Instrumental Variables",
    "section": "",
    "text": "Use statsmodels to create dummy variables with formula API.\n\nReplace\n\nsalary ~ activity\n\nby:\n\nsalary ~ C(activity)\nThere is an options to choose the reference group\nsalary ~ C(activity, Treatment(reference=\"archeologist\"))"
  },
  {
    "objectID": "slides/session_5/transcript.html#what-is-causality",
    "href": "slides/session_5/transcript.html#what-is-causality",
    "title": "Introduction to Instrumental Variables",
    "section": "What is causality?",
    "text": "What is causality?\n. . .\n\n\n\nGroucho Marx\n\n\nClear? Huh! Why a four-year-old child could understand this report! Run out and find me a four-year-old child, I can’t make head or tail of it."
  },
  {
    "objectID": "slides/session_5/transcript.html#spurious-correlation",
    "href": "slides/session_5/transcript.html#spurious-correlation",
    "title": "Introduction to Instrumental Variables",
    "section": "Spurious correlation",
    "text": "Spurious correlation\n\n\n\nSpurious Correlation\n\n\n\nWe have seen spurious correlation before\n\nit happens when two series comove without being actually correlated\n\nAlso, two series might be correlated without one causing the other\n\nex: countries eating more chocolate have more nobel prices…"
  },
  {
    "objectID": "slides/session_5/transcript.html#definitions",
    "href": "slides/session_5/transcript.html#definitions",
    "title": "Introduction to Instrumental Variables",
    "section": "Definitions?",
    "text": "Definitions?\nBut how do we define\n\ncorrelation\ncausality\n\n?\nBoth concepts are actually hard to define:\n\nin statistics (and econometrices) they refer to the generating process\nif the data was generated again, would you observe the same relations?\n\nFor instance correlation between \\(X\\) and \\(Y\\) is just the average correlation taken over many draws \\(\\omega\\) of the data: \\[E_{\\omega}\\left[ (X-E[X])(Y-E[Y])\\right]\\]"
  },
  {
    "objectID": "slides/session_5/transcript.html#how-do-we-define-causality-1",
    "href": "slides/session_5/transcript.html#how-do-we-define-causality-1",
    "title": "Introduction to Instrumental Variables",
    "section": "How do we define causality (1)",
    "text": "How do we define causality (1)\n\nIn math, we have implication: \\(A \\implies B\\)\n\napplies to statements that can be either true or false\ngiven \\(A\\) and \\(B\\), \\(A\\) implies \\(B\\) unless \\(A\\) is true and \\(B\\) is false\nparadox of the drinker: at any time, there exists a person such that: if this person drinks, then everybody drinks\n\nIn a mathematical universe taking values \\(\\omega\\), we can define causality between statement \\(A(\\omega)\\) and \\(B(\\omega)\\) as : \\[\\forall \\omega, A(\\omega) \\implies B(\\omega)\\]"
  },
  {
    "objectID": "slides/session_5/transcript.html#how-do-we-define-causality-2",
    "href": "slides/session_5/transcript.html#how-do-we-define-causality-2",
    "title": "Introduction to Instrumental Variables",
    "section": "How do we define causality (2)",
    "text": "How do we define causality (2)\nBut causality in the real world is problematic\nUsually, we observe \\(A(\\omega)\\) only once…\n. . .\n\n\nExample:\n\nstate of the world \\(\\omega\\): 2008, big financial crisis, …\nA: Ben Bernanke chairman of the Fed\nB: successful economic interventions\nWas Ben Bernanke a good central banker?\nImpossible to say.\n\n\n\n\n\n\n\nThen there is the uncertain concept of time… But let’s take it as granted to not overcomplicate…"
  },
  {
    "objectID": "slides/session_5/transcript.html#causality-in-statistics",
    "href": "slides/session_5/transcript.html#causality-in-statistics",
    "title": "Introduction to Instrumental Variables",
    "section": "Causality in Statistics",
    "text": "Causality in Statistics\n\n\n\n\n\n\nStatistical definition of causality\n\n\n\nVariable \\(A\\) causes \\(B\\) in a statistical sense if - \\(A\\) and \\(B\\) are correlated - \\(A\\) is known before \\(B\\) - correlation between \\(A\\) and \\(B\\) is unaffected by other variables\n\n\n\nThere are other related statistical definitions:\n\nlike Granger causality…\n… but not for this course"
  },
  {
    "objectID": "slides/session_5/transcript.html#factual-and-counterfactual",
    "href": "slides/session_5/transcript.html#factual-and-counterfactual",
    "title": "Introduction to Instrumental Variables",
    "section": "Factual and counterfactual",
    "text": "Factual and counterfactual\n\n\n \n\n\n\n\n\n\n\nSuppose we observe an event A\n\nA: a patient is administered a drug, government closes all schools during Covid\n\nWe observe a another event B\n\nB: the patient recovers, virus circulation decreases\n\n\n\n\n\nTo interpret B as a consequence of A, we would like to consider the counter-factual:\n\na patient is not administered a drug, government doesn’t close schools\npatient does not recover, virus circulation is stable\n\n\n\n\n\n. . .\nAn important task in econometrics is to construct a counter-factual\n\nas the name suggests is it sometimes never observed!"
  },
  {
    "objectID": "slides/session_5/transcript.html#scientific-experiment",
    "href": "slides/session_5/transcript.html#scientific-experiment",
    "title": "Introduction to Instrumental Variables",
    "section": "Scientific Experiment",
    "text": "Scientific Experiment\n\n\n\n \n\n\n\nIn science we establish causality by performing experiments\n\nand create the counterfactual\n\nA good experiment is reproducible\n\nsame variables\nsame state of the world (other variables)\nreproduce several times (in case output is noisy or random)\n\nChange one factor at a time\n\nto create a counter-factual"
  },
  {
    "objectID": "slides/session_5/transcript.html#measuring-effect-of-treatment",
    "href": "slides/session_5/transcript.html#measuring-effect-of-treatment",
    "title": "Introduction to Instrumental Variables",
    "section": "Measuring effect of treatment",
    "text": "Measuring effect of treatment\n\n\n\n\n\n\n\n\n\n\n\nAssume we have discovered two medications: R and B\n\n\n\n\nGive one of them (R) to a patient and observe the outcome\n\n\n\n\nWould would have been the effect of (B) on the same patient?\n\n????\n\n\n\n\n\nWhat if we had many patients and let them choose the medication?\n\n\n\n\n. . .\nMaybe the effect would be the consequence of the choice of patients rather than of the medication?"
  },
  {
    "objectID": "slides/session_5/transcript.html#an-exmple-from-behavioural-economics",
    "href": "slides/session_5/transcript.html#an-exmple-from-behavioural-economics",
    "title": "Introduction to Instrumental Variables",
    "section": "An exmple from behavioural economics",
    "text": "An exmple from behavioural economics\n\n\n\nExample: cognitive dissonance\n\nExperiment in GATE Lab\nVolunteers play an investment game.\nThey are asked beforehand whether they support OM, PSG, or none.\n\n\n\n\n\nExperiment 1:\n\nBefore the experiment, randomly selected volunteers are given a football shirt of their preferred team (treatment 1)\nOther volunteers receive nothing (treatment 0)\n\nResult:\n\nhaving a football shirt seems to boost investment performance…\n\n\n\n\n\nExperiment 2: subjects are given randomly a shirt of either Olympique de Marseille or PSG.\nResult:\n\nHaving the good shirt improves performance.\nHaving the wrong one deteriorates it badly.\n\n\n\n\n\nHow would you code up this experiment?\nCan we conclude on some form of causality?"
  },
  {
    "objectID": "slides/session_5/transcript.html#formalisation-of-the-problem",
    "href": "slides/session_5/transcript.html#formalisation-of-the-problem",
    "title": "Introduction to Instrumental Variables",
    "section": "Formalisation of the problem",
    "text": "Formalisation of the problem\n\n\n\n\n\n\nCause (A): two groups of people\n\nthose given a shirt (treatment 1)\nthose not given a shirt (treatment 0)\n\nPossible consequence (B): performance\nTake a given agent Alice: she performs well with a PSG shirt.\n\nmaybe she is a good investor?\nor maybe she is playing for her team?\n\nLet’s try to have her play again without the football shirt\n\nnow the experiment has changed: she has gained experience, is more tired, misses the shirt…\nit is impossible to get a perfect counterfactual (i.e. where only A changes)\n\n\n\n\nLet’s take somebody else then? Bob was really bad without a PSG shirt.\n\nhe might be a bad investor? or he didn’t understand the rules?\nsome other variables have changed, not only the treatment\n\nHow to make a perfect experiment?\n\nChoose randomly whether assigning a shirt or not\nby construction the treatment will not be correlated with other variables"
  },
  {
    "objectID": "slides/session_5/transcript.html#randomized-control-trial",
    "href": "slides/session_5/transcript.html#randomized-control-trial",
    "title": "Introduction to Instrumental Variables",
    "section": "Randomized Control Trial",
    "text": "Randomized Control Trial\n\n\n\n\n\n\nRandomized Control Trial (RCT)\n\n\n\nThe best way to ensure that treatment is independent from other factors is to randomize it.\n\n\n\n\n\nIn medecine\n\nsome patients receive the treatment (red pill)\nsome other receive the control treatment (blue pill / placebo)\n\nIn economics:\n\nrandomized field experiments\nrandomized phase-ins for new policies\n\nvery useful for policy evaluation\n\n\n\n\n\n\n\nEsther Duflo\n\n\n\n\n\n\nIt is common in economics, instead of assigning treatments randomly, we often say that we assign individuals randomly to the treatment and to the control group. It is equivalent."
  },
  {
    "objectID": "slides/session_5/transcript.html#natural-experiment",
    "href": "slides/session_5/transcript.html#natural-experiment",
    "title": "Introduction to Instrumental Variables",
    "section": "Natural experiment",
    "text": "Natural experiment\n\n\n\n\n\n\nNatural Experiment\n\n\n\nA natural experiment satisfies conditions that treatment is assigned randomly\n\nwithout interference by the econometrician\n\n\n\n\nAn exemple of a Natural Experiment:\n\ngender bias in french local elections (jean-pierre eymeoud, paul vertier) link\nare women discriminated against by voters in local elections?\n\n\n. . .\n\nResult: yes, they get 1.5% less votes by right-wing voters\n\n. . .\n\nWhat was the natural experiment"
  },
  {
    "objectID": "slides/session_5/transcript.html#example",
    "href": "slides/session_5/transcript.html#example",
    "title": "Introduction to Instrumental Variables",
    "section": "Example",
    "text": "Example\nLifetime Earnings and the Vietnam Era Draft Lottery, by JD Angrist\n\n\n\nFact:\n\nveterans of the vietnam war (55-75) earn (in the 80s) an income that is 15% less in average than those who didn’t go to the war.\nWhat can we conclude?\nHard to say: maybe those sent to the war came back with lower productivity (because of PTSD, public stigma, …)? maybe they were not the most productive in the first place (selection bias)?\n\nProblem (for the economist):\n\nwe didn’t sent people to war randomly\n\n\n\n\nGenius idea:\n\nhere is a variable which randomly affected whether people were sent: the Draft\n\n\nbetween 1947, and 1973, a lottery was run to determine who would go to war\n\nthe draft number was determined, based on date of birth, and first letters of name\n\nand was correlated with the probability that a given person would go to war\nand it was so to say random or at least independent from anything relevant to the problem\n\n\n\n\n. . .\nCan we use the Draft to generate randomness ?"
  },
  {
    "objectID": "slides/session_5/transcript.html#problem",
    "href": "slides/session_5/transcript.html#problem",
    "title": "Introduction to Instrumental Variables",
    "section": "Problem",
    "text": "Problem\n\nTake the linear regression: \\[y = \\alpha + \\beta x + \\epsilon\\]\n\n\\(y\\): salary\n\\(x\\): went to war\n\nWe want to establish causality from x to y\n\nwe would like to interpret \\(x\\) as the “treatment”\n\nBut there can be confounding factors:\n\nvariable \\(z\\) which causes both x and y\nexemple: socio-economic background, IQ, …\n\nIf we could identify \\(z\\) we could control for it: \\[y = \\alpha + \\beta_1 x + \\beta_2 z + \\epsilon\\]\n\nwe would get a better predictor of \\(y\\) but more uncertainty about \\(\\beta_1\\) (\\(x\\) and \\(z\\) are correlated)"
  },
  {
    "objectID": "slides/session_5/transcript.html#reformulate-the-problem",
    "href": "slides/session_5/transcript.html#reformulate-the-problem",
    "title": "Introduction to Instrumental Variables",
    "section": "Reformulate the problem",
    "text": "Reformulate the problem\n\n\n\nLet’s assume treatment \\(x\\) is a binary variable \\(\\in{0,1}\\)\nWe want to estimate \\[y = \\alpha + \\beta x + z + \\epsilon\\] where \\(z\\) is potentially correlated to \\(x\\) and \\(y\\)\nThere are two groups:\n\nthose who receive the treatment \\[y = \\alpha + \\beta + z_{T=1} + \\epsilon\\]\nthe others \\[y = \\alpha + 0 +  z_{T=0} + \\epsilon\\]\n\n\n\n\nProblem:\n\nif \\(z\\) is higher in the treatment group, its effect can’t be separated from the treatment effect.\n\nIntuition: what if we make groups differently?\n\ncompletely independent from \\(z\\) (and \\(\\epsilon\\))\nnot independently from \\(x\\) so that one group will receive more treatment than the other\n\nTo make this group we need a new variable \\(q\\) that is:\n\ncorrelated with \\(x\\) so that it will correspond to some treatment effect\nuncorrelated to \\(z\\) or \\(\\epsilon\\) (exogenous)"
  },
  {
    "objectID": "slides/session_5/transcript.html#two-stage-regression",
    "href": "slides/session_5/transcript.html#two-stage-regression",
    "title": "Introduction to Instrumental Variables",
    "section": "Two stage regression",
    "text": "Two stage regression\n\n\n\nWe would like to redo the treatment groups in a way that is independent from \\(z\\) (and everything contained in \\(\\epsilon\\))\n\n\\(q\\) is a binary variable: drafted or not\n\n\nFirst stage: regress group assignment on the instrument: \\[x = \\alpha_0 + \\beta_0 q + \\eta\\]\n\nwe can now predict group assignment in a way that is independent from \\(z\\) (and everything in \\(\\epsilon\\)) \\[\\tilde{x} = \\alpha_0 + \\beta_0 q\\]\n\n\nSecond stage: use the predicted value instead of the original one \\[y = \\alpha + \\beta_1 \\tilde{x} + z + \\epsilon\\]\n\n\n\n\nResult:\n\nIf \\(\\beta_1\\) is significantly nonzero, there is a causal effect between \\(x\\) and \\(y\\).\nNote that \\(\\tilde{x}\\) is imperfectly correlated with the treatment: \\(\\beta_1\\) can’t be interpreted directly\nThe actual effect will be \\(\\frac{\\beta_1}{\\beta_0}\\) (in 1d)\n\n\nWe say that we instrument \\(x\\) by \\(q\\)."
  },
  {
    "objectID": "slides/session_5/transcript.html#choosing-a-good-instrument",
    "href": "slides/session_5/transcript.html#choosing-a-good-instrument",
    "title": "Introduction to Instrumental Variables",
    "section": "Choosing a good instrument",
    "text": "Choosing a good instrument\n\n\n\n\n\n\n\nChoosing an instrumental variable\n\n\n\nA good instrument when trying to explain y by x, is a variable that is correlated to the treatment (x) but does not have any effect on the outcome of interest (y), appart from its effect through x."
  },
  {
    "objectID": "slides/session_5/transcript.html#in-practice",
    "href": "slides/session_5/transcript.html#in-practice",
    "title": "Introduction to Instrumental Variables",
    "section": "In practice",
    "text": "In practice\n\nBoth statsmodels and linearmodels support instrumental variables\n\nlibrary (look for IV2SLS)\n\nLibrary linearmodels has a handy formula syntax: salary ~ 1 + [war ~ draft]\n\nAPI is similar but not exactly identical to statsmodels\nfor instance linearmodels does not include constants by default\n\nExample from the doc\n\nformula = (\n    \"np.log(drugexp) ~ 1 + totchr + age + linc + blhisp + [hi_empunion ~ ssiratio]\"\n)\nols = IV2SLS.from_formula(formula, data)\nols_res = ols.fit(cov_type=\"robust\")\nprint(ols_res)"
  },
  {
    "objectID": "slides/pession_6/machine_learning_regressions.html",
    "href": "slides/pession_6/machine_learning_regressions.html",
    "title": "Machine learning: regressions",
    "section": "",
    "text": "Objectives:"
  },
  {
    "objectID": "slides/pession_6/machine_learning_regressions.html#diabetes-dataset-basic-regression",
    "href": "slides/pession_6/machine_learning_regressions.html#diabetes-dataset-basic-regression",
    "title": "Machine learning: regressions",
    "section": "Diabetes dataset: basic regression",
    "text": "Diabetes dataset: basic regression\nImport the diabetes dataset from sklearn. Describe it.\nSplit the dataset into a training set (70%) and a test set (30%)\nTrain a linear model (with intercept) on the training set\nCompute the fitting score on the test set. (Bonus: compare with your own computation of \\(R^2\\))\nShould we adjust the size of the test set? What would be the problem?\nImplement \\(k\\)-fold model with \\(k=3\\).\nBonus: use statsmodels (or linearmodels) to estimate the same linear model on the full sample. Is it always a superior method?"
  },
  {
    "objectID": "slides/pession_6/machine_learning_regressions.html#sparse-regressions-on-the-boston-house-price-dataset",
    "href": "slides/pession_6/machine_learning_regressions.html#sparse-regressions-on-the-boston-house-price-dataset",
    "title": "Machine learning: regressions",
    "section": "Sparse regressions on the Boston House Price Dataset",
    "text": "Sparse regressions on the Boston House Price Dataset\nImport the Boston House Price Dataset from sklearn. Explore the data (description, correlations, histograms…)\nSplit the dataset into a training set (70%) and a test set (30%).\nTrain a lasso model to predict house prices. Compute the score on the test set.\nTrain a ridge model to predict house prices. Which one is better?\n(bonus) Use statsmodels to build a model predicting house prices. What is the problem?"
  },
  {
    "objectID": "slides/pession_6/graphs/Untitled1.html",
    "href": "slides/pession_6/graphs/Untitled1.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "from matplotlib import pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n\nimport statsmodels.api as sm\n\n\ndf.describe()\n\n\n\n\n\n\n\n\nincome\neducation\nprestige\n\n\n\n\ncount\n45.000000\n45.000000\n45.000000\n\n\nmean\n41.866667\n52.555556\n47.688889\n\n\nstd\n24.435072\n29.760831\n31.510332\n\n\nmin\n7.000000\n7.000000\n3.000000\n\n\n25%\n21.000000\n26.000000\n16.000000\n\n\n50%\n42.000000\n45.000000\n41.000000\n\n\n75%\n64.000000\n84.000000\n81.000000\n\n\nmax\n81.000000\n100.000000\n97.000000\n\n\n\n\n\n\n\n\ndf.cov()\n\n\n\n\n\n\n\n\nincome\neducation\nprestige\n\n\n\n\nincome\n597.072727\n526.871212\n645.071212\n\n\neducation\n526.871212\n885.707071\n798.904040\n\n\nprestige\n645.071212\n798.904040\n992.901010\n\n\n\n\n\n\n\n\nfrom matplotlib import pyplot as plt\n\n\nplt.figure(figsize=(8,6))\nplt.plot(df['education'],df['income'],'o')\nplt.grid()\nplt.xlabel(\"x (Education)\")\nplt.ylabel(\"y (Income)\")\nplt.savefig(\"data_description.png\")\n\n\n\n\n\n\n\n\n\nfor i in [1,2,3]:\n    xvec = np.linspace(10,100)\n\n    plt.figure(figsize=(12,8))\n    plt.plot(df['education'],df['income'],'o')\n\n    plt.plot(xvec, xvec * 0 + 50)\n    if i&gt;=2:\n        plt.plot(xvec, xvec )\n    if i&gt;=3:\n        plt.plot(xvec,  90- 0.6*xvec )\n\n    plt.grid()\n    plt.xlabel(\"x (Education)\")\n    plt.ylabel(\"y (Income)\")\n    plt.savefig(f\"which_line_{i}.png\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfrom ipywidgets import interact\n\n\nimport matplotlib.patches as patches\n\n\na = 0.1\nb = 1.0\nind = 23\n\n\napprox =  a + b*xvec\n\n# Create figure and axes\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\nplt.plot(df['education'],df['income'],'o')\nplt.plot(xvec, approx, color='red')\n\nx, y = df['education'][ind], df['income'][ind]\nplt.plot(x, y, 'o', color='red' )\np = a+b*x\nplt.grid(True)\nh = abs(p-y)\nplt.vlines(x, y+h, y, color='red')\n\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.savefig(f\"error_0.png\")\n\n\n\n\n\n\n\n\n\nplt.vlines?\n\n\nSignature:\nplt.vlines(\n    x,\n    ymin,\n    ymax,\n    colors=None,\n    linestyles='solid',\n    label='',\n    *,\n    data=None,\n    **kwargs,\n)\nDocstring:\nPlot vertical lines.\nPlot vertical lines at each *x* from *ymin* to *ymax*.\nParameters\n----------\nx : float or array-like\n    x-indexes where to plot the lines.\nymin, ymax : float or array-like\n    Respective beginning and end of each line. If scalars are\n    provided, all lines will have same length.\ncolors : list of colors, default: :rc:`lines.color`\nlinestyles : {'solid', 'dashed', 'dashdot', 'dotted'}, optional\nlabel : str, default: ''\nReturns\n-------\n`~matplotlib.collections.LineCollection`\nOther Parameters\n----------------\n**kwargs : `~matplotlib.collections.LineCollection` properties.\nSee Also\n--------\nhlines : horizontal lines\naxvline: vertical line across the axes\nNotes\n-----\n.. note::\n    In addition to the above described arguments, this function can take\n    a *data* keyword argument. If such a *data* argument is given,\n    the following arguments can also be string ``s``, which is\n    interpreted as ``data[s]`` (unless this raises an exception):\n    *x*, *ymin*, *ymax*, *colors*.\n    Objects passed as **data** must support item access (``data[s]``) and\n    membership test (``s in data``).\nFile:      ~/.local/opt/miniconda/lib/python3.8/site-packages/matplotlib/pyplot.py\nType:      function\n\n\n\n\n\na = 0.1\nb = 1.0\nind = 23\n\n\napprox =  a + b*xvec\n\n# Create figure and axes\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\nplt.plot(df['education'],df['income'],'o')\nplt.plot(xvec, approx, color='red')\n\nx, y = df['education'][ind], df['income'][ind]\nplt.plot(x, y, 'o', color='red' )\np = a+b*x\nplt.grid(True)\nh = abs(p-y)\nif p-y&gt;0:\n    # Create a Rectangle patch\n    rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n    ax.add_patch(rect)\n    \nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.savefig(f\"errors_{1}.png\")\n\n\n\n\n\n\n\n\n\ndef L(a,b):\n    Δ = a + b*df['education'] - df['income']\n    return (Δ**2).sum()\n\n\na = 0.1\nb = 0.8\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red')\n\nplt.grid(True)\nfor ind in range(df.shape[0]):\n    \n    x, y = df['education'][ind], df['income'][ind]\n    p = a+b*x\n\n    h = abs(p-y)\n    if p-y&gt;0:\n        # Create a Rectangle patch\n        rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\n    else:\n        rect = patches.Rectangle((x,y-h),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"errors_2.png\")\n\n\n\n\n\n\n\n\n\na = 90\nb = -0.6\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red')\n\nplt.grid(True)\nfor ind in range(df.shape[0]):\n    \n    x, y = df['education'][ind], df['income'][ind]\n    p = a+b*x\n\n    h = abs(p-y)\n    if p-y&gt;0:\n        # Create a Rectangle patch\n        rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\n    else:\n        rect = patches.Rectangle((x,y-h),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"errors_3.png\")\n\n\n\n\n\n\n\n\n\nimport scipy.optimize\n\n\nscipy.optimize.minimize(lambda x: L(x[0], x[1]),np.array([0.5, 0.5]))\n\n      fun: 12480.970174488397\n hess_inv: array([[ 7.14169839e-09, -3.91281920e-09],\n       [-3.91281920e-09,  2.46663613e-09]])\n      jac: array([0.00024414, 0.00012207])\n  message: 'Desired error not necessarily achieved due to precision loss.'\n     nfev: 57\n      nit: 7\n     njev: 19\n   status: 2\n  success: False\n        x: array([10.60350224,  0.59485938])\n\n\n\na = 10\nb = 0.59\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red')\n\nplt.grid(True)\nfor ind in range(df.shape[0]):\n    \n    x, y = df['education'][ind], df['income'][ind]\n    p = a+b*x\n\n    h = abs(p-y)\n    if p-y&gt;0:\n        # Create a Rectangle patch\n        rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\n    else:\n        rect = patches.Rectangle((x,y-h),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"errors_4.png\")\n\n\n\n\n\n\n\n\n\na = 10\nb = 0.59\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red', alpha=0.5)\n\nplt.plot(60, a + b*60, 'o', color='red',)\n\nprint(a+b*60)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"prediction.png\")\n\n45.4\n\n\n\n\n\n\n\n\n\n\na = 10\nb = 0.59\n\napprox =  (a + b*df['education'] - df['income'])\n\nplt.figure(figsize=(12,6))\n\nplt.subplot(121)\nplt.plot(approx)\nplt.grid(False)\nplt.title(\"Residuals\")\n\n\nplt.subplot(122)\ndistplot(approx)\nplt.title(\"Distribution of residuals\")\nplt.grid()\n\nplt.savefig(\"residuals.png\")\n\n/home/pablo/.local/opt/miniconda/lib/python3.8/site-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n  warnings.warn(msg, FutureWarning)\n\n\n\n\n\n\n\n\n\n\n(a + b*df['education'] - df['income']).std()\n\n16.842782676352154\n\n\n\n\n\n/home/pablo/.local/opt/miniconda/lib/python3.8/site-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n  warnings.warn(msg, FutureWarning)\n\n\n\n\n\n\n\n\n\n\nfrom scipy.stats import f\n\n\nf(0.3)\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n&lt;ipython-input-191-91b22dc02480&gt; in &lt;module&gt;\n----&gt; 1 f(0.3)\n\n~/.local/opt/miniconda/lib/python3.8/site-packages/scipy/stats/_distn_infrastructure.py in __call__(self, *args, **kwds)\n    778 \n    779     def __call__(self, *args, **kwds):\n--&gt; 780         return self.freeze(*args, **kwds)\n    781     __call__.__doc__ = freeze.__doc__\n    782 \n\n~/.local/opt/miniconda/lib/python3.8/site-packages/scipy/stats/_distn_infrastructure.py in freeze(self, *args, **kwds)\n    775 \n    776         \"\"\"\n--&gt; 777         return rv_frozen(self, *args, **kwds)\n    778 \n    779     def __call__(self, *args, **kwds):\n\n~/.local/opt/miniconda/lib/python3.8/site-packages/scipy/stats/_distn_infrastructure.py in __init__(self, dist, *args, **kwds)\n    422         self.dist = dist.__class__(**dist._updated_ctor_param())\n    423 \n--&gt; 424         shapes, _, _ = self.dist._parse_args(*args, **kwds)\n    425         self.a, self.b = self.dist._get_support(*shapes)\n    426 \n\nTypeError: _parse_args() missing 1 required positional argument: 'dfd'\n\n\n\n\nnp.rand\n\n\nK = 100\nxvec = np.linspace(0,1,K)\ne1 = np.random.randn(K)*0.1\nyvec = 0.1 + xvec*0.4 + e1\ne2 = np.random.randn(K)*0.05\nyvec2 = 0.1 + xvec*(xvec-1)/2 + e2\ne3 = np.random.randn(K)*xvec/2\nyvec3 = 0.1 + xvec + e3\n\nyvec4 = 0.1 + np.sin(xvec*6) + np.random.randn(K)*xvec/2\n\n\nfrom dolo.numeric.processes import VAR1\n\n\nsim = VAR1( ρ=0.8, Σ=0.001).simulate(N=1,T=100)\nyvec4 = 0.1 + xvec*0.4 + sim.ravel()\n\n\nplt.figure(figsize=(18,6))\nplt.subplot(241)\nplt.plot(xvec, yvec,'o')\nplt.plot(xvec, 0.1 + xvec*0.4 )\nplt.ylabel(\"Series\")\nplt.title(\"white noise\")\nplt.subplot(242)\nplt.plot(xvec, yvec2, 'o')\nplt.plot(xvec, yvec2*0)\nplt.title('nonlinear')\nplt.subplot(243)\nplt.plot(xvec, yvec3,'o')\nplt.plot(xvec, 0.1 + xvec)\nplt.title('heteroskedastic')\nplt.subplot(244)\nplt.plot(xvec, yvec4,'o')\nplt.plot(xvec, xvec*0.6)\n\nplt.title('correlated')\n\n\nplt.subplot(245)\nplt.plot(xvec, e1,'o')\nplt.ylabel(\"Residuals\")\nplt.subplot(246)\nplt.plot(xvec, yvec2-0.075, 'o')\n\nplt.subplot(247)\nplt.plot(xvec, e3,'o')\nplt.subplot(248)\nplt.plot(xvec, sim.ravel(),'o')\n\nplt.tight_layout()\n\nplt.savefig(\"residuals_circus.png\")"
  },
  {
    "objectID": "slides/pession_6/transcript.html#what-is-machine-learning-1",
    "href": "slides/pession_6/transcript.html#what-is-machine-learning-1",
    "title": "Introduction to Machine Learning",
    "section": "What is Machine learning?",
    "text": "What is Machine learning?\nDefinition Candidates:\nArthur Samuel: Field of study that gives computers the ability to learn without being explicitly programmed\nTom Mitchell: A computer program is said to learn from experience E with respect to some class of tasks T and performance measure P if its performance at tasks in T, as measured by P, improves with experience E."
  },
  {
    "objectID": "slides/pession_6/transcript.html#what-about-artificial-intelligence",
    "href": "slides/pession_6/transcript.html#what-about-artificial-intelligence",
    "title": "Introduction to Machine Learning",
    "section": "What about artificial intelligence ?",
    "text": "What about artificial intelligence ?\n\n\n\nAIs\n\nthink and learn\nmimmic human cognition"
  },
  {
    "objectID": "slides/pession_6/transcript.html#econometrics-vs-machine-learning",
    "href": "slides/pession_6/transcript.html#econometrics-vs-machine-learning",
    "title": "Introduction to Machine Learning",
    "section": "Econometrics vs Machine Learning",
    "text": "Econometrics vs Machine Learning\n\nEconometrics is essentially a subfield of machine learning with a different jargon and a focus on:\n\nstudying properties and validity of results\n\ndata is scarce\ninference\n\nsingling out effects of specific explanatory variables\nestablishing causality\n\nMachine learning:\n\nstructure data\nmake predictions (interpolate data)"
  },
  {
    "objectID": "slides/pession_6/transcript.html#data-types",
    "href": "slides/pession_6/transcript.html#data-types",
    "title": "Introduction to Machine Learning",
    "section": "Data types",
    "text": "Data types\n\nstructured:\n\ntabular\n\nlong\nwide\n\n\nunstructured:\n\nfiles\nnetworks\ntext, mails\nimages, sound"
  },
  {
    "objectID": "slides/pession_6/transcript.html#tabular-data",
    "href": "slides/pession_6/transcript.html#tabular-data",
    "title": "Introduction to Machine Learning",
    "section": "Tabular Data",
    "text": "Tabular Data\n\n\n\ntabular data"
  },
  {
    "objectID": "slides/pession_6/transcript.html#networks",
    "href": "slides/pession_6/transcript.html#networks",
    "title": "Introduction to Machine Learning",
    "section": "Networks",
    "text": "Networks\n\nBanking networks\nProduction network"
  },
  {
    "objectID": "slides/pession_6/transcript.html#big-data-1",
    "href": "slides/pession_6/transcript.html#big-data-1",
    "title": "Introduction to Machine Learning",
    "section": "Big Data",
    "text": "Big Data\n\nBig data:\n\nwide data (K&gt;&gt;N)\nlong data (N&gt;&gt;K)\nheterogenous, unstructured data\n\nMight not even fit in memory\n\nout of core computations\nlearn from a subset of the data"
  },
  {
    "objectID": "slides/pession_6/transcript.html#big-subfields-of-machine-learning",
    "href": "slides/pession_6/transcript.html#big-subfields-of-machine-learning",
    "title": "Introduction to Machine Learning",
    "section": "Big Subfields of Machine Learning",
    "text": "Big Subfields of Machine Learning\n\n\n\nTraditional classification\n\nsupervised (labelled data)\n\nregression: predict quantity\nclassification: predict index (categorical variable)\n\nunsupervised (no labels)\n\ndimension reduction\nclustering\n\nsemi-supervised / self-supervised\nreinforcement learning\n\nBazillions of different algorithms: https://scikit-learn.org/stable/user_guide.html\n\n\n\n\n\nregression:\n\nPredict: \\(y = f(x; \\theta)\\)\n\n\n\n\n\nsupervised: regression\n\n\n\n\n\nAge\n\n\nActivity\n\n\nSalary\n\n\n\n\n23\n\n\nExplorer\n\n\n1200\n\n\n\n\n40\n\n\nMortician\n\n\n2000\n\n\n\n\n45\n\n\nMortician\n\n\n2500\n\n\n\n\n33\n\n\nMovie Star\n\n\n3000\n\n\n\n\n35\n\n\nExplorer\n\n\n???\n\n\n\n\n\n\nsupervised: classification\n\nOutput is discrete\nRegular trick: \\(\\sigma(f(x; \\theta))\\) where \\(\\sigma(x)=\\frac{1}{1-e^{-x}}\\)\n\n\n\n\n\nclassification\n\n\n\n\n\nAge\n\n\nSalary\n\n\nActivity\n\n\n\n\n23\n\n\n1200\n\n\nExplorer\n\n\n\n\n40\n\n\n2000\n\n\nMortician\n\n\n\n\n45\n\n\n2500\n\n\nMortician\n\n\n\n\n33\n\n\n3000\n\n\nMovie Star\n\n\n\n\n35\n\n\n3000\n\n\n???\n\n\n\n\n\nunsupervised\n\norganize data without labels\n\ndimension reduction: describe data with less parameters\nclustering: sort data into “similar groups” (exemple)\n\n\n\n\n\nAge\n\n\nSalary\n\n\nActivity\n\n\n\n\n23\n\n\n1200\n\n\nExplorer\n\n\n\n\n40\n\n\n2000\n\n\nMortician\n\n\n\n\n45\n\n\n2500\n\n\nMortician\n\n\n\n\n33\n\n\n3000\n\n\nMovie Star\n\n\n\n\n35\n\n\n3000\n\n\nExplorer\n\n\n\n\n\nunsupervised: clustering\n\n\n\nkmeansclustering\n\n\n\n\nunsupervised: clustering\nWomen buying dresses during the year:"
  },
  {
    "objectID": "slides/pession_6/transcript.html#difference-with-traditional-regression",
    "href": "slides/pession_6/transcript.html#difference-with-traditional-regression",
    "title": "Introduction to Machine Learning",
    "section": "Difference with traditional regression",
    "text": "Difference with traditional regression\n\\[\\underbrace{y}_{\\text{explained variable}} = a \\underbrace{x}_{\\text{explanatory variable}} + b\\]"
  },
  {
    "objectID": "slides/pession_6/transcript.html#difference-with-traditional-regression-1",
    "href": "slides/pession_6/transcript.html#difference-with-traditional-regression-1",
    "title": "Introduction to Machine Learning",
    "section": "Difference with traditional regression",
    "text": "Difference with traditional regression\n\\[\\underbrace{y}_{\\text{labels}} = a \\underbrace{x}_{\\text{features}} + b\\]\n. . .\n\n\n\n\n\n\n\nEconometrics\nMachine learning\n\n\n\n\nRegressand / independent variable / explanatory variable\nFeatures\n\n\nRegressor / dependent variable / explained variable\nLabels\n\n\nRegression\nModel Training"
  },
  {
    "objectID": "slides/pession_6/transcript.html#difference-with-traditional-regression-2",
    "href": "slides/pession_6/transcript.html#difference-with-traditional-regression-2",
    "title": "Introduction to Machine Learning",
    "section": "Difference with traditional regression",
    "text": "Difference with traditional regression\n\nBig data requires other means to process the data:\n\ndata is long: so many observations \\(x\\) doesn’t fit in the memory\n\nneed to use incremental training method to use only a subsample at a time\n\ndata is wide: so many features, the model is crudely overspecified\n\nneed to build dimension reduction into the objective\n\ndata is nonlinear:\n\nuse nonlinear model (and nonlinear training)\n\ndata is not a simple vector…\n\nsame as nonlinear"
  },
  {
    "objectID": "slides/pession_6/transcript.html#long-data",
    "href": "slides/pession_6/transcript.html#long-data",
    "title": "Introduction to Machine Learning",
    "section": "Long data",
    "text": "Long data"
  },
  {
    "objectID": "slides/pession_6/transcript.html#long-data-1",
    "href": "slides/pession_6/transcript.html#long-data-1",
    "title": "Introduction to Machine Learning",
    "section": "Long data",
    "text": "Long data\nLong data is characterized by a high number of observations."
  },
  {
    "objectID": "slides/pession_6/transcript.html#long-data-2",
    "href": "slides/pession_6/transcript.html#long-data-2",
    "title": "Introduction to Machine Learning",
    "section": "Long data",
    "text": "Long data\n\n\n\nTraditional regression:\n\nfull sample \\(X,Y=(x_i,y_i)_{i=1:N}\\)\nOLS: \\(\\min_{a,b} \\sum_{i=1}^N (a x_i + b - y_i)^2\\)\nclosed-form solution: \\(a = X^{\\prime}X Y\\) and \\(b= ...\\)\nhard to compute if \\(X\\) is very big\n\n\n\n\n\nIncremental learning:\n\ngiven initial \\(a_n\\), \\(b_n\\)\npick \\(N\\) random observations (the batch)\n\nregress them to get new estimate \\(a\\), \\(b\\)\nthis minimizes the square of errors\n\nupdate with learning rate \\(\\beta\\):\n\n\\(a_{n+1} \\leftarrow a_n (1-\\beta_n) + \\beta_n a\\)\n\\(b_{n+1} \\leftarrow b_n (1-\\beta_n) + \\beta_n b\\)\n\nprocess is not biased (that is \\(a\\) converges to the true value) as long as one decreases \\(\\beta\\) sufficiently fast over time (ex: \\(\\beta_n=\\frac{1}{n}\\))"
  },
  {
    "objectID": "slides/pession_6/transcript.html#formalisation-a-typical-machine-learning-task",
    "href": "slides/pession_6/transcript.html#formalisation-a-typical-machine-learning-task",
    "title": "Introduction to Machine Learning",
    "section": "Formalisation: a typical machine learning task",
    "text": "Formalisation: a typical machine learning task\n\nvector of unknowns: \\(\\theta=(a,b)\\)\ndataset \\(X,Y=(x_i,y_i)_{i=1:N}\\)\nfor a random draw \\(\\omega = (a_{\\sigma(i)}, b_{\\sigma(i)})_{i=[1,N]} \\subset (X,Y)\\)\n\n\\(\\omega\\) is just a random batch of size \\(N\\)\n\ndefine the empirical risk (or empirical cost) \\[\\xi(\\theta, \\omega) = \\sum_{(x,y) \\in \\omega} (y - (a x + b))^2\\]\nwe want to minimize theoretical risk: \\[\\Xi(\\theta) = \\mathbb{E} \\left[ \\xi(\\theta, \\omega)\\right]\\]"
  },
  {
    "objectID": "slides/pession_6/transcript.html#training-gradient-descent",
    "href": "slides/pession_6/transcript.html#training-gradient-descent",
    "title": "Introduction to Machine Learning",
    "section": "Training: Gradient Descent",
    "text": "Training: Gradient Descent\n\n\n\nHow do we minimize a function \\(f(a,b)\\)?\nGradient descent:\n\n\\(a_k, b_k\\) given\ncompute the gradient (slope) \\(\\nabla_{a,b} f = \\begin{bmatrix} \\frac{\\partial f}{\\partial a} \\\\\\\\ \\frac{\\partial f}{\\partial b}\\end{bmatrix}\\)\nfollow the steepest slope: (Newton Algorithm)\n\n\\[ \\begin{bmatrix} a_{k+1} \\\\\\\\ b_{k+1} \\end{bmatrix} \\leftarrow  \\begin{bmatrix} a_k \\\\\\\\ b_k \\end{bmatrix} - \\nabla_{a,b} f\\]\n\nbut not too fast: use learning rate \\(\\lambda\\): \\[ \\begin{bmatrix} a_{k+1} \\\\\\\\ b_{k+1} \\end{bmatrix} \\leftarrow  (1-\\lambda) \\begin{bmatrix} a_k \\\\\\\\ b_k \\end{bmatrix} + \\lambda (- \\nabla_{a,b} f )\\]"
  },
  {
    "objectID": "slides/pession_6/transcript.html#not-everything-goes-wrong-all-the-time",
    "href": "slides/pession_6/transcript.html#not-everything-goes-wrong-all-the-time",
    "title": "Introduction to Machine Learning",
    "section": "Not everything goes wrong all the time",
    "text": "Not everything goes wrong all the time\n \n\nIn practice, choosing the right learning rate \\(\\lambda\\) is crucial\n\\(\\lambda\\) is a metaparameter of the model training."
  },
  {
    "objectID": "slides/pession_6/transcript.html#wide-data",
    "href": "slides/pession_6/transcript.html#wide-data",
    "title": "Introduction to Machine Learning",
    "section": "Wide data",
    "text": "Wide data\n\nWide Data is characterized by a high number of features compared to the number of observations.\n\n. . .\nProblem: - with many independent variables \\(x_1, ... x_K\\), \\(K&gt;&gt;N\\) and one dependent variable \\(y\\) the regression \\[y = a_1 x_1 + a_2 x_2 + \\cdots + a_N x_N + b\\] is grossly overidentified."
  },
  {
    "objectID": "slides/pession_6/transcript.html#wide-data-regression",
    "href": "slides/pession_6/transcript.html#wide-data-regression",
    "title": "Introduction to Machine Learning",
    "section": "Wide data regression",
    "text": "Wide data regression\n\nMain Idea: penalize non-zero coefficients to encourage scarcity\n\nRidge: \\[\\Xi(a,b) = \\min_{a,b} \\sum_{i=1}^N ( \\sum_j a_j x_j + b - y_i)^2 + \\mu \\sum_i |a_i|^2\\]\n\nshrinks parameters towards zero\nclosed form\n\nLasso: \\[\\Xi(a,b) = \\min_{a,b} \\sum_{i=1}^N (\\sum_j a_j x_j + b - y_i)^2 + \\mu \\sum_i |a_i|\\]\n\neliminates zero coefficients\n\nElastic: Ridge + Lasso\n\nRemarks:\n\n\\(\\mu\\) is called a regularization term.\nit is a hyperparameter\n\\(\\mu \\uparrow\\), bias increases, variance decreases"
  },
  {
    "objectID": "slides/pession_6/transcript.html#training",
    "href": "slides/pession_6/transcript.html#training",
    "title": "Introduction to Machine Learning",
    "section": "Training",
    "text": "Training\nTo perform Lasso and ridge regression:\n\nAI approach:\n\nminimize objective \\(\\Xi(a,b)\\) directly.\napproach is known as (stochastic) Gradient Descent\n\nUse special algorithms"
  },
  {
    "objectID": "slides/pession_6/transcript.html#example-imf-challenge",
    "href": "slides/pession_6/transcript.html#example-imf-challenge",
    "title": "Introduction to Machine Learning",
    "section": "Example: IMF challenge",
    "text": "Example: IMF challenge\n\nAn internal IMF challenge to predict crises in countries\nLots of different approaches\nLots of data:\n\nwhich one is relevant\nmachine must select relevant informations\n\nExample: Lasso Regressions and Forecasting Models in Applied Stress Testing by Jorge A. Chan-Lau\n\nin a given developing country\ntries to predict probability of default in various sectors"
  },
  {
    "objectID": "slides/pession_6/transcript.html#nonlinear-regression-1",
    "href": "slides/pession_6/transcript.html#nonlinear-regression-1",
    "title": "Introduction to Machine Learning",
    "section": "Nonlinear Regression",
    "text": "Nonlinear Regression\n\nSo far, we have assumed,\n\n\\(y_i = a + b x_i\\)\n\\(y_i = a + b x_i + μ_1 (a^2 + b^2) + μ_2 (|a| + |b|)\\)\ndefined \\(\\Xi(a,b)\\) and tried to minimize it\n\nSame approach works for fully nonlinear models\n\n\\(y_i = a x_i + a^2 x_i^2 + c\\)\n\\(y_i = \\varphi(x; \\theta)\\) ()\n\nSpecial case: neural network:\n\nprimer tensor playground"
  },
  {
    "objectID": "slides/pession_6/transcript.html#how-to-evaluate-the-machine-learning",
    "href": "slides/pession_6/transcript.html#how-to-evaluate-the-machine-learning",
    "title": "Introduction to Machine Learning",
    "section": "how to evaluate the machine learning",
    "text": "how to evaluate the machine learning\nIn machine learning we can’t perform statistical inference easily. How do we assess the validity of a model?\n\nBasic idea (independent of how complex the algorithm is)\n\nseparate data in\n\ntraining set (in-sample)\ntest set (out of sample)\n\ntrain using only the training set\nevaluate performance on the test set\n\nPerformance can be:\n\nfitness, number of classification errors (false positive, false negative)"
  },
  {
    "objectID": "slides/pession_6/transcript.html#how-to-evaluate-the-machine-learning-1",
    "href": "slides/pession_6/transcript.html#how-to-evaluate-the-machine-learning-1",
    "title": "Introduction to Machine Learning",
    "section": "how to evaluate the machine learning",
    "text": "how to evaluate the machine learning\nIn case the training method depends itself on many parameters (the hyperparameters) we make three samples instead:\n\ntraining set (in-sample)\nvalidation set (to update hyperparameters)\ntest set (out of sample)\n\nGolden Rule: the test set should not be used to estimate the model, and should not affect the choice any training parameter (hyperparameter)."
  },
  {
    "objectID": "slides/pession_6/transcript.html#section",
    "href": "slides/pession_6/transcript.html#section",
    "title": "Introduction to Machine Learning",
    "section": "",
    "text": "Traintest\n\n\n. . .\nThe test set reveals that orange model is overfitting."
  },
  {
    "objectID": "slides/pession_6/transcript.html#how-to-choose-the-validation-set",
    "href": "slides/pession_6/transcript.html#how-to-choose-the-validation-set",
    "title": "Introduction to Machine Learning",
    "section": "How to choose the validation set?",
    "text": "How to choose the validation set?\n\nHoldout validation approach:\n\nkeeps x% of the data for the training, (100-x)% for the test\n\nHow to choose the sizes of the subsets?\n\nsmall dataset: 90-10\nbig data set: 70-30 (we can afford to waste more training data for the test)\n\n\n. . .\n\nProblem:\n\nare we sure the validation size is correct? Are the results determined by an (un-) lucky draw?\na problem for smaller datasets"
  },
  {
    "objectID": "slides/pession_6/transcript.html#how-to-choose-the-validation-set-1",
    "href": "slides/pession_6/transcript.html#how-to-choose-the-validation-set-1",
    "title": "Introduction to Machine Learning",
    "section": "How to choose the validation set?",
    "text": "How to choose the validation set?\nA more robust solution: \\(k\\)-fold validation\n\n\n\nsplit dataset randomly in \\(K\\) subsets of equal size \\(S_1, ... S_K\\)\nuse subset \\(S_i\\) as test set, the rest as training set, compute the score\ncompare the scores obtained for all \\(i\\in[1,K]\\)\n\nthey should be similar (compute standard deviation)\n\naverage them"
  },
  {
    "objectID": "slides/pession_6/transcript.html#wait",
    "href": "slides/pession_6/transcript.html#wait",
    "title": "Introduction to Machine Learning",
    "section": "Wait",
    "text": "Wait\n\nAnother library to do regression ?\nstatsmodels:\n\nexplanatory analysis\nstatistical tests\nformula interface for many estimation algorithms\n\nstateless approach (model.fit() returns another object)\n\n\nlinearmodels\n\nextends statsmodels (very similar interface)\n\n(panel models, IV, systems…)\n\n\nsklearn:\n\nprediction\nfaster for big datasets\ncommon interface for several machine learning tasks\n\nstateful approach (model is modified by .fit operation)\n\ndefacto standard for machine learning"
  },
  {
    "objectID": "slides/pession_6/transcript.html#in-practice",
    "href": "slides/pession_6/transcript.html#in-practice",
    "title": "Introduction to Machine Learning",
    "section": "In practice",
    "text": "In practice\n\n\nBasic sklearn workflow:\n\n\nimport data\n\nfeatures: a matrix X (2d numpy array)\nlabels: a vector y (1d numpy array)\n\nsplit the data, between training and test datasets\n\nsplit needs to be random to avoid any bias\n\nnormalize the data\n\nmost ML algorithm are sensitive to scale\n\ncreate a model (independent from data)\ntrain the model on training dataset\nevaluate accuracy on test dataset (here \\(R^2\\))\nuse the model to make predictions\n\n\nThe workflow is always the same, no matter what the model is\n\ntry sklearn.linear_model.Lasso instead of LinearRegression\n\n\nfrom sklearn.datasets import load_diabetes\ndataset = load_diabetes()\nX = dataset['data']\ny = dataset['target']\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.1)\n\n#Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\nmodel.score(X_test, y_test)\nmodel.predict(X_new)"
  },
  {
    "objectID": "slides/pession_6/transcript.html#k-fold-validation-with-sklearn",
    "href": "slides/pession_6/transcript.html#k-fold-validation-with-sklearn",
    "title": "Introduction to Machine Learning",
    "section": "\\(k\\)-fold validation with sklearn",
    "text": "\\(k\\)-fold validation with sklearn\nfrom sklearn.model_selection import KFold\nkf = KFold(n_splits=10)\n\nfor train_index, test_index in kf.split(X):\n   X_train, X_test = X[train_index], X[test_index]\n   y_train, y_test = y[train_index], y[test_index]\n\n   ## train a model in X_train, y_train\n   ## test it on X_test, y_test"
  },
  {
    "objectID": "slides/osession_10/index.html#bias-vs-variance",
    "href": "slides/osession_10/index.html#bias-vs-variance",
    "title": "Some Important Points",
    "section": "Bias vs Variance",
    "text": "Bias vs Variance\n\n\nA model is fitted (trained / regressed) on a given amount of data\nA model can be more or less flexible\n\nhave more or less independent parameters (aka degrees of freedom)\nex: \\(y = a + b x\\) (2) vs \\(y = a + b x_1 + c x_1^2 + e x_2 + f x_3\\) (5)\n\nMore flexible models fit the training data better…\n…but tend to perform worse for predictions\nThis is known as:\n\nThe Bias (bad fit) vs Variance (bad prediction) tradeoff\nThe no free lunch theorem"
  },
  {
    "objectID": "slides/osession_10/index.html#overfitting",
    "href": "slides/osession_10/index.html#overfitting",
    "title": "Some Important Points",
    "section": "Overfitting",
    "text": "Overfitting"
  },
  {
    "objectID": "slides/osession_10/index.html#explanation-vs-prediction",
    "href": "slides/osession_10/index.html#explanation-vs-prediction",
    "title": "Some Important Points",
    "section": "Explanation vs Prediction",
    "text": "Explanation vs Prediction\n\n\nThe goal of machine learning consists in making the best predictions:\n\nuse enough data to maximize the fit…\n… but control the number of independent parameters to prevent overfitting\n\nex: LASSO regression has lots of parameters, but tries to keep most of them zero\n\nultimately quality of prediction is evaluated on a test set, independent from the training set\n\nIn econometrics we can perform\n\npredictions: sames issues as ML\nexplanatory analysis: focus on the effect of one (or a few) explanatory variables\n\nthis does not necessary require strong predictive power"
  },
  {
    "objectID": "slides/osession_10/index.html#read-regression-results",
    "href": "slides/osession_10/index.html#read-regression-results",
    "title": "Some Important Points",
    "section": "Read Regression Results",
    "text": "Read Regression Results\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:                      y   R-squared:                       0.252\nModel:                            OLS   Adj. R-squared:                  0.245\nMethod:                 Least Squares   F-statistic:                     33.08\nDate:                Tue, 30 Mar 2021   Prob (F-statistic):           1.01e-07\nTime:                        02:34:12   Log-Likelihood:                -111.39\nNo. Observations:                 100   AIC:                             226.8\nDf Residuals:                      98   BIC:                             232.0\nDf Model:                           1                                         \nCovariance Type:            nonrobust                                         \n==============================================================================\n                 coef    std err          t      P&gt;|t|      [0.025      0.975]\n==============================================================================\nIntercept     -0.1750      0.162     -1.082      0.282      -0.496       0.146\nx              0.1377      0.024      5.751      0.000       0.090       0.185\n==============================================================================\nOmnibus:                        2.673   Durbin-Watson:                   1.118\nProb(Omnibus):                  0.263   Jarque-Bera (JB):                2.654\nSkew:                           0.352   Prob(JB):                        0.265\nKurtosis:                       2.626   Cond. No.                         14.9\n==============================================================================\n\nUnderstand p-value: chances that a given statistics might have been obtained, under the H0 hypothesis\n\n\n\n\nCheck:\n\nR2: provides an indication of predictive power. Does not prevent overfitting.\nadj. R2: predictive power corrected for excessive degrees of freedom\nglobal significance (p-value of Fisher test): chances we would have obtained this R2 if all real coefficients were actually 0 (H0 hypothesis)\n\n\n\n\n\nCoefficient:\n\np-value probability that coefficient might have been greater than observed, if it was actually 0.\nif p-value is smaller than 5%: the coefficient is significant at a 5% level\nconfidence intervals (5%): if the true coefficient was out of this interval, observed value would be very implausible\n\nhigher confidence levels -&gt; bigger intervals"
  },
  {
    "objectID": "slides/osession_10/index.html#read-a-regression-table",
    "href": "slides/osession_10/index.html#read-a-regression-table",
    "title": "Some Important Points",
    "section": "Read A Regression Table",
    "text": "Read A Regression Table\n\nExample of a Regression Table"
  },
  {
    "objectID": "slides/osession_10/index.html#can-there-be-too-many-variables",
    "href": "slides/osession_10/index.html#can-there-be-too-many-variables",
    "title": "Some Important Points",
    "section": "Can there be too many variables?",
    "text": "Can there be too many variables?\n\nOverfitting\n\nbad predictions\n\nColinearity\n\ncan bias a coefficient of interest\nnot a problem for prediction\nexact colinearity makes traditional OLS fail\n\nTo choose the right amount of variables find a combination which maximizes adjusted R2 or an information criterium"
  },
  {
    "objectID": "slides/osession_10/index.html#colinearity",
    "href": "slides/osession_10/index.html#colinearity",
    "title": "Some Important Points",
    "section": "Colinearity",
    "text": "Colinearity\n\n\n\\(x\\) is colinear with \\(y\\) if \\(cor(x,y)\\) very close to 1\nmore generally \\(x\\) is colinear with \\(y_1, ... y_n\\) if \\(x\\) can be deduced linearly from \\(y_1...y_n\\)\n\nthere exists \\(\\lambda_1, ... \\lambda_n\\) such that \\(x = \\lambda_1 x_1 + ... + \\lambda_n x_n\\)\nexample: hours of sleep / hours awake (sleep=24-awake)\n\nperfect colinearity is a problem: coefficients are not well defined\n\n\\(\\text{productivity} = 0.1 + 0.5 \\text{sleep} + 0.5 \\text{awake}\\) or \\(\\text{productivity} = -11.9 + 1 \\text{sleep} + 1 \\text{awake}\\) ?\n\nbest regressions have regressors that:\nexplain independent variable\nare independent from each other (as much as possible)"
  },
  {
    "objectID": "slides/osession_10/index.html#ommitted-variable",
    "href": "slides/osession_10/index.html#ommitted-variable",
    "title": "Some Important Points",
    "section": "Ommitted Variable",
    "text": "Ommitted Variable\nWhat if you don’t have enough variables?\n\\(y = a + bx\\)\n\nR2 can be low. It’s ok for explanatory analysis.\nas long as residuals are normally distributed\n\ncheck graphically to be sure\n(more advanced): there are statistical tests"
  },
  {
    "objectID": "slides/osession_10/index.html#omitted-variable",
    "href": "slides/osession_10/index.html#omitted-variable",
    "title": "Some Important Points",
    "section": "Omitted Variable",
    "text": "Omitted Variable\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSuppose we want to know the effect of \\(x\\) on \\(y\\).\nWe run the regression \\(y = a + b x\\)\n\nwe find \\(y = 0.21 + \\color{red}{0.15} x\\)\n\nWe then realize we have access to a categorical variable \\(gender \\in {male, female}\\)\nWe then add the \\(\\delta\\) dummy variable to the regression: \\(y = a + bx + c \\delta\\)\n\nwe find $ y = -0.04 + x - 0.98 $\n\nNote that adding the indicator\n\nimproved the fit (\\(R^2\\) is 0.623 instead of 0.306)\ncorrected for the omitted variable bias (true value of b is actually 0.2)\nprovided an estimate for the effect of variable gender"
  },
  {
    "objectID": "slides/osession_10/index.html#endogeneity",
    "href": "slides/osession_10/index.html#endogeneity",
    "title": "Some Important Points",
    "section": "Endogeneity",
    "text": "Endogeneity\n\n\nConsider the regression model \\(y = a + b x + \\epsilon\\)\nWhen \\(\\epsilon\\) is correlated with \\(x\\) we have an endogeneity problem.\n\nwe can check in the regression results whether the residuals ares correlated with \\(y\\) or \\(x\\)\n\nEndogeneity can have several sources: omitted variable, measurement error, simultaneity\n\nit creates a bias in the estimate of \\(a\\) and \\(b\\)\n\nWe say we control for endogeneity by adding some variables\nA special case of endogeneity is a confounding factor a variable \\(z\\) which causes at the same time \\(x\\) and \\(y\\)"
  },
  {
    "objectID": "slides/osession_10/index.html#instrument",
    "href": "slides/osession_10/index.html#instrument",
    "title": "Some Important Points",
    "section": "Instrument",
    "text": "Instrument\n\\[y = a + b x + \\epsilon\\]\n\n\nRecall: endogeneity issue when \\(\\epsilon\\) is correlated with \\(x\\)\nInstrument: a way to keep only the variability of \\(x\\) that is independent from \\(\\epsilon\\)\n\nit needs to be correlated with \\(x\\)\nnot with any component of \\(\\epsilon\\)\nit needs to predict \\(y\\)\n\nAn instrument can be used to solve endogeneity issues\nIt can also establish the causality from \\(x\\) to \\(y\\):\n\nsince it is independent from \\(\\epsilon\\), all its effect on \\(y\\) goes through \\(x\\)"
  },
  {
    "objectID": "slides/osession_10/index_handout.html",
    "href": "slides/osession_10/index_handout.html",
    "title": "Some Important Points",
    "section": "",
    "text": "A model is fitted (trained / regressed) on a given amount of data\nA model can be more or less flexible\n\nhave more or less independent parameters (aka degrees of freedom)\nex: \\(y = a + b x\\) (2) vs \\(y = a + b x_1 + c x_1^2 + e x_2 + f x_3\\) (5)\n\nMore flexible models fit the training data better…\n…but tend to perform worse for predictions\nThis is known as:\n\nThe Bias (bad fit) vs Variance (bad prediction) tradeoff\nThe no free lunch theorem"
  },
  {
    "objectID": "slides/osession_10/index_handout.html#bias-vs-variance",
    "href": "slides/osession_10/index_handout.html#bias-vs-variance",
    "title": "Some Important Points",
    "section": "",
    "text": "A model is fitted (trained / regressed) on a given amount of data\nA model can be more or less flexible\n\nhave more or less independent parameters (aka degrees of freedom)\nex: \\(y = a + b x\\) (2) vs \\(y = a + b x_1 + c x_1^2 + e x_2 + f x_3\\) (5)\n\nMore flexible models fit the training data better…\n…but tend to perform worse for predictions\nThis is known as:\n\nThe Bias (bad fit) vs Variance (bad prediction) tradeoff\nThe no free lunch theorem"
  },
  {
    "objectID": "slides/osession_10/index_handout.html#overfitting",
    "href": "slides/osession_10/index_handout.html#overfitting",
    "title": "Some Important Points",
    "section": "Overfitting",
    "text": "Overfitting"
  },
  {
    "objectID": "slides/osession_10/index_handout.html#explanation-vs-prediction",
    "href": "slides/osession_10/index_handout.html#explanation-vs-prediction",
    "title": "Some Important Points",
    "section": "Explanation vs Prediction",
    "text": "Explanation vs Prediction\n\n\nThe goal of machine learning consists in making the best predictions:\n\nuse enough data to maximize the fit…\n… but control the number of independent parameters to prevent overfitting\n\nex: LASSO regression has lots of parameters, but tries to keep most of them zero\n\nultimately quality of prediction is evaluated on a test set, independent from the training set\n\nIn econometrics we can perform\n\npredictions: sames issues as ML\nexplanatory analysis: focus on the effect of one (or a few) explanatory variables\n\nthis does not necessary require strong predictive power"
  },
  {
    "objectID": "slides/osession_10/index_handout.html#read-regression-results",
    "href": "slides/osession_10/index_handout.html#read-regression-results",
    "title": "Some Important Points",
    "section": "Read Regression Results",
    "text": "Read Regression Results\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:                      y   R-squared:                       0.252\nModel:                            OLS   Adj. R-squared:                  0.245\nMethod:                 Least Squares   F-statistic:                     33.08\nDate:                Tue, 30 Mar 2021   Prob (F-statistic):           1.01e-07\nTime:                        02:34:12   Log-Likelihood:                -111.39\nNo. Observations:                 100   AIC:                             226.8\nDf Residuals:                      98   BIC:                             232.0\nDf Model:                           1                                         \nCovariance Type:            nonrobust                                         \n==============================================================================\n                 coef    std err          t      P&gt;|t|      [0.025      0.975]\n==============================================================================\nIntercept     -0.1750      0.162     -1.082      0.282      -0.496       0.146\nx              0.1377      0.024      5.751      0.000       0.090       0.185\n==============================================================================\nOmnibus:                        2.673   Durbin-Watson:                   1.118\nProb(Omnibus):                  0.263   Jarque-Bera (JB):                2.654\nSkew:                           0.352   Prob(JB):                        0.265\nKurtosis:                       2.626   Cond. No.                         14.9\n==============================================================================\n\nUnderstand p-value: chances that a given statistics might have been obtained, under the H0 hypothesis\n\n\n\n\nCheck:\n\nR2: provides an indication of predictive power. Does not prevent overfitting.\nadj. R2: predictive power corrected for excessive degrees of freedom\nglobal significance (p-value of Fisher test): chances we would have obtained this R2 if all real coefficients were actually 0 (H0 hypothesis)\n\n\n\n\n\nCoefficient:\n\np-value probability that coefficient might have been greater than observed, if it was actually 0.\nif p-value is smaller than 5%: the coefficient is significant at a 5% level\nconfidence intervals (5%): if the true coefficient was out of this interval, observed value would be very implausible\n\nhigher confidence levels -&gt; bigger intervals"
  },
  {
    "objectID": "slides/osession_10/index_handout.html#read-a-regression-table",
    "href": "slides/osession_10/index_handout.html#read-a-regression-table",
    "title": "Some Important Points",
    "section": "Read A Regression Table",
    "text": "Read A Regression Table\n\n\n\nExample of a Regression Table"
  },
  {
    "objectID": "slides/osession_10/index_handout.html#can-there-be-too-many-variables",
    "href": "slides/osession_10/index_handout.html#can-there-be-too-many-variables",
    "title": "Some Important Points",
    "section": "Can there be too many variables?",
    "text": "Can there be too many variables?\n\nOverfitting\n\nbad predictions\n\nColinearity\n\ncan bias a coefficient of interest\nnot a problem for prediction\nexact colinearity makes traditional OLS fail\n\nTo choose the right amount of variables find a combination which maximizes adjusted R2 or an information criterium"
  },
  {
    "objectID": "slides/osession_10/index_handout.html#colinearity",
    "href": "slides/osession_10/index_handout.html#colinearity",
    "title": "Some Important Points",
    "section": "Colinearity",
    "text": "Colinearity\n\n\n\\(x\\) is colinear with \\(y\\) if \\(cor(x,y)\\) very close to 1\nmore generally \\(x\\) is colinear with \\(y_1, ... y_n\\) if \\(x\\) can be deduced linearly from \\(y_1...y_n\\)\n\nthere exists \\(\\lambda_1, ... \\lambda_n\\) such that \\(x = \\lambda_1 x_1 + ... + \\lambda_n x_n\\)\nexample: hours of sleep / hours awake (sleep=24-awake)\n\nperfect colinearity is a problem: coefficients are not well defined\n\n\\(\\text{productivity} = 0.1 + 0.5 \\text{sleep} + 0.5 \\text{awake}\\) or \\(\\text{productivity} = -11.9 + 1 \\text{sleep} + 1 \\text{awake}\\) ?\n\nbest regressions have regressors that:\nexplain independent variable\nare independent from each other (as much as possible)"
  },
  {
    "objectID": "slides/osession_10/index_handout.html#ommitted-variable",
    "href": "slides/osession_10/index_handout.html#ommitted-variable",
    "title": "Some Important Points",
    "section": "Ommitted Variable",
    "text": "Ommitted Variable\nWhat if you don’t have enough variables?\n\\(y = a + bx\\)\n\nR2 can be low. It’s ok for explanatory analysis.\nas long as residuals are normally distributed\n\ncheck graphically to be sure\n(more advanced): there are statistical tests"
  },
  {
    "objectID": "slides/osession_10/index_handout.html#omitted-variable",
    "href": "slides/osession_10/index_handout.html#omitted-variable",
    "title": "Some Important Points",
    "section": "Omitted Variable",
    "text": "Omitted Variable\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSuppose we want to know the effect of \\(x\\) on \\(y\\).\nWe run the regression \\(y = a + b x\\)\n\nwe find \\(y = 0.21 + \\color{red}{0.15} x\\)\n\nWe then realize we have access to a categorical variable \\(gender \\in {male, female}\\)\nWe then add the \\(\\delta\\) dummy variable to the regression: \\(y = a + bx + c \\delta\\)\n\nwe find $ y = -0.04 + x - 0.98 $\n\nNote that adding the indicator\n\nimproved the fit (\\(R^2\\) is 0.623 instead of 0.306)\ncorrected for the omitted variable bias (true value of b is actually 0.2)\nprovided an estimate for the effect of variable gender"
  },
  {
    "objectID": "slides/osession_10/index_handout.html#endogeneity",
    "href": "slides/osession_10/index_handout.html#endogeneity",
    "title": "Some Important Points",
    "section": "Endogeneity",
    "text": "Endogeneity\n\n\nConsider the regression model \\(y = a + b x + \\epsilon\\)\nWhen \\(\\epsilon\\) is correlated with \\(x\\) we have an endogeneity problem.\n\nwe can check in the regression results whether the residuals ares correlated with \\(y\\) or \\(x\\)\n\nEndogeneity can have several sources: omitted variable, measurement error, simultaneity\n\nit creates a bias in the estimate of \\(a\\) and \\(b\\)\n\nWe say we control for endogeneity by adding some variables\nA special case of endogeneity is a confounding factor a variable \\(z\\) which causes at the same time \\(x\\) and \\(y\\)"
  },
  {
    "objectID": "slides/osession_10/index_handout.html#instrument",
    "href": "slides/osession_10/index_handout.html#instrument",
    "title": "Some Important Points",
    "section": "Instrument",
    "text": "Instrument\n\\[y = a + b x + \\epsilon\\]\n\n\nRecall: endogeneity issue when \\(\\epsilon\\) is correlated with \\(x\\)\nInstrument: a way to keep only the variability of \\(x\\) that is independent from \\(\\epsilon\\)\n\nit needs to be correlated with \\(x\\)\nnot with any component of \\(\\epsilon\\)\nit needs to predict \\(y\\)\n\nAn instrument can be used to solve endogeneity issues\nIt can also establish the causality from \\(x\\) to \\(y\\):\n\nsince it is independent from \\(\\epsilon\\), all its effect on \\(y\\) goes through \\(x\\)"
  },
  {
    "objectID": "slides/osession_10/graphs/Untitled1.html",
    "href": "slides/osession_10/graphs/Untitled1.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "from matplotlib import pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n\nimport statsmodels.api as sm\n\n\ndf.describe()\n\n\n\n\n\n\n\n\nincome\neducation\nprestige\n\n\n\n\ncount\n45.000000\n45.000000\n45.000000\n\n\nmean\n41.866667\n52.555556\n47.688889\n\n\nstd\n24.435072\n29.760831\n31.510332\n\n\nmin\n7.000000\n7.000000\n3.000000\n\n\n25%\n21.000000\n26.000000\n16.000000\n\n\n50%\n42.000000\n45.000000\n41.000000\n\n\n75%\n64.000000\n84.000000\n81.000000\n\n\nmax\n81.000000\n100.000000\n97.000000\n\n\n\n\n\n\n\n\ndf.cov()\n\n\n\n\n\n\n\n\nincome\neducation\nprestige\n\n\n\n\nincome\n597.072727\n526.871212\n645.071212\n\n\neducation\n526.871212\n885.707071\n798.904040\n\n\nprestige\n645.071212\n798.904040\n992.901010\n\n\n\n\n\n\n\n\nfrom matplotlib import pyplot as plt\n\n\nplt.figure(figsize=(8,6))\nplt.plot(df['education'],df['income'],'o')\nplt.grid()\nplt.xlabel(\"x (Education)\")\nplt.ylabel(\"y (Income)\")\nplt.savefig(\"data_description.png\")\n\n\n\n\n\n\n\n\n\nfor i in [1,2,3]:\n    xvec = np.linspace(10,100)\n\n    plt.figure(figsize=(12,8))\n    plt.plot(df['education'],df['income'],'o')\n\n    plt.plot(xvec, xvec * 0 + 50)\n    if i&gt;=2:\n        plt.plot(xvec, xvec )\n    if i&gt;=3:\n        plt.plot(xvec,  90- 0.6*xvec )\n\n    plt.grid()\n    plt.xlabel(\"x (Education)\")\n    plt.ylabel(\"y (Income)\")\n    plt.savefig(f\"which_line_{i}.png\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfrom ipywidgets import interact\n\n\nimport matplotlib.patches as patches\n\n\na = 0.1\nb = 1.0\nind = 23\n\n\napprox =  a + b*xvec\n\n# Create figure and axes\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\nplt.plot(df['education'],df['income'],'o')\nplt.plot(xvec, approx, color='red')\n\nx, y = df['education'][ind], df['income'][ind]\nplt.plot(x, y, 'o', color='red' )\np = a+b*x\nplt.grid(True)\nh = abs(p-y)\nplt.vlines(x, y+h, y, color='red')\n\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.savefig(f\"error_0.png\")\n\n\n\n\n\n\n\n\n\nplt.vlines?\n\n\nSignature:\nplt.vlines(\n    x,\n    ymin,\n    ymax,\n    colors=None,\n    linestyles='solid',\n    label='',\n    *,\n    data=None,\n    **kwargs,\n)\nDocstring:\nPlot vertical lines.\nPlot vertical lines at each *x* from *ymin* to *ymax*.\nParameters\n----------\nx : float or array-like\n    x-indexes where to plot the lines.\nymin, ymax : float or array-like\n    Respective beginning and end of each line. If scalars are\n    provided, all lines will have same length.\ncolors : list of colors, default: :rc:`lines.color`\nlinestyles : {'solid', 'dashed', 'dashdot', 'dotted'}, optional\nlabel : str, default: ''\nReturns\n-------\n`~matplotlib.collections.LineCollection`\nOther Parameters\n----------------\n**kwargs : `~matplotlib.collections.LineCollection` properties.\nSee Also\n--------\nhlines : horizontal lines\naxvline: vertical line across the axes\nNotes\n-----\n.. note::\n    In addition to the above described arguments, this function can take\n    a *data* keyword argument. If such a *data* argument is given,\n    the following arguments can also be string ``s``, which is\n    interpreted as ``data[s]`` (unless this raises an exception):\n    *x*, *ymin*, *ymax*, *colors*.\n    Objects passed as **data** must support item access (``data[s]``) and\n    membership test (``s in data``).\nFile:      ~/.local/opt/miniconda/lib/python3.8/site-packages/matplotlib/pyplot.py\nType:      function\n\n\n\n\n\na = 0.1\nb = 1.0\nind = 23\n\n\napprox =  a + b*xvec\n\n# Create figure and axes\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\nplt.plot(df['education'],df['income'],'o')\nplt.plot(xvec, approx, color='red')\n\nx, y = df['education'][ind], df['income'][ind]\nplt.plot(x, y, 'o', color='red' )\np = a+b*x\nplt.grid(True)\nh = abs(p-y)\nif p-y&gt;0:\n    # Create a Rectangle patch\n    rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n    ax.add_patch(rect)\n    \nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.savefig(f\"errors_{1}.png\")\n\n\n\n\n\n\n\n\n\ndef L(a,b):\n    Δ = a + b*df['education'] - df['income']\n    return (Δ**2).sum()\n\n\na = 0.1\nb = 0.8\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red')\n\nplt.grid(True)\nfor ind in range(df.shape[0]):\n    \n    x, y = df['education'][ind], df['income'][ind]\n    p = a+b*x\n\n    h = abs(p-y)\n    if p-y&gt;0:\n        # Create a Rectangle patch\n        rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\n    else:\n        rect = patches.Rectangle((x,y-h),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"errors_2.png\")\n\n\n\n\n\n\n\n\n\na = 90\nb = -0.6\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red')\n\nplt.grid(True)\nfor ind in range(df.shape[0]):\n    \n    x, y = df['education'][ind], df['income'][ind]\n    p = a+b*x\n\n    h = abs(p-y)\n    if p-y&gt;0:\n        # Create a Rectangle patch\n        rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\n    else:\n        rect = patches.Rectangle((x,y-h),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"errors_3.png\")\n\n\n\n\n\n\n\n\n\nimport scipy.optimize\n\n\nscipy.optimize.minimize(lambda x: L(x[0], x[1]),np.array([0.5, 0.5]))\n\n      fun: 12480.970174488397\n hess_inv: array([[ 7.14169839e-09, -3.91281920e-09],\n       [-3.91281920e-09,  2.46663613e-09]])\n      jac: array([0.00024414, 0.00012207])\n  message: 'Desired error not necessarily achieved due to precision loss.'\n     nfev: 57\n      nit: 7\n     njev: 19\n   status: 2\n  success: False\n        x: array([10.60350224,  0.59485938])\n\n\n\na = 10\nb = 0.59\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red')\n\nplt.grid(True)\nfor ind in range(df.shape[0]):\n    \n    x, y = df['education'][ind], df['income'][ind]\n    p = a+b*x\n\n    h = abs(p-y)\n    if p-y&gt;0:\n        # Create a Rectangle patch\n        rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\n    else:\n        rect = patches.Rectangle((x,y-h),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"errors_4.png\")\n\n\n\n\n\n\n\n\n\na = 10\nb = 0.59\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red', alpha=0.5)\n\nplt.plot(60, a + b*60, 'o', color='red',)\n\nprint(a+b*60)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"prediction.png\")\n\n45.4\n\n\n\n\n\n\n\n\n\n\na = 10\nb = 0.59\n\napprox =  (a + b*df['education'] - df['income'])\n\nplt.figure(figsize=(12,6))\n\nplt.subplot(121)\nplt.plot(approx)\nplt.grid(False)\nplt.title(\"Residuals\")\n\n\nplt.subplot(122)\ndistplot(approx)\nplt.title(\"Distribution of residuals\")\nplt.grid()\n\nplt.savefig(\"residuals.png\")\n\n/home/pablo/.local/opt/miniconda/lib/python3.8/site-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n  warnings.warn(msg, FutureWarning)\n\n\n\n\n\n\n\n\n\n\n(a + b*df['education'] - df['income']).std()\n\n16.842782676352154\n\n\n\n\n\n/home/pablo/.local/opt/miniconda/lib/python3.8/site-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n  warnings.warn(msg, FutureWarning)\n\n\n\n\n\n\n\n\n\n\nfrom scipy.stats import f\n\n\nf(0.3)\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n&lt;ipython-input-191-91b22dc02480&gt; in &lt;module&gt;\n----&gt; 1 f(0.3)\n\n~/.local/opt/miniconda/lib/python3.8/site-packages/scipy/stats/_distn_infrastructure.py in __call__(self, *args, **kwds)\n    778 \n    779     def __call__(self, *args, **kwds):\n--&gt; 780         return self.freeze(*args, **kwds)\n    781     __call__.__doc__ = freeze.__doc__\n    782 \n\n~/.local/opt/miniconda/lib/python3.8/site-packages/scipy/stats/_distn_infrastructure.py in freeze(self, *args, **kwds)\n    775 \n    776         \"\"\"\n--&gt; 777         return rv_frozen(self, *args, **kwds)\n    778 \n    779     def __call__(self, *args, **kwds):\n\n~/.local/opt/miniconda/lib/python3.8/site-packages/scipy/stats/_distn_infrastructure.py in __init__(self, dist, *args, **kwds)\n    422         self.dist = dist.__class__(**dist._updated_ctor_param())\n    423 \n--&gt; 424         shapes, _, _ = self.dist._parse_args(*args, **kwds)\n    425         self.a, self.b = self.dist._get_support(*shapes)\n    426 \n\nTypeError: _parse_args() missing 1 required positional argument: 'dfd'\n\n\n\n\nnp.rand\n\n\nK = 100\nxvec = np.linspace(0,1,K)\ne1 = np.random.randn(K)*0.1\nyvec = 0.1 + xvec*0.4 + e1\ne2 = np.random.randn(K)*0.05\nyvec2 = 0.1 + xvec*(xvec-1)/2 + e2\ne3 = np.random.randn(K)*xvec/2\nyvec3 = 0.1 + xvec + e3\n\nyvec4 = 0.1 + np.sin(xvec*6) + np.random.randn(K)*xvec/2\n\n\nfrom dolo.numeric.processes import VAR1\n\n\nsim = VAR1( ρ=0.8, Σ=0.001).simulate(N=1,T=100)\nyvec4 = 0.1 + xvec*0.4 + sim.ravel()\n\n\nplt.figure(figsize=(18,6))\nplt.subplot(241)\nplt.plot(xvec, yvec,'o')\nplt.plot(xvec, 0.1 + xvec*0.4 )\nplt.ylabel(\"Series\")\nplt.title(\"white noise\")\nplt.subplot(242)\nplt.plot(xvec, yvec2, 'o')\nplt.plot(xvec, yvec2*0)\nplt.title('nonlinear')\nplt.subplot(243)\nplt.plot(xvec, yvec3,'o')\nplt.plot(xvec, 0.1 + xvec)\nplt.title('heteroskedastic')\nplt.subplot(244)\nplt.plot(xvec, yvec4,'o')\nplt.plot(xvec, xvec*0.6)\n\nplt.title('correlated')\n\n\nplt.subplot(245)\nplt.plot(xvec, e1,'o')\nplt.ylabel(\"Residuals\")\nplt.subplot(246)\nplt.plot(xvec, yvec2-0.075, 'o')\n\nplt.subplot(247)\nplt.plot(xvec, e3,'o')\nplt.subplot(248)\nplt.plot(xvec, sim.ravel(),'o')\n\nplt.tight_layout()\n\nplt.savefig(\"residuals_circus.png\")"
  },
  {
    "objectID": "slides/session_2/Numerical Python.html",
    "href": "slides/session_2/Numerical Python.html",
    "title": "Numerical Python",
    "section": "",
    "text": "Most python scientists, use the following libraries:\n\nnumpy: performant array library (vectors and matrices)\nmatplotlib: plotting library\nscipy: all kinds of mathematical routines\n\nIn the rest of the course, we’ll make some use of numpy and matplotlib\nThey are included in all python distributions like Anaconda Python\nAll additional libraries use numpy and matplotlib: pandas, statsmodels, sklearn\n\n\n\n\nIt is standard to import the libraries as np, and plt. We’ll follow this convention here.\n\n# these lines need to be run only once per program\nimport numpy as np\nimport matplotlib as plt\n\n\nprint(f\"Numpy version {np.__version__}\")\nprint(f\"Matplotlib version {plt.__version__}\")\n\nNumpy version 1.19.5\nMatplotlib version3.3.3"
  },
  {
    "objectID": "slides/session_2/Numerical Python.html#scientific-stack",
    "href": "slides/session_2/Numerical Python.html#scientific-stack",
    "title": "Numerical Python",
    "section": "",
    "text": "Most python scientists, use the following libraries:\n\nnumpy: performant array library (vectors and matrices)\nmatplotlib: plotting library\nscipy: all kinds of mathematical routines\n\nIn the rest of the course, we’ll make some use of numpy and matplotlib\nThey are included in all python distributions like Anaconda Python\nAll additional libraries use numpy and matplotlib: pandas, statsmodels, sklearn\n\n\n\n\nIt is standard to import the libraries as np, and plt. We’ll follow this convention here.\n\n# these lines need to be run only once per program\nimport numpy as np\nimport matplotlib as plt\n\n\nprint(f\"Numpy version {np.__version__}\")\nprint(f\"Matplotlib version {plt.__version__}\")\n\nNumpy version 1.19.5\nMatplotlib version3.3.3"
  },
  {
    "objectID": "slides/session_2/Numerical Python.html#numpy",
    "href": "slides/session_2/Numerical Python.html#numpy",
    "title": "Numerical Python",
    "section": "Numpy",
    "text": "Numpy\n\nVector Creation\n\nVectors and matrices are created with the np.array(...) function.\nSpecial vectors can be created with np.zeros, np.ones, np.linspace\n\n\n# an array can be created from a list of numbers\nnp.array( [1.0, 2.0, 3.0] )\n\narray([1., 2., 3.])\n\n\n\n# or initialized by specifying the length of the array\nnp.zeros(5)\n\narray([0., 0., 0., 0., 0.])\n\n\n\n# 10 regularly spaced points between 0 and 1\nnp.linspace(0, 1, 10)\n\narray([0. , 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1. ])\n\n\n\n\nMatrix Creation\n\nA matrix is a 2-dimensional array and is created with np.array\nFunction np.matrix() has been deprecated: do not use it.\nThere are functions to create specific matrices: np.eye, np.diag, …\n\n\n# an array can be created from a list of (equal size) lists\nnp.array([\n    [1.0, 2.0, 3.0],\n    [4  ,   5,   6] \n])\n\narray([[1., 2., 3.],\n       [4., 5., 6.]])\n\n\n\n# initialize an empty matrix with the dimensions as a tuple\nA = np.zeros( (2, 3) )\nA\n\narray([[0., 0., 0.],\n       [0., 0., 0.]])\n\n\n\n# matrix dimensions are contained in the shape attribute\nA.shape\n\n(2, 3)\n\n\n\n\nLinear Algebra\nVector multiplications and Matrix multiplications can be performed using special sign @\n\nA = np.array([[1.0, 2.0], [2,4]])\nA\n\narray([[1., 2.],\n       [2., 4.]])\n\n\n\nB = np.array([1.0, 2.0])\nB\n\narray([1., 2.])\n\n\n\nA@B\n\narray([ 5., 10.])\n\n\n\nA@A\n\narray([[ 5., 10.],\n       [10., 20.]])\n\n\n\n\nScalar types\nNumpy arrays can contain data of several scalar types.\n\n[True, False, True]\n\n[True, False, True]\n\n\n\n# vector of boolean\nboolean_vector = np.array( [True, False, True] )\nprint(f\"type of scalar '{boolean_vector.dtype}'\")\nboolean_vector\n\ntype of scalar 'bool'\n\n\narray([ True, False,  True])\n\n\n\n# vector of integers\nint_vector = np.array([1, 2, 0])\nprint(f\"type of scalar '{int_vector.dtype}'\")\nint_vector\n\ntype of scalar 'int64'\n\n\narray([1, 2, 0])\n\n\n\n\nSubscripting Vectors\n\nElements and subarrays, can be retrieved using the same syntax as lists and strings.\n\nRemember that indexing starts at 0.\n\n\n\nV = np.array([0., 1., 2., 3., 4.])\ndisplay(V[1])  # second element\n\n1.0\n\n\n\nV = np.array([0., 1., 2., 3., 4.])\ndisplay(V[1:3])  # second, third and fourth element\n\narray([1., 2.])\n\n\n\n\nModifying Vector Content\n\nElements and suvectors, can be assigned to new values, as long as they have the right dimensions.\n\n\nV = np.array([1., 1., 2., 4., 5., 8., 13.])\nV[3] = 3.0\nV\n\narray([ 1.,  1.,  2.,  3.,  5.,  8., 13.])\n\n\n\nV = np.array([1., 1., 2., 4., 5., 8., 13.])\n# V[1:4] = [1,2,3,4] # this doesn't work\nV[1:4] = [2,3,4] # this works\n\n\n\nSubscripting Matrices\n\nIndexing generalizes to matrices: there are two indices istead of one: M[i,j]\nOne can extract a row, or a column (a slice) with M[i,:] or M[:,i]\nA submatrix is defining with two intervals: M[i:j, k:l] or M[i:j, :], …\n\n\nM = np.array([[1,2,3],[4,5,6],[7,8,9]])\nM\n\narray([[1, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]])\n\n\n\nM[0,1] # access element (1,2)\n\n2\n\n\n\nM[2,:] # third row\n\narray([7, 8, 9])\n\n\n\nM[:,1] # second column     # M[i,1] for any i\n\narray([2, 5, 8])\n\n\n\nM[1:3, :] # lines from 1 (included) to 3 (excluded) ; all columns\n\narray([[4, 5, 6],\n       [7, 8, 9]])\n\n\n\n\nModifying matrix content\n\nM = np.array([[1,2,3],[4,5,6],[7,8,9]])\nM\n\narray([[1, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]])\n\n\n\nM[0,0] = 0\nM\n\narray([[0, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]])\n\n\n\nM[1:3, 1:3] = np.array([[0,1],[1,0]]) # dimensions must match\nM\n\narray([[0, 2, 3],\n       [4, 0, 1],\n       [7, 1, 0]])\n\n\n\n\nElement-wise algebraic operations\n\nThe following algebraic operations are defined on arrays: +, -, *, /, **.\nComparisons operators (&lt;,&lt;=, &gt;, &gt;=, ==) are defined are return boolean arrays.\nThey operate element by element.\n\n\nA = np.array([1,2,3,4])\nB = np.array([4,3,2,1])\nA+B\n\narray([5, 5, 5, 5])\n\n\n\nA*B    # note the difference with A@B\n\narray([4, 6, 6, 4])\n\n\n\nA&gt;B\n\narray([False, False,  True,  True])\n\n\n\n\nElement-wise logical operations\n\nThe following logical operations are defined element-wise on arrays: & (and), | (or), ~ (not)\n\n\nA = np.array([False, False, True, True])\nB = np.array([False, True, False, True])\n\n\n~A\n\narray([ True,  True, False, False])\n\n\n\nA | B\n\narray([False,  True,  True,  True])\n\n\n\nA & B\n\narray([False, False, False,  True])\n\n\n\n\nVector indexing\n\nArrays can be indexed by boolean arrays instead of ranges.\nOnly elements corresponding to true are retrieved\n\n\nx = np.linspace(0,1,6)\nx\n\narray([0. , 0.2, 0.4, 0.6, 0.8, 1. ])\n\n\n\n# indexes such that (x^2) &gt; (x/2)\nx**2 &gt; (x/2)\n\narray([False, False, False,  True,  True,  True])\n\n\n\ncond = x**2 &gt; (x/2)\nx[ cond ] \n\narray([0.6, 0.8, 1. ])\n\n\n\n\nGoing further: broadcasting rules\n\nNumpy library has defined very consistent conventions, to match inconsistent dimensions.\nIgnore them for now…\n\n\nM = np.eye(4)\nM\n\narray([[1., 0., 0., 0.],\n       [0., 1., 0., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 0., 1.]])\n\n\n\nM[2:4, 2:4] = 0.5 # float\nM\n\narray([[1. , 0. , 0. , 0. ],\n       [0. , 1. , 0. , 0. ],\n       [0. , 0. , 0.5, 0.5],\n       [0. , 0. , 0.5, 0.5]])\n\n\n\nM[:,:2] = np.array([[0.1, 0.2]])  # 1x2 array\nM\n\narray([[0.1, 0.2, 0. , 0. ],\n       [0.1, 0.2, 0. , 0. ],\n       [0.1, 0.2, 0.5, 0.5],\n       [0.1, 0.2, 0.5, 0.5]])\n\n\n\n\nGoing Further\n\nOther useful functions (easy to google):\n\nnp.arange() regularly spaced integers\nnp.where() find elements in\n…"
  },
  {
    "objectID": "slides/session_2/Numerical Python.html#matplotlib",
    "href": "slides/session_2/Numerical Python.html#matplotlib",
    "title": "Numerical Python",
    "section": "Matplotlib",
    "text": "Matplotlib\n\nMatplotlib\n\nmatplotlib is …\nobject oriented api optional Matlab-like syntax\nmain function is plt.plot(x,y) where x and y are vectors (or iterables like lists)\n\nlots of optional arguments\n\n\n\nfrom matplotlib import pyplot as plt\n\n\n\nExample\n\nx = np.linspace(-1,1,6)\n\n\ny = np.sin(x)/x # sinus cardinal\n\n\nplt.plot(x,y,'o')\nplt.plot(x,y)\n\n\n\n\n\n\n\n\n\n\nExample (2)\n\nx = np.linspace(-5,5,100)\n\nfig = plt.figure() # keep a figure open to draw on it\nfor k in range(1,5):\n    y = np.sin(x*k)/(x*k)\n    plt.plot(x, y, label=f\"$sinc({k} x)$\") # label each line\nplt.plot(x, x*0, color='black', linestyle='--')\nplt.grid(True) # add a grid\nplt.title(\"Looking for the right hat.\")\nplt.legend(loc=\"upper right\")\n\n\n\n\n\n\n\n\n\n\nExample (3)\n\nx = np.linspace(-5,5,100)\n\nplt.figure()\nplt.subplot(2,2,1) # create a 2x2 subplot and draw in first quadrant\nplt.plot(x,x)\nplt.subplot(2,2,2) # create a 2x2 subplot and draw in second quadrant\nplt.plot(x,-x)\nplt.subplot(2,2,3) # create a 2x2 subplot and draw in third quadrant\nplt.plot(x,-x)\nplt.subplot(2,2,4) # create a 2x2 subplot and draw in fourth quadrant\nplt.plot(x,x)\n\nplt.tight_layout() # save some space\n\n\n\n\n\n\n\n\n\n\nAlternatives to matplotlib\n\nplotly (nice javascript graphs)\naltair (good for datavisualisation/interactivity)\n\npython wrapper to Vega-lite"
  },
  {
    "objectID": "slides/session_2/Numerical Python.html#next",
    "href": "slides/session_2/Numerical Python.html#next",
    "title": "Numerical Python",
    "section": "Next",
    "text": "Next\n\nDataFrames and pandas"
  },
  {
    "objectID": "slides/session_2/index.html#dataframe",
    "href": "slides/session_2/index.html#dataframe",
    "title": "Dataframes",
    "section": "DataFrame",
    "text": "DataFrame\n\n\n\nA DataFrame (aka a table) is a 2-D labeled data structure with columns\n\neach column has a specific type and a column name\ntypes: quantitative, qualitative (ordered, non-ordered, …)\n\nFirst column is special: the index\nfirst goal of an econometrician: constitute a good dataframe\n\naka “cleaning the data”",
    "crumbs": [
      "lectures",
      "Dataframes"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#dataframes-are-everywhere",
    "href": "slides/session_2/index.html#dataframes-are-everywhere",
    "title": "Dataframes",
    "section": "DataFrames are everywhere",
    "text": "DataFrames are everywhere\n\n\n\n\n\nsometimes data comes from several linked dataframes\n\nrelational database\ncan still be seen conceptually as one dataframe…\n… through a join operation\n\n\n\n\n\ndataframes / relational databases are so ubiquitous a language has been developed for them\n\nSQL\nin the 80s…\n\nprobably worth looking at if you have some “data” ambitions\nyou will see the shadow of SQL everywhere - words like: join, merge, select, insert…\nplenty of resources to learn (example: sqbolt)",
    "crumbs": [
      "lectures",
      "Dataframes"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#pandas-1",
    "href": "slides/session_2/index.html#pandas-1",
    "title": "Dataframes",
    "section": "pandas",
    "text": "pandas\n\npandas = panel + datas\n\na python library created by WesMcKinney\nvery optimized\n\nessentially a dataframe object\nmany options but if in doubt:\n\nminimally sufficient pandas is a small subset of pandas to do everything\n\ntons of online tutorials\n\nofficial documenation doc\nquantecon",
    "crumbs": [
      "lectures",
      "Dataframes"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#creating-a-dataframe-1",
    "href": "slides/session_2/index.html#creating-a-dataframe-1",
    "title": "Dataframes",
    "section": "creating a dataframe (1)",
    "text": "creating a dataframe (1)\n\n\n\nImport pandas\n\npreferably with standard alias pd\n\nimport pandas as pd\nImport a dataframe\n\neach line a different entry in a dictionary\n\n# from a dictionary\nd = {\n  \"country\": [\"USA\", \"UK\", \"France\"],\n  \"comics\": [13, 10, 12]   \n}\npd.DataFrame(d)\n\n\n\n\n\n\n\n\n\n\ncountry\n\n\ncomics\n\n\n\n\n\n\n0\n\n\nUSA\n\n\n13\n\n\n\n\n1\n\n\nUK\n\n\n10\n\n\n\n\n2\n\n\nFrance\n\n\n12",
    "crumbs": [
      "lectures",
      "Dataframes"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#creating-a-dataframe-2",
    "href": "slides/session_2/index.html#creating-a-dataframe-2",
    "title": "Dataframes",
    "section": "creating a dataframe (2)",
    "text": "creating a dataframe (2)\n\nthere are many other ways to create a dataframe\n\nfor instance using a numpy matrix (numpy is a linear algebra library)\n\n# from a matrix\nimport numpy as np\nM = np.array(\n    [[18, 150],\n     [21, 200],\n     [29, 1500]]\n)   \ndf = pd.DataFrame( M, columns=[\"age\", \"travel\"] )\ndf\n\n\n\n\n\n\n\n\n\nage\n\n\ntravel\n\n\n\n\n\n\n0\n\n\n18\n\n\n150\n\n\n\n\n1\n\n\n21\n\n\n200\n\n\n\n\n2\n\n\n29\n\n\n1500",
    "crumbs": [
      "lectures",
      "Dataframes"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#common-file-formats",
    "href": "slides/session_2/index.html#common-file-formats",
    "title": "Dataframes",
    "section": "Common file formats",
    "text": "Common file formats\n\ncomma separated files: csv file\n\noften distributed online\ncan be exported easily from Excel or LibreOffice\n\nstata files: use pd.read_dta()\nexcel files: use pd.read_excel() or xlsreader if unlucky\n\nnote that excel does not store a dataframe (each cell is potentially different)\npostprocessing is needed",
    "crumbs": [
      "lectures",
      "Dataframes"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#comma-separated-file",
    "href": "slides/session_2/index.html#comma-separated-file",
    "title": "Dataframes",
    "section": "Comma separated file",
    "text": "Comma separated file\n\none can actually a file from python\n\ntxt = \"\"\"year,country,measure\n2018,\"france\",950.0\n2019,\"france\",960.0\n2020,\"france\",1000.0\n2018,\"usa\",2500.0\n2019,\"usa\",2150.0\n2020,\"usa\",2300.0\n\"\"\"\nopen('dummy_file.csv','w').write(txt) # we write it to a file\n\nand import it\n\ndf = pd.read_csv('dummy_file.csv') # what index should we use ?\ndf\n\n\n\n\n\n\n\n\nyear\n\n\ncountry\n\n\nmeasure\n\n\n\n\n\n\n0\n\n\n2018\n\n\nfrance\n\n\n950.0\n\n\n\n\n1\n\n\n2019\n\n\nfrance\n\n\n960.0\n\n\n\n\n2\n\n\n2020\n\n\nfrance\n\n\n1000.0\n\n\n\n\n3\n\n\n2018\n\n\nusa\n\n\n2500.0\n\n\n\n\n4\n\n\n2019\n\n\nusa\n\n\n2150.0\n\n\n\n\n5\n\n\n2020\n\n\nusa\n\n\n2300.0",
    "crumbs": [
      "lectures",
      "Dataframes"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#annoying-comma-separated-file",
    "href": "slides/session_2/index.html#annoying-comma-separated-file",
    "title": "Dataframes",
    "section": "“Annoying” Comma Separated File",
    "text": "“Annoying” Comma Separated File\n\nSometimes, comma-separated files, are not quite comma-separated…\n\ninspect the file with a text editor to see what it contains\n\nthe kind of separator, whether there are quotes…\n\ntxt = \"\"\"year;country;measure\n2018;\"france\";950.0\n2019;\"france\";960.0\n2020;\"france\";1000.0\n2018;\"usa\";2500.0\n2019;\"usa\";2150.0\n2020;\"usa\";2300.0\n\"\"\"\nopen('annoying_dummy_file.csv','w').write(txt) # we write it to a file\n\nadd relevant options to pd.read_csv and check result\n\npd.read_csv(\"annoying_dummy_file.csv\", sep=\";\")\n\n\n\n\n\n\n\n\nyear\n\n\ncountry\n\n\nmeasure\n\n\n\n\n\n\n0\n\n\n2018\n\n\nfrance\n\n\n950.0\n\n\n\n\n1\n\n\n2019\n\n\nfrance\n\n\n960.0\n\n\n\n\n2\n\n\n2020\n\n\nfrance\n\n\n1000.0\n\n\n\n\n3\n\n\n2018\n\n\nusa\n\n\n2500.0\n\n\n\n\n4\n\n\n2019\n\n\nusa\n\n\n2150.0\n\n\n\n\n5\n\n\n2020\n\n\nusa\n\n\n2300.0",
    "crumbs": [
      "lectures",
      "Dataframes"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#exporting-a-dataframe",
    "href": "slides/session_2/index.html#exporting-a-dataframe",
    "title": "Dataframes",
    "section": "Exporting a DataFrame",
    "text": "Exporting a DataFrame\n\npandas can export to many formats: df.to_...\nto (standard) CSV\n\nprint( df.to_csv() )\n,year,country,measure\n0,2018,france,950.0\n1,2019,france,960.0\n2,2020,france,1000.0\n3,2018,usa,2500.0\n4,2019,usa,2150.0\n5,2020,usa,2300.0\n\nor to stata\n\ndf.to_stata('dummy_example.dta')",
    "crumbs": [
      "lectures",
      "Dataframes"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#types-of-data-sources",
    "href": "slides/session_2/index.html#types-of-data-sources",
    "title": "Dataframes",
    "section": "Types of Data Sources",
    "text": "Types of Data Sources\n\n\n\nWhere can we get data from ?\n\ncheck one of the databases lists kaggle, econ network\n\nOfficial websites\n\noften in csv form\nunpractical applications\nsometimes unavoidable\nopen data trend: more unstructured data\n\nData providers\n\nsupply an API (i.e. easy to use function)",
    "crumbs": [
      "lectures",
      "Dataframes"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#data-providers",
    "href": "slides/session_2/index.html#data-providers",
    "title": "Dataframes",
    "section": "Data providers",
    "text": "Data providers\n\ncommercial ones:\n\nbloomberg, macrobond, factsets, quandl …\n\nfree ones available as a python library\n\ndbnomics: many official time-series\nqeds: databases used by quantecon\nvega-datasets: distributed with altair\n\n\n\nimport vega_datasets\ndf = vega_datasets.data('iris')\ndf\n\n\n\n\n\n\n\n\nsepalLength\n\n\nsepalWidth\n\n\npetalLength\n\n\npetalWidth\n\n\nspecies\n\n\n\n\n\n\n0\n\n\n5.1\n\n\n3.5\n\n\n1.4\n\n\n0.2\n\n\nsetosa\n\n\n\n\n1\n\n\n4.9\n\n\n3.0\n\n\n1.4\n\n\n0.2\n\n\nsetosa\n\n\n\n\n2\n\n\n4.7\n\n\n3.2\n\n\n1.3\n\n\n0.2\n\n\nsetosa\n\n\n\n\n3\n\n\n4.6\n\n\n3.1\n\n\n1.5\n\n\n0.2\n\n\nsetosa\n\n\n\n\n4\n\n\n5.0\n\n\n3.6\n\n\n1.4\n\n\n0.2\n\n\nsetosa\n\n\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n\n\n145\n\n\n6.7\n\n\n3.0\n\n\n5.2\n\n\n2.3\n\n\nvirginica\n\n\n\n\n146\n\n\n6.3\n\n\n2.5\n\n\n5.0\n\n\n1.9\n\n\nvirginica\n\n\n\n\n147\n\n\n6.5\n\n\n3.0\n\n\n5.2\n\n\n2.0\n\n\nvirginica\n\n\n\n\n148\n\n\n6.2\n\n\n3.4\n\n\n5.4\n\n\n2.3\n\n\nvirginica\n\n\n\n\n149\n\n\n5.9\n\n\n3.0\n\n\n5.1\n\n\n1.8\n\n\nvirginica\n\n\n\n\n\n150 rows × 5 columns",
    "crumbs": [
      "lectures",
      "Dataframes"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#dbnomics-example",
    "href": "slides/session_2/index.html#dbnomics-example",
    "title": "Dataframes",
    "section": "DBnomics example",
    "text": "DBnomics example\n\nDBnomics aggregates time series from various public sources\ndata is organized as provider/database/series\ntry to find the identifer of one or several series\n\nimport dbnomics\ndf = dbnomics.fetch_series('AMECO/ZUTN/EA19.1.0.0.0.ZUTN')\n\ntip: in case one python package is missing, it can be installed on the fly as in\n\n!pip install dbnomics",
    "crumbs": [
      "lectures",
      "Dataframes"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#inspecting-data",
    "href": "slides/session_2/index.html#inspecting-data",
    "title": "Dataframes",
    "section": "Inspecting data",
    "text": "Inspecting data\n\nonce the data is loaded as df, we want to look at some basic properties:\ngeneral\n\ndf.head(5) # 5 first lines\ndf.tail(5) # 5 first lines\ndf.describe() # general summary\n\ncentral tendency\n\ndf.mean() # average\ndf.median() # median\n\nspread\n\ndf.std() # standard deviations\ndf.var() # variance\ndf.min(), df.max() # bounds\n\ncounts (for categorical variable\n\ndf.count()\n\n\n\ndf.head(2)\n\n\n\n\n\n\n\n\nsepalLength\n\n\nsepalWidth\n\n\npetalLength\n\n\npetalWidth\n\n\nspecies\n\n\n\n\n\n\n0\n\n\n5.1\n\n\n3.5\n\n\n1.4\n\n\n0.2\n\n\nsetosa\n\n\n\n\n1\n\n\n4.9\n\n\n3.0\n\n\n1.4\n\n\n0.2\n\n\nsetosa\n\n\n\n\n\ndf.describe()\n\n\n\n\n\n\n\n\nsepalLength\n\n\nsepalWidth\n\n\npetalLength\n\n\npetalWidth\n\n\n\n\n\n\ncount\n\n\n150.000000\n\n\n150.000000\n\n\n150.000000\n\n\n150.000000\n\n\n\n\nmean\n\n\n5.843333\n\n\n3.057333\n\n\n3.758000\n\n\n1.199333\n\n\n\n\nstd\n\n\n0.828066\n\n\n0.435866\n\n\n1.765298\n\n\n0.762238\n\n\n\n\nmin\n\n\n4.300000\n\n\n2.000000\n\n\n1.000000\n\n\n0.100000\n\n\n\n\n25%\n\n\n5.100000\n\n\n2.800000\n\n\n1.600000\n\n\n0.300000\n\n\n\n\n50%\n\n\n5.800000\n\n\n3.000000\n\n\n4.350000\n\n\n1.300000\n\n\n\n\n75%\n\n\n6.400000\n\n\n3.300000\n\n\n5.100000\n\n\n1.800000\n\n\n\n\nmax\n\n\n7.900000\n\n\n4.400000\n\n\n6.900000\n\n\n2.500000",
    "crumbs": [
      "lectures",
      "Dataframes"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#changing-names-of-columns",
    "href": "slides/session_2/index.html#changing-names-of-columns",
    "title": "Dataframes",
    "section": "Changing names of columns",
    "text": "Changing names of columns\n\nColumns are defined by property df.columns\n\ndf.columns\nIndex(['sepalLength', 'sepalWidth', 'petalLength', 'petalWidth', 'species'], dtype='object')\n\nThis property can be set with a list of the right length\n\ndf.columns = ['sLength', 'sWidth', 'pLength', 'pWidth', 'species']\ndf.head(2)\n\n\n\n\n\n\n\n\nsLength\n\n\nsWidth\n\n\npLength\n\n\npWidth\n\n\nspecies\n\n\n\n\n\n\n0\n\n\n5.1\n\n\n3.5\n\n\n1.4\n\n\n0.2\n\n\nsetosa\n\n\n\n\n1\n\n\n4.9\n\n\n3.0\n\n\n1.4\n\n\n0.2\n\n\nsetosa",
    "crumbs": [
      "lectures",
      "Dataframes"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#indexing-a-column",
    "href": "slides/session_2/index.html#indexing-a-column",
    "title": "Dataframes",
    "section": "Indexing a column",
    "text": "Indexing a column\n\nA column can be extracted using its name as in a dictionary (like df['sLength'])\n\nseries = df['sWidth'] # note the resulting object: a series\nseries\n0      3.5\n1      3.0\n      ... \n148    3.4\n149    3.0\nName: sWidth, Length: 150, dtype: float64\n\nThe result is a series object (typed values with a name and an index)\nIt has its own set of methods\n\ntry:\n\nseries.mean(), series.std()\nseries.plot()\nseries.diff()\n\ncreates \\(y_t = x_t-x_{t-1}\\)\n\nseries.pct_change()\n\ncreates \\(y_t = \\frac{x_t-x_{t-1}}{x_{t-1}}\\)",
    "crumbs": [
      "lectures",
      "Dataframes"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#creating-a-new-column",
    "href": "slides/session_2/index.html#creating-a-new-column",
    "title": "Dataframes",
    "section": "Creating a new column",
    "text": "Creating a new column\n\nIt is possible to create a new column by combining existing ones\n\ndf['totalLength'] = df['pLength'] + df['sLength']\n# this would also work\ndf['totalLength'] = 0.5*df['pLength'] + 0.5*df['sLength']\ndf.head(2)\n\n\n\n\n\n\n\n\nsLength\n\n\nsWidth\n\n\npLength\n\n\npWidth\n\n\nspecies\n\n\ntotalLength\n\n\n\n\n\n\n0\n\n\n5.1\n\n\n3.5\n\n\n1.4\n\n\n0.2\n\n\nsetosa\n\n\n6.5\n\n\n\n\n1\n\n\n4.9\n\n\n3.0\n\n\n1.4\n\n\n0.2\n\n\nsetosa\n\n\n6.3",
    "crumbs": [
      "lectures",
      "Dataframes"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#replacing-a-column",
    "href": "slides/session_2/index.html#replacing-a-column",
    "title": "Dataframes",
    "section": "Replacing a column",
    "text": "Replacing a column\n\nAn existing column can be replaced with the same syntax.\n\ndf['totalLength'] = df['pLength'] + df['sLength']*0.5\ndf.head(2)\n\n\n\n\n\n\n\n\nsLength\n\n\nsWidth\n\n\npLength\n\n\npWidth\n\n\nspecies\n\n\ntotalLength\n\n\n\n\n\n\n0\n\n\n5.1\n\n\n3.5\n\n\n1.4\n\n\n0.2\n\n\nsetosa\n\n\n3.95\n\n\n\n\n1\n\n\n4.9\n\n\n3.0\n\n\n1.4\n\n\n0.2\n\n\nsetosa\n\n\n3.85",
    "crumbs": [
      "lectures",
      "Dataframes"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#selecting-several-columns",
    "href": "slides/session_2/index.html#selecting-several-columns",
    "title": "Dataframes",
    "section": "Selecting several columns",
    "text": "Selecting several columns\n\nIndex with a list of column names\n\ne = df[ ['pLength', 'sLength'] ]\ne.head(3)\n\n\n\n\n\n\n\n\npLength\n\n\nsLength\n\n\n\n\n\n\n0\n\n\n1.4\n\n\n5.1\n\n\n\n\n1\n\n\n1.4\n\n\n4.9\n\n\n\n\n2\n\n\n1.3\n\n\n4.7",
    "crumbs": [
      "lectures",
      "Dataframes"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#selecting-lines-1",
    "href": "slides/session_2/index.html#selecting-lines-1",
    "title": "Dataframes",
    "section": "Selecting lines (1)",
    "text": "Selecting lines (1)\n\nuse index range\n\n☡: in Python the end of a range is not included !\n\ndf[2:4]\n\n\n\n\n\n\n\n\n\nsLength\n\n\nsWidth\n\n\npLength\n\n\npWidth\n\n\nspecies\n\n\ntotalLength\n\n\n\n\n\n\n2\n\n\n4.7\n\n\n3.2\n\n\n1.3\n\n\n0.2\n\n\nsetosa\n\n\n3.65\n\n\n\n\n3\n\n\n4.6\n\n\n3.1\n\n\n1.5\n\n\n0.2\n\n\nsetosa\n\n\n3.80",
    "crumbs": [
      "lectures",
      "Dataframes"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#selecting-lines-2",
    "href": "slides/session_2/index.html#selecting-lines-2",
    "title": "Dataframes",
    "section": "Selecting lines (2)",
    "text": "Selecting lines (2)\n\nlet’s look at unique species\n\ndf['species'].unique()\narray(['setosa', 'versicolor', 'virginica'], dtype=object)\n\nwe would like to keep only the lines with virginica\n\nbool_ind = df['species'] == 'virginica' # this is a boolean serie\n\nthe result is a boolean series, where each element tells whether a line should be kept or not\n\ne = df[ bool_ind ]\ne.head(4)\n\nif you want you can keep the recipe:\n\ndf[df['species'] == 'virginica']\n\nto keep lines where species is equal to virginica\n\n\n\n\n\n\n\n\n\nsLength\n\n\nsWidth\n\n\npLength\n\n\npWidth\n\n\nspecies\n\n\ntotalLength\n\n\n\n\n\n\n100\n\n\n6.3\n\n\n3.3\n\n\n6.0\n\n\n2.5\n\n\nvirginica\n\n\n9.15\n\n\n\n\n101\n\n\n5.8\n\n\n2.7\n\n\n5.1\n\n\n1.9\n\n\nvirginica\n\n\n8.00\n\n\n\n\n102\n\n\n7.1\n\n\n3.0\n\n\n5.9\n\n\n2.1\n\n\nvirginica\n\n\n9.45\n\n\n\n\n103\n\n\n6.3\n\n\n2.9\n\n\n5.6\n\n\n1.8\n\n\nvirginica\n\n\n8.75",
    "crumbs": [
      "lectures",
      "Dataframes"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#selecting-lines-and-columns",
    "href": "slides/session_2/index.html#selecting-lines-and-columns",
    "title": "Dataframes",
    "section": "Selecting lines and columns",
    "text": "Selecting lines and columns\n\nsometimes, one wants finer control about which lines and columns to select:\n\nuse df.loc[...] which can be indexed as a matrix\n\n\ndf.loc[0:4, 'species']\n0    setosa\n1    setosa\n2    setosa\n3    setosa\n4    setosa\nName: species, dtype: object",
    "crumbs": [
      "lectures",
      "Dataframes"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#combine-everything",
    "href": "slides/session_2/index.html#combine-everything",
    "title": "Dataframes",
    "section": "Combine everything",
    "text": "Combine everything\n\nHere is an example combiing serveral techniques\n\nLet’s change the way totalLength is computed, but only for ‘virginica’\n\nindex = (df['species']=='virginica')\ndf.loc[index,'totalLength'] = df.loc[index,'sLength'] + 1.5*df[index]['pLength']",
    "crumbs": [
      "lectures",
      "Dataframes"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#section-1",
    "href": "slides/session_2/index.html#section-1",
    "title": "Dataframes",
    "section": "",
    "text": "The following code creates two example databases.\ntxt_wide = \"\"\"year,france,usa\n2018,950.0,2500.0\n2019,960.0,2150.0\n2020,1000.0,2300.0\n\"\"\"\nopen('dummy_file_wide.csv','w').write(txt_wide) # we write it to a file\n71\ntxt_long = \"\"\"year,country,measure\n2018,\"france\",950.0\n2019,\"france\",960.0\n2020,\"france\",1000.0\n2018,\"usa\",2500.0\n2019,\"usa\",2150.0\n2020,\"usa\",2300.0\n\"\"\"\nopen('dummy_file_long.csv','w').write(txt_long) # we write it to a file\n136\ndf_long = pd.read_csv(\"dummy_file_long.csv\")\ndf_wide = pd.read_csv(\"dummy_file_wide.csv\")",
    "crumbs": [
      "lectures",
      "Dataframes"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#wide-vs-long-format-1",
    "href": "slides/session_2/index.html#wide-vs-long-format-1",
    "title": "Dataframes",
    "section": "Wide vs Long format (1)",
    "text": "Wide vs Long format (1)\nCompare the following tables\n\n\ndf_wide\n\n\n\n\n\n\n\n\nyear\n\n\nfrance\n\n\nusa\n\n\n\n\n\n\n0\n\n\n2018\n\n\n950.0\n\n\n2500.0\n\n\n\n\n1\n\n\n2019\n\n\n960.0\n\n\n2150.0\n\n\n\n\n2\n\n\n2020\n\n\n1000.0\n\n\n2300.0\n\n\n\n\n\n\n\ndf_long\n\n\n\n\n\n\n\n\nyear\n\n\ncountry\n\n\nmeasure\n\n\n\n\n\n\n0\n\n\n2018\n\n\nfrance\n\n\n950.0\n\n\n\n\n1\n\n\n2019\n\n\nfrance\n\n\n960.0\n\n\n\n\n2\n\n\n2020\n\n\nfrance\n\n\n1000.0\n\n\n\n\n3\n\n\n2018\n\n\nusa\n\n\n2500.0\n\n\n\n\n4\n\n\n2019\n\n\nusa\n\n\n2150.0\n\n\n\n\n5\n\n\n2020\n\n\nusa\n\n\n2300.0",
    "crumbs": [
      "lectures",
      "Dataframes"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#wide-vs-long-format-2",
    "href": "slides/session_2/index.html#wide-vs-long-format-2",
    "title": "Dataframes",
    "section": "Wide vs Long format (2)",
    "text": "Wide vs Long format (2)\n\nin long format: each line is an independent observation\n\ntwo lines may belong to the same category (year, or country)\nall values are given in the same column\ntheir types/categories are given in another column\n\nin wide format: some observations are grouped\n\nin the example it is grouped by year\nvalues of different kinds are in different columns\nthe types/categories are stored as column names\n\nboth representations are useful",
    "crumbs": [
      "lectures",
      "Dataframes"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#tidy-data",
    "href": "slides/session_2/index.html#tidy-data",
    "title": "Dataframes",
    "section": "Tidy data:",
    "text": "Tidy data:\n\ntidy data:\n\nevery column is a variable.\nevery row is an observation.\nevery cell is a single value.\n\na very good format for:\n\nquick visualization\ndata analysis",
    "crumbs": [
      "lectures",
      "Dataframes"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#converting-from-wide-to-long",
    "href": "slides/session_2/index.html#converting-from-wide-to-long",
    "title": "Dataframes",
    "section": "Converting from Wide to Long",
    "text": "Converting from Wide to Long\ndf_wide.melt(id_vars='year')\n\n\n\n\n\n\n\n\nyear\n\n\nvariable\n\n\nvalue\n\n\n\n\n\n\n0\n\n\n2018\n\n\nfrance\n\n\n950.0\n\n\n\n\n1\n\n\n2019\n\n\nfrance\n\n\n960.0\n\n\n\n\n2\n\n\n2020\n\n\nfrance\n\n\n1000.0\n\n\n\n\n3\n\n\n2018\n\n\nusa\n\n\n2500.0\n\n\n\n\n4\n\n\n2019\n\n\nusa\n\n\n2150.0\n\n\n\n\n5\n\n\n2020\n\n\nusa\n\n\n2300.0",
    "crumbs": [
      "lectures",
      "Dataframes"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#converting-from-long-to-wide",
    "href": "slides/session_2/index.html#converting-from-long-to-wide",
    "title": "Dataframes",
    "section": "Converting from Long to Wide",
    "text": "Converting from Long to Wide\ndf_ = df_long.pivot(index='year', columns='country')\ndf_\n\n\n\n\n\n\n\n\nmeasure\n\n\n\n\ncountry\n\n\nfrance\n\n\nusa\n\n\n\n\nyear\n\n\n\n\n\n\n\n\n\n\n2018\n\n\n950.0\n\n\n2500.0\n\n\n\n\n2019\n\n\n960.0\n\n\n2150.0\n\n\n\n\n2020\n\n\n1000.0\n\n\n2300.0\n\n\n\n\n\n# the result of pivot has a \"hierarchical index\"\n# let's change columns names\ndf_.columns = df_.columns.get_level_values(1)\ndf_\n\n\n\n\n\n\ncountry\n\n\nfrance\n\n\nusa\n\n\n\n\nyear\n\n\n\n\n\n\n\n\n\n\n2018\n\n\n950.0\n\n\n2500.0\n\n\n\n\n2019\n\n\n960.0\n\n\n2150.0\n\n\n\n\n2020\n\n\n1000.0\n\n\n2300.0",
    "crumbs": [
      "lectures",
      "Dataframes"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#groupby",
    "href": "slides/session_2/index.html#groupby",
    "title": "Dataframes",
    "section": "groupby",
    "text": "groupby\n\ngroupby is a very powerful function which can be used to work directly on data in the long format.\n\nfor instance to compute averages per country\n\ndf_long.groupby(\"country\").mean()\n\n\n\n\n\n\n\n\n\nyear\n\n\nmeasure\n\n\n\n\ncountry\n\n\n\n\n\n\n\n\n\n\nfrance\n\n\n2019.0\n\n\n970.000000\n\n\n\n\nusa\n\n\n2019.0\n\n\n2316.666667\n\n\n\n\n\n\nYou can perform several aggregations at the same time:\n\ndf_long.groupby(\"country\").agg(['mean','std'])",
    "crumbs": [
      "lectures",
      "Dataframes"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#merging-two-dataframes",
    "href": "slides/session_2/index.html#merging-two-dataframes",
    "title": "Dataframes",
    "section": "Merging two dataframes",
    "text": "Merging two dataframes\n\nSuppose we have two dataframes, with related observations\nHow can we construct one single database with all informations?\nAnswer:\n\nconcat if long format\nmerge databases if wide format\n\nLots of subtleties when data gets complicated\n\nwe’ll see them in due time\n\n\n\ntxt_long_1 = \"\"\"year,country,measure\n2018,\"france\",950.0\n2019,\"france\",960.0\n2020,\"france\",1000.0\n2018,\"usa\",2500.0\n2019,\"usa\",2150.0\n2020,\"usa\",2300.0\n\"\"\"\nopen(\"dummy_long_1.csv\",'w').write(txt_long_1)\ntxt_long_2 = \"\"\"year,country,recipient\n2018,\"france\",maxime\n2019,\"france\",mauricette\n2020,\"france\",mathilde\n2018,\"usa\",sherlock\n2019,\"usa\",watson\n2020,\"usa\",moriarty\n\"\"\"\nopen(\"dummy_long_2.csv\",'w').write(txt_long_2)\ndf_long_1 = pd.read_csv('dummy_long_1.csv')\ndf_long_2 = pd.read_csv('dummy_long_2.csv')",
    "crumbs": [
      "lectures",
      "Dataframes"
    ]
  },
  {
    "objectID": "slides/session_2/index.html#merging-two-dataframes-with-pandas",
    "href": "slides/session_2/index.html#merging-two-dataframes-with-pandas",
    "title": "Dataframes",
    "section": "Merging two DataFrames with pandas",
    "text": "Merging two DataFrames with pandas\ndf_long_1.merge(df_long_2)\n\n\n\n\n\n\n\n\nyear\n\n\ncountry\n\n\nmeasure\n\n\nrecipient\n\n\n\n\n\n\n0\n\n\n2018\n\n\nfrance\n\n\n950.0\n\n\nmaxime\n\n\n\n\n1\n\n\n2019\n\n\nfrance\n\n\n960.0\n\n\nmauricette\n\n\n\n\n2\n\n\n2020\n\n\nfrance\n\n\n1000.0\n\n\nmathilde\n\n\n\n\n3\n\n\n2018\n\n\nusa\n\n\n2500.0\n\n\nsherlock\n\n\n\n\n4\n\n\n2019\n\n\nusa\n\n\n2150.0\n\n\nwatson\n\n\n\n\n5\n\n\n2020\n\n\nusa\n\n\n2300.0\n\n\nmoriarty",
    "crumbs": [
      "lectures",
      "Dataframes"
    ]
  },
  {
    "objectID": "slides/session_2/slides.html#dataframe",
    "href": "slides/session_2/slides.html#dataframe",
    "title": "Dataframes",
    "section": "DataFrame",
    "text": "DataFrame\n\n\n\nA DataFrame (aka a table) is a 2-D labeled data structure with columns\n\neach column has a specific type and a column name\ntypes: quantitative, qualitative (ordered, non-ordered, …)\n\nFirst column is special: the index\nfirst goal of an econometrician: constitute a good dataframe\n\naka “cleaning the data”"
  },
  {
    "objectID": "slides/session_2/slides.html#dataframes-are-everywhere",
    "href": "slides/session_2/slides.html#dataframes-are-everywhere",
    "title": "Dataframes",
    "section": "DataFrames are everywhere",
    "text": "DataFrames are everywhere\n\n\n\n\n\nsometimes data comes from several linked dataframes\n\nrelational database\ncan still be seen conceptually as one dataframe…\n… through a join operation\n\n\n\n\n\ndataframes / relational databases are so ubiquitous a language has been developed for them\n\nSQL\nin the 80s…\n\nprobably worth looking at if you have some “data” ambitions\nyou will see the shadow of SQL everywhere - words like: join, merge, select, insert…\nplenty of resources to learn (example: sqbolt)"
  },
  {
    "objectID": "slides/session_2/slides.html#pandas-1",
    "href": "slides/session_2/slides.html#pandas-1",
    "title": "Dataframes",
    "section": "pandas",
    "text": "pandas\n\npandas = panel + datas\n\na python library created by WesMcKinney\nvery optimized\n\nessentially a dataframe object\nmany options but if in doubt:\n\nminimally sufficient pandas is a small subset of pandas to do everything\n\ntons of online tutorials\n\nofficial documenation doc\nquantecon"
  },
  {
    "objectID": "slides/session_2/slides.html#creating-a-dataframe-1",
    "href": "slides/session_2/slides.html#creating-a-dataframe-1",
    "title": "Dataframes",
    "section": "creating a dataframe (1)",
    "text": "creating a dataframe (1)\n\n\n\nImport pandas\n\npreferably with standard alias pd\n\nimport pandas as pd\nImport a dataframe\n\neach line a different entry in a dictionary\n\n# from a dictionary\nd = {\n  \"country\": [\"USA\", \"UK\", \"France\"],\n  \"comics\": [13, 10, 12]   \n}\npd.DataFrame(d)\n\n\n\n\n\n\n\n\n\n\ncountry\n\n\ncomics\n\n\n\n\n\n\n0\n\n\nUSA\n\n\n13\n\n\n\n\n1\n\n\nUK\n\n\n10\n\n\n\n\n2\n\n\nFrance\n\n\n12"
  },
  {
    "objectID": "slides/session_2/slides.html#creating-a-dataframe-2",
    "href": "slides/session_2/slides.html#creating-a-dataframe-2",
    "title": "Dataframes",
    "section": "creating a dataframe (2)",
    "text": "creating a dataframe (2)\n\nthere are many other ways to create a dataframe\n\nfor instance using a numpy matrix (numpy is a linear algebra library)\n\n# from a matrix\nimport numpy as np\nM = np.array(\n    [[18, 150],\n     [21, 200],\n     [29, 1500]]\n)   \ndf = pd.DataFrame( M, columns=[\"age\", \"travel\"] )\ndf\n\n\n\n\n\n\n\n\n\nage\n\n\ntravel\n\n\n\n\n\n\n0\n\n\n18\n\n\n150\n\n\n\n\n1\n\n\n21\n\n\n200\n\n\n\n\n2\n\n\n29\n\n\n1500"
  },
  {
    "objectID": "slides/session_2/slides.html#common-file-formats",
    "href": "slides/session_2/slides.html#common-file-formats",
    "title": "Dataframes",
    "section": "Common file formats",
    "text": "Common file formats\n\ncomma separated files: csv file\n\noften distributed online\ncan be exported easily from Excel or LibreOffice\n\nstata files: use pd.read_dta()\nexcel files: use pd.read_excel() or xlsreader if unlucky\n\nnote that excel does not store a dataframe (each cell is potentially different)\npostprocessing is needed"
  },
  {
    "objectID": "slides/session_2/slides.html#comma-separated-file",
    "href": "slides/session_2/slides.html#comma-separated-file",
    "title": "Dataframes",
    "section": "Comma separated file",
    "text": "Comma separated file\n\none can actually a file from python\n\ntxt = \"\"\"year,country,measure\n2018,\"france\",950.0\n2019,\"france\",960.0\n2020,\"france\",1000.0\n2018,\"usa\",2500.0\n2019,\"usa\",2150.0\n2020,\"usa\",2300.0\n\"\"\"\nopen('dummy_file.csv','w').write(txt) # we write it to a file\n\nand import it\n\ndf = pd.read_csv('dummy_file.csv') # what index should we use ?\ndf\n\n\n\n\n\n\n\n\nyear\n\n\ncountry\n\n\nmeasure\n\n\n\n\n\n\n0\n\n\n2018\n\n\nfrance\n\n\n950.0\n\n\n\n\n1\n\n\n2019\n\n\nfrance\n\n\n960.0\n\n\n\n\n2\n\n\n2020\n\n\nfrance\n\n\n1000.0\n\n\n\n\n3\n\n\n2018\n\n\nusa\n\n\n2500.0\n\n\n\n\n4\n\n\n2019\n\n\nusa\n\n\n2150.0\n\n\n\n\n5\n\n\n2020\n\n\nusa\n\n\n2300.0"
  },
  {
    "objectID": "slides/session_2/slides.html#annoying-comma-separated-file",
    "href": "slides/session_2/slides.html#annoying-comma-separated-file",
    "title": "Dataframes",
    "section": "“Annoying” Comma Separated File",
    "text": "“Annoying” Comma Separated File\n\nSometimes, comma-separated files, are not quite comma-separated…\n\ninspect the file with a text editor to see what it contains\n\nthe kind of separator, whether there are quotes…\n\ntxt = \"\"\"year;country;measure\n2018;\"france\";950.0\n2019;\"france\";960.0\n2020;\"france\";1000.0\n2018;\"usa\";2500.0\n2019;\"usa\";2150.0\n2020;\"usa\";2300.0\n\"\"\"\nopen('annoying_dummy_file.csv','w').write(txt) # we write it to a file\n\nadd relevant options to pd.read_csv and check result\n\npd.read_csv(\"annoying_dummy_file.csv\", sep=\";\")\n\n\n\n\n\n\n\n\nyear\n\n\ncountry\n\n\nmeasure\n\n\n\n\n\n\n0\n\n\n2018\n\n\nfrance\n\n\n950.0\n\n\n\n\n1\n\n\n2019\n\n\nfrance\n\n\n960.0\n\n\n\n\n2\n\n\n2020\n\n\nfrance\n\n\n1000.0\n\n\n\n\n3\n\n\n2018\n\n\nusa\n\n\n2500.0\n\n\n\n\n4\n\n\n2019\n\n\nusa\n\n\n2150.0\n\n\n\n\n5\n\n\n2020\n\n\nusa\n\n\n2300.0"
  },
  {
    "objectID": "slides/session_2/slides.html#exporting-a-dataframe",
    "href": "slides/session_2/slides.html#exporting-a-dataframe",
    "title": "Dataframes",
    "section": "Exporting a DataFrame",
    "text": "Exporting a DataFrame\n\npandas can export to many formats: df.to_...\nto (standard) CSV\n\nprint( df.to_csv() )\n,year,country,measure\n0,2018,france,950.0\n1,2019,france,960.0\n2,2020,france,1000.0\n3,2018,usa,2500.0\n4,2019,usa,2150.0\n5,2020,usa,2300.0\n\nor to stata\n\ndf.to_stata('dummy_example.dta')"
  },
  {
    "objectID": "slides/session_2/slides.html#types-of-data-sources",
    "href": "slides/session_2/slides.html#types-of-data-sources",
    "title": "Dataframes",
    "section": "Types of Data Sources",
    "text": "Types of Data Sources\n\n\n\nWhere can we get data from ?\n\ncheck one of the databases lists kaggle, econ network\n\nOfficial websites\n\noften in csv form\nunpractical applications\nsometimes unavoidable\nopen data trend: more unstructured data\n\nData providers\n\nsupply an API (i.e. easy to use function)"
  },
  {
    "objectID": "slides/session_2/slides.html#data-providers",
    "href": "slides/session_2/slides.html#data-providers",
    "title": "Dataframes",
    "section": "Data providers",
    "text": "Data providers\n\ncommercial ones:\n\nbloomberg, macrobond, factsets, quandl …\n\nfree ones available as a python library\n\ndbnomics: many official time-series\nqeds: databases used by quantecon\nvega-datasets: distributed with altair"
  },
  {
    "objectID": "slides/session_2/slides.html#dbnomics-example",
    "href": "slides/session_2/slides.html#dbnomics-example",
    "title": "Dataframes",
    "section": "DBnomics example",
    "text": "DBnomics example\n\nDBnomics aggregates time series from various public sources\ndata is organized as provider/database/series\ntry to find the identifer of one or several series\n\nimport dbnomics\ndf = dbnomics.fetch_series('AMECO/ZUTN/EA19.1.0.0.0.ZUTN')\n\ntip: in case one python package is missing, it can be installed on the fly as in\n\n!pip install dbnomics"
  },
  {
    "objectID": "slides/session_2/slides.html#inspecting-data",
    "href": "slides/session_2/slides.html#inspecting-data",
    "title": "Dataframes",
    "section": "Inspecting data",
    "text": "Inspecting data\n\nonce the data is loaded as df, we want to look at some basic properties:\ngeneral\n\ndf.head(5) # 5 first lines\ndf.tail(5) # 5 first lines\ndf.describe() # general summary\n\ncentral tendency\n\ndf.mean() # average\ndf.median() # median\n\nspread\n\ndf.std() # standard deviations\ndf.var() # variance\ndf.min(), df.max() # bounds\n\ncounts (for categorical variable\n\ndf.count()"
  },
  {
    "objectID": "slides/session_2/slides.html#changing-names-of-columns",
    "href": "slides/session_2/slides.html#changing-names-of-columns",
    "title": "Dataframes",
    "section": "Changing names of columns",
    "text": "Changing names of columns\n\nColumns are defined by property df.columns\n\ndf.columns\nIndex(['sepalLength', 'sepalWidth', 'petalLength', 'petalWidth', 'species'], dtype='object')\n\nThis property can be set with a list of the right length\n\ndf.columns = ['sLength', 'sWidth', 'pLength', 'pWidth', 'species']\ndf.head(2)\n\n\n\n\n\n\n\n\nsLength\n\n\nsWidth\n\n\npLength\n\n\npWidth\n\n\nspecies\n\n\n\n\n\n\n0\n\n\n5.1\n\n\n3.5\n\n\n1.4\n\n\n0.2\n\n\nsetosa\n\n\n\n\n1\n\n\n4.9\n\n\n3.0\n\n\n1.4\n\n\n0.2\n\n\nsetosa"
  },
  {
    "objectID": "slides/session_2/slides.html#indexing-a-column",
    "href": "slides/session_2/slides.html#indexing-a-column",
    "title": "Dataframes",
    "section": "Indexing a column",
    "text": "Indexing a column\n\nA column can be extracted using its name as in a dictionary (like df['sLength'])\n\nseries = df['sWidth'] # note the resulting object: a series\nseries\n0      3.5\n1      3.0\n      ... \n148    3.4\n149    3.0\nName: sWidth, Length: 150, dtype: float64\n\nThe result is a series object (typed values with a name and an index)\nIt has its own set of methods\n\ntry:\n\nseries.mean(), series.std()\nseries.plot()\nseries.diff()\n\ncreates \\(y_t = x_t-x_{t-1}\\)\n\nseries.pct_change()\n\ncreates \\(y_t = \\frac{x_t-x_{t-1}}{x_{t-1}}\\)"
  },
  {
    "objectID": "slides/session_2/slides.html#creating-a-new-column",
    "href": "slides/session_2/slides.html#creating-a-new-column",
    "title": "Dataframes",
    "section": "Creating a new column",
    "text": "Creating a new column\n\nIt is possible to create a new column by combining existing ones\n\ndf['totalLength'] = df['pLength'] + df['sLength']\n# this would also work\ndf['totalLength'] = 0.5*df['pLength'] + 0.5*df['sLength']\ndf.head(2)\n\n\n\n\n\n\n\n\nsLength\n\n\nsWidth\n\n\npLength\n\n\npWidth\n\n\nspecies\n\n\ntotalLength\n\n\n\n\n\n\n0\n\n\n5.1\n\n\n3.5\n\n\n1.4\n\n\n0.2\n\n\nsetosa\n\n\n6.5\n\n\n\n\n1\n\n\n4.9\n\n\n3.0\n\n\n1.4\n\n\n0.2\n\n\nsetosa\n\n\n6.3"
  },
  {
    "objectID": "slides/session_2/slides.html#replacing-a-column",
    "href": "slides/session_2/slides.html#replacing-a-column",
    "title": "Dataframes",
    "section": "Replacing a column",
    "text": "Replacing a column\n\nAn existing column can be replaced with the same syntax.\n\ndf['totalLength'] = df['pLength'] + df['sLength']*0.5\ndf.head(2)\n\n\n\n\n\n\n\n\nsLength\n\n\nsWidth\n\n\npLength\n\n\npWidth\n\n\nspecies\n\n\ntotalLength\n\n\n\n\n\n\n0\n\n\n5.1\n\n\n3.5\n\n\n1.4\n\n\n0.2\n\n\nsetosa\n\n\n3.95\n\n\n\n\n1\n\n\n4.9\n\n\n3.0\n\n\n1.4\n\n\n0.2\n\n\nsetosa\n\n\n3.85"
  },
  {
    "objectID": "slides/session_2/slides.html#selecting-several-columns",
    "href": "slides/session_2/slides.html#selecting-several-columns",
    "title": "Dataframes",
    "section": "Selecting several columns",
    "text": "Selecting several columns\n\nIndex with a list of column names\n\ne = df[ ['pLength', 'sLength'] ]\ne.head(3)\n\n\n\n\n\n\n\n\npLength\n\n\nsLength\n\n\n\n\n\n\n0\n\n\n1.4\n\n\n5.1\n\n\n\n\n1\n\n\n1.4\n\n\n4.9\n\n\n\n\n2\n\n\n1.3\n\n\n4.7"
  },
  {
    "objectID": "slides/session_2/slides.html#selecting-lines-1",
    "href": "slides/session_2/slides.html#selecting-lines-1",
    "title": "Dataframes",
    "section": "Selecting lines (1)",
    "text": "Selecting lines (1)\n\nuse index range\n\n☡: in Python the end of a range is not included !\n\ndf[2:4]\n\n\n\n\n\n\n\n\n\nsLength\n\n\nsWidth\n\n\npLength\n\n\npWidth\n\n\nspecies\n\n\ntotalLength\n\n\n\n\n\n\n2\n\n\n4.7\n\n\n3.2\n\n\n1.3\n\n\n0.2\n\n\nsetosa\n\n\n3.65\n\n\n\n\n3\n\n\n4.6\n\n\n3.1\n\n\n1.5\n\n\n0.2\n\n\nsetosa\n\n\n3.80"
  },
  {
    "objectID": "slides/session_2/slides.html#selecting-lines-2",
    "href": "slides/session_2/slides.html#selecting-lines-2",
    "title": "Dataframes",
    "section": "Selecting lines (2)",
    "text": "Selecting lines (2)\n\nlet’s look at unique species\n\ndf['species'].unique()\narray(['setosa', 'versicolor', 'virginica'], dtype=object)\n\nwe would like to keep only the lines with virginica\n\nbool_ind = df['species'] == 'virginica' # this is a boolean serie\n\nthe result is a boolean series, where each element tells whether a line should be kept or not\n\ne = df[ bool_ind ]\ne.head(4)\n\nif you want you can keep the recipe:\n\ndf[df['species'] == 'virginica']\n\nto keep lines where species is equal to virginica\n\n\n\n\n\n\n\n\n\nsLength\n\n\nsWidth\n\n\npLength\n\n\npWidth\n\n\nspecies\n\n\ntotalLength\n\n\n\n\n\n\n100\n\n\n6.3\n\n\n3.3\n\n\n6.0\n\n\n2.5\n\n\nvirginica\n\n\n9.15\n\n\n\n\n101\n\n\n5.8\n\n\n2.7\n\n\n5.1\n\n\n1.9\n\n\nvirginica\n\n\n8.00\n\n\n\n\n102\n\n\n7.1\n\n\n3.0\n\n\n5.9\n\n\n2.1\n\n\nvirginica\n\n\n9.45\n\n\n\n\n103\n\n\n6.3\n\n\n2.9\n\n\n5.6\n\n\n1.8\n\n\nvirginica\n\n\n8.75"
  },
  {
    "objectID": "slides/session_2/slides.html#selecting-lines-and-columns",
    "href": "slides/session_2/slides.html#selecting-lines-and-columns",
    "title": "Dataframes",
    "section": "Selecting lines and columns",
    "text": "Selecting lines and columns\n\nsometimes, one wants finer control about which lines and columns to select:\n\nuse df.loc[...] which can be indexed as a matrix\n\n\ndf.loc[0:4, 'species']\n0    setosa\n1    setosa\n2    setosa\n3    setosa\n4    setosa\nName: species, dtype: object"
  },
  {
    "objectID": "slides/session_2/slides.html#combine-everything",
    "href": "slides/session_2/slides.html#combine-everything",
    "title": "Dataframes",
    "section": "Combine everything",
    "text": "Combine everything\n\nHere is an example combiing serveral techniques\n\nLet’s change the way totalLength is computed, but only for ‘virginica’\n\nindex = (df['species']=='virginica')\ndf.loc[index,'totalLength'] = df.loc[index,'sLength'] + 1.5*df[index]['pLength']"
  },
  {
    "objectID": "slides/session_2/slides.html#section-1",
    "href": "slides/session_2/slides.html#section-1",
    "title": "Dataframes",
    "section": "",
    "text": "The following code creates two example databases.\ntxt_wide = \"\"\"year,france,usa\n2018,950.0,2500.0\n2019,960.0,2150.0\n2020,1000.0,2300.0\n\"\"\"\nopen('dummy_file_wide.csv','w').write(txt_wide) # we write it to a file\n71\ntxt_long = \"\"\"year,country,measure\n2018,\"france\",950.0\n2019,\"france\",960.0\n2020,\"france\",1000.0\n2018,\"usa\",2500.0\n2019,\"usa\",2150.0\n2020,\"usa\",2300.0\n\"\"\"\nopen('dummy_file_long.csv','w').write(txt_long) # we write it to a file\n136\ndf_long = pd.read_csv(\"dummy_file_long.csv\")\ndf_wide = pd.read_csv(\"dummy_file_wide.csv\")"
  },
  {
    "objectID": "slides/session_2/slides.html#wide-vs-long-format-1",
    "href": "slides/session_2/slides.html#wide-vs-long-format-1",
    "title": "Dataframes",
    "section": "Wide vs Long format (1)",
    "text": "Wide vs Long format (1)\nCompare the following tables\n\n\ndf_wide\n\n\n\n\n\n\n\n\nyear\n\n\nfrance\n\n\nusa\n\n\n\n\n\n\n0\n\n\n2018\n\n\n950.0\n\n\n2500.0\n\n\n\n\n1\n\n\n2019\n\n\n960.0\n\n\n2150.0\n\n\n\n\n2\n\n\n2020\n\n\n1000.0\n\n\n2300.0\n\n\n\n\n\n\n\ndf_long\n\n\n\n\n\n\n\n\nyear\n\n\ncountry\n\n\nmeasure\n\n\n\n\n\n\n0\n\n\n2018\n\n\nfrance\n\n\n950.0\n\n\n\n\n1\n\n\n2019\n\n\nfrance\n\n\n960.0\n\n\n\n\n2\n\n\n2020\n\n\nfrance\n\n\n1000.0\n\n\n\n\n3\n\n\n2018\n\n\nusa\n\n\n2500.0\n\n\n\n\n4\n\n\n2019\n\n\nusa\n\n\n2150.0\n\n\n\n\n5\n\n\n2020\n\n\nusa\n\n\n2300.0"
  },
  {
    "objectID": "slides/session_2/slides.html#wide-vs-long-format-2",
    "href": "slides/session_2/slides.html#wide-vs-long-format-2",
    "title": "Dataframes",
    "section": "Wide vs Long format (2)",
    "text": "Wide vs Long format (2)\n\nin long format: each line is an independent observation\n\ntwo lines may belong to the same category (year, or country)\nall values are given in the same column\ntheir types/categories are given in another column\n\nin wide format: some observations are grouped\n\nin the example it is grouped by year\nvalues of different kinds are in different columns\nthe types/categories are stored as column names\n\nboth representations are useful"
  },
  {
    "objectID": "slides/session_2/slides.html#tidy-data",
    "href": "slides/session_2/slides.html#tidy-data",
    "title": "Dataframes",
    "section": "Tidy data:",
    "text": "Tidy data:\n\ntidy data:\n\nevery column is a variable.\nevery row is an observation.\nevery cell is a single value.\n\na very good format for:\n\nquick visualization\ndata analysis"
  },
  {
    "objectID": "slides/session_2/slides.html#converting-from-wide-to-long",
    "href": "slides/session_2/slides.html#converting-from-wide-to-long",
    "title": "Dataframes",
    "section": "Converting from Wide to Long",
    "text": "Converting from Wide to Long\ndf_wide.melt(id_vars='year')\n\n\n\n\n\n\n\n\nyear\n\n\nvariable\n\n\nvalue\n\n\n\n\n\n\n0\n\n\n2018\n\n\nfrance\n\n\n950.0\n\n\n\n\n1\n\n\n2019\n\n\nfrance\n\n\n960.0\n\n\n\n\n2\n\n\n2020\n\n\nfrance\n\n\n1000.0\n\n\n\n\n3\n\n\n2018\n\n\nusa\n\n\n2500.0\n\n\n\n\n4\n\n\n2019\n\n\nusa\n\n\n2150.0\n\n\n\n\n5\n\n\n2020\n\n\nusa\n\n\n2300.0"
  },
  {
    "objectID": "slides/session_2/slides.html#converting-from-long-to-wide",
    "href": "slides/session_2/slides.html#converting-from-long-to-wide",
    "title": "Dataframes",
    "section": "Converting from Long to Wide",
    "text": "Converting from Long to Wide\ndf_ = df_long.pivot(index='year', columns='country')\ndf_\n\n\n\n\n\n\n\n\nmeasure\n\n\n\n\ncountry\n\n\nfrance\n\n\nusa\n\n\n\n\nyear\n\n\n\n\n\n\n\n\n\n\n2018\n\n\n950.0\n\n\n2500.0\n\n\n\n\n2019\n\n\n960.0\n\n\n2150.0\n\n\n\n\n2020\n\n\n1000.0\n\n\n2300.0\n\n\n\n\n\n# the result of pivot has a \"hierarchical index\"\n# let's change columns names\ndf_.columns = df_.columns.get_level_values(1)\ndf_\n\n\n\n\n\n\ncountry\n\n\nfrance\n\n\nusa\n\n\n\n\nyear\n\n\n\n\n\n\n\n\n\n\n2018\n\n\n950.0\n\n\n2500.0\n\n\n\n\n2019\n\n\n960.0\n\n\n2150.0\n\n\n\n\n2020\n\n\n1000.0\n\n\n2300.0"
  },
  {
    "objectID": "slides/session_2/slides.html#groupby",
    "href": "slides/session_2/slides.html#groupby",
    "title": "Dataframes",
    "section": "groupby",
    "text": "groupby\n\ngroupby is a very powerful function which can be used to work directly on data in the long format.\n\nfor instance to compute averages per country\n\ndf_long.groupby(\"country\").mean()\n\n\n\n\n\n\n\n\n\nyear\n\n\nmeasure\n\n\n\n\ncountry\n\n\n\n\n\n\n\n\n\n\nfrance\n\n\n2019.0\n\n\n970.000000\n\n\n\n\nusa\n\n\n2019.0\n\n\n2316.666667\n\n\n\n\n\n\nYou can perform several aggregations at the same time:\n\ndf_long.groupby(\"country\").agg(['mean','std'])"
  },
  {
    "objectID": "slides/session_2/slides.html#merging-two-dataframes",
    "href": "slides/session_2/slides.html#merging-two-dataframes",
    "title": "Dataframes",
    "section": "Merging two dataframes",
    "text": "Merging two dataframes\n\nSuppose we have two dataframes, with related observations\nHow can we construct one single database with all informations?\nAnswer:\n\nconcat if long format\nmerge databases if wide format\n\nLots of subtleties when data gets complicated\n\nwe’ll see them in due time"
  },
  {
    "objectID": "slides/session_2/slides.html#merging-two-dataframes-with-pandas",
    "href": "slides/session_2/slides.html#merging-two-dataframes-with-pandas",
    "title": "Dataframes",
    "section": "Merging two DataFrames with pandas",
    "text": "Merging two DataFrames with pandas\ndf_long_1.merge(df_long_2)\n\n\n\n\n\n\n\n\nyear\n\n\ncountry\n\n\nmeasure\n\n\nrecipient\n\n\n\n\n\n\n0\n\n\n2018\n\n\nfrance\n\n\n950.0\n\n\nmaxime\n\n\n\n\n1\n\n\n2019\n\n\nfrance\n\n\n960.0\n\n\nmauricette\n\n\n\n\n2\n\n\n2020\n\n\nfrance\n\n\n1000.0\n\n\nmathilde\n\n\n\n\n3\n\n\n2018\n\n\nusa\n\n\n2500.0\n\n\nsherlock\n\n\n\n\n4\n\n\n2019\n\n\nusa\n\n\n2150.0\n\n\nwatson\n\n\n\n\n5\n\n\n2020\n\n\nusa\n\n\n2300.0\n\n\nmoriarty"
  },
  {
    "objectID": "slides/session_2/Exercises.html",
    "href": "slides/session_2/Exercises.html",
    "title": "Exercises",
    "section": "",
    "text": "Define a vector x with 1000 regularly spaced elements between 0 and 10\nDefine a vector y representing \\(y=sin(x)\\)\nDefine a vector y1 representing \\(y=abs(sin(x))\\)\nDefine a vector y2 representing \\(y=sin(x) \\text{if} y&gt;0.1 \\text{else} 0.1\\)\nPlot y, y1, y2 against x\n\n\n\n\n\nSet T=100, rho=0.9, sigma=0.01. We consider an autoregressive process \\(x_t=\\rho x_{t-1} + \\epsilon_t\\) where \\(\\epsilon_t\\) is normally distributed with standard deviation \\(\\sigma\\)\nCreate an empty vector x = np.zeros(T)\nLoop over t&gt;0 and fill x[t] so that x represents a simulation for t periods of process \\(x_t\\)\nUse function hpfilter from statsmodels (google it). It returns a and a residual\nPlot the simulated series, the filtered series and the residual"
  },
  {
    "objectID": "slides/session_2/Exercises.html#numerical-python",
    "href": "slides/session_2/Exercises.html#numerical-python",
    "title": "Exercises",
    "section": "",
    "text": "Define a vector x with 1000 regularly spaced elements between 0 and 10\nDefine a vector y representing \\(y=sin(x)\\)\nDefine a vector y1 representing \\(y=abs(sin(x))\\)\nDefine a vector y2 representing \\(y=sin(x) \\text{if} y&gt;0.1 \\text{else} 0.1\\)\nPlot y, y1, y2 against x\n\n\n\n\n\nSet T=100, rho=0.9, sigma=0.01. We consider an autoregressive process \\(x_t=\\rho x_{t-1} + \\epsilon_t\\) where \\(\\epsilon_t\\) is normally distributed with standard deviation \\(\\sigma\\)\nCreate an empty vector x = np.zeros(T)\nLoop over t&gt;0 and fill x[t] so that x represents a simulation for t periods of process \\(x_t\\)\nUse function hpfilter from statsmodels (google it). It returns a and a residual\nPlot the simulated series, the filtered series and the residual"
  },
  {
    "objectID": "slides/session_2/Exercises.html#iris-data-set",
    "href": "slides/session_2/Exercises.html#iris-data-set",
    "title": "Exercises",
    "section": "Iris Data Set",
    "text": "Iris Data Set\nYou will need the library vega_datasets and the altair library. You can install them with !pip install vega_datasets and !pip install altair Load the iris database.\n\nPrint statistics (mean, std), by flower, for each characteristics.\nUse matplotlib to make correlation plots, betwen flowers characteristics. (for instance, plot sepalWidth against sepalLength. Ideally, use different shapes or colors for various flowers.\nConvert the database to long format\nUse altair, to plot correlation between two characteristics, with different color for each flower. Plot all correlations."
  },
  {
    "objectID": "slides/session_2/Exercises.html#philips-curve-and-okuns-law",
    "href": "slides/session_2/Exercises.html#philips-curve-and-okuns-law",
    "title": "Exercises",
    "section": "Philips Curve and Okun’s Law",
    "text": "Philips Curve and Okun’s Law\nIf needed, install dbnomics with !pip install dbnomics.\n\nDownload inflation, unemployment and gdp series from France.\nCompute growth rate of gdp.\nPlot two graphs two verify graphically the Phillips curve (unemployment against inflation) and Okun’s law (unemployment against output)."
  },
  {
    "objectID": "homework/2024/homework.html",
    "href": "homework/2024/homework.html",
    "title": "Data-Based Economics: Coursework",
    "section": "",
    "text": "Students (up to 3):\nWhen working on the questions below, don’t hesitate to take some initiatives. In particular, if you don’t find how to answer a particular question (and you have asked 😉), feel free to propose a workaround.\nYour work will be evaluated in the following dimensions:\nThis homework is partly based on one of the projects from the excellent Doing economics section of the Core Econ website.\nDon’t hesitate to browse the website to get more context. You can even check the solutions in R to get an idea of what you can do."
  },
  {
    "objectID": "homework/2024/homework.html#import-the",
    "href": "homework/2024/homework.html#import-the",
    "title": "Data-Based Economics: Coursework",
    "section": "Import the",
    "text": "Import the\nThe data originates from the EVS project (https://search.gesis.org/research_data/ZA4804). It has been used in the article Employment status and subjective well-being: the role of the social norm to work.\nLoosely following the spirit of the authors work, our goal will be to investigate one channel through wich unemployement can lead to lower life satisfaction. The general hypothesis is that social norms are key to the subjective disutility of being unemployed. In this notebook we focus on one particular called work ethic.\n\nimport pandas as pd\n\nQuestion 1\nOpen the economics.xlsx workbook with excel. Fill the first sheet using the ZA4804_EVS_VariableCorrespondence.pdf file. Upload the resulting file and run the following code to import the data.\n\n# the following imports the variable correspondances.\nvariables = pd.read_excel(\"economics.xlsx\", sheet_name=0)\n\n\n# check the variable correspondances\nvariables\n\n\n\n\n\n\n\n\nVariable\nNew name\nVariable description\n\n\n\n\n0\nS002EVS\nNaN\nNaN\n\n\n1\nS003\nNaN\nNaN\n\n\n2\nS006\nNaN\nNaN\n\n\n3\nS009\nNaN\nNaN\n\n\n4\nA009\nNaN\nNaN\n\n\n5\nA170\nNaN\nNaN\n\n\n6\nC036\nNaN\nNaN\n\n\n7\nC037\nNaN\nNaN\n\n\n8\nC038\nNaN\nNaN\n\n\n9\nC039\nNaN\nNaN\n\n\n10\nC041\nNaN\nNaN\n\n\n11\nX001\nNaN\nNaN\n\n\n12\nX003\nNaN\nNaN\n\n\n13\nX007\nNaN\nNaN\n\n\n14\nX011_01\nNaN\nNaN\n\n\n15\nX025A\nNaN\nNaN\n\n\n16\nX028\nNaN\nNaN\n\n\n17\nX047D\nNaN\nNaN\n\n\n\n\n\n\n\n\n# we now open the datasets corresponding to the various waves of the study\nsheets = {\n   '8184': pd.read_excel(\"economics.xlsx\", sheet_name=1), # wave 1\n   '9093': pd.read_excel(\"economics.xlsx\", sheet_name=2), # wave 2\n   '9901': pd.read_excel(\"economics.xlsx\", sheet_name=3), # wave 3\n   '0810': pd.read_excel(\"economics.xlsx\", sheet_name=4) # wave 4\n}\n\n\n# we concatenate all sheets into a single dataframe\ndf = pd.concat(sheets, names=['wave'], ignore_index=True)\n\nQuestion 2: describe the dataset. Intuitively, which variables would you associate with a higher disutility of unemployment?"
  },
  {
    "objectID": "homework/2024/homework.html#prepare-the-data",
    "href": "homework/2024/homework.html#prepare-the-data",
    "title": "Data-Based Economics: Coursework",
    "section": "Prepare the data",
    "text": "Prepare the data\nOptional: Change the colum names of df into more meaningful identifiers\nThis will make the code easier to read.\nNote that in the rest of the notebook we use indifferently the variable codes or the extended names.\nQuestion 3: Perform the following cleaning operations:\n\nCurrently all missing values are coded as “.a”. Replace them by pd.NA\nVariable A170 (life satisfaction) is currently a mixture of numbers (2 to 9) and words (‘Satisfied’ and ‘Dissatisfied’), but we would like it to be all numbers. Replace the word ‘Dissatisfied’ with the number 1, and the word ‘Satisfied’ with the number 10.\nVariable X011_01 (number of children) has recorded no children as a word rather than a number. Replace ‘No children’ with the number 0.\nThe variables C036 to C041 should be replaced with numbers ranging from 1 (‘Strongly disagree’) to 5 (‘Strongly agree’) so we can take averages of them later. Similarly, variable A009 should be recoded as 1 = ‘Very poor’, 2 = ‘Poor’, 3 = ‘Fair’, 4 = ‘Good’, 5 = ‘Very good’.\nbonus: Split X025A into two variables, one for the number before the colon, and the other containing the words after the colon.\n\n\ndf[df==\".a\"] = pd.NA\n\n\ndf.loc[df['A170']=='Satisfied','A170'] = 10\ndf.loc[df['A170']=='Dissatisfied','A170'] = 1\n\n\ndf.loc[df['X011_01']=='No children','X011_01'] = 0\n\n\ndf[df==\"Strongly disagree\"] = 1\ndf[df==\"Disagree\"] = 2\ndf[df==\"Neither agree nor disagree\"] = 3\ndf[df==\"Agree\"] = 4\ndf[df==\"Strongly agree\"] = 5\n\n\ndf[df==\"Very poor\"] = 1\ndf[df==\"Poor\"] = 2\ndf[df==\"Fair\"] = 3\ndf[df==\"Good\"] = 4\ndf[df==\"Very good\"] = 5\n\n\ndf['A009'].unique()\n\narray([3, 5, 2, 4, 1, &lt;NA&gt;], dtype=object)\n\n\nQuestion 4: Remove missing values\nIn your dataset, remove all rows in all waves that have missing data for A170. Do the same for:\n\nX003, X028, X007 and X001 in all waves\nA009 in Waves 1, 2, and 4 only\nC036, C037, C038, C039, C041 and X047D in Waves 3 and 4 only\nX011_01 and X025A, in Wave 4.\n\nQuestion 5: Create a new variable work_ethic as the average of columns C036 to C041.\nBonus: Create a variable relative_income which contains income divided by the average income from the relevant country. Why is that a better variable than raw income?"
  },
  {
    "objectID": "homework/2024/homework.html#summary-statistics",
    "href": "homework/2024/homework.html#summary-statistics",
    "title": "Data-Based Economics: Coursework",
    "section": "Summary statistics",
    "text": "Summary statistics\nQuestion 6: First cross-country comparison.\nCreate a table showing the breakdown of each country’s population according to employment status, with country (S003) as the row variable, and employment status (X028) as the column variable. Express the values as percentages of the row total rather than as frequencies. Discuss any differences or similarities between countries that you find interesting.\nQuestion 7: Create a table with descriptive statistics aranged after the following layout. Comment."
  },
  {
    "objectID": "homework/2024/homework.html#visualizing-the-data",
    "href": "homework/2024/homework.html#visualizing-the-data",
    "title": "Data-Based Economics: Coursework",
    "section": "Visualizing the Data",
    "text": "Visualizing the Data\nQuestion 8: the evolution of work ethic.\nUse the data from Wave 3 and Wave 4 only, for one country of your choice: - For this country create a frequency table that contains the frequency of each unique value of the work ethic scores. Also include the percentage of individuals at each value, grouped by Wave 3 and Wave 4 separately. - Plot a column chart showing the distribution of work ethic scores in Wave 3, with the percentage of individuals on the vertical axis and the range of work ethic scores on the horizontal axis. Plot the distribution of scores in Wave 4 on top of the Wave 3 distribution. - Based on your chart does it appear that the attitudes towards work in each country of your choice have changed over time?\nBonus: do the same for another country of your choice and compare.\nQuestion 9: Replicate the same analysis for life satisfaction.\nQuestion 10: for Wave 4 only, compute the correlations of the main variables with life satisfaction and work ethic. It should correspond to the following pattern:\n\nFor employment status and gender, you will need to create new variables: full-time employment should be equal to 1 if full-time employed and 0 if unemployed, and treated as missing data (left as a blank cell) otherwise. Gender should be 0 if male and 1 if female.\nInterpret the coefficients.\nQuestion 11 Using the data from Wave 4, carry out the following\n\nCreate a table showing the average life satisfaction according to employment status (showing the full-time employed, retired, and unemployed categories only) with country (S003) as the row variable, and employment status (X028) as the column variable. Comment on any differences in average life satisfaction between these three groups, and whether social norms is a plausible explanation for these differences.\nUse the table from Question 4(a) to calculate the difference in average life satisfaction (full-time employed minus unemployed, and full-time employed minus retired).\nMake a separate scatterplot for each of these differences in life satisfaction, with average work ethic on the horizontal axis and difference in life satisfaction on the vertical axis.\nFor each difference (employed vs unemployed, employed vs retired), calculate and interpret the correlation coefficient between average work ethic and difference in life satisfaction."
  },
  {
    "objectID": "homework/2024/homework.html#measuring-the-non-monetary-cost-of-unemployment",
    "href": "homework/2024/homework.html#measuring-the-non-monetary-cost-of-unemployment",
    "title": "Data-Based Economics: Coursework",
    "section": "Measuring the non-monetary cost of unemployment",
    "text": "Measuring the non-monetary cost of unemployment\nQuestion 12: using only wave 4, we consider first the following linear regression\n\\(\\text{life satisfaction}_n =  \\alpha + \\beta \\text{unemployment}_n + \\gamma \\text{work ethic}_n\\)\nRun this regression without any other regressor. Comment on the result.\nQuestion 13: we consider now the regression\n\\(\\text{life satisfaction}_n =  \\alpha + \\beta \\text{unemployment}_n + \\gamma \\text{work ethic}_n +  \\text{other regressors}\\)\nWhich regressors would you choose? Can you find the combination that maximizes the predictive power of the regression?\nQuestion 14: the effect of work ethics\nFrom the preceding regression can we cannot conclude about the interaction between work ethics and unemployment.\nTry to answer that question by running the following steps - create one variable high_work_ethic, equal to 1, if work ethic is above average - run the regression from before for two different dataset, one where high_work_ethic is equal to 1, and another where it is equal to 0 - compare the values obtained for \\(\\beta\\) in both cases - interpret - bonus: make a graphical representation\nQuestion 15: interaction term\nAnother common approach consists in running a regression with an interacion term, that is\n\\(\\text{life satisfaction}_n =  \\alpha + \\beta \\text{unemployment}_n + \\gamma \\text{work ethic}_n +\\delta  \\text{unemployment}_n \\times \\text{work ethic}_n+  \\text{other regressors}\\)\nThen if \\(\\delta\\) is negative, higher work ethic implies a stronger effect of unemployment.\nRun that regression and comment.\n(hint: for statsmodels formula, a*b where a and b are regressors is interpreted as a regression part \\(c_1 a+ c_2 b+ c_3 a b\\) where \\(c_1,c_2,c_3\\) are unknown coefficients)"
  },
  {
    "objectID": "homework/2024/homework.html#open-question",
    "href": "homework/2024/homework.html#open-question",
    "title": "Data-Based Economics: Coursework",
    "section": "Open question",
    "text": "Open question\nQuestion 16: propose any another data work using the same dataframe that you find interesting (graph, econometric analysis, machine learning)"
  },
  {
    "objectID": "exam/check.html",
    "href": "exam/check.html",
    "title": "Data-Based Economics (2024)",
    "section": "",
    "text": "Final Exam - Part 1\nThis part is meant to last about one hour. It must be sent as a Nuvolos assignment by 12pm. Don’t worry if it is not finished.\nYou are free to use any online resource.\nIt is however strictly forbidden to communicate with other students.\nIn answering the questions below, don’t hesitate to comment abundantly your code, to reflect on what you are doing and take initiatives when you deem it relevant.\nHappy coding ! 💪"
  },
  {
    "objectID": "exam/check.html#simple-plots",
    "href": "exam/check.html#simple-plots",
    "title": "Data-Based Economics (2024)",
    "section": "Simple Plots",
    "text": "Simple Plots\nQuestion 1: Modify the code below so as to add a grid, a legend (line 1: “f1(x)”, line 2: “f2(x)”), an x-axis label (“x”), a y-axis label (“f(x)”) and a title (“Functions”). \n\nfrom matplotlib import pyplot as plt\nx = [e for e in range(10)]\ny1 = [4*(e/10)*(1-e/10) for e in x]\ny2 = [1-(e/10)*(1-e/10) for e in x]\nplt.plot(x,y1)\nplt.plot(x,y2)\n\n# add some lines here\n\nplt.show()"
  },
  {
    "objectID": "exam/check.html#the-feldstein-horioka-puzzle",
    "href": "exam/check.html#the-feldstein-horioka-puzzle",
    "title": "Data-Based Economics (2024)",
    "section": "The Feldstein-Horioka Puzzle",
    "text": "The Feldstein-Horioka Puzzle\nIn a famous paper, Domestic saving and international capital flows (Economic Journal, 1980), Martin Feldstein and Charles Horioka, exposed the following puzzle:\n\nif international flows of capital were frictionless, capital allocations should be determined by productivity differentials\nas a result, fluctuations in investment in a given country should be primarly explained by capital flows, not domestic savings\nyet, the data shows a strong correlation between domestic saving and domestic investment\n\nIn the original paper, the following regression was run for each country:\n\\[\\frac{I_t}{Y_t} = \\alpha + \\beta \\frac{S_t}{Y_t} + \\epsilon_t\\]\nwhere \\(I_t\\) is investment, \\(Y_t\\) is gdp, \\(S_t\\) is total savings (which can be computed from consumption \\(C_t\\) as \\(Y_t-C_t\\)).\nYour goal is to estimate this relationship for the USA.\nQuestion 2: Which value of \\(\\beta\\) (high \\(\\beta\\) or low \\(\\beta\\)) is associated to a high mobility of capital . Explain.\nThe following code downloads aggregates from the national accounts using dbnomics.\n\nimport dbnomics\n\n\ndf_ = dbnomics.fetch_series([\n    \"OECD/QNA/USA.P5.LNBQRSA.Q\", # investment\n    \"OECD/QNA/USA.B1_GS1.LNBQRSA.Q\", # GDP\n    \"OECD/QNA/USA.P3.LNBQRSA.Q\" # consumption\n]);\ndf_.head()\n\n\n\n\n\n\n\n\n@frequency\nprovider_code\ndataset_code\ndataset_name\nseries_code\nseries_name\noriginal_period\nperiod\noriginal_value\nvalue\nLOCATION\nSUBJECT\nMEASURE\nFREQUENCY\nCountry\nSubject\nMeasure\nFrequency\n\n\n\n\n0\nquarterly\nOECD\nQNA\nQuarterly National Accounts\nUSA.P5.LNBQRSA.Q\nUnited States – Gross capital formation (P5) –...\n1970-Q1\n1970-01-01\n215688.5\n215688.5\nUSA\nP5\nLNBQRSA\nQ\nUnited States\nGross capital formation\nNational currency, chained volume estimates, n...\nQuarterly\n\n\n1\nquarterly\nOECD\nQNA\nQuarterly National Accounts\nUSA.P5.LNBQRSA.Q\nUnited States – Gross capital formation (P5) –...\n1970-Q2\n1970-04-01\n214743.3\n214743.3\nUSA\nP5\nLNBQRSA\nQ\nUnited States\nGross capital formation\nNational currency, chained volume estimates, n...\nQuarterly\n\n\n2\nquarterly\nOECD\nQNA\nQuarterly National Accounts\nUSA.P5.LNBQRSA.Q\nUnited States – Gross capital formation (P5) –...\n1970-Q3\n1970-07-01\n217739.0\n217739.0\nUSA\nP5\nLNBQRSA\nQ\nUnited States\nGross capital formation\nNational currency, chained volume estimates, n...\nQuarterly\n\n\n3\nquarterly\nOECD\nQNA\nQuarterly National Accounts\nUSA.P5.LNBQRSA.Q\nUnited States – Gross capital formation (P5) –...\n1970-Q4\n1970-10-01\n208843.5\n208843.5\nUSA\nP5\nLNBQRSA\nQ\nUnited States\nGross capital formation\nNational currency, chained volume estimates, n...\nQuarterly\n\n\n4\nquarterly\nOECD\nQNA\nQuarterly National Accounts\nUSA.P5.LNBQRSA.Q\nUnited States – Gross capital formation (P5) –...\n1971-Q1\n1971-01-01\n223069.3\n223069.3\nUSA\nP5\nLNBQRSA\nQ\nUnited States\nGross capital formation\nNational currency, chained volume estimates, n...\nQuarterly\n\n\n\n\n\n\n\n\n# keep only the relevant part\ndf_ = df_[[\"Subject\",\"period\",\"value\"]]\ndf_.head()\n\n\n\n\n\n\n\n\nSubject\nperiod\nvalue\n\n\n\n\n0\nGross capital formation\n1970-01-01\n215688.5\n\n\n1\nGross capital formation\n1970-04-01\n214743.3\n\n\n2\nGross capital formation\n1970-07-01\n217739.0\n\n\n3\nGross capital formation\n1970-10-01\n208843.5\n\n\n4\nGross capital formation\n1971-01-01\n223069.3\n\n\n\n\n\n\n\n\ndf = df_.pivot_table(index=\"period\", columns=\"Subject\", values='value')\ndf.head()\n\n\n\n\n\n\n\nSubject\nFinal consumption expenditure\nGross capital formation\nGross domestic product\n\n\nperiod\n\n\n\n\n\n\n\n1947-01-01\nNaN\nNaN\n545670.3\n\n\n1947-04-01\nNaN\nNaN\n544223.0\n\n\n1947-07-01\nNaN\nNaN\n543108.0\n\n\n1947-10-01\nNaN\nNaN\n551613.0\n\n\n1948-01-01\nNaN\nNaN\n559920.5\n\n\n\n\n\n\n\nQuestion 3: Describe the database\nQuestion 4: Remove all lines containing NaN values. What is the timespan of the database?\nQuestion 5: Rename the columns of table df so that they become [“Consumption”, “Investment”, “GDP”]\nQuestion 6: Create a new column Savings equal to production minus investment.\nQuestion 7: Plot the evolution over time of all time series.\nQuestion 8: Compute and add to the database the two new variables: I_Y for \\(\\frac{I_t}{Y_t}\\) and S_Y for \\(\\frac{S_t}{Y_t}\\).\nQuestion 9: Make a scatterplot of \\(I_Y\\) againts \\(S_Y\\).\nQuestion 10: Run the feldstein-horioka regression using statsmodels or linearmodels as you prefer. Intepret the results.\nBonus 1 (intermediate): Run the same regression for different countries and compare the results.\nBonus 2 (harder): Run the same regression for different subperiods: 1970-1979, 1980-1989, 1990-1999, 2000-2009, 2010-2019 and 2020-2023. What happens to the coefficients?"
  },
  {
    "objectID": "exam/check.html#prompt-engineering",
    "href": "exam/check.html#prompt-engineering",
    "title": "Data-Based Economics (2024)",
    "section": "Prompt Engineering",
    "text": "Prompt Engineering\nWarning: This exercise does not yield any point 😎.\nGo to https://gandalf.lakera.ai/ and try to break the password.\nReport below the highest stage you managed to solve with the corresponding password and prompt."
  },
  {
    "objectID": "slides/session_2/DataFrames.html",
    "href": "slides/session_2/DataFrames.html",
    "title": "Data Frames",
    "section": "",
    "text": "A DataFrame (aka a table) is a 2-D labeled data structure with columns of potentially different types.\n\ntypes: quantitative, qualitative (ordered, non-ordered, …)\n\nFirst column is special: the index\n\n\n\n\n\n\nfirst goal of an econometrician: constitute a good dataframe\n\n“cleaning the data”\n\nsometimes data comes from several linked dataframes\n\nrelational database\n\ndataframes / relational databases are so ubiquitous a language has been developed for them: SQL"
  },
  {
    "objectID": "slides/session_2/DataFrames.html#tabular-data",
    "href": "slides/session_2/DataFrames.html#tabular-data",
    "title": "Data Frames",
    "section": "",
    "text": "A DataFrame (aka a table) is a 2-D labeled data structure with columns of potentially different types.\n\ntypes: quantitative, qualitative (ordered, non-ordered, …)\n\nFirst column is special: the index\n\n\n\n\n\n\nfirst goal of an econometrician: constitute a good dataframe\n\n“cleaning the data”\n\nsometimes data comes from several linked dataframes\n\nrelational database\n\ndataframes / relational databases are so ubiquitous a language has been developed for them: SQL"
  },
  {
    "objectID": "slides/session_2/DataFrames.html#pandas",
    "href": "slides/session_2/DataFrames.html#pandas",
    "title": "Data Frames",
    "section": "Pandas",
    "text": "Pandas\n\nimport pandas as pd\n\n\npandas\n\npandas = panel + datas\ncreated by WesMcKinsey, very optimized\nmany options\nif in doubt: minimally sufficient pandas\n\nsmall subset of pandas to do everything\n\ntons of online tutorials ex: doc\n\n\n\ncreating a dataframe (1)\n\n# from a dictionary\nd = {\n    \"country\": [\"USA\", \"UK\", \"France\"],\n    \"comics\": [13, 10, 12]   \n}\npd.DataFrame(d)\n\n\n\n\n\n\n\n\ncountry\ncomics\n\n\n\n\n0\nUSA\n13\n\n\n1\nUK\n10\n\n\n2\nFrance\n12\n\n\n\n\n\n\n\n\n\ncreating a dataframe (2)\n\n# from a matrix\nimport numpy as np\nM = np.array([\n    [18, 150],\n    [21, 200],\n    [29, 1500]\n])\n    \ndf = pd.DataFrame( M, columns=[\"age\", \"travel\"] )\ndf\n\n\n\n\n\n\n\n\nage\ntravel\n\n\n\n\n0\n18\n150\n\n\n1\n21\n200\n\n\n2\n29\n1500"
  },
  {
    "objectID": "slides/session_2/DataFrames.html#file-formats",
    "href": "slides/session_2/DataFrames.html#file-formats",
    "title": "Data Frames",
    "section": "File Formats",
    "text": "File Formats\n\nCommon file formats\n\ncomma separated files: csv file\n\noften distributed online\ncan be exported easily from Excel or LibreOffice\n\nstata files: use pd.read_dta()\nexcel files: use pd.read_excel() or xlsreader if unlucky\n\n\n\nComma separated file\n\ntxt = \"\"\"year,country,measure\n2018,\"france\",950.0\n2019,\"france\",960.0\n2020,\"france\",1000.0\n2018,\"usa\",2500.0\n2019,\"usa\",2150.0\n2020,\"usa\",2300.0\n\"\"\"\nopen('dummy_file.csv','w').write(txt) # we write it to a file\n\n136\n\n\n\ndf = pd.read_csv('dummy_file.csv') # what index should we use ?\ndf\n\n\n\n\n\n\n\n\nyear\ncountry\nmeasure\n\n\n\n\n0\n2018\nfrance\n950.0\n\n\n1\n2019\nfrance\n960.0\n\n\n2\n2020\nfrance\n1000.0\n\n\n3\n2018\nusa\n2500.0\n\n\n4\n2019\nusa\n2150.0\n\n\n5\n2020\nusa\n2300.0\n\n\n\n\n\n\n\n\n\n“Annoying” Comma Separated File\n\nSometimes, comma-separated files, are not quite comma-separated…\n\ninspect the file with a text editor to see what it contains\nadd options to pd.read_csv\n\n\n\ntxt = \"\"\"year;country;measure\n2018;\"france\";950.0\n2019;\"france\";960.0\n2020;\"france\";1000.0\n2018;\"usa\";2500.0\n2019;\"usa\";2150.0\n2020;\"usa\";2300.0\n\"\"\"\nopen('annoying_dummy_file.csv','w').write(txt) # we write it to a file\n\n136\n\n\n\npd.read_csv(\"annoying_dummy_file.csv\", sep=\";\")\n\n\n\n\n\n\n\n\nyear\ncountry\nmeasure\n\n\n\n\n0\n2018\nfrance\n950.0\n\n\n1\n2019\nfrance\n960.0\n\n\n2\n2020\nfrance\n1000.0\n\n\n3\n2018\nusa\n2500.0\n\n\n4\n2019\nusa\n2150.0\n\n\n5\n2020\nusa\n2300.0\n\n\n\n\n\n\n\n\n\nExporting a DataFrame\n\npandas can export to many formats: df.to_...\n\n\nprint( df.to_csv() )\n\n,year,country,measure\n0,2018,france,950.0\n1,2019,france,960.0\n2,2020,france,1000.0\n3,2018,usa,2500.0\n4,2019,usa,2150.0\n5,2020,usa,2300.0\n\n\n\n\ndf.to_stata('dummy_example.dta')"
  },
  {
    "objectID": "slides/session_2/DataFrames.html#data-sources",
    "href": "slides/session_2/DataFrames.html#data-sources",
    "title": "Data Frames",
    "section": "Data Sources",
    "text": "Data Sources\n\nTypes of Data Sources\n\nWhere can we get data from ?\nOfficial websites\n\noften in csv form\nunpractical applications\nsometimes unavoidable\nopen data trend: more unstructured data\n\nData providers\n\nsupply an API (i.e. easy to use function)"
  },
  {
    "objectID": "slides/session_2/DataFrames.html#data-providers",
    "href": "slides/session_2/DataFrames.html#data-providers",
    "title": "Data Frames",
    "section": "Data providers",
    "text": "Data providers\n\ncommercial ones:\n\nbloomberg, macrobond, factsets, quandl …\n\nfree ones:\n\ndbnomics: many official time-series\nqeds: databases used by quantecon\nvega-datasets: distributed with altair\ncovid*: lots of datasets…\n\nreminder: python packages, can be installed in the notebook with\n\n!pip install ...\n\n\n\n!pip install vega_datasets\n\nRequirement already satisfied: vega_datasets in /home/pablo/.local/opt/miniconda3/lib/python3.8/site-packages (0.9.0)\nRequirement already satisfied: pandas in /home/pablo/.local/opt/miniconda3/lib/python3.8/site-packages (from vega_datasets) (1.2.1)\nRequirement already satisfied: python-dateutil&gt;=2.7.3 in /home/pablo/.local/opt/miniconda3/lib/python3.8/site-packages (from pandas-&gt;vega_datasets) (2.8.1)\nRequirement already satisfied: pytz&gt;=2017.3 in /home/pablo/.local/opt/miniconda3/lib/python3.8/site-packages (from pandas-&gt;vega_datasets) (2020.5)\nRequirement already satisfied: numpy&gt;=1.16.5 in /home/pablo/.local/opt/miniconda3/lib/python3.8/site-packages (from pandas-&gt;vega_datasets) (1.19.5)\nRequirement already satisfied: six&gt;=1.5 in /home/pablo/.local/opt/miniconda3/lib/python3.8/site-packages (from python-dateutil&gt;=2.7.3-&gt;pandas-&gt;vega_datasets) (1.15.0)\n\n\n\nimport vega_datasets\ndf = vega_datasets.data('iris')\ndf\n\n\n\n\n\n\n\n\nsepalLength\nsepalWidth\npetalLength\npetalWidth\nspecies\n\n\n\n\n0\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n1\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n2\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n3\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n4\n5.0\n3.6\n1.4\n0.2\nsetosa\n\n\n...\n...\n...\n...\n...\n...\n\n\n145\n6.7\n3.0\n5.2\n2.3\nvirginica\n\n\n146\n6.3\n2.5\n5.0\n1.9\nvirginica\n\n\n147\n6.5\n3.0\n5.2\n2.0\nvirginica\n\n\n148\n6.2\n3.4\n5.4\n2.3\nvirginica\n\n\n149\n5.9\n3.0\n5.1\n1.8\nvirginica\n\n\n\n\n150 rows × 5 columns\n\n\n\n\nInspecting data\n\nonce the data is loaded as df, we want to look at some basic properties:\n\ndf.head(5) # 5 first lines\ndf.tail(5) # 5 first lines\ndf.describe() # summary\ndf.mean() # averages\ndf.std() # standard deviations\n\n\n\ndf.head(2)\n\n\n\n\n\n\n\n\nsepalLength\nsepalWidth\npetalLength\npetalWidth\nspecies\n\n\n\n\n0\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n1\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n\n\n\n\n\n\ndf.describe()\n\n\n\n\n\n\n\n\nsepalLength\nsepalWidth\npetalLength\npetalWidth\n\n\n\n\ncount\n150.000000\n150.000000\n150.000000\n150.000000\n\n\nmean\n5.843333\n3.057333\n3.758000\n1.199333\n\n\nstd\n0.828066\n0.435866\n1.765298\n0.762238\n\n\nmin\n4.300000\n2.000000\n1.000000\n0.100000\n\n\n25%\n5.100000\n2.800000\n1.600000\n0.300000\n\n\n50%\n5.800000\n3.000000\n4.350000\n1.300000\n\n\n75%\n6.400000\n3.300000\n5.100000\n1.800000\n\n\nmax\n7.900000\n4.400000\n6.900000\n2.500000\n\n\n\n\n\n\n\n\ndf.describe()\n\n\n\n\n\n\n\n\nsepalLength\nsepalWidth\npetalLength\npetalWidth\n\n\n\n\ncount\n150.000000\n150.000000\n150.000000\n150.000000\n\n\nmean\n5.843333\n3.057333\n3.758000\n1.199333\n\n\nstd\n0.828066\n0.435866\n1.765298\n0.762238\n\n\nmin\n4.300000\n2.000000\n1.000000\n0.100000\n\n\n25%\n5.100000\n2.800000\n1.600000\n0.300000\n\n\n50%\n5.800000\n3.000000\n4.350000\n1.300000\n\n\n75%\n6.400000\n3.300000\n5.100000\n1.800000\n\n\nmax\n7.900000\n4.400000\n6.900000\n2.500000\n\n\n\n\n\n\n\n\ndf.describe()\n\n\n\n\n\n\n\n\nsepalLength\nsepalWidth\npetalLength\npetalWidth\n\n\n\n\ncount\n150.000000\n150.000000\n150.000000\n150.000000\n\n\nmean\n5.843333\n3.057333\n3.758000\n1.199333\n\n\nstd\n0.828066\n0.435866\n1.765298\n0.762238\n\n\nmin\n4.300000\n2.000000\n1.000000\n0.100000\n\n\n25%\n5.100000\n2.800000\n1.600000\n0.300000\n\n\n50%\n5.800000\n3.000000\n4.350000\n1.300000\n\n\n75%\n6.400000\n3.300000\n5.100000\n1.800000\n\n\nmax\n7.900000\n4.400000\n6.900000\n2.500000"
  },
  {
    "objectID": "slides/session_2/DataFrames.html#manipulating-dataframes",
    "href": "slides/session_2/DataFrames.html#manipulating-dataframes",
    "title": "Data Frames",
    "section": "Manipulating DataFrames",
    "text": "Manipulating DataFrames\n\nColumns\nColumns are defined by attribute df.columns\n\ndf.columns\n\nIndex(['sepalLength', 'sepalWidth', 'petalLength', 'petalWidth', 'species'], dtype='object')\n\n\nThis attribute can be set\n\ndf.columns = ['sLength', 'sWidth', 'pLength', 'pWidth', 'species']\ndf.head(2)\n\n\n\n\n\n\n\n\nsLength\nsWidth\npLength\npWidth\nspecies\n\n\n\n\n0\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n1\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n\n\n\n\n\n\n\nIndexing a column\nA column can be extracted using its name as in a dictionary (like df['sLength'])\n\nseries = df['sWidth'] # note the resulting object: a series\nseries\n\n0      3.5\n1      3.0\n2      3.2\n3      3.1\n4      3.6\n      ... \n145    3.0\n146    2.5\n147    3.0\n148    3.4\n149    3.0\nName: sWidth, Length: 150, dtype: float64\n\n\n\nseries.plot()\n\n\n\n\n\n\n\n\n\n\nCreating a new column\n\ndf['totalLength'] = df['pLength'] + df['sLength']\ndf.head(2)\n\n\n\n\n\n\n\n\nsLength\nsWidth\npLength\npWidth\nspecies\ntotalLength\n\n\n\n\n0\n5.1\n3.5\n1.4\n0.2\nsetosa\n6.5\n\n\n1\n4.9\n3.0\n1.4\n0.2\nsetosa\n6.3\n\n\n\n\n\n\n\n\n\nReplacing a column\n\ndf['totalLength'] = df['pLength'] + df['sLength']*0.5\ndf.head(2)\n\n\n\n\n\n\n\n\nsLength\nsWidth\npLength\npWidth\nspecies\ntotalLength\n\n\n\n\n0\n5.1\n3.5\n1.4\n0.2\nsetosa\n3.95\n\n\n1\n4.9\n3.0\n1.4\n0.2\nsetosa\n3.85\n\n\n\n\n\n\n\n\n\nSelecting several columns\n\nIndex with a list of column names\n\n\ne = df[ ['pLength', 'sLength'] ]\ne.head(3)\n\n\n\n\n\n\n\n\npLength\nsLength\n\n\n\n\n0\n1.4\n5.1\n\n\n1\n1.4\n4.9\n\n\n2\n1.3\n4.7\n\n\n\n\n\n\n\n\n\nSelecting lines (1)\n\nuse index range\n\n\ndf[2:4]\n\n\n\n\n\n\n\n\nsLength\nsWidth\npLength\npWidth\nspecies\ntotalLength\n\n\n\n\n2\n4.7\n3.2\n1.3\n0.2\nsetosa\n3.65\n\n\n3\n4.6\n3.1\n1.5\n0.2\nsetosa\n3.80\n\n\n\n\n\n\n\n\n\nSelecting lines (2)\n\nuse boolean\n\n\ndf['species'].unique()\n\narray(['setosa', 'versicolor', 'virginica'], dtype=object)\n\n\n\nbool_ind = df['species'] == 'virginica' # this is a boolean serie\n\n\ne = df[ bool_ind ]\ne.head(4)\n\n\n\n\n\n\n\n\nsLength\nsWidth\npLength\npWidth\nspecies\ntotalLength\n\n\n\n\n100\n6.3\n3.3\n6.0\n2.5\nvirginica\n9.15\n\n\n101\n5.8\n2.7\n5.1\n1.9\nvirginica\n8.00\n\n\n102\n7.1\n3.0\n5.9\n2.1\nvirginica\n9.45\n\n\n103\n6.3\n2.9\n5.6\n1.8\nvirginica\n8.75\n\n\n\n\n\n\n\n\n\nSelecting lines and columns\n\nsometimes, one wants finer control about which lines and columns to select:\n\nuse df.loc[...] which can be indexed as a matrix\n\n\n\ndf.loc[0:4, 'species']\n\n0    setosa\n1    setosa\n2    setosa\n3    setosa\n4    setosa\nName: species, dtype: object\n\n\n\n\nCombine everything\n\n# Let's change the way totalLength is computed, only for 'virginica'\nindex = (df['species']=='virginica')\ndf.loc[index,'totalLength'] = df.loc[index,'sLength'] + 1.5*df[index]['pLength']"
  },
  {
    "objectID": "slides/session_2/DataFrames.html#reshaping-dataframes",
    "href": "slides/session_2/DataFrames.html#reshaping-dataframes",
    "title": "Data Frames",
    "section": "Reshaping DataFrames",
    "text": "Reshaping DataFrames\n\ntxt_wide = \"\"\"year,france,usa\n2018,950.0,2500.0\n2019,960.0,2150.0\n2020,1000.0,2300.0\n\"\"\"\nopen('dummy_file_wide.csv','w').write(txt_wide) # we write it to a file\n\n71\n\n\n\ntxt_long = \"\"\"year,country,measure\n2018,\"france\",950.0\n2019,\"france\",960.0\n2020,\"france\",1000.0\n2018,\"usa\",2500.0\n2019,\"usa\",2150.0\n2020,\"usa\",2300.0\n\"\"\"\nopen('dummy_file_long.csv','w').write(txt_long) # we write it to a file\n\n136\n\n\n\ndf_long = pd.read_csv(\"dummy_file_long.csv\")\ndf_wide = pd.read_csv(\"dummy_file_wide.csv\")\n\n\nWide vs Long format (1)\n\ncompare the following tables\n\n\ndf_wide\n\n\n\n\n\n\n\n\nyear\nfrance\nusa\n\n\n\n\n0\n2018\n950.0\n2500.0\n\n\n1\n2019\n960.0\n2150.0\n\n\n2\n2020\n1000.0\n2300.0\n\n\n\n\n\n\n\n\ndf_long\n\n\n\n\n\n\n\n\nyear\ncountry\nmeasure\n\n\n\n\n0\n2018\nfrance\n950.0\n\n\n1\n2019\nfrance\n960.0\n\n\n2\n2020\nfrance\n1000.0\n\n\n3\n2018\nusa\n2500.0\n\n\n4\n2019\nusa\n2150.0\n\n\n5\n2020\nusa\n2300.0\n\n\n\n\n\n\n\n\n\nWide vs Long format (2)\n\nin long format: each line is an independent observation\n\ntwo lines mayb belong to the same category (year, or country)\n\nin wide format: some observations are grouped\n\nin the example it is grouped by year\n\nboth representations are useful\n\n\n\nConverting from Wide to Long\n\ndf_wide.melt(id_vars='year')\n\n\n\n\n\n\n\n\nyear\nvariable\nvalue\n\n\n\n\n0\n2018\nfrance\n950.0\n\n\n1\n2019\nfrance\n960.0\n\n\n2\n2020\nfrance\n1000.0\n\n\n3\n2018\nusa\n2500.0\n\n\n4\n2019\nusa\n2150.0\n\n\n5\n2020\nusa\n2300.0\n\n\n\n\n\n\n\n\n\nConverting from Long to Wide\n\ndf_ = df_long.pivot(index='year', columns='country')\ndf_\n\n\n\n\n\n\n\n\nmeasure\n\n\ncountry\nfrance\nusa\n\n\nyear\n\n\n\n\n\n\n2018\n950.0\n2500.0\n\n\n2019\n960.0\n2150.0\n\n\n2020\n1000.0\n2300.0\n\n\n\n\n\n\n\n\n# the result of pivot has a \"hierarchical index\"\n# let's change columns names\ndf_.columns = df_.columns.get_level_values(1)\ndf_\n\n\n\n\n\n\n\ncountry\nfrance\nusa\n\n\nyear\n\n\n\n\n\n\n2018\n950.0\n2500.0\n\n\n2019\n960.0\n2150.0\n\n\n2020\n1000.0\n2300.0\n\n\n\n\n\n\n\n\n\ngroupby\ngroupby is a very powerful function which can be used to work directly on data in the long format.\n\ndf_long.groupby(\"country\").agg('mean')\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\n&lt;ipython-input-19-e87d65f8bb45&gt; in &lt;module&gt;\n----&gt; 1 df_long.groupby(\"country\").agg('mean')\n\nNameError: name 'df_long' is not defined"
  },
  {
    "objectID": "slides/session_2/DataFrames.html#merging",
    "href": "slides/session_2/DataFrames.html#merging",
    "title": "Data Frames",
    "section": "Merging",
    "text": "Merging\n\nMerging two dataframes\n\nSuppose we have two dataframes, with related observations\nHow can we construct one single database with all informations?\nAnswer:\n\nconcatenate if long format\nmerge databases if wide format\n\nLots of subtleties when data gets complicated\n\nwe’ll see them in due time\n\n\n\ntxt_long_1 = \"\"\"year,country,measure\n2018,\"france\",950.0\n2019,\"france\",960.0\n2020,\"france\",1000.0\n2018,\"usa\",2500.0\n2019,\"usa\",2150.0\n2020,\"usa\",2300.0\n\"\"\"\nopen(\"dummy_long_1.csv\",'w').write(txt_long_1)\n\n136\n\n\n\ntxt_long_2 = \"\"\"year,country,recipient\n2018,\"france\",maxime\n2019,\"france\",mauricette\n2020,\"france\",mathilde\n2018,\"usa\",sherlock\n2019,\"usa\",watson\n2020,\"usa\",moriarty\n\"\"\"\nopen(\"dummy_long_2.csv\",'w').write(txt_long_2)\n\n150\n\n\n\ndf_long_1 = pd.read_csv('dummy_long_1.csv')\ndf_long_2 = pd.read_csv('dummy_long_2.csv')\n\n\n\nMerging two DataFrames with pandas\n\ndf_long_1.merge(df_long_2)\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\n&lt;ipython-input-20-70f04fc2bba4&gt; in &lt;module&gt;\n----&gt; 1 df_long_1.merge(df_long_2)\n\nNameError: name 'df_long_1' is not defined"
  },
  {
    "objectID": "slides/session_2/Exercises_correction.html",
    "href": "slides/session_2/Exercises_correction.html",
    "title": "Exercises",
    "section": "",
    "text": "Define a vector x with 1000 regularly spaced elements between 0 and 10\n\n\nimport numpy as np\nx = np.linspace(0,10, 1000)\n\n\nDefine a vector y representing \\(y=sin(x)\\)\n\n\ny = np.sin(x)\n\n\nDefine a vector y1 representing \\(y=abs(sin(x))\\)\n\n\ny1 = np.abs(np.sin(x))\n\n\nDefine a vector y2 representing \\(y=sin(x) \\text{if} y&gt;0.1 \\text{else} 0.1\\)\n\n\ncond = (y&gt;0.1)\n\n\ny2 = np.sin(x)*cond + 0.1*(~cond)\n\n\nPlot y, y1, y2 against x\n\n\nfrom matplotlib import pyplot as plt\n\nplt.plot(x,y, label=\"y\")\nplt.plot(x,y1, label='y1')\nplt.plot(x,y2, label='y2')\nplt.grid(True)\nplt.legend(loc='lower right')\n\n\n\n\n\n\n\n\n\n\n\n\nSet T=100, rho=0.9, sigma=0.01. We consider an autoregressive process \\(x_t=\\rho x_{t-1} + \\epsilon_t\\) where \\(\\epsilon_t\\) is normally distributed with standard deviation \\(\\sigma\\)\n\n\nT = 100\nrho = 0.9\nsigma = 0.01\n\n\nCreate an empty vector x = np.zeros(T)\n\n\nimport numpy as np\nx = np.zeros(T)\nx\n\narray([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n\n\n\nLoop over t&gt;0 and fill x[t] so that x represents a simulation for t periods of process \\(x_t\\)\n\n\nnp.random.normal(scale=sigma)\nnp.random.randn()*sigma\n\n-0.012179445299749143\n\n\n\nfor t in range(1, T):\n    # press tabulation to indent\n    ϵ = np.random.randn()*sigma # random normal variable with standard deviation sigma (google numpy random variable)\n    x[t] = rho*x[t-1] + ϵ\n\n\nfrom matplotlib import pyplot as plt\nplt.plot(x)\n\n\n\n\n\n\n\n\n\nUse function hpfilter from statsmodels (google it). It returns a and a residual\n\n\nfrom statsmodels.tsa.filters.hp_filter import hpfilter\ncycle, trend = hpfilter(x)\n\n#cycle is residual\n\n\nPlot the simulated series, the filtered series and the residual\n\n\n\nplt.subplot(2,1,1)\nplt.plot(x, label='data')\nplt.plot(trend, label='trend')\nplt.legend()\nplt.subplot(2,1,2)\nplt.plot(cycle, label='cycle (residual)')\nplt.legend()"
  },
  {
    "objectID": "slides/session_2/Exercises_correction.html#numerical-python",
    "href": "slides/session_2/Exercises_correction.html#numerical-python",
    "title": "Exercises",
    "section": "",
    "text": "Define a vector x with 1000 regularly spaced elements between 0 and 10\n\n\nimport numpy as np\nx = np.linspace(0,10, 1000)\n\n\nDefine a vector y representing \\(y=sin(x)\\)\n\n\ny = np.sin(x)\n\n\nDefine a vector y1 representing \\(y=abs(sin(x))\\)\n\n\ny1 = np.abs(np.sin(x))\n\n\nDefine a vector y2 representing \\(y=sin(x) \\text{if} y&gt;0.1 \\text{else} 0.1\\)\n\n\ncond = (y&gt;0.1)\n\n\ny2 = np.sin(x)*cond + 0.1*(~cond)\n\n\nPlot y, y1, y2 against x\n\n\nfrom matplotlib import pyplot as plt\n\nplt.plot(x,y, label=\"y\")\nplt.plot(x,y1, label='y1')\nplt.plot(x,y2, label='y2')\nplt.grid(True)\nplt.legend(loc='lower right')\n\n\n\n\n\n\n\n\n\n\n\n\nSet T=100, rho=0.9, sigma=0.01. We consider an autoregressive process \\(x_t=\\rho x_{t-1} + \\epsilon_t\\) where \\(\\epsilon_t\\) is normally distributed with standard deviation \\(\\sigma\\)\n\n\nT = 100\nrho = 0.9\nsigma = 0.01\n\n\nCreate an empty vector x = np.zeros(T)\n\n\nimport numpy as np\nx = np.zeros(T)\nx\n\narray([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n\n\n\nLoop over t&gt;0 and fill x[t] so that x represents a simulation for t periods of process \\(x_t\\)\n\n\nnp.random.normal(scale=sigma)\nnp.random.randn()*sigma\n\n-0.012179445299749143\n\n\n\nfor t in range(1, T):\n    # press tabulation to indent\n    ϵ = np.random.randn()*sigma # random normal variable with standard deviation sigma (google numpy random variable)\n    x[t] = rho*x[t-1] + ϵ\n\n\nfrom matplotlib import pyplot as plt\nplt.plot(x)\n\n\n\n\n\n\n\n\n\nUse function hpfilter from statsmodels (google it). It returns a and a residual\n\n\nfrom statsmodels.tsa.filters.hp_filter import hpfilter\ncycle, trend = hpfilter(x)\n\n#cycle is residual\n\n\nPlot the simulated series, the filtered series and the residual\n\n\n\nplt.subplot(2,1,1)\nplt.plot(x, label='data')\nplt.plot(trend, label='trend')\nplt.legend()\nplt.subplot(2,1,2)\nplt.plot(cycle, label='cycle (residual)')\nplt.legend()"
  },
  {
    "objectID": "slides/session_2/Exercises_correction.html#iris-data-set",
    "href": "slides/session_2/Exercises_correction.html#iris-data-set",
    "title": "Exercises",
    "section": "Iris Data Set",
    "text": "Iris Data Set\nYou will need the library vega_datasets and the altair library. You can install them with !pip install vega_datasets and !pip install altair Load the iris database.\n\n# uncomment and run the following if vega_datasets is not already installed\n# !pip install vega_datasets # on linux\n# pip install vega_datasets # try if the former doesn't work\n\n\n# uncomment and run the following if altair is not already installed\n#!pip install altair\n\n\nPrint statistics (mean, std), by flower, for each characteristics.\n\n\n# we start by importing the library\nimport vega_datasets\n\n\ndf = vega_datasets.data.iris()\ndf\n\n\n\n\n\n\n\n\nsepalLength\nsepalWidth\npetalLength\npetalWidth\nspecies\n\n\n\n\n0\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n1\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n2\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n3\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n4\n5.0\n3.6\n1.4\n0.2\nsetosa\n\n\n...\n...\n...\n...\n...\n...\n\n\n145\n6.7\n3.0\n5.2\n2.3\nvirginica\n\n\n146\n6.3\n2.5\n5.0\n1.9\nvirginica\n\n\n147\n6.5\n3.0\n5.2\n2.0\nvirginica\n\n\n148\n6.2\n3.4\n5.4\n2.3\nvirginica\n\n\n149\n5.9\n3.0\n5.1\n1.8\nvirginica\n\n\n\n\n150 rows × 5 columns\n\n\n\n\n# we can print a summary for the whole database\ndf.describe()\n\n\n\n\n\n\n\n\nsepalLength\nsepalWidth\npetalLength\npetalWidth\n\n\n\n\ncount\n150.000000\n150.000000\n150.000000\n150.000000\n\n\nmean\n5.843333\n3.057333\n3.758000\n1.199333\n\n\nstd\n0.828066\n0.435866\n1.765298\n0.762238\n\n\nmin\n4.300000\n2.000000\n1.000000\n0.100000\n\n\n25%\n5.100000\n2.800000\n1.600000\n0.300000\n\n\n50%\n5.800000\n3.000000\n4.350000\n1.300000\n\n\n75%\n6.400000\n3.300000\n5.100000\n1.800000\n\n\nmax\n7.900000\n4.400000\n6.900000\n2.500000\n\n\n\n\n\n\n\n\n# but this mixes all kinds of flowers\n# here is how we do it for the 'setosa' type:\ndf[df['species']=='setosa'].describe()\n\n\n\n\n\n\n\n\nsepalLength\nsepalWidth\npetalLength\npetalWidth\n\n\n\n\ncount\n50.00000\n50.000000\n50.000000\n50.000000\n\n\nmean\n5.00600\n3.428000\n1.462000\n0.246000\n\n\nstd\n0.35249\n0.379064\n0.173664\n0.105386\n\n\nmin\n4.30000\n2.300000\n1.000000\n0.100000\n\n\n25%\n4.80000\n3.200000\n1.400000\n0.200000\n\n\n50%\n5.00000\n3.400000\n1.500000\n0.200000\n\n\n75%\n5.20000\n3.675000\n1.575000\n0.300000\n\n\nmax\n5.80000\n4.400000\n1.900000\n0.600000\n\n\n\n\n\n\n\n\n# or we can print the statistics for all species (here we do it for the mean)\nfor spec in ['setosa', 'virginica', 'versicolor']:\n    print(f\"\\nMean for: '{spec}'\")\n    m = df[df['species']==spec].mean()\n    print(m)\n\n\nMean for: 'setosa'\nsepalLength    5.006\nsepalWidth     3.428\npetalLength    1.462\npetalWidth     0.246\ndtype: float64\n\nMean for: 'virginica'\nsepalLength    6.588\nsepalWidth     2.974\npetalLength    5.552\npetalWidth     2.026\ndtype: float64\n\nMean for: 'versicolor'\nsepalLength    5.936\nsepalWidth     2.770\npetalLength    4.260\npetalWidth     1.326\ndtype: float64\n\n\n\n# the same result can be obtained using pandas' groubpy function\ndf.groupby('species').apply( lambda x: x.mean())\n\n\n\n\n\n\n\n\nsepalLength\nsepalWidth\npetalLength\npetalWidth\n\n\nspecies\n\n\n\n\n\n\n\n\nsetosa\n5.006\n3.428\n1.462\n0.246\n\n\nversicolor\n5.936\n2.770\n4.260\n1.326\n\n\nvirginica\n6.588\n2.974\n5.552\n2.026\n\n\n\n\n\n\n\n\n# same for the standard deviation\ndf.groupby('species').apply( lambda x: x.std())\n\n\n\n\n\n\n\n\nsepalLength\nsepalWidth\npetalLength\npetalWidth\n\n\nspecies\n\n\n\n\n\n\n\n\nsetosa\n0.352490\n0.379064\n0.173664\n0.105386\n\n\nversicolor\n0.516171\n0.313798\n0.469911\n0.197753\n\n\nvirginica\n0.635880\n0.322497\n0.551895\n0.274650\n\n\n\n\n\n\n\n\n# we can get all statistics at once, by group, with .describe\ndf.groupby('species').apply( lambda x: x.describe())\n\n\n\n\n\n\n\n\n\nsepalLength\nsepalWidth\npetalLength\npetalWidth\n\n\nspecies\n\n\n\n\n\n\n\n\n\nsetosa\ncount\n50.000000\n50.000000\n50.000000\n50.000000\n\n\nmean\n5.006000\n3.428000\n1.462000\n0.246000\n\n\nstd\n0.352490\n0.379064\n0.173664\n0.105386\n\n\nmin\n4.300000\n2.300000\n1.000000\n0.100000\n\n\n25%\n4.800000\n3.200000\n1.400000\n0.200000\n\n\n50%\n5.000000\n3.400000\n1.500000\n0.200000\n\n\n75%\n5.200000\n3.675000\n1.575000\n0.300000\n\n\nmax\n5.800000\n4.400000\n1.900000\n0.600000\n\n\nversicolor\ncount\n50.000000\n50.000000\n50.000000\n50.000000\n\n\nmean\n5.936000\n2.770000\n4.260000\n1.326000\n\n\nstd\n0.516171\n0.313798\n0.469911\n0.197753\n\n\nmin\n4.900000\n2.000000\n3.000000\n1.000000\n\n\n25%\n5.600000\n2.525000\n4.000000\n1.200000\n\n\n50%\n5.900000\n2.800000\n4.350000\n1.300000\n\n\n75%\n6.300000\n3.000000\n4.600000\n1.500000\n\n\nmax\n7.000000\n3.400000\n5.100000\n1.800000\n\n\nvirginica\ncount\n50.000000\n50.000000\n50.000000\n50.000000\n\n\nmean\n6.588000\n2.974000\n5.552000\n2.026000\n\n\nstd\n0.635880\n0.322497\n0.551895\n0.274650\n\n\nmin\n4.900000\n2.200000\n4.500000\n1.400000\n\n\n25%\n6.225000\n2.800000\n5.100000\n1.800000\n\n\n50%\n6.500000\n3.000000\n5.550000\n2.000000\n\n\n75%\n6.900000\n3.175000\n5.875000\n2.300000\n\n\nmax\n7.900000\n3.800000\n6.900000\n2.500000\n\n\n\n\n\n\n\n\nUse matplotlib to make correlation plots, betwen flowers characteristics. (for instance, plot sepalWidth against sepalLength. Ideally, use different shapes or colors for various flowers.\n\nFirst, let’s do the correlation plot for one pair of two characteristics and one species type.\n\n# we need to import the plotting library:\nfrom matplotlib import pyplot as plt\n\n\n# we do it for setosa\nddf = df[df['species']=='setosa'] # extract subdataframe where species=='setosa'\nplt.plot(ddf['sepalLength'], ddf['sepalWidth'], 'o', label=spec)\nplt.xlabel(\"sepalLength\")\nplt.ylabel(\"sepalWidth\")\n\nText(0, 0.5, 'sepalWidth')\n\n\n\n\n\n\n\n\n\nHere is how we can plot the same plot for all species on the same graph. Not that matplotlib chooses a new color by default, for each new call to function plot()\n\n# let's get a list of all species\nspecies = df['species'].unique()\nspecies\n\narray(['setosa', 'versicolor', 'virginica'], dtype=object)\n\n\n\nfor spec in species:\n    ddf = df[df['species']==spec]\n    plt.plot(ddf['sepalLength'], ddf['sepalWidth'], 'o', label=spec)\nplt.legend()\n\n\n\n\n\n\n\n\nNow we can produce the full graph. We use the subplots function to arrange the graphs on a 4x4 grid.\n\n# we compute the list of characteristics from the columns of the tables \ncharacteristics = df.columns[:4] # we ignore the 5th column which is 'species'\ncharacteristics\n\nIndex(['sepalLength', 'sepalWidth', 'petalLength', 'petalWidth'], dtype='object')\n\n\n\nplt.figure(figsize=(16,16))\n# we loop over lines (i from 0 to 3)\nfor i in range(4):\n    ch_i = characteristics[i]\n    # we loop over columns (j from 0 to 3)\n    for j in range(4):\n        ch_j = characteristics[j]\n\n        # create the subplot \n        # we compute the position of the current subplot (goes from 1 to 16)\n        position = i*4 + j + 1\n        plt.subplot(4, 4, position)\n        for spec in species:\n            ddf = df[df['species']==spec]\n            plt.plot(ddf[ch_i], ddf[ch_j], 'o', label=spec)\n            plt.xlabel(ch_i)\n            plt.ylabel(ch_j)\nplt.tight_layout()\n#         plt.legend()\n\n\n\n\n\n\n\n\n\nConvert the database to long format\n\n\ndf_long = df.melt(value_vars=['sepalLength','sepalWidth','petalLength','petalWidth'], \n                  id_vars=\"species\" )\ndf_long.head()\n\n\n\n\n\n\n\n\nspecies\nvariable\nvalue\n\n\n\n\n0\nsetosa\nsepalLength\n5.1\n\n\n1\nsetosa\nsepalLength\n4.9\n\n\n2\nsetosa\nsepalLength\n4.7\n\n\n3\nsetosa\nsepalLength\n4.6\n\n\n4\nsetosa\nsepalLength\n5.0\n\n\n\n\n\n\n\n\nUse altair, to plot correlation between two characteristics, with different color for each flower. Plot all correlations.\n\nAn introduction about how to use altair is on youtube: Altair Otherwise, the online doc is very useful and complete. It has many demos that can be adapted to your need: demos\n\nimport altair as alt\n\n\nch = alt.Chart(df).mark_point().encode(\n    x='sepalWidth',\n    y='petalWidth',\n    color='species',\n)\nch\n\n\n\n\n\n\nTo plot all correlations, best practice is to use altair’s repeat function. Note that the result is an interactive graph where all subplots move in a synchronized way. This is a typical feature of “visualization” libraries.\n\nalt.Chart(df).mark_point().encode(\n    alt.X(alt.repeat(\"column\"), type='quantitative'),\n    alt.Y(alt.repeat(\"row\"), type='quantitative'),\n    color='species:N'\n).properties(\n    width=200,\n    height=200\n).repeat(\n    row=['petalLength', 'petalWidth','sepalLength', 'sepalWidth'],\n    column=['petalLength', 'petalWidth','sepalLength', 'sepalWidth']\n).interactive()"
  },
  {
    "objectID": "slides/session_2/Exercises_correction.html#philips-curve-and-okuns-law",
    "href": "slides/session_2/Exercises_correction.html#philips-curve-and-okuns-law",
    "title": "Exercises",
    "section": "Philips Curve and Okun’s Law",
    "text": "Philips Curve and Okun’s Law\nIf needed, install dbnomics with !pip install dbnomics.\n\nDownload inflation, unemployment and gdp series from France.\n\nThere is a clear tutorial on how to use dbnomics available from Quantecon. There are two ways to import a dbnomics series:\n\nuse api link\nuse the organization/database/series identifiers\n\nDownload with the API was broken when we tried in class (the website returned an incorrect json file), so we will use the second method. (update: this seems to be fixed now)\nOn the dbnomics website we search for “inflation france” and decide to use OECD database. We eventually obtain the following page:\n\nFrom this page we obtain the series identifier: OECD/MEI/FRA.CPALTT01.CTGY.M\nIt is split in three parts: - organization: OECD - database: KEY (Key Economic Indicators) - series: CPALTT01.FRA.GY.A\nWe use these elements to import a series with dbnomics:\n\nimport dbnomics\ndf_inflation = dbnomics.fetch_series('OECD', 'KEI', 'CPALTT01.FRA.GY.A')\ndf_inflation.head()\n\n\n\n\n\n\n\n\n@frequency\nprovider_code\ndataset_code\ndataset_name\nseries_code\nseries_name\noriginal_period\nperiod\noriginal_value\nvalue\nSUBJECT\nLOCATION\nMEASURE\nFREQUENCY\nSubject\nCountry\nMeasure\nFrequency\n\n\n\n\n0\nannual\nOECD\nKEI\nKey Short-Term Economic Indicators\nCPALTT01.FRA.GY.A\nConsumer prices: all items – France – Growth o...\n1956\n1956-01-01\n1.897315\n1.897315\nCPALTT01\nFRA\nGY\nA\nConsumer prices: all items\nFrance\nGrowth on the same period of the previous year\nAnnual\n\n\n1\nannual\nOECD\nKEI\nKey Short-Term Economic Indicators\nCPALTT01.FRA.GY.A\nConsumer prices: all items – France – Growth o...\n1957\n1957-01-01\n3.057669\n3.057669\nCPALTT01\nFRA\nGY\nA\nConsumer prices: all items\nFrance\nGrowth on the same period of the previous year\nAnnual\n\n\n2\nannual\nOECD\nKEI\nKey Short-Term Economic Indicators\nCPALTT01.FRA.GY.A\nConsumer prices: all items – France – Growth o...\n1958\n1958-01-01\n15.260526\n15.260526\nCPALTT01\nFRA\nGY\nA\nConsumer prices: all items\nFrance\nGrowth on the same period of the previous year\nAnnual\n\n\n3\nannual\nOECD\nKEI\nKey Short-Term Economic Indicators\nCPALTT01.FRA.GY.A\nConsumer prices: all items – France – Growth o...\n1959\n1959-01-01\n5.815255\n5.815255\nCPALTT01\nFRA\nGY\nA\nConsumer prices: all items\nFrance\nGrowth on the same period of the previous year\nAnnual\n\n\n4\nannual\nOECD\nKEI\nKey Short-Term Economic Indicators\nCPALTT01.FRA.GY.A\nConsumer prices: all items – France – Growth o...\n1960\n1960-01-01\n4.139938\n4.139938\nCPALTT01\nFRA\nGY\nA\nConsumer prices: all items\nFrance\nGrowth on the same period of the previous year\nAnnual\n\n\n\n\n\n\n\n\n# equivalent:\n# df_inflation = dbnomics.fetch_series_by_api_link(...)\n# df_inflation\n\n\n# let's check it is not empty:\ndf_inflation.head()\n\n\n\n\n\n\n\n\n@frequency\nprovider_code\ndataset_code\ndataset_name\nseries_code\nseries_name\noriginal_period\nperiod\noriginal_value\nvalue\nSUBJECT\nLOCATION\nMEASURE\nFREQUENCY\nSubject\nCountry\nMeasure\nFrequency\n\n\n\n\n0\nannual\nOECD\nKEI\nKey Short-Term Economic Indicators\nCPALTT01.FRA.GY.A\nConsumer prices: all items – France – Growth o...\n1956\n1956-01-01\n1.897315\n1.897315\nCPALTT01\nFRA\nGY\nA\nConsumer prices: all items\nFrance\nGrowth on the same period of the previous year\nAnnual\n\n\n1\nannual\nOECD\nKEI\nKey Short-Term Economic Indicators\nCPALTT01.FRA.GY.A\nConsumer prices: all items – France – Growth o...\n1957\n1957-01-01\n3.057669\n3.057669\nCPALTT01\nFRA\nGY\nA\nConsumer prices: all items\nFrance\nGrowth on the same period of the previous year\nAnnual\n\n\n2\nannual\nOECD\nKEI\nKey Short-Term Economic Indicators\nCPALTT01.FRA.GY.A\nConsumer prices: all items – France – Growth o...\n1958\n1958-01-01\n15.260526\n15.260526\nCPALTT01\nFRA\nGY\nA\nConsumer prices: all items\nFrance\nGrowth on the same period of the previous year\nAnnual\n\n\n3\nannual\nOECD\nKEI\nKey Short-Term Economic Indicators\nCPALTT01.FRA.GY.A\nConsumer prices: all items – France – Growth o...\n1959\n1959-01-01\n5.815255\n5.815255\nCPALTT01\nFRA\nGY\nA\nConsumer prices: all items\nFrance\nGrowth on the same period of the previous year\nAnnual\n\n\n4\nannual\nOECD\nKEI\nKey Short-Term Economic Indicators\nCPALTT01.FRA.GY.A\nConsumer prices: all items – France – Growth o...\n1960\n1960-01-01\n4.139938\n4.139938\nCPALTT01\nFRA\nGY\nA\nConsumer prices: all items\nFrance\nGrowth on the same period of the previous year\nAnnual\n\n\n\n\n\n\n\n\n# we see the column associated with the values is called 'value'\n# the one associated with date is called `period`\ndisplay( df_inflation['value'].head() )\ndisplay( df_inflation['period'].head() )\n\n0     1.897315\n1     3.057669\n2    15.260526\n3     5.815255\n4     4.139938\nName: value, dtype: float64\n\n\n0   1956-01-01\n1   1957-01-01\n2   1958-01-01\n3   1959-01-01\n4   1960-01-01\nName: period, dtype: datetime64[ns]\n\n\n\nplt.plot(df_inflation['period'],df_inflation['value'])\n\n\n\n\n\n\n\n\nWe follow the same steps for unemployment and gdp. For the sake of simplicity, we choose annual frequency for all series. Not that the series on unemployment starts on only in 2004. That will be enough for the current purpose.\n\n# we proceed similarly for unemployment and gdp\ndf_gdp = dbnomics.fetch_series('OECD', 'MEI', 'FRA.NAEXCP01.STSA.A')\ndf_unemployment = dbnomics.fetch_series('OECD', 'CSPCUBE', 'UNEMPLRT_T1C.FRA')\n\n\n# let's look at what we have\nplt.figure(figsize=(10,5))\nplt.subplot(131)\nplt.plot(df_unemployment['period'], df_unemployment['value'])\nplt.title('unemployment')\nplt.subplot(132)\nplt.plot(df_gdp['period'], df_gdp['value'])\nplt.title('gdp')\nplt.subplot(133)\nplt.plot(df_inflation['period'], df_inflation['value'])\nplt.title(\"inflation\")\nplt.tight_layout()\n\n\n\n\n\n\n\n\n\n# before we proceed, let's create some new columns to avoid conflicts\ndf_inflation['inflation'] = df_inflation['value']\ndf_inflation.head()\n\n\n\n\n\n\n\n\n@frequency\nprovider_code\ndataset_code\ndataset_name\nseries_code\nseries_name\noriginal_period\nperiod\noriginal_value\nvalue\nSUBJECT\nLOCATION\nMEASURE\nFREQUENCY\nSubject\nCountry\nMeasure\nFrequency\ninflation\n\n\n\n\n0\nannual\nOECD\nKEI\nKey Short-Term Economic Indicators\nCPALTT01.FRA.GY.A\nConsumer prices: all items – France – Growth o...\n1956\n1956-01-01\n1.897315\n1.897315\nCPALTT01\nFRA\nGY\nA\nConsumer prices: all items\nFrance\nGrowth on the same period of the previous year\nAnnual\n1.897315\n\n\n1\nannual\nOECD\nKEI\nKey Short-Term Economic Indicators\nCPALTT01.FRA.GY.A\nConsumer prices: all items – France – Growth o...\n1957\n1957-01-01\n3.057669\n3.057669\nCPALTT01\nFRA\nGY\nA\nConsumer prices: all items\nFrance\nGrowth on the same period of the previous year\nAnnual\n3.057669\n\n\n2\nannual\nOECD\nKEI\nKey Short-Term Economic Indicators\nCPALTT01.FRA.GY.A\nConsumer prices: all items – France – Growth o...\n1958\n1958-01-01\n15.260526\n15.260526\nCPALTT01\nFRA\nGY\nA\nConsumer prices: all items\nFrance\nGrowth on the same period of the previous year\nAnnual\n15.260526\n\n\n3\nannual\nOECD\nKEI\nKey Short-Term Economic Indicators\nCPALTT01.FRA.GY.A\nConsumer prices: all items – France – Growth o...\n1959\n1959-01-01\n5.815255\n5.815255\nCPALTT01\nFRA\nGY\nA\nConsumer prices: all items\nFrance\nGrowth on the same period of the previous year\nAnnual\n5.815255\n\n\n4\nannual\nOECD\nKEI\nKey Short-Term Economic Indicators\nCPALTT01.FRA.GY.A\nConsumer prices: all items – France – Growth o...\n1960\n1960-01-01\n4.139938\n4.139938\nCPALTT01\nFRA\nGY\nA\nConsumer prices: all items\nFrance\nGrowth on the same period of the previous year\nAnnual\n4.139938\n\n\n\n\n\n\n\n\ndf_gdp['gdp'] = df_gdp['value']\ndf_unemployment['unemployment'] = df_unemployment['value']\n\n\n# the following table contains both gdp and inflation\n# note that when there was any ambiguity_x suffixes were added to the gdp table, and _y suffixes added to inflation table\n# this is why we added another column with the good name.\n# as for the period column, since it had the same meaning for both tables, it is not renamed\nddf = df_gdp.merge(df_inflation, on='period')\nddf.head()\n\n\n\n\n\n\n\n\n@frequency_x\nprovider_code_x\ndataset_code_x\ndataset_name_x\nseries_code_x\nseries_name_x\noriginal_period_x\nperiod\noriginal_value_x\nvalue_x\n...\nvalue_y\nSUBJECT_y\nLOCATION_y\nMEASURE_y\nFREQUENCY_y\nSubject_y\nCountry_y\nMeasure_y\nFrequency_y\ninflation\n\n\n\n\n0\nannual\nOECD\nMEI\nMain Economic Indicators Publication\nFRA.NAEXCP01.STSA.A\nFrance – National Accounts &gt; GDP by Expenditur...\n1980\n1980-01-01\n451.772\n451.772\n...\n13.562578\nCPALTT01\nFRA\nGY\nA\nConsumer prices: all items\nFrance\nGrowth on the same period of the previous year\nAnnual\n13.562578\n\n\n1\nannual\nOECD\nMEI\nMain Economic Indicators Publication\nFRA.NAEXCP01.STSA.A\nFrance – National Accounts &gt; GDP by Expenditur...\n1981\n1981-01-01\n509.984\n509.984\n...\n13.314400\nCPALTT01\nFRA\nGY\nA\nConsumer prices: all items\nFrance\nGrowth on the same period of the previous year\nAnnual\n13.314400\n\n\n2\nannual\nOECD\nMEI\nMain Economic Indicators Publication\nFRA.NAEXCP01.STSA.A\nFrance – National Accounts &gt; GDP by Expenditur...\n1982\n1982-01-01\n585.990\n585.990\n...\n11.978476\nCPALTT01\nFRA\nGY\nA\nConsumer prices: all items\nFrance\nGrowth on the same period of the previous year\nAnnual\n11.978476\n\n\n3\nannual\nOECD\nMEI\nMain Economic Indicators Publication\nFRA.NAEXCP01.STSA.A\nFrance – National Accounts &gt; GDP by Expenditur...\n1983\n1983-01-01\n650.514\n650.514\n...\n9.459548\nCPALTT01\nFRA\nGY\nA\nConsumer prices: all items\nFrance\nGrowth on the same period of the previous year\nAnnual\n9.459548\n\n\n4\nannual\nOECD\nMEI\nMain Economic Indicators Publication\nFRA.NAEXCP01.STSA.A\nFrance – National Accounts &gt; GDP by Expenditur...\n1984\n1984-01-01\n707.030\n707.030\n...\n7.673803\nCPALTT01\nFRA\nGY\nA\nConsumer prices: all items\nFrance\nGrowth on the same period of the previous year\nAnnual\n7.673803\n\n\n\n\n5 rows × 37 columns\n\n\n\n\nddf.columns\n\nIndex(['@frequency_x', 'provider_code_x', 'dataset_code_x', 'dataset_name_x',\n       'series_code_x', 'series_name_x', 'original_period_x', 'period',\n       'original_value_x', 'value_x', 'LOCATION_x', 'SUBJECT_x', 'MEASURE_x',\n       'FREQUENCY_x', 'Country_x', 'Subject_x', 'Measure_x', 'Frequency_x',\n       'gdp', '@frequency_y', 'provider_code_y', 'dataset_code_y',\n       'dataset_name_y', 'series_code_y', 'series_name_y', 'original_period_y',\n       'original_value_y', 'value_y', 'SUBJECT_y', 'LOCATION_y', 'MEASURE_y',\n       'FREQUENCY_y', 'Subject_y', 'Country_y', 'Measure_y', 'Frequency_y',\n       'inflation'],\n      dtype='object')\n\n\n\n# plot time series:\nplt.figure(figsize=(12,5))\nplt.subplot(121)\nplt.plot(ddf['period'], ddf['gdp'])\nplt.title(\"gdp\")\nplt.subplot(122)\nplt.plot(ddf['period'], ddf['inflation'])\nplt.title('inflation')\nplt.tight_layout()\n\n\n\n\n\n\n\n\n\n# let's add unemployment too\nddf = ddf.merge(df_unemployment, on='period')\nddf.head()\n\n\n\n\n\n\n\n\n@frequency_x\nprovider_code_x\ndataset_code_x\ndataset_name_x\nseries_code_x\nseries_name_x\noriginal_period_x\nperiod\noriginal_value_x\nvalue_x\n...\nseries_code\nseries_name\noriginal_period\noriginal_value\nvalue\nSUB\nLOCATION\nSubject\nCountry\nunemployment\n\n\n\n\n0\nannual\nOECD\nMEI\nMain Economic Indicators Publication\nFRA.NAEXCP01.STSA.A\nFrance – National Accounts &gt; GDP by Expenditur...\n2003\n2003-01-01\n1630.666\n1630.666\n...\nUNEMPLRT_T1C.FRA\nUnemployment rates: total – France\n2003\n8.099563\n8.099563\nUNEMPLRT_T1C\nFRA\nUnemployment rates: total\nFrance\n8.099563\n\n\n1\nannual\nOECD\nMEI\nMain Economic Indicators Publication\nFRA.NAEXCP01.STSA.A\nFrance – National Accounts &gt; GDP by Expenditur...\n2004\n2004-01-01\n1704.017\n1704.017\n...\nUNEMPLRT_T1C.FRA\nUnemployment rates: total – France\n2004\n8.468398\n8.468398\nUNEMPLRT_T1C\nFRA\nUnemployment rates: total\nFrance\n8.468398\n\n\n2\nannual\nOECD\nMEI\nMain Economic Indicators Publication\nFRA.NAEXCP01.STSA.A\nFrance – National Accounts &gt; GDP by Expenditur...\n2005\n2005-01-01\n1765.903\n1765.903\n...\nUNEMPLRT_T1C.FRA\nUnemployment rates: total – France\n2005\n8.493855\n8.493855\nUNEMPLRT_T1C\nFRA\nUnemployment rates: total\nFrance\n8.493855\n\n\n3\nannual\nOECD\nMEI\nMain Economic Indicators Publication\nFRA.NAEXCP01.STSA.A\nFrance – National Accounts &gt; GDP by Expenditur...\n2006\n2006-01-01\n1848.150\n1848.150\n...\nUNEMPLRT_T1C.FRA\nUnemployment rates: total – France\n2006\n8.449007\n8.449007\nUNEMPLRT_T1C\nFRA\nUnemployment rates: total\nFrance\n8.449007\n\n\n4\nannual\nOECD\nMEI\nMain Economic Indicators Publication\nFRA.NAEXCP01.STSA.A\nFrance – National Accounts &gt; GDP by Expenditur...\n2007\n2007-01-01\n1941.361\n1941.361\n...\nUNEMPLRT_T1C.FRA\nUnemployment rates: total – France\n2007\n7.658579\n7.658579\nUNEMPLRT_T1C\nFRA\nUnemployment rates: total\nFrance\n7.658579\n\n\n\n\n5 rows × 51 columns\n\n\n\n\n# let's keep only what we need\nddf = ddf[['period', 'inflation', 'gdp', 'unemployment']]\n\n\n# let the period be the index of the dataframe\nddf.index = ddf['period']\nddf.head()\n\n\n\n\n\n\n\n\nperiod\ninflation\ngdp\nunemployment\n\n\nperiod\n\n\n\n\n\n\n\n\n2003-01-01\n2003-01-01\n2.098472\n1630.666\n8.099563\n\n\n2004-01-01\n2004-01-01\n2.142090\n1704.017\n8.468398\n\n\n2005-01-01\n2005-01-01\n1.745869\n1765.903\n8.493855\n\n\n2006-01-01\n2006-01-01\n1.675124\n1848.150\n8.449007\n\n\n2007-01-01\n2007-01-01\n1.487998\n1941.361\n7.658579\n\n\n\n\n\n\n\n\n# to keep things tidy, we can remove the period column\nddf = ddf.drop(columns=['period'])\nddf.head()\n\n\n\n\n\n\n\n\ninflation\ngdp\nunemployment\n\n\nperiod\n\n\n\n\n\n\n\n2003-01-01\n2.098472\n1630.666\n8.099563\n\n\n2004-01-01\n2.142090\n1704.017\n8.468398\n\n\n2005-01-01\n1.745869\n1765.903\n8.493855\n\n\n2006-01-01\n1.675124\n1848.150\n8.449007\n\n\n2007-01-01\n1.487998\n1941.361\n7.658579\n\n\n\n\n\n\n\nNow we’ve got a nice, easy to use, dataframe !\n\nCompute growth rate of gdp.\n\n\n#a new series with the observations from period before can be obtained using .shift()(\n# note the missing value for the initial date\nddf.shift(1).head()\n\n\n\n\n\n\n\n\ninflation\ngdp\nunemployment\n\n\nperiod\n\n\n\n\n\n\n\n2003-01-01\nNaN\nNaN\nNaN\n\n\n2004-01-01\n2.098472\n1630.666\n8.099563\n\n\n2005-01-01\n2.142090\n1704.017\n8.468398\n\n\n2006-01-01\n1.745869\n1765.903\n8.493855\n\n\n2007-01-01\n1.675124\n1848.150\n8.449007\n\n\n\n\n\n\n\n\n# now we can compute growth rates\nddf['gdp_growth'] = (ddf['gdp']-ddf['gdp'].shift(1))/(ddf['gdp'].shift(1))*100\n\n\nddf['gdp_growth'].head()\n\nperiod\n2003-01-01         NaN\n2004-01-01    4.498223\n2005-01-01    3.631771\n2006-01-01    4.657504\n2007-01-01    5.043476\nName: gdp_growth, dtype: float64\n\n\n\nPlot two graphs two verify graphically the Phillips curve (unemployment against inflation) and Okun’s law (unemployment against output).\n\n\nddf.columns\n\nIndex(['inflation', 'gdp', 'unemployment', 'gdp_growth'], dtype='object')\n\n\n\nplt.plot(ddf['unemployment'], ddf['inflation'], 'o')\nplt.xlabel(\"Unemployment (%)\")\nplt.ylabel(\"Inflation (%)\")\nplt.title(\"Phillips curve (2004-2020)\")\n\nText(0.5, 1.0, 'Phillips curve (2004-2020)')\n\n\n\n\n\n\n\n\n\nWithout any econometric, work, it would seem that the Phillips relationship holds pretty well in France from 2004 to 2020.\n\nplt.plot(ddf['unemployment'], ddf['gdp_growth'], 'o')\nplt.xlabel(\"Unemployment (%)\")\nplt.ylabel(\"GDP growth (%)\")\nplt.title(\"Okun's law (France: 2004-2020)\")\n\nText(0.5, 1.0, \"Okun's law (France: 2004-2020)\")\n\n\n\n\n\n\n\n\n\nAs for Okun’s law, again, the negeative relationship between GDP growth and unemployment holds fairly well, save for one very abnormal point.\n\nBonus: alternative solution to import the data\n\nIt is possible to import all series at once, by supplying all identifiers to the ‘fetch_series’ method.\n\nfull_df = dbnomics.fetch_series(['OECD/KEI/CPALTT01.USA.GP.A', 'OECD/MEI/FRA.NAEXCP01.STSA.A', 'OECD/CSPCUBE/UNEMPLRT_T1C.FRA'])\nfull_df.head()\n\n\n\n\n\n\n\n\n@frequency\nprovider_code\ndataset_code\ndataset_name\nseries_code\nseries_name\noriginal_period\nperiod\noriginal_value\nvalue\n...\nSubject\nCountry\nSubject\nCountry\nMeasure\nFrequency\nCountry\nSubject\nMeasure\nFrequency\n\n\n\n\n0\nannual\nOECD\nKEI\nKey Short-Term Economic Indicators\nCPALTT01.USA.GP.A\nConsumer prices: all items – United States – G...\n1956\n1956-01-01\n1.525054\n1.525054\n...\nConsumer prices: all items\nUnited States\nConsumer prices: all items\nUnited States\nGrowth previous period\nAnnual\nUnited States\nConsumer prices: all items\nGrowth previous period\nAnnual\n\n\n1\nannual\nOECD\nKEI\nKey Short-Term Economic Indicators\nCPALTT01.USA.GP.A\nConsumer prices: all items – United States – G...\n1957\n1957-01-01\n3.341508\n3.341508\n...\nConsumer prices: all items\nUnited States\nConsumer prices: all items\nUnited States\nGrowth previous period\nAnnual\nUnited States\nConsumer prices: all items\nGrowth previous period\nAnnual\n\n\n2\nannual\nOECD\nKEI\nKey Short-Term Economic Indicators\nCPALTT01.USA.GP.A\nConsumer prices: all items – United States – G...\n1958\n1958-01-01\n2.729160\n2.729160\n...\nConsumer prices: all items\nUnited States\nConsumer prices: all items\nUnited States\nGrowth previous period\nAnnual\nUnited States\nConsumer prices: all items\nGrowth previous period\nAnnual\n\n\n3\nannual\nOECD\nKEI\nKey Short-Term Economic Indicators\nCPALTT01.USA.GP.A\nConsumer prices: all items – United States – G...\n1959\n1959-01-01\n1.010684\n1.010684\n...\nConsumer prices: all items\nUnited States\nConsumer prices: all items\nUnited States\nGrowth previous period\nAnnual\nUnited States\nConsumer prices: all items\nGrowth previous period\nAnnual\n\n\n4\nannual\nOECD\nKEI\nKey Short-Term Economic Indicators\nCPALTT01.USA.GP.A\nConsumer prices: all items – United States – G...\n1960\n1960-01-01\n1.457976\n1.457976\n...\nConsumer prices: all items\nUnited States\nConsumer prices: all items\nUnited States\nGrowth previous period\nAnnual\nUnited States\nConsumer prices: all items\nGrowth previous period\nAnnual\n\n\n\n\n5 rows × 30 columns\n\n\n\n\nfull_df['series_name'].unique()\n\narray(['Consumer prices: all items – United States – Growth previous period – Annual',\n       'France – National Accounts &gt; GDP by Expenditure &gt; Current Prices &gt; Gross Domestic Product - Total – Level, rate or national currency, s.a. – Annual',\n       'Unemployment rates: total – France'], dtype=object)\n\n\nIn the result, each line corresponds to an observation. The column series_name contains the relevant observation. Let’s keep only the relevant column to get a clearer view.\n\ndf_long = full_df[['period', 'series_name','value']]\n\nThis is essentially the long format. We can use it as is, or convert to the wide format.\n\ndf_long.columns\n\nIndex(['period', 'series_name', 'value'], dtype='object')\n\n\n\ndf_long\n\n\n\n\n\n\n\n\nperiod\nseries_name\nvalue\n\n\n\n\n0\n1956-01-01\nConsumer prices: all items – United States – G...\n1.525054\n\n\n1\n1957-01-01\nConsumer prices: all items – United States – G...\n3.341508\n\n\n2\n1958-01-01\nConsumer prices: all items – United States – G...\n2.729160\n\n\n3\n1959-01-01\nConsumer prices: all items – United States – G...\n1.010684\n\n\n4\n1960-01-01\nConsumer prices: all items – United States – G...\n1.457976\n\n\n...\n...\n...\n...\n\n\n11\n2014-01-01\nUnemployment rates: total – France\n10.291710\n\n\n12\n2015-01-01\nUnemployment rates: total – France\n10.359810\n\n\n13\n2016-01-01\nUnemployment rates: total – France\n10.056610\n\n\n14\n2017-01-01\nUnemployment rates: total – France\n9.398605\n\n\n15\n2018-01-01\nUnemployment rates: total – France\n9.059228\n\n\n\n\n120 rows × 3 columns\n\n\n\nTo convert it to the wide format, use the pivot function.\n\ndf_wide = df_long.pivot(index='period', columns=['series_name'])\n\n\ndf_wide\n\n\n\n\n\n\n\n\nvalue\n\n\nseries_name\nConsumer prices: all items – United States – Growth previous period – Annual\nFrance – National Accounts &gt; GDP by Expenditure &gt; Current Prices &gt; Gross Domestic Product - Total – Level, rate or national currency, s.a. – Annual\nUnemployment rates: total – France\n\n\nperiod\n\n\n\n\n\n\n\n1956-01-01\n1.525054\nNaN\nNaN\n\n\n1957-01-01\n3.341508\nNaN\nNaN\n\n\n1958-01-01\n2.729160\nNaN\nNaN\n\n\n1959-01-01\n1.010684\nNaN\nNaN\n\n\n1960-01-01\n1.457976\nNaN\nNaN\n\n\n...\n...\n...\n...\n\n\n2015-01-01\n0.118627\n2198.432\n10.359810\n\n\n2016-01-01\n1.261583\n2234.129\n10.056610\n\n\n2017-01-01\n2.130110\n2297.244\n9.398605\n\n\n2018-01-01\n2.442583\n2360.686\n9.059228\n\n\n2019-01-01\n1.812210\n2425.710\nNaN\n\n\n\n\n64 rows × 3 columns\n\n\n\n\n# rename columns\ndf_wide.columns = ['inflation','gdp', 'unemployment']\n\n\n# and here is our tidy dataframe !\ndf_wide\n\n\n\n\n\n\n\n\ninflation\ngdp\nunemployment\n\n\nperiod\n\n\n\n\n\n\n\n1956-01-01\n1.525054\nNaN\nNaN\n\n\n1957-01-01\n3.341508\nNaN\nNaN\n\n\n1958-01-01\n2.729160\nNaN\nNaN\n\n\n1959-01-01\n1.010684\nNaN\nNaN\n\n\n1960-01-01\n1.457976\nNaN\nNaN\n\n\n...\n...\n...\n...\n\n\n2015-01-01\n0.118627\n2198.432\n10.359810\n\n\n2016-01-01\n1.261583\n2234.129\n10.056610\n\n\n2017-01-01\n2.130110\n2297.244\n9.398605\n\n\n2018-01-01\n2.442583\n2360.686\n9.059228\n\n\n2019-01-01\n1.812210\n2425.710\nNaN\n\n\n\n\n64 rows × 3 columns"
  },
  {
    "objectID": "slides/session_9/index_handout.html",
    "href": "slides/session_9/index_handout.html",
    "title": "Large Language Models for Finance",
    "section": "",
    "text": "Come back later!."
  },
  {
    "objectID": "slides/osession_10/graphs/inference.html",
    "href": "slides/osession_10/graphs/inference.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "from matplotlib import pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n\ndef generate_dataset(μ1, μ2, α, β, σ, N=10):\n    xvec = np.random.uniform(μ1, μ2, N)\n    yvec = α + β*xvec + np.random.normal(size=N)*σ\n    return pd.DataFrame({'x': xvec, 'y': yvec})\n\n\ndf = generate_dataset(0.0, 1.0, 0.1, 0.8, 0.1)\n\n\nplt.plot(df['x'], df['y'], 'o')\nplt.grid()\n\n\n\n\n\n\n\n\n\ndef plot_distribution(α, β, σ, N=100000, μ1=0.0, μ2=1.0):\n    xvec = np.random.uniform(μ1, μ2, N)\n    yvec = α + β*xvec + np.random.normal(size=N)*σ\n    plt.plot(xvec, yvec, '.r', alpha=0.005)\n    plt.plot(xvec, α + β*xvec, color='black')\n\n# missing ridge line\n\n\nimport statsmodels\n\n\nμ1 = 0\nμ2 = 1.0\nα = 0.1\nβ = 0.8\nσ = 0.2\nN = 20\nK = 1000\n\n\nimport statsmodels.formula.api as smf\n\n\ndf = generate_dataset(μ1, μ2, α, β, σ, N=N)\n\n\nres = smf.ols(formula='y ~ x + 1', data=df).fit()\nparams = res.params\nαhat = params['Intercept']\nβhat = params['x']\nσhat = res.resid.std()\n\n\nres.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\ny\nR-squared:\n0.692\n\n\nModel:\nOLS\nAdj. R-squared:\n0.675\n\n\nMethod:\nLeast Squares\nF-statistic:\n40.48\n\n\nDate:\nTue, 26 Jan 2021\nProb (F-statistic):\n5.41e-06\n\n\nTime:\n04:02:36\nLog-Likelihood:\n7.6662\n\n\nNo. Observations:\n20\nAIC:\n-11.33\n\n\nDf Residuals:\n18\nBIC:\n-9.341\n\n\nDf Model:\n1\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n0.1210\n0.077\n1.565\n0.135\n-0.041\n0.283\n\n\nx\n0.7941\n0.125\n6.362\n0.000\n0.532\n1.056\n\n\n\n\n\n\n\n\nOmnibus:\n1.410\nDurbin-Watson:\n1.507\n\n\nProb(Omnibus):\n0.494\nJarque-Bera (JB):\n0.890\n\n\nSkew:\n-0.081\nProb(JB):\n0.641\n\n\nKurtosis:\n1.979\nCond. No.\n4.20\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\nres.predict(df['x'])\n\n0     0.326200\n1     0.211704\n2     0.798819\n3     0.603306\n4     0.573319\n5     0.823919\n6     0.740622\n7     0.503227\n8     0.292622\n9     0.489566\n10    0.138720\n11    0.355157\n12    0.594171\n13    0.883917\n14    0.266229\n15    0.827021\n16    0.912376\n17    0.163088\n18    0.684858\n19    0.732782\ndtype: float64\n\n\n\nfor i in [1,2,3]:\n    \n    fig = plt.figure(figsize=(10,14))\n    plt.subplot(311)\n    plot_distribution(0.1, 0.8, 0.2)\n    plt.grid()\n    plt.title(f\"True Distribution: $y = {α:.2f} + {β:.2f} x + {σ:.2f} u$\")\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n\n    plt.subplot(312)\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n    if i&gt;=2:\n        plt.plot(df['x'], df['y'], 'o')\n    if i&gt;=3:\n        plt.plot(df['x'], res.predict(), label=f'$\\hat{{α}}={αhat:.2f}; \\hat{{β}}={βhat:.2f}$')\n        plt.legend(loc='lower right')\n    plt.title(\"Random Draw\")\n    plt.grid()\n    \n    plt.savefig(f\"regression_uncertainty_{i}.png\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport scipy.stats\n\n\ndatasets = [generate_dataset(μ1, μ2, αhat, βhat, σhat, N=N) for i in range(K)]\nall_params = [smf.ols(formula='x ~ y + 1', data=df).fit() for df in datasets]\nαvec = np.array( [e.params['Intercept'] for e in all_params] )\nβvec = np.array( [e.params['y'] for e in all_params] )\n\n\ngkd = scipy.stats.kde.gaussian_kde(βvec)\n\n\nfor i in [1,2,3,4,5,6,7,8,9,10,100]:\n\n    fig = plt.figure(figsize=(10,14))\n    plt.subplot(311)\n    plot_distribution(0.1, 0.8, 0.2)\n    plt.grid()\n    plt.title(f\"True Distribution: $y = {αhat:.2f} + {βhat:.2f} x + {σhat:.2f} u$\")\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n    \n    plt.subplot(312)\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n    df = datasets[i]\n    if i&gt;=2:\n        plt.plot(df['x'], df['y'], 'o')\n    plt.title(\"Random Draw\")\n    plt.grid()\n\n    plt.subplot(313)\n    if i==3:\n        plt.plot(βvec[i], βvec[i]*0, 'o')\n    if i&gt;4:\n        plt.plot(βvec[3:i], βvec[3:i]*0, 'o')\n    if i&gt;10:\n        xx = np.linspace(0.2, 1.4, 10000)\n        plt.plot( βvec, gkd.pdf(βvec), '.')\n    plt.title(\"Distribution of β\")\n    plt.xlim(0.2, 1.4)\n    plt.ylim(-0.1, 4)\n    plt.grid()\n\n    plt.tight_layout()\n\n    plt.savefig(f\"random_estimates_{i}.png\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplt.plot( βvec, βvec*0, 'o')"
  },
  {
    "objectID": "slides/pession_6/recap.html#important-points",
    "href": "slides/pession_6/recap.html#important-points",
    "title": "Quick Recap",
    "section": "Important points",
    "text": "Important points"
  },
  {
    "objectID": "slides/pession_6/machine_learning_regressions_correction.html",
    "href": "slides/pession_6/machine_learning_regressions_correction.html",
    "title": "Machine learning: regressions",
    "section": "",
    "text": "Objectives:"
  },
  {
    "objectID": "slides/pession_6/machine_learning_regressions_correction.html#diabetes-dataset-basic-regression",
    "href": "slides/pession_6/machine_learning_regressions_correction.html#diabetes-dataset-basic-regression",
    "title": "Machine learning: regressions",
    "section": "Diabetes dataset: basic regression",
    "text": "Diabetes dataset: basic regression\nImport the diabetes dataset from sklearn. Describe it.\n\nimport sklearn\nimport sklearn.datasets\n\ndataset = sklearn.datasets.load_diabetes()\n# the result is a dictionary:\n# 'data': features\n# 'target' labels\n# 'feature_names': names of the features\n# `DESCR`: description\n\n\nprint( dataset['DESCR'] )\n\n.. _diabetes_dataset:\n\nDiabetes dataset\n----------------\n\nTen baseline variables, age, sex, body mass index, average blood\npressure, and six blood serum measurements were obtained for each of n =\n442 diabetes patients, as well as the response of interest, a\nquantitative measure of disease progression one year after baseline.\n\n**Data Set Characteristics:**\n\n  :Number of Instances: 442\n\n  :Number of Attributes: First 10 columns are numeric predictive values\n\n  :Target: Column 11 is a quantitative measure of disease progression one year after baseline\n\n  :Attribute Information:\n      - age     age in years\n      - sex\n      - bmi     body mass index\n      - bp      average blood pressure\n      - s1      tc, total serum cholesterol\n      - s2      ldl, low-density lipoproteins\n      - s3      hdl, high-density lipoproteins\n      - s4      tch, total cholesterol / HDL\n      - s5      ltg, possibly log of serum triglycerides level\n      - s6      glu, blood sugar level\n\nNote: Each of these 10 feature variables have been mean centered and scaled by the standard deviation times the square root of `n_samples` (i.e. the sum of squares of each column totals 1).\n\nSource URL:\nhttps://www4.stat.ncsu.edu/~boos/var.select/diabetes.html\n\nFor more information see:\nBradley Efron, Trevor Hastie, Iain Johnstone and Robert Tibshirani (2004) \"Least Angle Regression,\" Annals of Statistics (with discussion), 407-499.\n(https://web.stanford.edu/~hastie/Papers/LARS/LeastAngle_2002.pdf)\n\n\n\n\n# create a dataframe\nimport pandas\n\ndf = pandas.DataFrame(dataset['data'], columns=dataset['feature_names'])\n\ndf['disease_progression'] = dataset['target']\n\n\ndf.describe()\n# we observe that mean of varaibles  is zero\n# standard deviations are the same for all variables\n# model has been normalized already:\n\n\n\n\n\n\n\n\nage\nsex\nbmi\nbp\ns1\ns2\ns3\ns4\ns5\ns6\ndisease_progression\n\n\n\n\ncount\n4.420000e+02\n4.420000e+02\n4.420000e+02\n4.420000e+02\n4.420000e+02\n4.420000e+02\n4.420000e+02\n4.420000e+02\n4.420000e+02\n4.420000e+02\n442.000000\n\n\nmean\n-2.511817e-19\n1.230790e-17\n-2.245564e-16\n-4.797570e-17\n-1.381499e-17\n3.918434e-17\n-5.777179e-18\n-9.042540e-18\n9.293722e-17\n1.130318e-17\n152.133484\n\n\nstd\n4.761905e-02\n4.761905e-02\n4.761905e-02\n4.761905e-02\n4.761905e-02\n4.761905e-02\n4.761905e-02\n4.761905e-02\n4.761905e-02\n4.761905e-02\n77.093005\n\n\nmin\n-1.072256e-01\n-4.464164e-02\n-9.027530e-02\n-1.123988e-01\n-1.267807e-01\n-1.156131e-01\n-1.023071e-01\n-7.639450e-02\n-1.260971e-01\n-1.377672e-01\n25.000000\n\n\n25%\n-3.729927e-02\n-4.464164e-02\n-3.422907e-02\n-3.665608e-02\n-3.424784e-02\n-3.035840e-02\n-3.511716e-02\n-3.949338e-02\n-3.324559e-02\n-3.317903e-02\n87.000000\n\n\n50%\n5.383060e-03\n-4.464164e-02\n-7.283766e-03\n-5.670422e-03\n-4.320866e-03\n-3.819065e-03\n-6.584468e-03\n-2.592262e-03\n-1.947171e-03\n-1.077698e-03\n140.500000\n\n\n75%\n3.807591e-02\n5.068012e-02\n3.124802e-02\n3.564379e-02\n2.835801e-02\n2.984439e-02\n2.931150e-02\n3.430886e-02\n3.243232e-02\n2.791705e-02\n211.500000\n\n\nmax\n1.107267e-01\n5.068012e-02\n1.705552e-01\n1.320436e-01\n1.539137e-01\n1.987880e-01\n1.811791e-01\n1.852344e-01\n1.335973e-01\n1.356118e-01\n346.000000\n\n\n\n\n\n\n\n\nimport seaborn\n\n\nseaborn.pairplot(df)\n\n\n\n\n\n\n\n\nSplit the dataset into a training set (70%) and a test set (30%)\n\nfrom sklearn.model_selection import train_test_split\n\n\n# features: dataset['data']\n# dataset['data'].shape # one line per observation, one column per feature (variable)\n\n\n# labels: dataset['target'] what we are trying to predict\ndataset['target'].shape\n\n(442,)\n\n\n\nX_train, X_test, y_train, y_test = train_test_split(dataset['data'], dataset['target'], test_size=0.3, random_state=56)\n# the choice of a random_state initializes a random seed so that every time it is run the notebook\n# returns exactly the same results\n\nTrain a linear model (with intercept) on the training set\n\n# since the model is already normalized, we can create the model directly\nfrom sklearn.linear_model import LinearRegression\n\nmodel = LinearRegression()   # don't forget the round bracket to get a model object\nmodel.fit(X_train, y_train)\n\nLinearRegression()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.LinearRegressionLinearRegression()\n\n\n\n# visualize model predictions:\n\n# from matplotlib import pyplot as plt\n\n# plt.plot(  )\n# plt.plot( model.predict(X_train) )\n\n\nmodel.intercept_ # a\n\n152.82810842206453\n\n\n\nmodel.coef_ # b_1, b_2, .... b_10|\n\narray([   3.04174075, -209.76813682,  501.77871853,  286.88207011,\n       -991.92731799,  603.10838272,  228.80501285,  226.30296964,\n        905.67772303,   92.55739263])\n\n\nCompute the fitting score on the test set. (Bonus: compare with your own computation of \\(R^2\\))\n\nmodel.score(X_test, y_test)\n\n0.43965636272283437\n\n\n\n# compare with the training set:\nmodel.score(X_train, y_train)\n\n0.541861476456197\n\n\nShould we adjust the size of the test set? What would be the problem?\n\n#### WARNING\n####\n#### very bad approach\n\n\n# let's try different sizes\n\nsizes = [0.01, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\nscores = []\nfor s in sizes:\n    X_train, X_test, y_train, y_test = train_test_split(dataset['data'], dataset['target'], test_size=0.3)\n\n    model = LinearRegression()   # don't forget the round bracket to get a model object\n    model.fit(X_train, y_train)\n    score = model.score(X_test, y_test) # score with x% test set\n\n    scores.append(score)\n\n\nfrom matplotlib import pyplot as plt\nplt.plot(sizes, scores)\n\n\n\n\n\n\n\n\nImplement \\(k\\)-fold model with \\(k=3\\).\n\nX = dataset['data']\ny = dataset['target']\n\n\n# to keep the scores\nscores = []\n\n\nfrom sklearn.model_selection import KFold\nkf = KFold(n_splits=3)\n\nfor train_index, test_index in kf.split(X):\n    \n    X_train, X_test = X[train_index], X[test_index]\n    y_train, y_test = y[train_index], y[test_index]\n\n    ## train a model in X_train, y_train\n    ## test it on X_test, y_test\n    model = LinearRegression()   # don't forget the round bracket to get a model object\n    model.fit(X_train, y_train)\n    score = model.score(X_test, y_test) # score with x% test set\n\n    scores.append(score)\n\n\nscores\n\n[0.46930417754348197, 0.4872526062543143, 0.5095496056127979]\n\n\n\n# it gives us a sense of the predictive power of the regression\n\nBonus: use statsmodels (or linearmodels) to estimate the same linear model on the full sample. Is it always a superior method?\n\nimport statsmodels\nfrom statsmodels.formula import api as smf\n\n\ndf.columns\n\nIndex(['age', 'sex', 'bmi', 'bp', 's1', 's2', 's3', 's4', 's5', 's6',\n       'disease_progression'],\n      dtype='object')\n\n\n\nregmodel = smf.ols(formula=\"disease_progression ~ age + sex + bmi + bp + s1 + s2 + s3 + s4 + s5 + s6\", data=df)\nregresults = regmodel.fit()\n\n\nregresults.summary() # econometric estimation of R^2 is 0.51\n\n\nOLS Regression Results\n\n\nDep. Variable:\ndisease_progression\nR-squared:\n0.518\n\n\nModel:\nOLS\nAdj. R-squared:\n0.507\n\n\nMethod:\nLeast Squares\nF-statistic:\n46.27\n\n\nDate:\nMon, 27 Mar 2023\nProb (F-statistic):\n3.83e-62\n\n\nTime:\n21:46:43\nLog-Likelihood:\n-2386.0\n\n\nNo. Observations:\n442\nAIC:\n4794.\n\n\nDf Residuals:\n431\nBIC:\n4839.\n\n\nDf Model:\n10\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n152.1335\n2.576\n59.061\n0.000\n147.071\n157.196\n\n\nage\n-10.0099\n59.749\n-0.168\n0.867\n-127.446\n107.426\n\n\nsex\n-239.8156\n61.222\n-3.917\n0.000\n-360.147\n-119.484\n\n\nbmi\n519.8459\n66.533\n7.813\n0.000\n389.076\n650.616\n\n\nbp\n324.3846\n65.422\n4.958\n0.000\n195.799\n452.970\n\n\ns1\n-792.1756\n416.680\n-1.901\n0.058\n-1611.153\n26.802\n\n\ns2\n476.7390\n339.030\n1.406\n0.160\n-189.620\n1143.098\n\n\ns3\n101.0433\n212.531\n0.475\n0.635\n-316.684\n518.770\n\n\ns4\n177.0632\n161.476\n1.097\n0.273\n-140.315\n494.441\n\n\ns5\n751.2737\n171.900\n4.370\n0.000\n413.407\n1089.140\n\n\ns6\n67.6267\n65.984\n1.025\n0.306\n-62.064\n197.318\n\n\n\n\n\n\n\n\nOmnibus:\n1.506\nDurbin-Watson:\n2.029\n\n\nProb(Omnibus):\n0.471\nJarque-Bera (JB):\n1.404\n\n\nSkew:\n0.017\nProb(JB):\n0.496\n\n\nKurtosis:\n2.726\nCond. No.\n227.\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\nTo use lasso regression:\n\nfrom sklearn.linear_model import Lasso\n\n\nX_train, X_test, y_train, y_test = train_test_split(dataset['data'], dataset['target'], test_size=0.3)\nmodel = Lasso()   # don't forget the round bracket to get a model object\nmodel.fit(X_train, y_train)\nscore = model.score(X_test, y_test) # s\n\n\n# on the test set, the fit of the lasso regression is worse than regular regression\n# the regularization parameter should be changed"
  },
  {
    "objectID": "slides/pession_6/machine_learning_regressions_correction.html#sparse-regressions-on-the-boston-house-price-dataset",
    "href": "slides/pession_6/machine_learning_regressions_correction.html#sparse-regressions-on-the-boston-house-price-dataset",
    "title": "Machine learning: regressions",
    "section": "Sparse regressions on the Boston House Price Dataset",
    "text": "Sparse regressions on the Boston House Price Dataset\n!!! update: boston price dataset has been deprecated\n!!! use california_housing instead\nImport the Boston House Price Dataset from sklearn. Explore the data (description, correlations, histograms…)\n\n# dataset = sklearn.datasets.load_boston()\nfrom sklearn.datasets import fetch_california_housing \ndataset = fetch_california_housing()\n\n\nprint(dataset[\"DESCR\"])\n\n.. _california_housing_dataset:\n\nCalifornia Housing dataset\n--------------------------\n\n**Data Set Characteristics:**\n\n    :Number of Instances: 20640\n\n    :Number of Attributes: 8 numeric, predictive attributes and the target\n\n    :Attribute Information:\n        - MedInc        median income in block group\n        - HouseAge      median house age in block group\n        - AveRooms      average number of rooms per household\n        - AveBedrms     average number of bedrooms per household\n        - Population    block group population\n        - AveOccup      average number of household members\n        - Latitude      block group latitude\n        - Longitude     block group longitude\n\n    :Missing Attribute Values: None\n\nThis dataset was obtained from the StatLib repository.\nhttps://www.dcc.fc.up.pt/~ltorgo/Regression/cal_housing.html\n\nThe target variable is the median house value for California districts,\nexpressed in hundreds of thousands of dollars ($100,000).\n\nThis dataset was derived from the 1990 U.S. census, using one row per census\nblock group. A block group is the smallest geographical unit for which the U.S.\nCensus Bureau publishes sample data (a block group typically has a population\nof 600 to 3,000 people).\n\nAn household is a group of people residing within a home. Since the average\nnumber of rooms and bedrooms in this dataset are provided per household, these\ncolumns may take surpinsingly large values for block groups with few households\nand many empty houses, such as vacation resorts.\n\nIt can be downloaded/loaded using the\n:func:`sklearn.datasets.fetch_california_housing` function.\n\n.. topic:: References\n\n    - Pace, R. Kelley and Ronald Barry, Sparse Spatial Autoregressions,\n      Statistics and Probability Letters, 33 (1997) 291-297\n\n\n\n\n# dataset = sklearn.datasets.load_boston()\nfrom sklearn.datasets import fetch_california_housing \ndataset = fetch_california_housing()\n\nSplit the dataset into a training set (70%) and a test set (30%).\n\nX = dataset['data']\ny = dataset['target']\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.3, random_state=58)\n\nTrain a lasso model to predict house prices. Compute the score on the test set.\n\n# we should check that the data is normalized, or normalize it ourselves\n\n\nfrom sklearn.linear_model import Lasso\nmodel_lasso = Lasso()\nmodel_lasso.fit(X_train, y_train)\n\nLasso()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.LassoLasso()\n\n\n\nmodel_lasso.score(X_test, y_test)\n\n0.28204855993177635\n\n\nTrain a ridge model to predict house prices. Which one is better?\n\nfrom sklearn.linear_model import Ridge\nmodel_ridge = Ridge()\nmodel_ridge.fit(X_train, y_train)\n\nRidge()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.RidgeRidge()\n\n\n\nmodel_ridge.score(X_test, y_test)\n\n0.6060031802405054\n\n\nIt looks like the ridge model has a better fit (score). However, we should have left a test set appart and not used it at all during training phase. Here it has influenced the choice of the model (between ridge and lasso)."
  },
  {
    "objectID": "slides/pession_6/graphs/inference.html",
    "href": "slides/pession_6/graphs/inference.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "from matplotlib import pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n\ndef generate_dataset(μ1, μ2, α, β, σ, N=10):\n    xvec = np.random.uniform(μ1, μ2, N)\n    yvec = α + β*xvec + np.random.normal(size=N)*σ\n    return pd.DataFrame({'x': xvec, 'y': yvec})\n\n\ndf = generate_dataset(0.0, 1.0, 0.1, 0.8, 0.1)\n\n\nplt.plot(df['x'], df['y'], 'o')\nplt.grid()\n\n\n\n\n\n\n\n\n\ndef plot_distribution(α, β, σ, N=100000, μ1=0.0, μ2=1.0):\n    xvec = np.random.uniform(μ1, μ2, N)\n    yvec = α + β*xvec + np.random.normal(size=N)*σ\n    plt.plot(xvec, yvec, '.r', alpha=0.005)\n    plt.plot(xvec, α + β*xvec, color='black')\n\n# missing ridge line\n\n\nimport statsmodels\n\n\nμ1 = 0\nμ2 = 1.0\nα = 0.1\nβ = 0.8\nσ = 0.2\nN = 20\nK = 1000\n\n\nimport statsmodels.formula.api as smf\n\n\ndf = generate_dataset(μ1, μ2, α, β, σ, N=N)\n\n\nres = smf.ols(formula='y ~ x + 1', data=df).fit()\nparams = res.params\nαhat = params['Intercept']\nβhat = params['x']\nσhat = res.resid.std()\n\n\nres.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\ny\nR-squared:\n0.692\n\n\nModel:\nOLS\nAdj. R-squared:\n0.675\n\n\nMethod:\nLeast Squares\nF-statistic:\n40.48\n\n\nDate:\nTue, 26 Jan 2021\nProb (F-statistic):\n5.41e-06\n\n\nTime:\n04:02:36\nLog-Likelihood:\n7.6662\n\n\nNo. Observations:\n20\nAIC:\n-11.33\n\n\nDf Residuals:\n18\nBIC:\n-9.341\n\n\nDf Model:\n1\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n0.1210\n0.077\n1.565\n0.135\n-0.041\n0.283\n\n\nx\n0.7941\n0.125\n6.362\n0.000\n0.532\n1.056\n\n\n\n\n\n\n\n\nOmnibus:\n1.410\nDurbin-Watson:\n1.507\n\n\nProb(Omnibus):\n0.494\nJarque-Bera (JB):\n0.890\n\n\nSkew:\n-0.081\nProb(JB):\n0.641\n\n\nKurtosis:\n1.979\nCond. No.\n4.20\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\nres.predict(df['x'])\n\n0     0.326200\n1     0.211704\n2     0.798819\n3     0.603306\n4     0.573319\n5     0.823919\n6     0.740622\n7     0.503227\n8     0.292622\n9     0.489566\n10    0.138720\n11    0.355157\n12    0.594171\n13    0.883917\n14    0.266229\n15    0.827021\n16    0.912376\n17    0.163088\n18    0.684858\n19    0.732782\ndtype: float64\n\n\n\nfor i in [1,2,3]:\n    \n    fig = plt.figure(figsize=(10,14))\n    plt.subplot(311)\n    plot_distribution(0.1, 0.8, 0.2)\n    plt.grid()\n    plt.title(f\"True Distribution: $y = {α:.2f} + {β:.2f} x + {σ:.2f} u$\")\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n\n    plt.subplot(312)\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n    if i&gt;=2:\n        plt.plot(df['x'], df['y'], 'o')\n    if i&gt;=3:\n        plt.plot(df['x'], res.predict(), label=f'$\\hat{{α}}={αhat:.2f}; \\hat{{β}}={βhat:.2f}$')\n        plt.legend(loc='lower right')\n    plt.title(\"Random Draw\")\n    plt.grid()\n    \n    plt.savefig(f\"regression_uncertainty_{i}.png\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport scipy.stats\n\n\ndatasets = [generate_dataset(μ1, μ2, αhat, βhat, σhat, N=N) for i in range(K)]\nall_params = [smf.ols(formula='x ~ y + 1', data=df).fit() for df in datasets]\nαvec = np.array( [e.params['Intercept'] for e in all_params] )\nβvec = np.array( [e.params['y'] for e in all_params] )\n\n\ngkd = scipy.stats.kde.gaussian_kde(βvec)\n\n\nfor i in [1,2,3,4,5,6,7,8,9,10,100]:\n\n    fig = plt.figure(figsize=(10,14))\n    plt.subplot(311)\n    plot_distribution(0.1, 0.8, 0.2)\n    plt.grid()\n    plt.title(f\"True Distribution: $y = {αhat:.2f} + {βhat:.2f} x + {σhat:.2f} u$\")\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n    \n    plt.subplot(312)\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n    df = datasets[i]\n    if i&gt;=2:\n        plt.plot(df['x'], df['y'], 'o')\n    plt.title(\"Random Draw\")\n    plt.grid()\n\n    plt.subplot(313)\n    if i==3:\n        plt.plot(βvec[i], βvec[i]*0, 'o')\n    if i&gt;4:\n        plt.plot(βvec[3:i], βvec[3:i]*0, 'o')\n    if i&gt;10:\n        xx = np.linspace(0.2, 1.4, 10000)\n        plt.plot( βvec, gkd.pdf(βvec), '.')\n    plt.title(\"Distribution of β\")\n    plt.xlim(0.2, 1.4)\n    plt.ylim(-0.1, 4)\n    plt.grid()\n\n    plt.tight_layout()\n\n    plt.savefig(f\"random_estimates_{i}.png\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplt.plot( βvec, βvec*0, 'o')"
  },
  {
    "objectID": "slides/pession_6/slides.html#regressions",
    "href": "slides/pession_6/slides.html#regressions",
    "title": "Introduction to Machine Learning",
    "section": "Regressions",
    "text": "Regressions"
  },
  {
    "objectID": "slides/pession_6/slides.html#what-is-machine-learning-1",
    "href": "slides/pession_6/slides.html#what-is-machine-learning-1",
    "title": "Introduction to Machine Learning",
    "section": "What is Machine learning?",
    "text": "What is Machine learning?\nDefinition Candidates:\nArthur Samuel: Field of study that gives computers the ability to learn without being explicitly programmed\nTom Mitchell: A computer program is said to learn from experience E with respect to some class of tasks T and performance measure P if its performance at tasks in T, as measured by P, improves with experience E."
  },
  {
    "objectID": "slides/pession_6/slides.html#what-about-artificial-intelligence",
    "href": "slides/pession_6/slides.html#what-about-artificial-intelligence",
    "title": "Introduction to Machine Learning",
    "section": "What about artificial intelligence ?",
    "text": "What about artificial intelligence ?\n\n\n\nAIs\n\nthink and learn\nmimmic human cognition"
  },
  {
    "objectID": "slides/pession_6/slides.html#econometrics-vs-machine-learning",
    "href": "slides/pession_6/slides.html#econometrics-vs-machine-learning",
    "title": "Introduction to Machine Learning",
    "section": "Econometrics vs Machine Learning",
    "text": "Econometrics vs Machine Learning\n\nEconometrics is essentially a subfield of machine learning with a different jargon and a focus on:\n\nstudying properties and validity of results\n\ndata is scarce\ninference\n\nsingling out effects of specific explanatory variables\nestablishing causality\n\nMachine learning:\n\nstructure data\nmake predictions (interpolate data)"
  },
  {
    "objectID": "slides/pession_6/slides.html#data-types",
    "href": "slides/pession_6/slides.html#data-types",
    "title": "Introduction to Machine Learning",
    "section": "Data types",
    "text": "Data types\n\nstructured:\n\ntabular\n\nlong\nwide\n\n\nunstructured:\n\nfiles\nnetworks\ntext, mails\nimages, sound"
  },
  {
    "objectID": "slides/pession_6/slides.html#tabular-data",
    "href": "slides/pession_6/slides.html#tabular-data",
    "title": "Introduction to Machine Learning",
    "section": "Tabular Data",
    "text": "Tabular Data\n\ntabular data"
  },
  {
    "objectID": "slides/pession_6/slides.html#networks",
    "href": "slides/pession_6/slides.html#networks",
    "title": "Introduction to Machine Learning",
    "section": "Networks",
    "text": "Networks\n\nBanking networks\nProduction network"
  },
  {
    "objectID": "slides/pession_6/slides.html#big-data-1",
    "href": "slides/pession_6/slides.html#big-data-1",
    "title": "Introduction to Machine Learning",
    "section": "Big Data",
    "text": "Big Data\n\nBig data:\n\nwide data (K&gt;&gt;N)\nlong data (N&gt;&gt;K)\nheterogenous, unstructured data\n\nMight not even fit in memory\n\nout of core computations\nlearn from a subset of the data"
  },
  {
    "objectID": "slides/pession_6/slides.html#big-subfields-of-machine-learning",
    "href": "slides/pession_6/slides.html#big-subfields-of-machine-learning",
    "title": "Introduction to Machine Learning",
    "section": "Big Subfields of Machine Learning",
    "text": "Big Subfields of Machine Learning\n\n\n\nTraditional classification\n\nsupervised (labelled data)\n\nregression: predict quantity\nclassification: predict index (categorical variable)\n\nunsupervised (no labels)\n\ndimension reduction\nclustering\n\nsemi-supervised / self-supervised\nreinforcement learning\n\nBazillions of different algorithms: https://scikit-learn.org/stable/user_guide.html\n\n\n\n\n\nregression:\n\nPredict: \\(y = f(x; \\theta)\\)\n\n\n\n\n\nsupervised: regression\n\n\n\n\n\nAge\n\n\nActivity\n\n\nSalary\n\n\n\n\n23\n\n\nExplorer\n\n\n1200\n\n\n\n\n40\n\n\nMortician\n\n\n2000\n\n\n\n\n45\n\n\nMortician\n\n\n2500\n\n\n\n\n33\n\n\nMovie Star\n\n\n3000\n\n\n\n\n35\n\n\nExplorer\n\n\n???\n\n\n\n\n\n\nsupervised: classification\n\nOutput is discrete\nRegular trick: \\(\\sigma(f(x; \\theta))\\) where \\(\\sigma(x)=\\frac{1}{1-e^{-x}}\\)\n\n\n\n\n\nclassification\n\n\n\n\n\nAge\n\n\nSalary\n\n\nActivity\n\n\n\n\n23\n\n\n1200\n\n\nExplorer\n\n\n\n\n40\n\n\n2000\n\n\nMortician\n\n\n\n\n45\n\n\n2500\n\n\nMortician\n\n\n\n\n33\n\n\n3000\n\n\nMovie Star\n\n\n\n\n35\n\n\n3000\n\n\n???\n\n\n\n\n\nunsupervised\n\norganize data without labels\n\ndimension reduction: describe data with less parameters\nclustering: sort data into “similar groups” (exemple)\n\n\n\n\n\nAge\n\n\nSalary\n\n\nActivity\n\n\n\n\n23\n\n\n1200\n\n\nExplorer\n\n\n\n\n40\n\n\n2000\n\n\nMortician\n\n\n\n\n45\n\n\n2500\n\n\nMortician\n\n\n\n\n33\n\n\n3000\n\n\nMovie Star\n\n\n\n\n35\n\n\n3000\n\n\nExplorer\n\n\n\n\n\nunsupervised: clustering\n\n\n\nkmeansclustering\n\n\n\n\nunsupervised: clustering\nWomen buying dresses during the year:"
  },
  {
    "objectID": "slides/pession_6/slides.html#difference-with-traditional-regression",
    "href": "slides/pession_6/slides.html#difference-with-traditional-regression",
    "title": "Introduction to Machine Learning",
    "section": "Difference with traditional regression",
    "text": "Difference with traditional regression\n\\[\\underbrace{y}_{\\text{explained variable}} = a \\underbrace{x}_{\\text{explanatory variable}} + b\\]"
  },
  {
    "objectID": "slides/pession_6/slides.html#difference-with-traditional-regression-1",
    "href": "slides/pession_6/slides.html#difference-with-traditional-regression-1",
    "title": "Introduction to Machine Learning",
    "section": "Difference with traditional regression",
    "text": "Difference with traditional regression\n\\[\\underbrace{y}_{\\text{labels}} = a \\underbrace{x}_{\\text{features}} + b\\]\n\n\n\n\n\n\n\n\nEconometrics\nMachine learning\n\n\n\n\nRegressand / independent variable / explanatory variable\nFeatures\n\n\nRegressor / dependent variable / explained variable\nLabels\n\n\nRegression\nModel Training"
  },
  {
    "objectID": "slides/pession_6/slides.html#difference-with-traditional-regression-2",
    "href": "slides/pession_6/slides.html#difference-with-traditional-regression-2",
    "title": "Introduction to Machine Learning",
    "section": "Difference with traditional regression",
    "text": "Difference with traditional regression\n\nBig data requires other means to process the data:\n\ndata is long: so many observations \\(x\\) doesn’t fit in the memory\n\nneed to use incremental training method to use only a subsample at a time\n\ndata is wide: so many features, the model is crudely overspecified\n\nneed to build dimension reduction into the objective\n\ndata is nonlinear:\n\nuse nonlinear model (and nonlinear training)\n\ndata is not a simple vector…\n\nsame as nonlinear"
  },
  {
    "objectID": "slides/pession_6/slides.html#long-data",
    "href": "slides/pession_6/slides.html#long-data",
    "title": "Introduction to Machine Learning",
    "section": "Long data",
    "text": "Long data"
  },
  {
    "objectID": "slides/pession_6/slides.html#long-data-1",
    "href": "slides/pession_6/slides.html#long-data-1",
    "title": "Introduction to Machine Learning",
    "section": "Long data",
    "text": "Long data\nLong data is characterized by a high number of observations."
  },
  {
    "objectID": "slides/pession_6/slides.html#long-data-2",
    "href": "slides/pession_6/slides.html#long-data-2",
    "title": "Introduction to Machine Learning",
    "section": "Long data",
    "text": "Long data\n\n\n\nTraditional regression:\n\nfull sample \\(X,Y=(x_i,y_i)_{i=1:N}\\)\nOLS: \\(\\min_{a,b} \\sum_{i=1}^N (a x_i + b - y_i)^2\\)\nclosed-form solution: \\(a = X^{\\prime}X Y\\) and \\(b= ...\\)\nhard to compute if \\(X\\) is very big\n\n\n\n\n\nIncremental learning:\n\ngiven initial \\(a_n\\), \\(b_n\\)\npick \\(N\\) random observations (the batch)\n\nregress them to get new estimate \\(a\\), \\(b\\)\nthis minimizes the square of errors\n\nupdate with learning rate \\(\\beta\\):\n\n\\(a_{n+1} \\leftarrow a_n (1-\\beta_n) + \\beta_n a\\)\n\\(b_{n+1} \\leftarrow b_n (1-\\beta_n) + \\beta_n b\\)\n\nprocess is not biased (that is \\(a\\) converges to the true value) as long as one decreases \\(\\beta\\) sufficiently fast over time (ex: \\(\\beta_n=\\frac{1}{n}\\))"
  },
  {
    "objectID": "slides/pession_6/slides.html#formalisation-a-typical-machine-learning-task",
    "href": "slides/pession_6/slides.html#formalisation-a-typical-machine-learning-task",
    "title": "Introduction to Machine Learning",
    "section": "Formalisation: a typical machine learning task",
    "text": "Formalisation: a typical machine learning task\n\nvector of unknowns: \\(\\theta=(a,b)\\)\ndataset \\(X,Y=(x_i,y_i)_{i=1:N}\\)\nfor a random draw \\(\\omega = (a_{\\sigma(i)}, b_{\\sigma(i)})_{i=[1,N]} \\subset (X,Y)\\)\n\n\\(\\omega\\) is just a random batch of size \\(N\\)\n\ndefine the empirical risk (or empirical cost) \\[\\xi(\\theta, \\omega) = \\sum_{(x,y) \\in \\omega} (y - (a x + b))^2\\]\nwe want to minimize theoretical risk: \\[\\Xi(\\theta) = \\mathbb{E} \\left[ \\xi(\\theta, \\omega)\\right]\\]"
  },
  {
    "objectID": "slides/pession_6/slides.html#training-gradient-descent",
    "href": "slides/pession_6/slides.html#training-gradient-descent",
    "title": "Introduction to Machine Learning",
    "section": "Training: Gradient Descent",
    "text": "Training: Gradient Descent\n\n\n\nHow do we minimize a function \\(f(a,b)\\)?\nGradient descent:\n\n\\(a_k, b_k\\) given\ncompute the gradient (slope) \\(\\nabla_{a,b} f = \\begin{bmatrix} \\frac{\\partial f}{\\partial a} \\\\\\\\ \\frac{\\partial f}{\\partial b}\\end{bmatrix}\\)\nfollow the steepest slope: (Newton Algorithm)\n\n\\[ \\begin{bmatrix} a_{k+1} \\\\\\\\ b_{k+1} \\end{bmatrix} \\leftarrow  \\begin{bmatrix} a_k \\\\\\\\ b_k \\end{bmatrix} - \\nabla_{a,b} f\\]\n\nbut not too fast: use learning rate \\(\\lambda\\): \\[ \\begin{bmatrix} a_{k+1} \\\\\\\\ b_{k+1} \\end{bmatrix} \\leftarrow  (1-\\lambda) \\begin{bmatrix} a_k \\\\\\\\ b_k \\end{bmatrix} + \\lambda (- \\nabla_{a,b} f )\\]"
  },
  {
    "objectID": "slides/pession_6/slides.html#not-everything-goes-wrong-all-the-time",
    "href": "slides/pession_6/slides.html#not-everything-goes-wrong-all-the-time",
    "title": "Introduction to Machine Learning",
    "section": "Not everything goes wrong all the time",
    "text": "Not everything goes wrong all the time\n \n\nIn practice, choosing the right learning rate \\(\\lambda\\) is crucial\n\\(\\lambda\\) is a metaparameter of the model training."
  },
  {
    "objectID": "slides/pession_6/slides.html#wide-data",
    "href": "slides/pession_6/slides.html#wide-data",
    "title": "Introduction to Machine Learning",
    "section": "Wide data",
    "text": "Wide data\n\nWide Data is characterized by a high number of features compared to the number of observations.\n\n\nProblem: - with many independent variables \\(x_1, ... x_K\\), \\(K&gt;&gt;N\\) and one dependent variable \\(y\\) the regression \\[y = a_1 x_1 + a_2 x_2 + \\cdots + a_N x_N + b\\] is grossly overidentified."
  },
  {
    "objectID": "slides/pession_6/slides.html#wide-data-regression",
    "href": "slides/pession_6/slides.html#wide-data-regression",
    "title": "Introduction to Machine Learning",
    "section": "Wide data regression",
    "text": "Wide data regression\n\nMain Idea: penalize non-zero coefficients to encourage scarcity\n\nRidge: \\[\\Xi(a,b) = \\min_{a,b} \\sum_{i=1}^N ( \\sum_j a_j x_j + b - y_i)^2 + \\mu \\sum_i |a_i|^2\\]\n\nshrinks parameters towards zero\nclosed form\n\nLasso: \\[\\Xi(a,b) = \\min_{a,b} \\sum_{i=1}^N (\\sum_j a_j x_j + b - y_i)^2 + \\mu \\sum_i |a_i|\\]\n\neliminates zero coefficients\n\nElastic: Ridge + Lasso\n\nRemarks:\n\n\\(\\mu\\) is called a regularization term.\nit is a hyperparameter\n\\(\\mu \\uparrow\\), bias increases, variance decreases"
  },
  {
    "objectID": "slides/pession_6/slides.html#training",
    "href": "slides/pession_6/slides.html#training",
    "title": "Introduction to Machine Learning",
    "section": "Training",
    "text": "Training\nTo perform Lasso and ridge regression:\n\nAI approach:\n\nminimize objective \\(\\Xi(a,b)\\) directly.\napproach is known as (stochastic) Gradient Descent\n\nUse special algorithms"
  },
  {
    "objectID": "slides/pession_6/slides.html#example-imf-challenge",
    "href": "slides/pession_6/slides.html#example-imf-challenge",
    "title": "Introduction to Machine Learning",
    "section": "Example: IMF challenge",
    "text": "Example: IMF challenge\n\nAn internal IMF challenge to predict crises in countries\nLots of different approaches\nLots of data:\n\nwhich one is relevant\nmachine must select relevant informations\n\nExample: Lasso Regressions and Forecasting Models in Applied Stress Testing by Jorge A. Chan-Lau\n\nin a given developing country\ntries to predict probability of default in various sectors"
  },
  {
    "objectID": "slides/pession_6/slides.html#nonlinear-regression-1",
    "href": "slides/pession_6/slides.html#nonlinear-regression-1",
    "title": "Introduction to Machine Learning",
    "section": "Nonlinear Regression",
    "text": "Nonlinear Regression\n\nSo far, we have assumed,\n\n\\(y_i = a + b x_i\\)\n\\(y_i = a + b x_i + μ_1 (a^2 + b^2) + μ_2 (|a| + |b|)\\)\ndefined \\(\\Xi(a,b)\\) and tried to minimize it\n\nSame approach works for fully nonlinear models\n\n\\(y_i = a x_i + a^2 x_i^2 + c\\)\n\\(y_i = \\varphi(x; \\theta)\\) ()\n\nSpecial case: neural network:\n\nprimer tensor playground"
  },
  {
    "objectID": "slides/pession_6/slides.html#how-to-evaluate-the-machine-learning",
    "href": "slides/pession_6/slides.html#how-to-evaluate-the-machine-learning",
    "title": "Introduction to Machine Learning",
    "section": "how to evaluate the machine learning",
    "text": "how to evaluate the machine learning\nIn machine learning we can’t perform statistical inference easily. How do we assess the validity of a model?\n\nBasic idea (independent of how complex the algorithm is)\n\nseparate data in\n\ntraining set (in-sample)\ntest set (out of sample)\n\ntrain using only the training set\nevaluate performance on the test set\n\nPerformance can be:\n\nfitness, number of classification errors (false positive, false negative)"
  },
  {
    "objectID": "slides/pession_6/slides.html#how-to-evaluate-the-machine-learning-1",
    "href": "slides/pession_6/slides.html#how-to-evaluate-the-machine-learning-1",
    "title": "Introduction to Machine Learning",
    "section": "how to evaluate the machine learning",
    "text": "how to evaluate the machine learning\nIn case the training method depends itself on many parameters (the hyperparameters) we make three samples instead:\n\ntraining set (in-sample)\nvalidation set (to update hyperparameters)\ntest set (out of sample)\n\nGolden Rule: the test set should not be used to estimate the model, and should not affect the choice any training parameter (hyperparameter)."
  },
  {
    "objectID": "slides/pession_6/slides.html#section",
    "href": "slides/pession_6/slides.html#section",
    "title": "Introduction to Machine Learning",
    "section": "",
    "text": "Traintest\nThe test set reveals that orange model is overfitting."
  },
  {
    "objectID": "slides/pession_6/slides.html#how-to-choose-the-validation-set",
    "href": "slides/pession_6/slides.html#how-to-choose-the-validation-set",
    "title": "Introduction to Machine Learning",
    "section": "How to choose the validation set?",
    "text": "How to choose the validation set?\n\nHoldout validation approach:\n\nkeeps x% of the data for the training, (100-x)% for the test\n\nHow to choose the sizes of the subsets?\n\nsmall dataset: 90-10\nbig data set: 70-30 (we can afford to waste more training data for the test)\n\n\n\n\nProblem:\n\nare we sure the validation size is correct? Are the results determined by an (un-) lucky draw?\na problem for smaller datasets"
  },
  {
    "objectID": "slides/pession_6/slides.html#how-to-choose-the-validation-set-1",
    "href": "slides/pession_6/slides.html#how-to-choose-the-validation-set-1",
    "title": "Introduction to Machine Learning",
    "section": "How to choose the validation set?",
    "text": "How to choose the validation set?\nA more robust solution: \\(k\\)-fold validation\n\n\n\nsplit dataset randomly in \\(K\\) subsets of equal size \\(S_1, ... S_K\\)\nuse subset \\(S_i\\) as test set, the rest as training set, compute the score\ncompare the scores obtained for all \\(i\\in[1,K]\\)\n\nthey should be similar (compute standard deviation)\n\naverage them"
  },
  {
    "objectID": "slides/pession_6/slides.html#wait",
    "href": "slides/pession_6/slides.html#wait",
    "title": "Introduction to Machine Learning",
    "section": "Wait",
    "text": "Wait\n\nAnother library to do regression ?\nstatsmodels:\n\nexplanatory analysis\nstatistical tests\nformula interface for many estimation algorithms\n\nstateless approach (model.fit() returns another object)\n\n\nlinearmodels\n\nextends statsmodels (very similar interface)\n\n(panel models, IV, systems…)\n\n\nsklearn:\n\nprediction\nfaster for big datasets\ncommon interface for several machine learning tasks\n\nstateful approach (model is modified by .fit operation)\n\ndefacto standard for machine learning"
  },
  {
    "objectID": "slides/pession_6/slides.html#in-practice",
    "href": "slides/pession_6/slides.html#in-practice",
    "title": "Introduction to Machine Learning",
    "section": "In practice",
    "text": "In practice\n\n\nBasic sklearn workflow:\n\n\nimport data\n\nfeatures: a matrix X (2d numpy array)\nlabels: a vector y (1d numpy array)\n\nsplit the data, between training and test datasets\n\nsplit needs to be random to avoid any bias\n\nnormalize the data\n\nmost ML algorithm are sensitive to scale\n\ncreate a model (independent from data)\ntrain the model on training dataset\nevaluate accuracy on test dataset (here \\(R^2\\))\nuse the model to make predictions\n\n\nThe workflow is always the same, no matter what the model is\n\ntry sklearn.linear_model.Lasso instead of LinearRegression\n\n\nfrom sklearn.datasets import load_diabetes\ndataset = load_diabetes()\nX = dataset['data']\ny = dataset['target']\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.1)\n\n#Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\nmodel.score(X_test, y_test)\nmodel.predict(X_new)"
  },
  {
    "objectID": "slides/pession_6/slides.html#k-fold-validation-with-sklearn",
    "href": "slides/pession_6/slides.html#k-fold-validation-with-sklearn",
    "title": "Introduction to Machine Learning",
    "section": "\\(k\\)-fold validation with sklearn",
    "text": "\\(k\\)-fold validation with sklearn\nfrom sklearn.model_selection import KFold\nkf = KFold(n_splits=10)\n\nfor train_index, test_index in kf.split(X):\n   X_train, X_test = X[train_index], X[test_index]\n   y_train, y_test = y[train_index], y[test_index]\n\n   ## train a model in X_train, y_train\n   ## test it on X_test, y_test"
  },
  {
    "objectID": "slides/pession_6/index.html#what-is-machine-learning-1",
    "href": "slides/pession_6/index.html#what-is-machine-learning-1",
    "title": "Introduction to Machine Learning",
    "section": "What is Machine learning?",
    "text": "What is Machine learning?\nDefinition Candidates:\nArthur Samuel: Field of study that gives computers the ability to learn without being explicitly programmed\nTom Mitchell: A computer program is said to learn from experience E with respect to some class of tasks T and performance measure P if its performance at tasks in T, as measured by P, improves with experience E."
  },
  {
    "objectID": "slides/pession_6/index.html#what-about-artificial-intelligence",
    "href": "slides/pession_6/index.html#what-about-artificial-intelligence",
    "title": "Introduction to Machine Learning",
    "section": "What about artificial intelligence ?",
    "text": "What about artificial intelligence ?\n\n\n\nAIs\n\nthink and learn\nmimmic human cognition"
  },
  {
    "objectID": "slides/pession_6/index.html#econometrics-vs-machine-learning",
    "href": "slides/pession_6/index.html#econometrics-vs-machine-learning",
    "title": "Introduction to Machine Learning",
    "section": "Econometrics vs Machine Learning",
    "text": "Econometrics vs Machine Learning\n\nEconometrics is essentially a subfield of machine learning with a different jargon and a focus on:\n\nstudying properties and validity of results\n\ndata is scarce\ninference\n\nsingling out effects of specific explanatory variables\nestablishing causality\n\nMachine learning:\n\nstructure data\nmake predictions (interpolate data)"
  },
  {
    "objectID": "slides/pession_6/index.html#data-types",
    "href": "slides/pession_6/index.html#data-types",
    "title": "Introduction to Machine Learning",
    "section": "Data types",
    "text": "Data types\n\nstructured:\n\ntabular\n\nlong\nwide\n\n\nunstructured:\n\nfiles\nnetworks\ntext, mails\nimages, sound"
  },
  {
    "objectID": "slides/pession_6/index.html#tabular-data",
    "href": "slides/pession_6/index.html#tabular-data",
    "title": "Introduction to Machine Learning",
    "section": "Tabular Data",
    "text": "Tabular Data\n\n\n\ntabular data"
  },
  {
    "objectID": "slides/pession_6/index.html#networks",
    "href": "slides/pession_6/index.html#networks",
    "title": "Introduction to Machine Learning",
    "section": "Networks",
    "text": "Networks\n\nBanking networks\nProduction network"
  },
  {
    "objectID": "slides/pession_6/index.html#big-data-1",
    "href": "slides/pession_6/index.html#big-data-1",
    "title": "Introduction to Machine Learning",
    "section": "Big Data",
    "text": "Big Data\n\nBig data:\n\nwide data (K&gt;&gt;N)\nlong data (N&gt;&gt;K)\nheterogenous, unstructured data\n\nMight not even fit in memory\n\nout of core computations\nlearn from a subset of the data"
  },
  {
    "objectID": "slides/pession_6/index.html#big-subfields-of-machine-learning",
    "href": "slides/pession_6/index.html#big-subfields-of-machine-learning",
    "title": "Introduction to Machine Learning",
    "section": "Big Subfields of Machine Learning",
    "text": "Big Subfields of Machine Learning\n\n\n\nTraditional classification\n\nsupervised (labelled data)\n\nregression: predict quantity\nclassification: predict index (categorical variable)\n\nunsupervised (no labels)\n\ndimension reduction\nclustering\n\nsemi-supervised / self-supervised\nreinforcement learning\n\nBazillions of different algorithms: https://scikit-learn.org/stable/user_guide.html\n\n\n\n\n\nregression:\n\nPredict: \\(y = f(x; \\theta)\\)\n\n\n\n\n\nsupervised: regression\n\n\n\n\n\nAge\n\n\nActivity\n\n\nSalary\n\n\n\n\n23\n\n\nExplorer\n\n\n1200\n\n\n\n\n40\n\n\nMortician\n\n\n2000\n\n\n\n\n45\n\n\nMortician\n\n\n2500\n\n\n\n\n33\n\n\nMovie Star\n\n\n3000\n\n\n\n\n35\n\n\nExplorer\n\n\n???\n\n\n\n\n\n\nsupervised: classification\n\nOutput is discrete\nRegular trick: \\(\\sigma(f(x; \\theta))\\) where \\(\\sigma(x)=\\frac{1}{1-e^{-x}}\\)\n\n\n\n\n\nclassification\n\n\n\n\n\nAge\n\n\nSalary\n\n\nActivity\n\n\n\n\n23\n\n\n1200\n\n\nExplorer\n\n\n\n\n40\n\n\n2000\n\n\nMortician\n\n\n\n\n45\n\n\n2500\n\n\nMortician\n\n\n\n\n33\n\n\n3000\n\n\nMovie Star\n\n\n\n\n35\n\n\n3000\n\n\n???\n\n\n\n\n\nunsupervised\n\norganize data without labels\n\ndimension reduction: describe data with less parameters\nclustering: sort data into “similar groups” (exemple)\n\n\n\n\n\nAge\n\n\nSalary\n\n\nActivity\n\n\n\n\n23\n\n\n1200\n\n\nExplorer\n\n\n\n\n40\n\n\n2000\n\n\nMortician\n\n\n\n\n45\n\n\n2500\n\n\nMortician\n\n\n\n\n33\n\n\n3000\n\n\nMovie Star\n\n\n\n\n35\n\n\n3000\n\n\nExplorer\n\n\n\n\n\nunsupervised: clustering\n\n\n\nkmeansclustering\n\n\n\n\nunsupervised: clustering\nWomen buying dresses during the year:"
  },
  {
    "objectID": "slides/pession_6/index.html#difference-with-traditional-regression",
    "href": "slides/pession_6/index.html#difference-with-traditional-regression",
    "title": "Introduction to Machine Learning",
    "section": "Difference with traditional regression",
    "text": "Difference with traditional regression\n\\[\\underbrace{y}_{\\text{explained variable}} = a \\underbrace{x}_{\\text{explanatory variable}} + b\\]"
  },
  {
    "objectID": "slides/pession_6/index.html#difference-with-traditional-regression-1",
    "href": "slides/pession_6/index.html#difference-with-traditional-regression-1",
    "title": "Introduction to Machine Learning",
    "section": "Difference with traditional regression",
    "text": "Difference with traditional regression\n\\[\\underbrace{y}_{\\text{labels}} = a \\underbrace{x}_{\\text{features}} + b\\]\n. . .\n\n\n\n\n\n\n\nEconometrics\nMachine learning\n\n\n\n\nRegressand / independent variable / explanatory variable\nFeatures\n\n\nRegressor / dependent variable / explained variable\nLabels\n\n\nRegression\nModel Training"
  },
  {
    "objectID": "slides/pession_6/index.html#difference-with-traditional-regression-2",
    "href": "slides/pession_6/index.html#difference-with-traditional-regression-2",
    "title": "Introduction to Machine Learning",
    "section": "Difference with traditional regression",
    "text": "Difference with traditional regression\n\nBig data requires other means to process the data:\n\ndata is long: so many observations \\(x\\) doesn’t fit in the memory\n\nneed to use incremental training method to use only a subsample at a time\n\ndata is wide: so many features, the model is crudely overspecified\n\nneed to build dimension reduction into the objective\n\ndata is nonlinear:\n\nuse nonlinear model (and nonlinear training)\n\ndata is not a simple vector…\n\nsame as nonlinear"
  },
  {
    "objectID": "slides/pession_6/index.html#long-data",
    "href": "slides/pession_6/index.html#long-data",
    "title": "Introduction to Machine Learning",
    "section": "Long data",
    "text": "Long data"
  },
  {
    "objectID": "slides/pession_6/index.html#long-data-1",
    "href": "slides/pession_6/index.html#long-data-1",
    "title": "Introduction to Machine Learning",
    "section": "Long data",
    "text": "Long data\nLong data is characterized by a high number of observations."
  },
  {
    "objectID": "slides/pession_6/index.html#long-data-2",
    "href": "slides/pession_6/index.html#long-data-2",
    "title": "Introduction to Machine Learning",
    "section": "Long data",
    "text": "Long data\n\n\n\nTraditional regression:\n\nfull sample \\(X,Y=(x_i,y_i)_{i=1:N}\\)\nOLS: \\(\\min_{a,b} \\sum_{i=1}^N (a x_i + b - y_i)^2\\)\nclosed-form solution: \\(a = X^{\\prime}X Y\\) and \\(b= ...\\)\nhard to compute if \\(X\\) is very big\n\n\n\n\n\nIncremental learning:\n\ngiven initial \\(a_n\\), \\(b_n\\)\npick \\(N\\) random observations (the batch)\n\nregress them to get new estimate \\(a\\), \\(b\\)\nthis minimizes the square of errors\n\nupdate with learning rate \\(\\beta\\):\n\n\\(a_{n+1} \\leftarrow a_n (1-\\beta_n) + \\beta_n a\\)\n\\(b_{n+1} \\leftarrow b_n (1-\\beta_n) + \\beta_n b\\)\n\nprocess is not biased (that is \\(a\\) converges to the true value) as long as one decreases \\(\\beta\\) sufficiently fast over time (ex: \\(\\beta_n=\\frac{1}{n}\\))"
  },
  {
    "objectID": "slides/pession_6/index.html#formalisation-a-typical-machine-learning-task",
    "href": "slides/pession_6/index.html#formalisation-a-typical-machine-learning-task",
    "title": "Introduction to Machine Learning",
    "section": "Formalisation: a typical machine learning task",
    "text": "Formalisation: a typical machine learning task\n\nvector of unknowns: \\(\\theta=(a,b)\\)\ndataset \\(X,Y=(x_i,y_i)_{i=1:N}\\)\nfor a random draw \\(\\omega = (a_{\\sigma(i)}, b_{\\sigma(i)})_{i=[1,N]} \\subset (X,Y)\\)\n\n\\(\\omega\\) is just a random batch of size \\(N\\)\n\ndefine the empirical risk (or empirical cost) \\[\\xi(\\theta, \\omega) = \\sum_{(x,y) \\in \\omega} (y - (a x + b))^2\\]\nwe want to minimize theoretical risk: \\[\\Xi(\\theta) = \\mathbb{E} \\left[ \\xi(\\theta, \\omega)\\right]\\]"
  },
  {
    "objectID": "slides/pession_6/index.html#training-gradient-descent",
    "href": "slides/pession_6/index.html#training-gradient-descent",
    "title": "Introduction to Machine Learning",
    "section": "Training: Gradient Descent",
    "text": "Training: Gradient Descent\n\n\n\nHow do we minimize a function \\(f(a,b)\\)?\nGradient descent:\n\n\\(a_k, b_k\\) given\ncompute the gradient (slope) \\(\\nabla_{a,b} f = \\begin{bmatrix} \\frac{\\partial f}{\\partial a} \\\\\\\\ \\frac{\\partial f}{\\partial b}\\end{bmatrix}\\)\nfollow the steepest slope: (Newton Algorithm)\n\n\\[ \\begin{bmatrix} a_{k+1} \\\\\\\\ b_{k+1} \\end{bmatrix} \\leftarrow  \\begin{bmatrix} a_k \\\\\\\\ b_k \\end{bmatrix} - \\nabla_{a,b} f\\]\n\nbut not too fast: use learning rate \\(\\lambda\\): \\[ \\begin{bmatrix} a_{k+1} \\\\\\\\ b_{k+1} \\end{bmatrix} \\leftarrow  (1-\\lambda) \\begin{bmatrix} a_k \\\\\\\\ b_k \\end{bmatrix} + \\lambda (- \\nabla_{a,b} f )\\]"
  },
  {
    "objectID": "slides/pession_6/index.html#not-everything-goes-wrong-all-the-time",
    "href": "slides/pession_6/index.html#not-everything-goes-wrong-all-the-time",
    "title": "Introduction to Machine Learning",
    "section": "Not everything goes wrong all the time",
    "text": "Not everything goes wrong all the time\n \n\nIn practice, choosing the right learning rate \\(\\lambda\\) is crucial\n\\(\\lambda\\) is a metaparameter of the model training."
  },
  {
    "objectID": "slides/pession_6/index.html#wide-data",
    "href": "slides/pession_6/index.html#wide-data",
    "title": "Introduction to Machine Learning",
    "section": "Wide data",
    "text": "Wide data\n\nWide Data is characterized by a high number of features compared to the number of observations.\n\n. . .\nProblem: - with many independent variables \\(x_1, ... x_K\\), \\(K&gt;&gt;N\\) and one dependent variable \\(y\\) the regression \\[y = a_1 x_1 + a_2 x_2 + \\cdots + a_N x_N + b\\] is grossly overidentified."
  },
  {
    "objectID": "slides/pession_6/index.html#wide-data-regression",
    "href": "slides/pession_6/index.html#wide-data-regression",
    "title": "Introduction to Machine Learning",
    "section": "Wide data regression",
    "text": "Wide data regression\n\nMain Idea: penalize non-zero coefficients to encourage scarcity\n\nRidge: \\[\\Xi(a,b) = \\min_{a,b} \\sum_{i=1}^N ( \\sum_j a_j x_j + b - y_i)^2 + \\mu \\sum_i |a_i|^2\\]\n\nshrinks parameters towards zero\nclosed form\n\nLasso: \\[\\Xi(a,b) = \\min_{a,b} \\sum_{i=1}^N (\\sum_j a_j x_j + b - y_i)^2 + \\mu \\sum_i |a_i|\\]\n\neliminates zero coefficients\n\nElastic: Ridge + Lasso\n\nRemarks:\n\n\\(\\mu\\) is called a regularization term.\nit is a hyperparameter\n\\(\\mu \\uparrow\\), bias increases, variance decreases"
  },
  {
    "objectID": "slides/pession_6/index.html#training",
    "href": "slides/pession_6/index.html#training",
    "title": "Introduction to Machine Learning",
    "section": "Training",
    "text": "Training\nTo perform Lasso and ridge regression:\n\nAI approach:\n\nminimize objective \\(\\Xi(a,b)\\) directly.\napproach is known as (stochastic) Gradient Descent\n\nUse special algorithms"
  },
  {
    "objectID": "slides/pession_6/index.html#example-imf-challenge",
    "href": "slides/pession_6/index.html#example-imf-challenge",
    "title": "Introduction to Machine Learning",
    "section": "Example: IMF challenge",
    "text": "Example: IMF challenge\n\nAn internal IMF challenge to predict crises in countries\nLots of different approaches\nLots of data:\n\nwhich one is relevant\nmachine must select relevant informations\n\nExample: Lasso Regressions and Forecasting Models in Applied Stress Testing by Jorge A. Chan-Lau\n\nin a given developing country\ntries to predict probability of default in various sectors"
  },
  {
    "objectID": "slides/pession_6/index.html#nonlinear-regression-1",
    "href": "slides/pession_6/index.html#nonlinear-regression-1",
    "title": "Introduction to Machine Learning",
    "section": "Nonlinear Regression",
    "text": "Nonlinear Regression\n\nSo far, we have assumed,\n\n\\(y_i = a + b x_i\\)\n\\(y_i = a + b x_i + μ_1 (a^2 + b^2) + μ_2 (|a| + |b|)\\)\ndefined \\(\\Xi(a,b)\\) and tried to minimize it\n\nSame approach works for fully nonlinear models\n\n\\(y_i = a x_i + a^2 x_i^2 + c\\)\n\\(y_i = \\varphi(x; \\theta)\\) ()\n\nSpecial case: neural network:\n\nprimer tensor playground"
  },
  {
    "objectID": "slides/pession_6/index.html#how-to-evaluate-the-machine-learning",
    "href": "slides/pession_6/index.html#how-to-evaluate-the-machine-learning",
    "title": "Introduction to Machine Learning",
    "section": "how to evaluate the machine learning",
    "text": "how to evaluate the machine learning\nIn machine learning we can’t perform statistical inference easily. How do we assess the validity of a model?\n\nBasic idea (independent of how complex the algorithm is)\n\nseparate data in\n\ntraining set (in-sample)\ntest set (out of sample)\n\ntrain using only the training set\nevaluate performance on the test set\n\nPerformance can be:\n\nfitness, number of classification errors (false positive, false negative)"
  },
  {
    "objectID": "slides/pession_6/index.html#how-to-evaluate-the-machine-learning-1",
    "href": "slides/pession_6/index.html#how-to-evaluate-the-machine-learning-1",
    "title": "Introduction to Machine Learning",
    "section": "how to evaluate the machine learning",
    "text": "how to evaluate the machine learning\nIn case the training method depends itself on many parameters (the hyperparameters) we make three samples instead:\n\ntraining set (in-sample)\nvalidation set (to update hyperparameters)\ntest set (out of sample)\n\nGolden Rule: the test set should not be used to estimate the model, and should not affect the choice any training parameter (hyperparameter)."
  },
  {
    "objectID": "slides/pession_6/index.html#section",
    "href": "slides/pession_6/index.html#section",
    "title": "Introduction to Machine Learning",
    "section": "",
    "text": "Traintest\n\n\n. . .\nThe test set reveals that orange model is overfitting."
  },
  {
    "objectID": "slides/pession_6/index.html#how-to-choose-the-validation-set",
    "href": "slides/pession_6/index.html#how-to-choose-the-validation-set",
    "title": "Introduction to Machine Learning",
    "section": "How to choose the validation set?",
    "text": "How to choose the validation set?\n\nHoldout validation approach:\n\nkeeps x% of the data for the training, (100-x)% for the test\n\nHow to choose the sizes of the subsets?\n\nsmall dataset: 90-10\nbig data set: 70-30 (we can afford to waste more training data for the test)\n\n\n. . .\n\nProblem:\n\nare we sure the validation size is correct? Are the results determined by an (un-) lucky draw?\na problem for smaller datasets"
  },
  {
    "objectID": "slides/pession_6/index.html#how-to-choose-the-validation-set-1",
    "href": "slides/pession_6/index.html#how-to-choose-the-validation-set-1",
    "title": "Introduction to Machine Learning",
    "section": "How to choose the validation set?",
    "text": "How to choose the validation set?\nA more robust solution: \\(k\\)-fold validation\n\n\n\nsplit dataset randomly in \\(K\\) subsets of equal size \\(S_1, ... S_K\\)\nuse subset \\(S_i\\) as test set, the rest as training set, compute the score\ncompare the scores obtained for all \\(i\\in[1,K]\\)\n\nthey should be similar (compute standard deviation)\n\naverage them"
  },
  {
    "objectID": "slides/pession_6/index.html#wait",
    "href": "slides/pession_6/index.html#wait",
    "title": "Introduction to Machine Learning",
    "section": "Wait",
    "text": "Wait\n\nAnother library to do regression ?\nstatsmodels:\n\nexplanatory analysis\nstatistical tests\nformula interface for many estimation algorithms\n\nstateless approach (model.fit() returns another object)\n\n\nlinearmodels\n\nextends statsmodels (very similar interface)\n\n(panel models, IV, systems…)\n\n\nsklearn:\n\nprediction\nfaster for big datasets\ncommon interface for several machine learning tasks\n\nstateful approach (model is modified by .fit operation)\n\ndefacto standard for machine learning"
  },
  {
    "objectID": "slides/pession_6/index.html#in-practice",
    "href": "slides/pession_6/index.html#in-practice",
    "title": "Introduction to Machine Learning",
    "section": "In practice",
    "text": "In practice\n\n\nBasic sklearn workflow:\n\n\nimport data\n\nfeatures: a matrix X (2d numpy array)\nlabels: a vector y (1d numpy array)\n\nsplit the data, between training and test datasets\n\nsplit needs to be random to avoid any bias\n\nnormalize the data\n\nmost ML algorithm are sensitive to scale\n\ncreate a model (independent from data)\ntrain the model on training dataset\nevaluate accuracy on test dataset (here \\(R^2\\))\nuse the model to make predictions\n\n\nThe workflow is always the same, no matter what the model is\n\ntry sklearn.linear_model.Lasso instead of LinearRegression\n\n\nfrom sklearn.datasets import load_diabetes\ndataset = load_diabetes()\nX = dataset['data']\ny = dataset['target']\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.1)\n\n#Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\nmodel.score(X_test, y_test)\nmodel.predict(X_new)"
  },
  {
    "objectID": "slides/pession_6/index.html#k-fold-validation-with-sklearn",
    "href": "slides/pession_6/index.html#k-fold-validation-with-sklearn",
    "title": "Introduction to Machine Learning",
    "section": "\\(k\\)-fold validation with sklearn",
    "text": "\\(k\\)-fold validation with sklearn\nfrom sklearn.model_selection import KFold\nkf = KFold(n_splits=10)\n\nfor train_index, test_index in kf.split(X):\n   X_train, X_test = X[train_index], X[test_index]\n   y_train, y_test = y[train_index], y[test_index]\n\n   ## train a model in X_train, y_train\n   ## test it on X_test, y_test"
  },
  {
    "objectID": "slides/pession_6/machine_learning_regressions_elements.html",
    "href": "slides/pession_6/machine_learning_regressions_elements.html",
    "title": "Intro to sklearn",
    "section": "",
    "text": "Objectives:"
  },
  {
    "objectID": "slides/pession_6/machine_learning_regressions_elements.html#diabetes-dataset",
    "href": "slides/pession_6/machine_learning_regressions_elements.html#diabetes-dataset",
    "title": "Intro to sklearn",
    "section": "Diabetes dataset",
    "text": "Diabetes dataset\nImport the diabetes dataset from sklearn. Describe it.\n\nfrom sklearn.datasets import load_diabetes\ndata = load_diabetes()\nX = data['data']\nY = data['target']\n\n\nprint(data['DESCR'])\n\n.. _diabetes_dataset:\n\nDiabetes dataset\n----------------\n\nTen baseline variables, age, sex, body mass index, average blood\npressure, and six blood serum measurements were obtained for each of n =\n442 diabetes patients, as well as the response of interest, a\nquantitative measure of disease progression one year after baseline.\n\n**Data Set Characteristics:**\n\n  :Number of Instances: 442\n\n  :Number of Attributes: First 10 columns are numeric predictive values\n\n  :Target: Column 11 is a quantitative measure of disease progression one year after baseline\n\n  :Attribute Information:\n      - age     age in years\n      - sex\n      - bmi     body mass index\n      - bp      average blood pressure\n      - s1      tc, T-Cells (a type of white blood cells)\n      - s2      ldl, low-density lipoproteins\n      - s3      hdl, high-density lipoproteins\n      - s4      tch, thyroid stimulating hormone\n      - s5      ltg, lamotrigine\n      - s6      glu, blood sugar level\n\nNote: Each of these 10 feature variables have been mean centered and scaled by the standard deviation times `n_samples` (i.e. the sum of squares of each column totals 1).\n\nSource URL:\nhttps://www4.stat.ncsu.edu/~boos/var.select/diabetes.html\n\nFor more information see:\nBradley Efron, Trevor Hastie, Iain Johnstone and Robert Tibshirani (2004) \"Least Angle Regression,\" Annals of Statistics (with discussion), 407-499.\n(https://web.stanford.edu/~hastie/Papers/LARS/LeastAngle_2002.pdf)\n\n\nSplit the dataset into a training set (70%) and a test set (30%)\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.3)\n\n\nX_train.shape\n\n(309, 10)\n\n\n\nX_test.shape\n\n(133, 10)\n\n\n\n133/(133+309)\n\n0.3009049773755656\n\n\nFeatures are already “centered and scaled”: no need to renormalize them\nTrain a linear model (with intercept) on the training set\n\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\n# by default there is an intercept (check the doc: default value for fit_intercept is True)\n\n\nLinearRegression?\n\n\nInit signature:\nLinearRegression(\n    *,\n    fit_intercept=True,\n    normalize=False,\n    copy_X=True,\n    n_jobs=None,\n    positive=False,\n)\nDocstring:     \nOrdinary least squares Linear Regression.\nLinearRegression fits a linear model with coefficients w = (w1, ..., wp)\nto minimize the residual sum of squares between the observed targets in\nthe dataset, and the targets predicted by the linear approximation.\nParameters\n----------\nfit_intercept : bool, default=True\n    Whether to calculate the intercept for this model. If set\n    to False, no intercept will be used in calculations\n    (i.e. data is expected to be centered).\nnormalize : bool, default=False\n    This parameter is ignored when ``fit_intercept`` is set to False.\n    If True, the regressors X will be normalized before regression by\n    subtracting the mean and dividing by the l2-norm.\n    If you wish to standardize, please use\n    :class:`~sklearn.preprocessing.StandardScaler` before calling ``fit``\n    on an estimator with ``normalize=False``.\ncopy_X : bool, default=True\n    If True, X will be copied; else, it may be overwritten.\nn_jobs : int, default=None\n    The number of jobs to use for the computation. This will only provide\n    speedup for n_targets &gt; 1 and sufficient large problems.\n    ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n    ``-1`` means using all processors. See :term:`Glossary &lt;n_jobs&gt;`\n    for more details.\npositive : bool, default=False\n    When set to ``True``, forces the coefficients to be positive. This\n    option is only supported for dense arrays.\n    .. versionadded:: 0.24\nAttributes\n----------\ncoef_ : array of shape (n_features, ) or (n_targets, n_features)\n    Estimated coefficients for the linear regression problem.\n    If multiple targets are passed during the fit (y 2D), this\n    is a 2D array of shape (n_targets, n_features), while if only\n    one target is passed, this is a 1D array of length n_features.\nrank_ : int\n    Rank of matrix `X`. Only available when `X` is dense.\nsingular_ : array of shape (min(X, y),)\n    Singular values of `X`. Only available when `X` is dense.\nintercept_ : float or array of shape (n_targets,)\n    Independent term in the linear model. Set to 0.0 if\n    `fit_intercept = False`.\nSee Also\n--------\nRidge : Ridge regression addresses some of the\n    problems of Ordinary Least Squares by imposing a penalty on the\n    size of the coefficients with l2 regularization.\nLasso : The Lasso is a linear model that estimates\n    sparse coefficients with l1 regularization.\nElasticNet : Elastic-Net is a linear regression\n    model trained with both l1 and l2 -norm regularization of the\n    coefficients.\nNotes\n-----\nFrom the implementation point of view, this is just plain Ordinary\nLeast Squares (scipy.linalg.lstsq) or Non Negative Least Squares\n(scipy.optimize.nnls) wrapped as a predictor object.\nExamples\n--------\n&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; from sklearn.linear_model import LinearRegression\n&gt;&gt;&gt; X = np.array([[1, 1], [1, 2], [2, 2], [2, 3]])\n&gt;&gt;&gt; # y = 1 * x_0 + 2 * x_1 + 3\n&gt;&gt;&gt; y = np.dot(X, np.array([1, 2])) + 3\n&gt;&gt;&gt; reg = LinearRegression().fit(X, y)\n&gt;&gt;&gt; reg.score(X, y)\n1.0\n&gt;&gt;&gt; reg.coef_\narray([1., 2.])\n&gt;&gt;&gt; reg.intercept_\n3.0000...\n&gt;&gt;&gt; reg.predict(np.array([[3, 5]]))\narray([16.])\nFile:           ~/.local/opt/miniconda/lib/python3.8/site-packages/sklearn/linear_model/_base.py\nType:           ABCMeta\nSubclasses:     \n\n\n\n\n\nmodel.fit(X_train, Y_train)\n\nLinearRegression()\n\n\n\nmodel.fit?\n\n\nSignature: model.fit(X, y, sample_weight=None)\nDocstring:\nFit linear model.\nParameters\n----------\nX : {array-like, sparse matrix} of shape (n_samples, n_features)\n    Training data\ny : array-like of shape (n_samples,) or (n_samples, n_targets)\n    Target values. Will be cast to X's dtype if necessary\nsample_weight : array-like of shape (n_samples,), default=None\n    Individual weights for each sample\n    .. versionadded:: 0.17\n       parameter *sample_weight* support to LinearRegression.\nReturns\n-------\nself : returns an instance of self.\nFile:      ~/.local/opt/miniconda/lib/python3.8/site-packages/sklearn/linear_model/_base.py\nType:      method\n\n\n\n\nCompute the fitting score on the test set. (Bonus: compare with your own computation of \\(R^2\\))\n\npred = model.predict(X_test)\n\n\nY_test\n\narray([190., 225., 141., 281., 168.,  42., 116., 276., 281.,  51., 121.,\n       156., 163., 142., 187., 173.,  39., 229., 155., 332., 257., 261.,\n        42., 201., 103.,  47., 142., 172.,  71.,  96., 173., 127., 150.,\n       230., 185., 209.,  37.,  92., 235., 131.,  97.,  40., 279.,  97.,\n       245., 258., 102., 168.,  51., 248.,  88.,  91.,  58., 110., 308.,\n        88.,  60., 311., 246., 310., 214., 200., 220., 131.,  72.,  72.,\n       181.,  89., 163., 104.,  96.,  70., 217.,  55., 317., 259.,  50.,\n       118., 200.,  25., 124., 129., 179., 109.,  71., 102., 252., 189.,\n       190., 263., 174., 259., 111.,  85., 145.,  85., 252., 258., 274.,\n        83., 140., 196., 219., 200., 197.,  51.,  66.,  79., 275.,  78.,\n       257., 180., 202.,  71., 122., 136., 270.,  70., 146., 281., 114.,\n        59., 191.,  91.,  65., 143., 185., 243.,  53.,  99., 125., 139.,\n       292.])\n\n\n\nfrom matplotlib import pyplot as plt\n\n\nplt.plot(Y_test, pred,'o')\nplt.xlabel(\"True value\")\nplt.ylabel(\"Prediction\")\nplt.title(\"Out of sample test\")\n\nText(0.5, 1.0, 'Out of sample test')\n\n\n\n\n\n\n\n\n\n\nmodel.score(X_test, Y_test)\n\n0.5249868646449161\n\n\n\nmodel.score?\n\n\nSignature: model.score(X, y, sample_weight=None)\nDocstring:\nReturn the coefficient of determination :math:`R^2` of the\nprediction.\nThe coefficient :math:`R^2` is defined as :math:`(1 - \\frac{u}{v})`,\nwhere :math:`u` is the residual sum of squares ``((y_true - y_pred)\n** 2).sum()`` and :math:`v` is the total sum of squares ``((y_true -\ny_true.mean()) ** 2).sum()``. The best possible score is 1.0 and it\ncan be negative (because the model can be arbitrarily worse). A\nconstant model that always predicts the expected value of `y`,\ndisregarding the input features, would get a :math:`R^2` score of\n0.0.\nParameters\n----------\nX : array-like of shape (n_samples, n_features)\n    Test samples. For some estimators this may be a precomputed\n    kernel matrix or a list of generic objects instead with shape\n    ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``\n    is the number of samples used in the fitting for the estimator.\ny : array-like of shape (n_samples,) or (n_samples, n_outputs)\n    True values for `X`.\nsample_weight : array-like of shape (n_samples,), default=None\n    Sample weights.\nReturns\n-------\nscore : float\n    :math:`R^2` of ``self.predict(X)`` wrt. `y`.\nNotes\n-----\nThe :math:`R^2` score used when calling ``score`` on a regressor uses\n``multioutput='uniform_average'`` from version 0.23 to keep consistent\nwith default value of :func:`~sklearn.metrics.r2_score`.\nThis influences the ``score`` method of all the multioutput\nregressors (except for\n:class:`~sklearn.multioutput.MultiOutputRegressor`).\nFile:      ~/.local/opt/miniconda/lib/python3.8/site-packages/sklearn/base.py\nType:      method\n\n\n\n\nShould we adjust the size of the test set? What would be the problem?\n\nfor values in [0.05, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7]:\n\n    X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=values)\n    \n    model = LinearRegression()\n    model.fit(X_train, Y_train)\n    \n    score = model.score(X_test, Y_test)\n    \n    print(f\"Test Set {values:.2f}% | Score: {score:.3f}\")\n\nTest Set 0.05% | Score: 0.427\nTest Set 0.10% | Score: 0.537\nTest Set 0.20% | Score: 0.558\nTest Set 0.30% | Score: 0.451\nTest Set 0.40% | Score: 0.513\nTest Set 0.50% | Score: 0.475\nTest Set 0.60% | Score: 0.488\nTest Set 0.70% | Score: 0.439\n\n\nThere is a tradeoff between: - a big test set: score more accurate, but the fitting is less accurate (more bias) - a small test set: score more volatile, but the fitting is more accurate (more variance)\nImplement \\(k\\)-fold model with \\(k=3\\).\n\nscores = []\n\nfrom sklearn.model_selection import KFold\nkf = KFold(n_splits=3)\n\nfor train_index, test_index in kf.split(X):\n    X_train, X_test = X[train_index], X[test_index]\n    Y_train, Y_test = Y[train_index], Y[test_index]\n    print(X_train.shape)\n\n    \n    model = LinearRegression()\n    model.fit(X_train, Y_train)\n    \n    score = model.score(X_test, Y_test)\n    \n    scores.append(score)\n    \n   ## train a model in X_train, y_train\n   ## test it on X_test, y_test\n\n(294, 10)\n(295, 10)\n(295, 10)\n\n\n\nscores\n\n[0.4693057771290108, 0.48724993937707484, 0.5095525852352711]\n\n\n\nsum(scores)/3\n\n0.4887027672471189\n\n\nBonus: use statsmodels (or linearmodels) to estimate the same linear model on the full sample. Is it always a superior method?\n\ndata['feature_names']\n\n['age', 'sex', 'bmi', 'bp', 's1', 's2', 's3', 's4', 's5', 's6']\n\n\n\nimport pandas\ndf = pandas.DataFrame(X, columns=data['feature_names'])\ndf['target'] = data['target']\n\n\ndf\n\n\n\n\n\n\n\n\nage\nsex\nbmi\nbp\ns1\ns2\ns3\ns4\ns5\ns6\ntarget\n\n\n\n\n0\n0.038076\n0.050680\n0.061696\n0.021872\n-0.044223\n-0.034821\n-0.043401\n-0.002592\n0.019908\n-0.017646\n151.0\n\n\n1\n-0.001882\n-0.044642\n-0.051474\n-0.026328\n-0.008449\n-0.019163\n0.074412\n-0.039493\n-0.068330\n-0.092204\n75.0\n\n\n2\n0.085299\n0.050680\n0.044451\n-0.005671\n-0.045599\n-0.034194\n-0.032356\n-0.002592\n0.002864\n-0.025930\n141.0\n\n\n3\n-0.089063\n-0.044642\n-0.011595\n-0.036656\n0.012191\n0.024991\n-0.036038\n0.034309\n0.022692\n-0.009362\n206.0\n\n\n4\n0.005383\n-0.044642\n-0.036385\n0.021872\n0.003935\n0.015596\n0.008142\n-0.002592\n-0.031991\n-0.046641\n135.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n437\n0.041708\n0.050680\n0.019662\n0.059744\n-0.005697\n-0.002566\n-0.028674\n-0.002592\n0.031193\n0.007207\n178.0\n\n\n438\n-0.005515\n0.050680\n-0.015906\n-0.067642\n0.049341\n0.079165\n-0.028674\n0.034309\n-0.018118\n0.044485\n104.0\n\n\n439\n0.041708\n0.050680\n-0.015906\n0.017282\n-0.037344\n-0.013840\n-0.024993\n-0.011080\n-0.046879\n0.015491\n132.0\n\n\n440\n-0.045472\n-0.044642\n0.039062\n0.001215\n0.016318\n0.015283\n-0.028674\n0.026560\n0.044528\n-0.025930\n220.0\n\n\n441\n-0.045472\n-0.044642\n-0.073030\n-0.081414\n0.083740\n0.027809\n0.173816\n-0.039493\n-0.004220\n0.003064\n57.0\n\n\n\n\n442 rows × 11 columns\n\n\n\n\nfrom statsmodels.formula import api\n\n\nols_model = api.ols('target ~ age + sex + bmi + bp + s1 + s2 + s3 + s4 + s5 + s6', df)\n\n\nresult = ols_model.fit()\n\n\nresult.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\ntarget\nR-squared:\n0.518\n\n\nModel:\nOLS\nAdj. R-squared:\n0.507\n\n\nMethod:\nLeast Squares\nF-statistic:\n46.27\n\n\nDate:\nWed, 16 Mar 2022\nProb (F-statistic):\n3.83e-62\n\n\nTime:\n11:59:29\nLog-Likelihood:\n-2386.0\n\n\nNo. Observations:\n442\nAIC:\n4794.\n\n\nDf Residuals:\n431\nBIC:\n4839.\n\n\nDf Model:\n10\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n152.1335\n2.576\n59.061\n0.000\n147.071\n157.196\n\n\nage\n-10.0122\n59.749\n-0.168\n0.867\n-127.448\n107.424\n\n\nsex\n-239.8191\n61.222\n-3.917\n0.000\n-360.151\n-119.488\n\n\nbmi\n519.8398\n66.534\n7.813\n0.000\n389.069\n650.610\n\n\nbp\n324.3904\n65.422\n4.958\n0.000\n195.805\n452.976\n\n\ns1\n-792.1842\n416.684\n-1.901\n0.058\n-1611.169\n26.801\n\n\ns2\n476.7458\n339.035\n1.406\n0.160\n-189.621\n1143.113\n\n\ns3\n101.0446\n212.533\n0.475\n0.635\n-316.685\n518.774\n\n\ns4\n177.0642\n161.476\n1.097\n0.273\n-140.313\n494.442\n\n\ns5\n751.2793\n171.902\n4.370\n0.000\n413.409\n1089.150\n\n\ns6\n67.6254\n65.984\n1.025\n0.306\n-62.065\n197.316\n\n\n\n\n\n\n\n\nOmnibus:\n1.506\nDurbin-Watson:\n2.029\n\n\nProb(Omnibus):\n0.471\nJarque-Bera (JB):\n1.404\n\n\nSkew:\n0.017\nProb(JB):\n0.496\n\n\nKurtosis:\n2.726\nCond. No.\n227.\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
  },
  {
    "objectID": "slides/pession_6/machine_learning_regressions_elements.html#sparse-regressions-on-the-boston-house-price-dataset",
    "href": "slides/pession_6/machine_learning_regressions_elements.html#sparse-regressions-on-the-boston-house-price-dataset",
    "title": "Intro to sklearn",
    "section": "Sparse regressions on the Boston House Price Dataset",
    "text": "Sparse regressions on the Boston House Price Dataset\nImport the Boston House Price Dataset from sklearn. Describe it. Compute correlations.\nSplit the dataset into a training set (70%) and a test set (30%).\nTrain a lasso model to predict house prices. Compute the score on the test set.\nTrain a ridge model to predict house prices. Which one is better?\n(bonus) Use statsmodels to build a model predicting house prices. What is the problem?"
  },
  {
    "objectID": "slides/pession_6/machine_learning_regressions_elements.html#predicting-breast-cancer",
    "href": "slides/pession_6/machine_learning_regressions_elements.html#predicting-breast-cancer",
    "title": "Intro to sklearn",
    "section": "Predicting Breast Cancer",
    "text": "Predicting Breast Cancer\nSklearn includes the Winsconsin breast cancer database. It associates medical outcomes for tumor observation, with several characteristics. Can a machine learn how to predict whether a cancer is benign or malignant ?\nImport the Breast Cancer Dataset from sklearn. Describe it.\nProperly train a linear logistic regression to predict cancer morbidity. (bonus: use k-fold validation)\nTry with other classifiers. Which one is best?"
  },
  {
    "objectID": "slides/session_5/index_handout.html",
    "href": "slides/session_5/index_handout.html",
    "title": "Introduction to Instrumental Variables",
    "section": "",
    "text": "Our multilinear regression: \\[y = \\alpha + \\beta x_1 + \\cdots + \\beta x_n\\]\nSo far, we have only considered real variables: (\\(x_i \\in \\mathbb{R}\\)).\nLike: \\[x_{\\text{gdp}} = \\alpha + \\beta_1 x_{\\text{unemployment}} + \\beta_2 x_{\\text{inflation}}\\]\n\n\n\nHow do we deal with the following cases?\n\nbinary variable: \\(x\\in \\{0,1\\}\\) (or \\(\\{True, False\\}\\))\n\nex: \\(\\text{gonetowar}\\), \\(\\text{hasdegree}\\)\n\ncategorical variable:\n\nex: survey result (0: I don’t know, 1: I strongly disagree, 2: I disagree, 3: I agree, 4: I strongly agree)\nthere is no ranking of answers\nwhen there is ranking: hierarchical index\n\nnonnumerical variables:\n\nex: (flower type: \\(x\\in \\text{myosotis}, \\text{rose}, ...\\))\n\n\n\n\n\n\nNothing to be done: just make sure variables take values 0 or 1. \\[y_\\text{salary} = \\alpha + \\beta x_{\\text{gonetowar}}\\]\nInterpretation:\n\nhaving gone to war is associated with a \\(\\beta\\) increase (or decrease?) in salary (still no causality)\n\n\n\n\n\nLook at the model: \\[y_{\\text{CO2 emission}} = \\alpha + \\beta x_{\\text{banish cars}} \\]\nwhere \\(y_{\\text{CO2 emission}}\\) is an individual’s CO2 emissions and \\(x_{\\text{yellow vest support}}\\) is the response the the question Do you suport the banishment of petrol cars?.\n\n\nResponse is coded up as:\n\n0: Strongly disagree\n1: Disagree\n2: Neutral\n3: Agree\n4: Strongly agree\n\n\nIf the variable was used directly, how would you intepret the coefficient \\(\\beta\\) ?\n\nindex is hierarchical\nbut the distances between 1 and 2 or 2 and 3 are not comparable…\n\n\n\n\n\n\nWe use one dummy variable per possible answer.\n\n\n\n\n\n\n\n\n\n\n\\(D_{\\text{Strongly Disagree}}\\)\n\\(D_{\\text{Disagree}}\\)\n\\(D_{\\text{Neutral}}\\)\n\\(D_{\\text{Agree}}\\)\n\\(D_{\\text{Strongly Agree}}\\)\n\n\n\n\n1\n0\n0\n0\n0\n\n\n0\n1\n0\n0\n0\n\n\n0\n0\n0\n0\n0\n\n\n0\n0\n0\n1\n0\n\n\n0\n0\n0\n0\n1\n\n\n\n\n\n\n\nValues are linked by the specific dummy coding.\n\nthe choice of the reference group (with 0) is not completely neutral\n\nfor linear regressions, we can ignore its implications\n\nit must be frequent enough in the data\n\nNote that hierarchy is lost. The same treatment can be applied to non-hierachical variables\nNow our variables are perfectly colinear:\n\nwe can deduce one from all the others\nwe drop one from the regression: the reference group TODO\n\n\n\n\n\n\\[y_{\\text{CO2 emission}} = \\alpha + \\beta_1 x_{\\text{strdis}} + \\beta_2 x_{\\text{dis}} + \\beta_3 x_{\\text{agr}} + \\beta_4 x_{\\text{stragr}}\\]\n\nInterpretation:\n\nbeing in the group which strongly agrees to the yellow vest’s claim is associated with an additional \\(\\beta_4\\) increase in CO2 consumption compared with members of the neutral group\n\n\n\n\n\n\n\n\n\nWhat about nonnumerical variables?\n\nWhen variables take nonnumerical variables, we convert them to numerical variables.\n\nExample:\n\n\n\n\nactivity\ncode\n\n\n\n\nmassage therapist\n1\n\n\nmortician\n2\n\n\narcheologist\n3\n\n\nfinancial clerks\n4\n\n\n\n\n\n\n\nThen we convert to dummy variables exactly like hierarchical indices\n\nhere \\(\\text{massage therapist}\\) is taken as reference\n\n\n\n\n\n\n\n\n\n\n\\(D_{\\text{mortician}}\\)\n\\(D_{\\text{archeologist}}\\)\n\\(D_{\\text{financial clerks}}\\)\n\n\n\n\n1\n0\n0\n\n\n0\n1\n0\n\n\n0\n0\n1\n\n\n\n\n\n\n\n\n\nUse statsmodels/linearmodels to create dummy variables with formula API.\n\nReplace\n\nsalary ~ activity\n\nby:\n\nsalary ~ C(activity)\nThere is an options to choose the reference group\nsalary ~ C(activity, Treatment(reference=\"archeologist\"))",
    "crumbs": [
      "lectures",
      "Introduction to Instrumental Variables"
    ]
  },
  {
    "objectID": "slides/session_5/index_handout.html#data",
    "href": "slides/session_5/index_handout.html#data",
    "title": "Introduction to Instrumental Variables",
    "section": "",
    "text": "Our multilinear regression: \\[y = \\alpha + \\beta x_1 + \\cdots + \\beta x_n\\]\nSo far, we have only considered real variables: (\\(x_i \\in \\mathbb{R}\\)).\nLike: \\[x_{\\text{gdp}} = \\alpha + \\beta_1 x_{\\text{unemployment}} + \\beta_2 x_{\\text{inflation}}\\]",
    "crumbs": [
      "lectures",
      "Introduction to Instrumental Variables"
    ]
  },
  {
    "objectID": "slides/session_5/index_handout.html#data-1",
    "href": "slides/session_5/index_handout.html#data-1",
    "title": "Introduction to Instrumental Variables",
    "section": "",
    "text": "How do we deal with the following cases?\n\nbinary variable: \\(x\\in \\{0,1\\}\\) (or \\(\\{True, False\\}\\))\n\nex: \\(\\text{gonetowar}\\), \\(\\text{hasdegree}\\)\n\ncategorical variable:\n\nex: survey result (0: I don’t know, 1: I strongly disagree, 2: I disagree, 3: I agree, 4: I strongly agree)\nthere is no ranking of answers\nwhen there is ranking: hierarchical index\n\nnonnumerical variables:\n\nex: (flower type: \\(x\\in \\text{myosotis}, \\text{rose}, ...\\))",
    "crumbs": [
      "lectures",
      "Introduction to Instrumental Variables"
    ]
  },
  {
    "objectID": "slides/session_5/index_handout.html#binary-variable",
    "href": "slides/session_5/index_handout.html#binary-variable",
    "title": "Introduction to Instrumental Variables",
    "section": "",
    "text": "Nothing to be done: just make sure variables take values 0 or 1. \\[y_\\text{salary} = \\alpha + \\beta x_{\\text{gonetowar}}\\]\nInterpretation:\n\nhaving gone to war is associated with a \\(\\beta\\) increase (or decrease?) in salary (still no causality)",
    "crumbs": [
      "lectures",
      "Introduction to Instrumental Variables"
    ]
  },
  {
    "objectID": "slides/session_5/index_handout.html#categorical-variable",
    "href": "slides/session_5/index_handout.html#categorical-variable",
    "title": "Introduction to Instrumental Variables",
    "section": "",
    "text": "Look at the model: \\[y_{\\text{CO2 emission}} = \\alpha + \\beta x_{\\text{banish cars}} \\]\nwhere \\(y_{\\text{CO2 emission}}\\) is an individual’s CO2 emissions and \\(x_{\\text{yellow vest support}}\\) is the response the the question Do you suport the banishment of petrol cars?.\n\n\nResponse is coded up as:\n\n0: Strongly disagree\n1: Disagree\n2: Neutral\n3: Agree\n4: Strongly agree\n\n\nIf the variable was used directly, how would you intepret the coefficient \\(\\beta\\) ?\n\nindex is hierarchical\nbut the distances between 1 and 2 or 2 and 3 are not comparable…",
    "crumbs": [
      "lectures",
      "Introduction to Instrumental Variables"
    ]
  },
  {
    "objectID": "slides/session_5/index_handout.html#hierarchical-index",
    "href": "slides/session_5/index_handout.html#hierarchical-index",
    "title": "Introduction to Instrumental Variables",
    "section": "",
    "text": "We use one dummy variable per possible answer.\n\n\n\n\n\n\n\n\n\n\n\\(D_{\\text{Strongly Disagree}}\\)\n\\(D_{\\text{Disagree}}\\)\n\\(D_{\\text{Neutral}}\\)\n\\(D_{\\text{Agree}}\\)\n\\(D_{\\text{Strongly Agree}}\\)\n\n\n\n\n1\n0\n0\n0\n0\n\n\n0\n1\n0\n0\n0\n\n\n0\n0\n0\n0\n0\n\n\n0\n0\n0\n1\n0\n\n\n0\n0\n0\n0\n1",
    "crumbs": [
      "lectures",
      "Introduction to Instrumental Variables"
    ]
  },
  {
    "objectID": "slides/session_5/index_handout.html#hierarchical-index-1",
    "href": "slides/session_5/index_handout.html#hierarchical-index-1",
    "title": "Introduction to Instrumental Variables",
    "section": "",
    "text": "Values are linked by the specific dummy coding.\n\nthe choice of the reference group (with 0) is not completely neutral\n\nfor linear regressions, we can ignore its implications\n\nit must be frequent enough in the data\n\nNote that hierarchy is lost. The same treatment can be applied to non-hierachical variables\nNow our variables are perfectly colinear:\n\nwe can deduce one from all the others\nwe drop one from the regression: the reference group TODO",
    "crumbs": [
      "lectures",
      "Introduction to Instrumental Variables"
    ]
  },
  {
    "objectID": "slides/session_5/index_handout.html#hierarchical-index-2",
    "href": "slides/session_5/index_handout.html#hierarchical-index-2",
    "title": "Introduction to Instrumental Variables",
    "section": "",
    "text": "\\[y_{\\text{CO2 emission}} = \\alpha + \\beta_1 x_{\\text{strdis}} + \\beta_2 x_{\\text{dis}} + \\beta_3 x_{\\text{agr}} + \\beta_4 x_{\\text{stragr}}\\]\n\nInterpretation:\n\nbeing in the group which strongly agrees to the yellow vest’s claim is associated with an additional \\(\\beta_4\\) increase in CO2 consumption compared with members of the neutral group",
    "crumbs": [
      "lectures",
      "Introduction to Instrumental Variables"
    ]
  },
  {
    "objectID": "slides/session_5/index_handout.html#nonnumerical-variables",
    "href": "slides/session_5/index_handout.html#nonnumerical-variables",
    "title": "Introduction to Instrumental Variables",
    "section": "",
    "text": "What about nonnumerical variables?\n\nWhen variables take nonnumerical variables, we convert them to numerical variables.\n\nExample:\n\n\n\n\nactivity\ncode\n\n\n\n\nmassage therapist\n1\n\n\nmortician\n2\n\n\narcheologist\n3\n\n\nfinancial clerks\n4\n\n\n\n\n\n\n\nThen we convert to dummy variables exactly like hierarchical indices\n\nhere \\(\\text{massage therapist}\\) is taken as reference\n\n\n\n\n\n\n\n\n\n\n\\(D_{\\text{mortician}}\\)\n\\(D_{\\text{archeologist}}\\)\n\\(D_{\\text{financial clerks}}\\)\n\n\n\n\n1\n0\n0\n\n\n0\n1\n0\n\n\n0\n0\n1",
    "crumbs": [
      "lectures",
      "Introduction to Instrumental Variables"
    ]
  },
  {
    "objectID": "slides/session_5/index_handout.html#hands-on",
    "href": "slides/session_5/index_handout.html#hands-on",
    "title": "Introduction to Instrumental Variables",
    "section": "",
    "text": "Use statsmodels/linearmodels to create dummy variables with formula API.\n\nReplace\n\nsalary ~ activity\n\nby:\n\nsalary ~ C(activity)\nThere is an options to choose the reference group\nsalary ~ C(activity, Treatment(reference=\"archeologist\"))",
    "crumbs": [
      "lectures",
      "Introduction to Instrumental Variables"
    ]
  },
  {
    "objectID": "slides/session_5/index_handout.html#what-is-causality",
    "href": "slides/session_5/index_handout.html#what-is-causality",
    "title": "Introduction to Instrumental Variables",
    "section": "What is causality?",
    "text": "What is causality?\n. . .\n\n\n\nGroucho Marx\n\n\nClear? Huh! Why a four-year-old child could understand this report! Run out and find me a four-year-old child, I can’t make head or tail of it.",
    "crumbs": [
      "lectures",
      "Introduction to Instrumental Variables"
    ]
  },
  {
    "objectID": "slides/session_5/index_handout.html#spurious-correlation",
    "href": "slides/session_5/index_handout.html#spurious-correlation",
    "title": "Introduction to Instrumental Variables",
    "section": "Spurious correlation",
    "text": "Spurious correlation\n\n\n\nSpurious Correlation\n\n\n\nWe have seen spurious correlation before\n\nit happens when two series comove without being actually correlated\n\nAlso, two series might be correlated without one causing the other\n\nex: countries eating more chocolate have more nobel prices…",
    "crumbs": [
      "lectures",
      "Introduction to Instrumental Variables"
    ]
  },
  {
    "objectID": "slides/session_5/index_handout.html#definitions",
    "href": "slides/session_5/index_handout.html#definitions",
    "title": "Introduction to Instrumental Variables",
    "section": "Definitions?",
    "text": "Definitions?\nBut how do we define\n\ncorrelation\ncausality\n\n?\n. . .\nBoth concepts are actually hard to define:\n\nin statistics (and econometrices) they refer to the generating process\nif the data was generated again, would you observe the same relations?\n\nFor instance correlation between \\(X\\) and \\(Y\\) is just the average correlation taken over many draws \\(\\omega\\) of the data: \\[E_{\\omega}\\left[ (X-E[X])(Y-E[Y])\\right]\\]",
    "crumbs": [
      "lectures",
      "Introduction to Instrumental Variables"
    ]
  },
  {
    "objectID": "slides/session_5/index_handout.html#how-do-we-define-causality-1",
    "href": "slides/session_5/index_handout.html#how-do-we-define-causality-1",
    "title": "Introduction to Instrumental Variables",
    "section": "How do we define causality (1)",
    "text": "How do we define causality (1)\n\nIn math, we have implication: \\(A \\implies B\\)\n\napplies to statements that can be either true or false\ngiven \\(A\\) and \\(B\\), \\(A\\) implies \\(B\\) unless \\(A\\) is true and \\(B\\) is false\nparadox of the drinker: at any time, there exists a person such that: if this person drinks, then everybody drinks\n\nIn a mathematical universe taking values \\(\\omega\\), we can define causality between statement \\(A(\\omega)\\) and \\(B(\\omega)\\) as : \\[\\forall \\omega, A(\\omega) \\implies B(\\omega)\\]",
    "crumbs": [
      "lectures",
      "Introduction to Instrumental Variables"
    ]
  },
  {
    "objectID": "slides/session_5/index_handout.html#how-do-we-define-causality-2",
    "href": "slides/session_5/index_handout.html#how-do-we-define-causality-2",
    "title": "Introduction to Instrumental Variables",
    "section": "How do we define causality (2)",
    "text": "How do we define causality (2)\nBut causality in the real world is problematic\nUsually, we observe \\(A(\\omega)\\) only once…\n. . .\n\n\nExample:\n\nstate of the world \\(\\omega\\): 2008, big financial crisis, …\nA: Ben Bernanke chairman of the Fed\nB: successful economic interventions\nWas Ben Bernanke a good central banker?\nImpossible to say.\n\n\n\n\n\n\n\nThen there is the uncertain concept of time… But let’s take it as granted to not overcomplicate…",
    "crumbs": [
      "lectures",
      "Introduction to Instrumental Variables"
    ]
  },
  {
    "objectID": "slides/session_5/index_handout.html#causality-in-statistics",
    "href": "slides/session_5/index_handout.html#causality-in-statistics",
    "title": "Introduction to Instrumental Variables",
    "section": "Causality in Statistics",
    "text": "Causality in Statistics\n\n\n\n\n\n\nStatistical definition of causality\n\n\n\nVariable \\(A\\) causes \\(B\\) in a statistical sense if\n\n\\(A\\) and \\(B\\) are correlated\n\\(A\\) is known before \\(B\\)\ncorrelation between \\(A\\) and \\(B\\) is unaffected by other variables\n\n\n\n\nThere are other related statistical definitions:\n\nlike Granger causality…\n… but not for this course",
    "crumbs": [
      "lectures",
      "Introduction to Instrumental Variables"
    ]
  },
  {
    "objectID": "slides/session_5/index_handout.html#factual-and-counterfactual",
    "href": "slides/session_5/index_handout.html#factual-and-counterfactual",
    "title": "Introduction to Instrumental Variables",
    "section": "Factual and counterfactual",
    "text": "Factual and counterfactual\n\n\n \n\n\n\n\n\n\n\nSuppose we observe an event A\n\nA: a patient is administered a drug, government closes all schools during Covid\n\nWe observe a another event B\n\nB: the patient recovers, virus circulation decreases\n\n\n\n\n\nTo interpret B as a consequence of A, we would like to consider the counter-factual:\n\na patient is not administered a drug, government doesn’t close schools\npatient does not recover, virus circulation is stable\n\n\n\n\n\n. . .\nAn important task in econometrics is to construct a counter-factual\n\nas the name suggests is it sometimes never observed!",
    "crumbs": [
      "lectures",
      "Introduction to Instrumental Variables"
    ]
  },
  {
    "objectID": "slides/session_5/index_handout.html#scientific-experiment",
    "href": "slides/session_5/index_handout.html#scientific-experiment",
    "title": "Introduction to Instrumental Variables",
    "section": "Scientific Experiment",
    "text": "Scientific Experiment\n\n\n\nIn science we establish causality by performing experiments\n\nand create the counterfactual\n\nA good experiment is reproducible\n\nsame variables\nsame state of the world (other variables)\nreproduce several times (in case output is noisy or random)\n\nChange one factor at a time\n\nto create a counter-factual",
    "crumbs": [
      "lectures",
      "Introduction to Instrumental Variables"
    ]
  },
  {
    "objectID": "slides/session_5/index_handout.html#measuring-effect-of-treatment",
    "href": "slides/session_5/index_handout.html#measuring-effect-of-treatment",
    "title": "Introduction to Instrumental Variables",
    "section": "Measuring effect of treatment",
    "text": "Measuring effect of treatment\n\n\n\n\n\n\n\n\n\n\n\nAssume we have discovered two medications: R and B\n\n\n\n\nGive one of them (R) to a patient and observe the outcome\n\n\n\n\nWould would have been the effect of (B) on the same patient?\n\n????\n\n\n\n\n\nWhat if we had many patients and let them choose the medication?\n\n\n\n\n. . .\nMaybe the effect would be the consequence of the choice of patients rather than of the medication?",
    "crumbs": [
      "lectures",
      "Introduction to Instrumental Variables"
    ]
  },
  {
    "objectID": "slides/session_5/index_handout.html#an-exmple-from-behavioural-economics",
    "href": "slides/session_5/index_handout.html#an-exmple-from-behavioural-economics",
    "title": "Introduction to Instrumental Variables",
    "section": "An exmple from behavioural economics",
    "text": "An exmple from behavioural economics\n\n\nExample: cognitive dissonance\n\nExperiment in GATE Lab (ENS Lyon)\nVolunteers play an investment game.\nThey are asked beforehand whether they support OM, PSG, or none.\n\n\n\n\nExperiment 1:\n\nBefore the experiment, randomly selected volunteers are given a football shirt of their preferred team (treatment 1)\nOther volunteers receive nothing (treatment 0)\n\nResult:\n\nhaving a football shirt seems to boost investment performance…\n\n\n\n\n\nExperiment 2: subjects are given randomly a shirt of either Olympique de Marseille or PSG.\nResult:\n\nHaving the good shirt improves performance.\nHaving the wrong one deteriorates it badly.\n\n\n\n\n\nHow would you code up this experiment?\nCan we conclude on some form of causality?",
    "crumbs": [
      "lectures",
      "Introduction to Instrumental Variables"
    ]
  },
  {
    "objectID": "slides/session_5/index_handout.html#formalisation-of-the-problem",
    "href": "slides/session_5/index_handout.html#formalisation-of-the-problem",
    "title": "Introduction to Instrumental Variables",
    "section": "Formalisation of the problem",
    "text": "Formalisation of the problem\n\n\n\n\n\n\nCause (A): two groups of people\n\nthose given a shirt (treatment 1)\nthose not given a shirt (treatment 0)\n\nPossible consequence (B): performance\nTake a given agent Alice: she performs well with a PSG shirt.\n\nmaybe she is a good investor?\nor maybe she is playing for her team?\n\nLet’s try to have her play again without the football shirt\n\nnow the experiment has changed: she has gained experience, is more tired, misses the shirt…\nit is impossible to get a perfect counterfactual (i.e. where only A changes)\n\n\n\n\nLet’s take somebody else then? Bob was really bad without a PSG shirt.\n\nhe might be a bad investor? or he didn’t understand the rules?\nsome other variables have changed, not only the treatment\n\nHow to make a perfect experiment?\n\nChoose randomly whether assigning a shirt or not\nby construction the treatment will not be correlated with other variables",
    "crumbs": [
      "lectures",
      "Introduction to Instrumental Variables"
    ]
  },
  {
    "objectID": "slides/session_5/index_handout.html#randomized-control-trial",
    "href": "slides/session_5/index_handout.html#randomized-control-trial",
    "title": "Introduction to Instrumental Variables",
    "section": "Randomized Control Trial",
    "text": "Randomized Control Trial\n\n\n\n\n\n\nRandomized Control Trial (RCT)\n\n\n\nThe best way to ensure that treatment is independent from other factors is to randomize it.\n\n\n\n\nIn medecine\n\nsome patients receive the treatment (red pill)\nsome other receive the control treatment (blue pill / placebo)\n\nIn economics:\n\nrandomized field experiments\nrandomized phase-ins for new policies\n\nvery useful for policy evaluation\n\n\n\n\n\n\nEsther Duflo\n\n\n\n\n\n\nIt is common in economics, instead of assigning treatments randomly, we often say that we assign individuals randomly to the treatment and to the control group. It is equivalent.",
    "crumbs": [
      "lectures",
      "Introduction to Instrumental Variables"
    ]
  },
  {
    "objectID": "slides/session_5/index_handout.html#natural-experiment",
    "href": "slides/session_5/index_handout.html#natural-experiment",
    "title": "Introduction to Instrumental Variables",
    "section": "Natural experiment",
    "text": "Natural experiment\n\n\n\n\n\n\nNatural Experiment\n\n\n\nA natural experiment satisfies conditions that treatment is assigned randomly\n\nwithout interference by the econometrician\n\n\n\nAn exemple of a Natural Experiment:\n\ngender bias in french local elections (jean-pierre eymeoud, paul vertier) link\nare women discriminated against by voters in local elections?\n\n. . .\nResult: yes, they get 1.5% less votes by right-wing voters\n. . .\nWhat was the natural experiment?",
    "crumbs": [
      "lectures",
      "Introduction to Instrumental Variables"
    ]
  },
  {
    "objectID": "slides/session_5/index_handout.html#example",
    "href": "slides/session_5/index_handout.html#example",
    "title": "Introduction to Instrumental Variables",
    "section": "Example",
    "text": "Example\nLifetime Earnings and the Vietnam Era Draft Lottery, by JD Angrist\n\n\nFact:\n\nveterans of the vietnam war (55-75) earn (in the 80s) an income that is 15% less in average than those who didn’t go to the war.\nWhat can we conclude?\nHard to say: maybe those sent to the war came back with lower productivity (because of PTSD, public stigma, …)? maybe they were not the most productive in the first place (unobserved selection bias)?\n\nProblem (for the economist):\n\nwe didn’t send people to war randomly\n\n\nGenius idea:\n\nhere is a variable which randomly affected whether people were sent: the Draft\n\n\nbetween 1947, and 1973, a lottery was run to determine who would go to war\n\nthe draft number was determined, based on date of birth, and first letters of name\n\nand was correlated with the probability that a given person would go to war\nand it was so to say random or at least independent from anything relevant to the problem\n\n\n\n. . .\nCan we use the Draft to generate randomness ?",
    "crumbs": [
      "lectures",
      "Introduction to Instrumental Variables"
    ]
  },
  {
    "objectID": "slides/session_5/index_handout.html#problem",
    "href": "slides/session_5/index_handout.html#problem",
    "title": "Introduction to Instrumental Variables",
    "section": "Problem",
    "text": "Problem\n\n\nTake the linear regression: \\[y = \\alpha + \\beta x + \\epsilon\\]\n\n\\(y\\): salary\n\\(x\\): went to war\n\nWe want to establish causality from x to y\n\nwe would like to interpret \\(x\\) as the “treatment”\n\nBut there can be unobserved confounding factors:\n\nvariable \\(z\\) which causes both x and y\nexemple: socio-economic background, IQ, …\n\nIf we could identify \\(z\\) we could control for it: \\[y = \\alpha + \\beta_1 x + \\beta_2 z + \\epsilon\\]\n\nwe would get a better predictor of \\(y\\) but more uncertainty about \\(\\beta_1\\) (\\(x\\) and \\(z\\) are correlated)",
    "crumbs": [
      "lectures",
      "Introduction to Instrumental Variables"
    ]
  },
  {
    "objectID": "slides/session_5/index_handout.html#reformulate-the-problem",
    "href": "slides/session_5/index_handout.html#reformulate-the-problem",
    "title": "Introduction to Instrumental Variables",
    "section": "Reformulate the problem",
    "text": "Reformulate the problem\n\n\n\nLet’s assume treatment \\(x\\) is a binary variable \\(\\in{0,1}\\)\nWe want to estimate \\[y = \\alpha + \\beta x + z + \\epsilon\\] where \\(z\\) is potentially correlated to \\(x\\) and \\(y\\)\nThere are two groups:\n\nthose who receive the treatment \\[y = \\alpha + \\beta + z_{T=1} + \\epsilon\\]\nthe others \\[y = \\alpha + 0 +  z_{T=0} + \\epsilon\\]\n\n\n\n\nProblem:\n\nif \\(z\\) is higher in the treatment group, its effect can’t be separated from the treatment effect.\n\nIntuition: what if we make groups differently?\n\ncompletely independent from \\(z\\) (and \\(\\epsilon\\))\nnot independently from \\(x\\) so that one group will receive more treatment than the other\n\nTo make this group we need a new variable \\(q\\) that is:\n\ncorrelated with \\(x\\) so that it will correspond to some treatment effect\nuncorrelated to \\(z\\) or \\(\\epsilon\\) (exogenous)",
    "crumbs": [
      "lectures",
      "Introduction to Instrumental Variables"
    ]
  },
  {
    "objectID": "slides/session_5/index_handout.html#two-stage-regression",
    "href": "slides/session_5/index_handout.html#two-stage-regression",
    "title": "Introduction to Instrumental Variables",
    "section": "Two stage regression",
    "text": "Two stage regression\n\n\n\nWe would like to redo the treatment groups in a way that is independent from \\(z\\) (and everything contained in \\(\\epsilon\\))\n\n\\(q\\) is a binary variable: drafted or not\n\n\nFirst stage: regress group assignment on the instrument: \\[x = \\alpha_0 + \\beta_0 q + \\eta\\]\n\nwe can now predict group assignment in a way that is independent from \\(z\\) (and everything in \\(\\epsilon\\)) \\[\\tilde{x} = \\alpha_0 + \\beta_0 q\\]\n\n\nSecond stage: use the predicted value instead of the original one \\[y = \\alpha + \\beta_1 \\tilde{x} + z + \\epsilon\\]\n\n\n\n\nResult:\n\nIf \\(\\beta_1\\) is significantly nonzero, there is a causal effect between \\(x\\) and \\(y\\).\nNote that \\(\\tilde{x}\\) is imperfectly correlated with the treatment: \\(\\beta_1\\) can’t be interpreted directly\nThe actual effect will be \\(\\frac{\\beta_1}{\\beta_0}\\) (in 1d)\n\n\nWe say that we instrument \\(x\\) by \\(q\\).",
    "crumbs": [
      "lectures",
      "Introduction to Instrumental Variables"
    ]
  },
  {
    "objectID": "slides/session_5/index_handout.html#choosing-a-good-instrument",
    "href": "slides/session_5/index_handout.html#choosing-a-good-instrument",
    "title": "Introduction to Instrumental Variables",
    "section": "Choosing a good instrument",
    "text": "Choosing a good instrument\n\n\n\n\n\n\n\nChoosing an instrumental variable\n\n\n\nA good instrument when trying to explain y by x, is a variable that is correlated to the treatment (x) but does not have any effect on the outcome of interest (y), appart from its effect through x.\nIn particular, it should be uncorrelated from any potential confounding factor (whether observed or unobserved).",
    "crumbs": [
      "lectures",
      "Introduction to Instrumental Variables"
    ]
  },
  {
    "objectID": "slides/session_5/index_handout.html#in-practice",
    "href": "slides/session_5/index_handout.html#in-practice",
    "title": "Introduction to Instrumental Variables",
    "section": "In practice",
    "text": "In practice\n\nBoth statsmodels and linearmodels support instrumental variables\n\nlibrary (look for IV2SLS)\n\nLibrary linearmodels has a handy formula syntax: salary ~ 1 + [war ~ draft]\n\nAPI is similar but not exactly identical to statsmodels\n\nExample from the doc\n\nformula = (\n    \"np.log(drugexp) ~ 1 + totchr + age + linc + blhisp + [hi_empunion ~ ssiratio]\"\n)\nols = IV2SLS.from_formula(formula, data)\nols_res = ols.fit(cov_type=\"robust\")\nprint(ols_res)",
    "crumbs": [
      "lectures",
      "Introduction to Instrumental Variables"
    ]
  },
  {
    "objectID": "slides/session_5/index.html#data",
    "href": "slides/session_5/index.html#data",
    "title": "Introduction to Instrumental Variables",
    "section": "Data",
    "text": "Data\nOur multilinear regression: \\[y = \\alpha + \\beta x_1 + \\cdots + \\beta x_n\\]\nSo far, we have only considered real variables: (\\(x_i \\in \\mathbb{R}\\)).\nLike: \\[x_{\\text{gdp}} = \\alpha + \\beta_1 x_{\\text{unemployment}} + \\beta_2 x_{\\text{inflation}}\\]"
  },
  {
    "objectID": "slides/session_5/index.html#data-1",
    "href": "slides/session_5/index.html#data-1",
    "title": "Introduction to Instrumental Variables",
    "section": "Data",
    "text": "Data\nHow do we deal with the following cases?\n\nbinary variable: \\(x\\in \\{0,1\\}\\) (or \\(\\{True, False\\}\\))\n\nex: \\(\\text{gonetowar}\\), \\(\\text{hasdegree}\\)\n\ncategorical variable:\n\nex: survey result (0: I don’t know, 1: I strongly disagree, 2: I disagree, 3: I agree, 4: I strongly agree)\nthere is no ranking of answers\nwhen there is ranking: hierarchical index\n\nnonnumerical variables:\n\nex: (flower type: \\(x\\in \\text{myosotis}, \\text{rose}, ...\\))"
  },
  {
    "objectID": "slides/session_5/index.html#binary-variable",
    "href": "slides/session_5/index.html#binary-variable",
    "title": "Introduction to Instrumental Variables",
    "section": "Binary variable",
    "text": "Binary variable\n\nNothing to be done: just make sure variables take values 0 or 1. \\[y_\\text{salary} = \\alpha + \\beta x_{\\text{gonetowar}}\\]\nInterpretation:\n\nhaving gone to war is associated with a \\(\\beta\\) increase (or decrease?) in salary (still no causality)"
  },
  {
    "objectID": "slides/session_5/index.html#categorical-variable",
    "href": "slides/session_5/index.html#categorical-variable",
    "title": "Introduction to Instrumental Variables",
    "section": "Categorical variable",
    "text": "Categorical variable\nLook at the model: \\[y_{\\text{CO2 emission}} = \\alpha + \\beta x_{\\text{banish cars}} \\]\nwhere \\(y_{\\text{CO2 emission}}\\) is an individual’s CO2 emissions and \\(x_{\\text{yellow vest support}}\\) is the response the the question Do you suport the banishment of petrol cars?.\n\n\nResponse is coded up as:\n\n0: Strongly disagree\n1: Disagree\n2: Neutral\n3: Agree\n4: Strongly agree\n\n\nIf the variable was used directly, how would you intepret the coefficient \\(\\beta\\) ?\n\nindex is hierarchical\nbut the distances between 1 and 2 or 2 and 3 are not comparable…"
  },
  {
    "objectID": "slides/session_5/index.html#hierarchical-index",
    "href": "slides/session_5/index.html#hierarchical-index",
    "title": "Introduction to Instrumental Variables",
    "section": "Hierarchical index",
    "text": "Hierarchical index\nWe use one dummy variable per possible answer.\n\n\n\n\n\n\n\n\n\n\n\\(D_{\\text{Strongly Disagree}}\\)\n\\(D_{\\text{Disagree}}\\)\n\\(D_{\\text{Neutral}}\\)\n\\(D_{\\text{Agree}}\\)\n\\(D_{\\text{Strongly Agree}}\\)\n\n\n\n\n1\n0\n0\n0\n0\n\n\n0\n1\n0\n0\n0\n\n\n0\n0\n0\n0\n0\n\n\n0\n0\n0\n1\n0\n\n\n0\n0\n0\n0\n1"
  },
  {
    "objectID": "slides/session_5/index.html#hierarchical-index-1",
    "href": "slides/session_5/index.html#hierarchical-index-1",
    "title": "Introduction to Instrumental Variables",
    "section": "Hierarchical index",
    "text": "Hierarchical index\n\nValues are linked by the specific dummy coding.\n\nthe choice of the reference group (with 0) is not completely neutral\n\nfor linear regressions, we can ignore its implications\n\nit must be frequent enough in the data\n\nNote that hierarchy is lost. The same treatment can be applied to non-hierachical variables\nNow our variables are perfectly colinear:\n\nwe can deduce one from all the others\nwe drop one from the regression: the reference group TODO"
  },
  {
    "objectID": "slides/session_5/index.html#hierarchical-index-2",
    "href": "slides/session_5/index.html#hierarchical-index-2",
    "title": "Introduction to Instrumental Variables",
    "section": "Hierarchical index (2)",
    "text": "Hierarchical index (2)\n\\[y_{\\text{CO2 emission}} = \\alpha + \\beta_1 x_{\\text{strdis}} + \\beta_2 x_{\\text{dis}} + \\beta_3 x_{\\text{agr}} + \\beta_4 x_{\\text{stragr}}\\]\n\nInterpretation:\n\nbeing in the group which strongly agrees to the yellow vest’s claim is associated with an additional \\(\\beta_4\\) increase in CO2 consumption compared with members of the neutral group"
  },
  {
    "objectID": "slides/session_5/index.html#nonnumerical-variables",
    "href": "slides/session_5/index.html#nonnumerical-variables",
    "title": "Introduction to Instrumental Variables",
    "section": "Nonnumerical variables",
    "text": "Nonnumerical variables\n\n\n\n\nWhat about nonnumerical variables?\n\nWhen variables take nonnumerical variables, we convert them to numerical variables.\n\nExample:\n\n\n\n\nactivity\ncode\n\n\n\n\nmassage therapist\n1\n\n\nmortician\n2\n\n\narcheologist\n3\n\n\nfinancial clerks\n4\n\n\n\n\n\n\n\nThen we convert to dummy variables exactly like hierarchical indices\n\nhere \\(\\text{massage therapist}\\) is taken as reference\n\n\n\n\n\n\n\n\n\n\n\\(D_{\\text{mortician}}\\)\n\\(D_{\\text{archeologist}}\\)\n\\(D_{\\text{financial clerks}}\\)\n\n\n\n\n1\n0\n0\n\n\n0\n1\n0\n\n\n0\n0\n1"
  },
  {
    "objectID": "slides/session_5/index.html#hands-on",
    "href": "slides/session_5/index.html#hands-on",
    "title": "Introduction to Instrumental Variables",
    "section": "Hands-on",
    "text": "Hands-on\nUse statsmodels/linearmodels to create dummy variables with formula API.\n\nReplace\n\nsalary ~ activity\n\nby:\n\nsalary ~ C(activity)\nThere is an options to choose the reference group\nsalary ~ C(activity, Treatment(reference=\"archeologist\"))"
  },
  {
    "objectID": "slides/session_5/index.html#what-is-causality",
    "href": "slides/session_5/index.html#what-is-causality",
    "title": "Introduction to Instrumental Variables",
    "section": "What is causality?",
    "text": "What is causality?\n\n\n\n\nGroucho Marx\n\n\nClear? Huh! Why a four-year-old child could understand this report! Run out and find me a four-year-old child, I can’t make head or tail of it."
  },
  {
    "objectID": "slides/session_5/index.html#spurious-correlation",
    "href": "slides/session_5/index.html#spurious-correlation",
    "title": "Introduction to Instrumental Variables",
    "section": "Spurious correlation",
    "text": "Spurious correlation\n\nSpurious Correlation\nWe have seen spurious correlation before\n\nit happens when two series comove without being actually correlated\n\nAlso, two series might be correlated without one causing the other\n\nex: countries eating more chocolate have more nobel prices…"
  },
  {
    "objectID": "slides/session_5/index.html#definitions",
    "href": "slides/session_5/index.html#definitions",
    "title": "Introduction to Instrumental Variables",
    "section": "Definitions?",
    "text": "Definitions?\nBut how do we define\n\ncorrelation\ncausality\n\n?\n\nBoth concepts are actually hard to define:\n\nin statistics (and econometrices) they refer to the generating process\nif the data was generated again, would you observe the same relations?\n\nFor instance correlation between \\(X\\) and \\(Y\\) is just the average correlation taken over many draws \\(\\omega\\) of the data: \\[E_{\\omega}\\left[ (X-E[X])(Y-E[Y])\\right]\\]"
  },
  {
    "objectID": "slides/session_5/index.html#how-do-we-define-causality-1",
    "href": "slides/session_5/index.html#how-do-we-define-causality-1",
    "title": "Introduction to Instrumental Variables",
    "section": "How do we define causality (1)",
    "text": "How do we define causality (1)\n\nIn math, we have implication: \\(A \\implies B\\)\n\napplies to statements that can be either true or false\ngiven \\(A\\) and \\(B\\), \\(A\\) implies \\(B\\) unless \\(A\\) is true and \\(B\\) is false\nparadox of the drinker: at any time, there exists a person such that: if this person drinks, then everybody drinks\n\nIn a mathematical universe taking values \\(\\omega\\), we can define causality between statement \\(A(\\omega)\\) and \\(B(\\omega)\\) as : \\[\\forall \\omega, A(\\omega) \\implies B(\\omega)\\]"
  },
  {
    "objectID": "slides/session_5/index.html#how-do-we-define-causality-2",
    "href": "slides/session_5/index.html#how-do-we-define-causality-2",
    "title": "Introduction to Instrumental Variables",
    "section": "How do we define causality (2)",
    "text": "How do we define causality (2)\nBut causality in the real world is problematic\nUsually, we observe \\(A(\\omega)\\) only once…\n\n\n\nExample:\n\nstate of the world \\(\\omega\\): 2008, big financial crisis, …\nA: Ben Bernanke chairman of the Fed\nB: successful economic interventions\nWas Ben Bernanke a good central banker?\nImpossible to say.\n\n\n\n\n\n\n\nThen there is the uncertain concept of time… But let’s take it as granted to not overcomplicate…"
  },
  {
    "objectID": "slides/session_5/index.html#causality-in-statistics",
    "href": "slides/session_5/index.html#causality-in-statistics",
    "title": "Introduction to Instrumental Variables",
    "section": "Causality in Statistics",
    "text": "Causality in Statistics\n\n\n\n\n\n\nStatistical definition of causality\n\n\nVariable \\(A\\) causes \\(B\\) in a statistical sense if\n\n\\(A\\) and \\(B\\) are correlated\n\\(A\\) is known before \\(B\\)\ncorrelation between \\(A\\) and \\(B\\) is unaffected by other variables\n\n\n\n\n\nThere are other related statistical definitions:\n\nlike Granger causality…\n… but not for this course"
  },
  {
    "objectID": "slides/session_5/index.html#factual-and-counterfactual",
    "href": "slides/session_5/index.html#factual-and-counterfactual",
    "title": "Introduction to Instrumental Variables",
    "section": "Factual and counterfactual",
    "text": "Factual and counterfactual\n\n\n \n\n\n\n\n\n\n\nSuppose we observe an event A\n\nA: a patient is administered a drug, government closes all schools during Covid\n\nWe observe a another event B\n\nB: the patient recovers, virus circulation decreases\n\n\n\n\n\nTo interpret B as a consequence of A, we would like to consider the counter-factual:\n\na patient is not administered a drug, government doesn’t close schools\npatient does not recover, virus circulation is stable\n\n\n\n\n\nAn important task in econometrics is to construct a counter-factual\n\nas the name suggests is it sometimes never observed!"
  },
  {
    "objectID": "slides/session_5/index.html#scientific-experiment",
    "href": "slides/session_5/index.html#scientific-experiment",
    "title": "Introduction to Instrumental Variables",
    "section": "Scientific Experiment",
    "text": "Scientific Experiment\n\n\n\nIn science we establish causality by performing experiments\n\nand create the counterfactual\n\nA good experiment is reproducible\n\nsame variables\nsame state of the world (other variables)\nreproduce several times (in case output is noisy or random)\n\nChange one factor at a time\n\nto create a counter-factual"
  },
  {
    "objectID": "slides/session_5/index.html#measuring-effect-of-treatment",
    "href": "slides/session_5/index.html#measuring-effect-of-treatment",
    "title": "Introduction to Instrumental Variables",
    "section": "Measuring effect of treatment",
    "text": "Measuring effect of treatment\n\n\n\n\n\n\n\n\n\n\n\nAssume we have discovered two medications: R and B\n\n\n\n\nGive one of them (R) to a patient and observe the outcome\n\n\n\n\nWould would have been the effect of (B) on the same patient?\n\n????\n\n\n\n\n\nWhat if we had many patients and let them choose the medication?\n\n\n\n\nMaybe the effect would be the consequence of the choice of patients rather than of the medication?"
  },
  {
    "objectID": "slides/session_5/index.html#an-exmple-from-behavioural-economics",
    "href": "slides/session_5/index.html#an-exmple-from-behavioural-economics",
    "title": "Introduction to Instrumental Variables",
    "section": "An exmple from behavioural economics",
    "text": "An exmple from behavioural economics\n\n\nExample: cognitive dissonance\n\nExperiment in GATE Lab (ENS Lyon)\nVolunteers play an investment game.\nThey are asked beforehand whether they support OM, PSG, or none.\n\n\n\n\nExperiment 1:\n\nBefore the experiment, randomly selected volunteers are given a football shirt of their preferred team (treatment 1)\nOther volunteers receive nothing (treatment 0)\n\nResult:\n\nhaving a football shirt seems to boost investment performance…\n\n\n\n\n\nExperiment 2: subjects are given randomly a shirt of either Olympique de Marseille or PSG.\nResult:\n\nHaving the good shirt improves performance.\nHaving the wrong one deteriorates it badly.\n\n\n\n\n\nHow would you code up this experiment?\nCan we conclude on some form of causality?"
  },
  {
    "objectID": "slides/session_5/index.html#formalisation-of-the-problem",
    "href": "slides/session_5/index.html#formalisation-of-the-problem",
    "title": "Introduction to Instrumental Variables",
    "section": "Formalisation of the problem",
    "text": "Formalisation of the problem\n\n\n\n\n\n\nCause (A): two groups of people\n\nthose given a shirt (treatment 1)\nthose not given a shirt (treatment 0)\n\nPossible consequence (B): performance\nTake a given agent Alice: she performs well with a PSG shirt.\n\nmaybe she is a good investor?\nor maybe she is playing for her team?\n\nLet’s try to have her play again without the football shirt\n\nnow the experiment has changed: she has gained experience, is more tired, misses the shirt…\nit is impossible to get a perfect counterfactual (i.e. where only A changes)\n\n\n\n\nLet’s take somebody else then? Bob was really bad without a PSG shirt.\n\nhe might be a bad investor? or he didn’t understand the rules?\nsome other variables have changed, not only the treatment\n\nHow to make a perfect experiment?\n\nChoose randomly whether assigning a shirt or not\nby construction the treatment will not be correlated with other variables"
  },
  {
    "objectID": "slides/session_5/index.html#randomized-control-trial",
    "href": "slides/session_5/index.html#randomized-control-trial",
    "title": "Introduction to Instrumental Variables",
    "section": "Randomized Control Trial",
    "text": "Randomized Control Trial\n\n\n\n\n\n\nRandomized Control Trial (RCT)\n\n\nThe best way to ensure that treatment is independent from other factors is to randomize it.\n\n\n\n\n\nIn medecine\n\nsome patients receive the treatment (red pill)\nsome other receive the control treatment (blue pill / placebo)\n\nIn economics:\n\nrandomized field experiments\nrandomized phase-ins for new policies\n\nvery useful for policy evaluation\n\n\n\n\n\n\nEsther Duflo\n\n\n\n\n\nIt is common in economics, instead of assigning treatments randomly, we often say that we assign individuals randomly to the treatment and to the control group. It is equivalent."
  },
  {
    "objectID": "slides/session_5/index.html#natural-experiment",
    "href": "slides/session_5/index.html#natural-experiment",
    "title": "Introduction to Instrumental Variables",
    "section": "Natural experiment",
    "text": "Natural experiment\n\n\n\n\n\n\nNatural Experiment\n\n\nA natural experiment satisfies conditions that treatment is assigned randomly\n\nwithout interference by the econometrician\n\n\n\n\nAn exemple of a Natural Experiment:\n\ngender bias in french local elections (jean-pierre eymeoud, paul vertier) link\nare women discriminated against by voters in local elections?\n\n\nResult: yes, they get 1.5% less votes by right-wing voters\n\n\nWhat was the natural experiment?"
  },
  {
    "objectID": "slides/session_5/index.html#example",
    "href": "slides/session_5/index.html#example",
    "title": "Introduction to Instrumental Variables",
    "section": "Example",
    "text": "Example\nLifetime Earnings and the Vietnam Era Draft Lottery, by JD Angrist\n\n\nFact:\n\nveterans of the vietnam war (55-75) earn (in the 80s) an income that is 15% less in average than those who didn’t go to the war.\nWhat can we conclude?\nHard to say: maybe those sent to the war came back with lower productivity (because of PTSD, public stigma, …)? maybe they were not the most productive in the first place (unobserved selection bias)?\n\nProblem (for the economist):\n\nwe didn’t send people to war randomly\n\n\nGenius idea:\n\nhere is a variable which randomly affected whether people were sent: the Draft\n\n\nbetween 1947, and 1973, a lottery was run to determine who would go to war\n\nthe draft number was determined, based on date of birth, and first letters of name\n\nand was correlated with the probability that a given person would go to war\nand it was so to say random or at least independent from anything relevant to the problem\n\n\n\nCan we use the Draft to generate randomness ?"
  },
  {
    "objectID": "slides/session_5/index.html#problem",
    "href": "slides/session_5/index.html#problem",
    "title": "Introduction to Instrumental Variables",
    "section": "Problem",
    "text": "Problem\n\n\nTake the linear regression: \\[y = \\alpha + \\beta x + \\epsilon\\]\n\n\\(y\\): salary\n\\(x\\): went to war\n\nWe want to establish causality from x to y\n\nwe would like to interpret \\(x\\) as the “treatment”\n\nBut there can be unobserved confounding factors:\n\nvariable \\(z\\) which causes both x and y\nexemple: socio-economic background, IQ, …\n\nIf we could identify \\(z\\) we could control for it: \\[y = \\alpha + \\beta_1 x + \\beta_2 z + \\epsilon\\]\n\nwe would get a better predictor of \\(y\\) but more uncertainty about \\(\\beta_1\\) (\\(x\\) and \\(z\\) are correlated)"
  },
  {
    "objectID": "slides/session_5/index.html#reformulate-the-problem",
    "href": "slides/session_5/index.html#reformulate-the-problem",
    "title": "Introduction to Instrumental Variables",
    "section": "Reformulate the problem",
    "text": "Reformulate the problem\n\n\n\nLet’s assume treatment \\(x\\) is a binary variable \\(\\in{0,1}\\)\nWe want to estimate \\[y = \\alpha + \\beta x + z + \\epsilon\\] where \\(z\\) is potentially correlated to \\(x\\) and \\(y\\)\nThere are two groups:\n\nthose who receive the treatment \\[y = \\alpha + \\beta + z_{T=1} + \\epsilon\\]\nthe others \\[y = \\alpha + 0 +  z_{T=0} + \\epsilon\\]\n\n\n\n\nProblem:\n\nif \\(z\\) is higher in the treatment group, its effect can’t be separated from the treatment effect.\n\nIntuition: what if we make groups differently?\n\ncompletely independent from \\(z\\) (and \\(\\epsilon\\))\nnot independently from \\(x\\) so that one group will receive more treatment than the other\n\nTo make this group we need a new variable \\(q\\) that is:\n\ncorrelated with \\(x\\) so that it will correspond to some treatment effect\nuncorrelated to \\(z\\) or \\(\\epsilon\\) (exogenous)"
  },
  {
    "objectID": "slides/session_5/index.html#two-stage-regression",
    "href": "slides/session_5/index.html#two-stage-regression",
    "title": "Introduction to Instrumental Variables",
    "section": "Two stage regression",
    "text": "Two stage regression\n\n\n\nWe would like to redo the treatment groups in a way that is independent from \\(z\\) (and everything contained in \\(\\epsilon\\))\n\n\\(q\\) is a binary variable: drafted or not\n\n\nFirst stage: regress group assignment on the instrument: \\[x = \\alpha_0 + \\beta_0 q + \\eta\\]\n\nwe can now predict group assignment in a way that is independent from \\(z\\) (and everything in \\(\\epsilon\\)) \\[\\tilde{x} = \\alpha_0 + \\beta_0 q\\]\n\n\nSecond stage: use the predicted value instead of the original one \\[y = \\alpha + \\beta_1 \\tilde{x} + z + \\epsilon\\]\n\n\n\n\nResult:\n\nIf \\(\\beta_1\\) is significantly nonzero, there is a causal effect between \\(x\\) and \\(y\\).\nNote that \\(\\tilde{x}\\) is imperfectly correlated with the treatment: \\(\\beta_1\\) can’t be interpreted directly\nThe actual effect will be \\(\\frac{\\beta_1}{\\beta_0}\\) (in 1d)\n\n\nWe say that we instrument \\(x\\) by \\(q\\)."
  },
  {
    "objectID": "slides/session_5/index.html#choosing-a-good-instrument",
    "href": "slides/session_5/index.html#choosing-a-good-instrument",
    "title": "Introduction to Instrumental Variables",
    "section": "Choosing a good instrument",
    "text": "Choosing a good instrument\n\n\n\n\n\n\n\nChoosing an instrumental variable\n\n\nA good instrument when trying to explain y by x, is a variable that is correlated to the treatment (x) but does not have any effect on the outcome of interest (y), appart from its effect through x.\nIn particular, it should be uncorrelated from any potential confounding factor (whether observed or unobserved)."
  },
  {
    "objectID": "slides/session_5/index.html#in-practice",
    "href": "slides/session_5/index.html#in-practice",
    "title": "Introduction to Instrumental Variables",
    "section": "In practice",
    "text": "In practice\n\nBoth statsmodels and linearmodels support instrumental variables\n\nlibrary (look for IV2SLS)\n\nLibrary linearmodels has a handy formula syntax: salary ~ 1 + [war ~ draft]\n\nAPI is similar but not exactly identical to statsmodels\n\nExample from the doc\n\nformula = (\n    \"np.log(drugexp) ~ 1 + totchr + age + linc + blhisp + [hi_empunion ~ ssiratio]\"\n)\nols = IV2SLS.from_formula(formula, data)\nols_res = ols.fit(cov_type=\"robust\")\nprint(ols_res)"
  },
  {
    "objectID": "slides/session_4/transcript.html",
    "href": "slides/session_4/transcript.html",
    "title": "Multiple Regressions",
    "section": "",
    "text": "type\nincome\neducation\nprestige\n\n\n\n\naccountant\nprof\n62\n86\n82\n\n\npilot\nprof\n72\n76\n83\n\n\narchitect\nprof\n75\n92\n90\n\n\nauthor\nprof\n55\n90\n76\n\n\nchemist\nprof\n64\n86\n90\n\n\n\n\n\nLast week we “ran” a linear regression: \\(y = \\alpha + \\beta x\\). Result: \\[\\text{income} = xx + 0.72 \\text{education}\\]\nShould we have looked at “prestige” instead ? \\[\\text{income} = xx + 0.83 \\text{prestige}\\]\nWhich one is better?\n\n\n\n\n\n\n\n\n\nif the goal is to predict: the one with higher explained variance\n\nprestige has higher \\(R^2\\) (\\(0.83^2\\))\n\nunless we are interested in the effect of education\n\n\n\n\n\n\nWhat about using both?\n\n2 variables model: \\[\\text{income} = \\alpha + \\beta_1 \\text{education} + \\beta_2 \\text{prestige}\\]\nwill probably improve prediction power (explained variance)\n\\(\\beta_1\\) might not be meaningful on its own anymore (education and prestige are correlated)\n\n\n\n\n\n\nNow we are trying to fit a plane to a cloud of points.\n \n\n\n\n\n\nTake all observations: \\((\\text{income}\\_n,\\text{education}\\_n,\\text{prestige}\\_n)\\_{n\\in[0,N]}\\)\nObjective: sum of squares \\[ L(\\alpha, \\beta_1, \\beta_2) = \\sum_i \\left( \\underbrace{ \\alpha + \\beta_1 \\text{education}\\_n + \\beta_2 \\text{prestige}\\_n - \\text{income}\\_n }\\_{e_n=\\text{prediction error} }\\right)^2 \\]\nMinimize loss function in \\(\\alpha\\), \\(\\beta_1\\), \\(\\beta_2\\)\nAgain, we can perform numerical optimization (machine learning approach)\n\n… but there is an explicit formula\n\n\n\n\n\n\n\n\n\n\\[Y = \\begin{bmatrix}\n\\text{income}_1 \\\\\\\\\n\\vdots \\\\\\\\\n\\text{income}_N\n\\end{bmatrix}\\] \\[X = \\begin{bmatrix}\n1 & \\text{education}_1 & \\text{prestige}_1 \\\\\\\\\n\\vdots & \\vdots & \\vdots \\\\\\\\\n1 &\\text{education}_N & \\text{prestige}_N\n\\end{bmatrix}\\]\n\n\nMatrix Version (look for \\(B = \\left( \\alpha,  \\beta_1 , \\beta_2 \\right)\\)): \\[Y =  X B + E\\]\nNote that constant can be interpreted as a “variable”\nLoss function \\[L(A,B) = (Y - X B)' (Y - X B)\\]\nResult of minimization \\(\\min_{(A,B)} L(A,B)\\) : \\[\\begin{bmatrix}\\alpha & \\beta_1 & \\beta_2 \\end{bmatrix} = (X'X)^{-1} X' Y \\]\n\n\n\n\n\n\n\nResult: \\[\\text{income} = 10.43  + 0.03 \\times \\text{education} + 0.62 \\times \\text{prestige}\\]\nQuestions:\n\nis it a better regression than the other?\nis the coefficient in front of education significant?\nhow do we interpret it?\ncan we build confidence intervals?"
  },
  {
    "objectID": "slides/session_4/transcript.html#remember-dataset-from-last-time",
    "href": "slides/session_4/transcript.html#remember-dataset-from-last-time",
    "title": "Multiple Regressions",
    "section": "",
    "text": "type\nincome\neducation\nprestige\n\n\n\n\naccountant\nprof\n62\n86\n82\n\n\npilot\nprof\n72\n76\n83\n\n\narchitect\nprof\n75\n92\n90\n\n\nauthor\nprof\n55\n90\n76\n\n\nchemist\nprof\n64\n86\n90\n\n\n\n\n\nLast week we “ran” a linear regression: \\(y = \\alpha + \\beta x\\). Result: \\[\\text{income} = xx + 0.72 \\text{education}\\]\nShould we have looked at “prestige” instead ? \\[\\text{income} = xx + 0.83 \\text{prestige}\\]\nWhich one is better?"
  },
  {
    "objectID": "slides/session_4/transcript.html#prestige-or-education",
    "href": "slides/session_4/transcript.html#prestige-or-education",
    "title": "Multiple Regressions",
    "section": "",
    "text": "if the goal is to predict: the one with higher explained variance\n\nprestige has higher \\(R^2\\) (\\(0.83^2\\))\n\nunless we are interested in the effect of education"
  },
  {
    "objectID": "slides/session_4/transcript.html#multiple-regression",
    "href": "slides/session_4/transcript.html#multiple-regression",
    "title": "Multiple Regressions",
    "section": "",
    "text": "What about using both?\n\n2 variables model: \\[\\text{income} = \\alpha + \\beta_1 \\text{education} + \\beta_2 \\text{prestige}\\]\nwill probably improve prediction power (explained variance)\n\\(\\beta_1\\) might not be meaningful on its own anymore (education and prestige are correlated)"
  },
  {
    "objectID": "slides/session_4/transcript.html#fitting-a-model",
    "href": "slides/session_4/transcript.html#fitting-a-model",
    "title": "Multiple Regressions",
    "section": "",
    "text": "Now we are trying to fit a plane to a cloud of points."
  },
  {
    "objectID": "slides/session_4/transcript.html#minimization-criterium",
    "href": "slides/session_4/transcript.html#minimization-criterium",
    "title": "Multiple Regressions",
    "section": "",
    "text": "Take all observations: \\((\\text{income}\\_n,\\text{education}\\_n,\\text{prestige}\\_n)\\_{n\\in[0,N]}\\)\nObjective: sum of squares \\[ L(\\alpha, \\beta_1, \\beta_2) = \\sum_i \\left( \\underbrace{ \\alpha + \\beta_1 \\text{education}\\_n + \\beta_2 \\text{prestige}\\_n - \\text{income}\\_n }\\_{e_n=\\text{prediction error} }\\right)^2 \\]\nMinimize loss function in \\(\\alpha\\), \\(\\beta_1\\), \\(\\beta_2\\)\nAgain, we can perform numerical optimization (machine learning approach)\n\n… but there is an explicit formula"
  },
  {
    "objectID": "slides/session_4/transcript.html#ordinary-least-square",
    "href": "slides/session_4/transcript.html#ordinary-least-square",
    "title": "Multiple Regressions",
    "section": "",
    "text": "\\[Y = \\begin{bmatrix}\n\\text{income}_1 \\\\\\\\\n\\vdots \\\\\\\\\n\\text{income}_N\n\\end{bmatrix}\\] \\[X = \\begin{bmatrix}\n1 & \\text{education}_1 & \\text{prestige}_1 \\\\\\\\\n\\vdots & \\vdots & \\vdots \\\\\\\\\n1 &\\text{education}_N & \\text{prestige}_N\n\\end{bmatrix}\\]\n\n\nMatrix Version (look for \\(B = \\left( \\alpha,  \\beta_1 , \\beta_2 \\right)\\)): \\[Y =  X B + E\\]\nNote that constant can be interpreted as a “variable”\nLoss function \\[L(A,B) = (Y - X B)' (Y - X B)\\]\nResult of minimization \\(\\min_{(A,B)} L(A,B)\\) : \\[\\begin{bmatrix}\\alpha & \\beta_1 & \\beta_2 \\end{bmatrix} = (X'X)^{-1} X' Y \\]"
  },
  {
    "objectID": "slides/session_4/transcript.html#solution",
    "href": "slides/session_4/transcript.html#solution",
    "title": "Multiple Regressions",
    "section": "",
    "text": "Result: \\[\\text{income} = 10.43  + 0.03 \\times \\text{education} + 0.62 \\times \\text{prestige}\\]\nQuestions:\n\nis it a better regression than the other?\nis the coefficient in front of education significant?\nhow do we interpret it?\ncan we build confidence intervals?"
  },
  {
    "objectID": "slides/session_4/transcript.html#explained-variance-1",
    "href": "slides/session_4/transcript.html#explained-variance-1",
    "title": "Multiple Regressions",
    "section": "Explained Variance",
    "text": "Explained Variance\n\nAs in the 1d case we can compare:\n\nthe variability of the model predictions (\\(MSS\\))\nthe variance of the data (\\(TSS\\), T for total)\n\nCoefficient of determination: \\[R^2 = \\frac{MSS}{TSS}\\]\nOr: \\[R^2 = 1-\\frac{RSS}{SST}\\] where \\(RSS\\) is the non explained variance"
  },
  {
    "objectID": "slides/session_4/transcript.html#adjusted-r-squared",
    "href": "slides/session_4/transcript.html#adjusted-r-squared",
    "title": "Multiple Regressions",
    "section": "Adjusted R squared",
    "text": "Adjusted R squared\n\n\n\nIn our example:\n\n\n\n\n\n\n\n\n\nRegression\n\\(R^2\\)\n \\(R^2_{adj}\\) \n\n\n\n\neducation\n0.525\n 0.514 \n\n\nprestige\n0.702\n 0.695 \n\n\neducation + prestige\n0.7022\n 0.688 \n\n\n\n\n\n\nFact:\n\nadding more regressors always improve \\(R^2\\)\nwhy not throw everything in? (kitchen sink regressions)\n\ntwo many regressors: overfitting the data\n\n\nPenalise additional regressors: adjusted R^2\n\nexample formula:\n\n\\(N\\): number of observations\n\\(p\\) number of variables \\[R^2_{adj} = 1-(1-R^2)\\frac{N-1}{N-p-1}\\]"
  },
  {
    "objectID": "slides/session_4/transcript.html#making-a-regression-with-statsmodels",
    "href": "slides/session_4/transcript.html#making-a-regression-with-statsmodels",
    "title": "Multiple Regressions",
    "section": "Making a regression with statsmodels",
    "text": "Making a regression with statsmodels\nimport statsmodels\nWe use a special API inspired by R:\nimport statsmodels.formula.api as smf"
  },
  {
    "objectID": "slides/session_4/transcript.html#performing-a-regression",
    "href": "slides/session_4/transcript.html#performing-a-regression",
    "title": "Multiple Regressions",
    "section": "Performing a regression",
    "text": "Performing a regression\n\nRunning a regression with statsmodels\n\nmodel = smf.ols('income ~ education',  df)  # model\nres = model.fit()  # perform the regression\nres.describe()\n\n‘income ~ education’ is the model formula\n\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:                 income   R-squared:                       0.525\nModel:                            OLS   Adj. R-squared:                  0.514\nMethod:                 Least Squares   F-statistic:                     47.51\nDate:                Tue, 02 Feb 2021   Prob (F-statistic):           1.84e-08\nTime:                        05:21:25   Log-Likelihood:                -190.42\nNo. Observations:                  45   AIC:                             384.8\nDf Residuals:                      43   BIC:                             388.5\nDf Model:                           1                                         \nCovariance Type:            nonrobust                                         \n==============================================================================\n                 coef    std err          t      P&gt;|t|      [0.025      0.975]\n==============================================================================\nIntercept     10.6035      5.198      2.040      0.048       0.120      21.087\neducation      0.5949      0.086      6.893      0.000       0.421       0.769\n==============================================================================\nOmnibus:                        9.841   Durbin-Watson:                   1.736\nProb(Omnibus):                  0.007   Jarque-Bera (JB):               10.609\nSkew:                           0.776   Prob(JB):                      0.00497\nKurtosis:                       4.802   Cond. No.                         123.\n=============================================================================="
  },
  {
    "objectID": "slides/session_4/transcript.html#formula-mini-language",
    "href": "slides/session_4/transcript.html#formula-mini-language",
    "title": "Multiple Regressions",
    "section": "Formula mini-language",
    "text": "Formula mini-language\n\nWith statsmodels formulas, can be supplied with R-style syntax\nExamples:\n\n\n\n\n\n\n\n\nFormula\nModel\n\n\n\n\nincome ~ education\n\\(\\text{income}_i = \\alpha + \\beta \\text{education}_i\\)\n\n\nincome ~ prestige\n\\(\\text{income}_i = \\alpha + \\beta \\text{prestige}_i\\)\n\n\nincome ~ prestige - 1\n\\(\\text{income}_i = \\beta \\text{prestige}_i\\) (no intercept)\n\n\nincome ~ education + prestige\n\\(\\text{income}_i = \\alpha + \\beta_1 \\text{education}_i + \\beta_2 \\text{prestige}_i\\)"
  },
  {
    "objectID": "slides/session_4/transcript.html#formula-mini-language-1",
    "href": "slides/session_4/transcript.html#formula-mini-language-1",
    "title": "Multiple Regressions",
    "section": "Formula mini-language",
    "text": "Formula mini-language\n\nOne can use formulas to apply transformations to variables\n\n\n\n\n\n\n\n\nFormula\nModel\n\n\n\n\nlog(P) ~ log(M) + log(Y)\n\\(\\log(P_i) = \\alpha + \\alpha_1 \\log(M_i) + \\alpha_2 \\log(Y_i)\\) (log-log)\n\n\nlog(Y) ~ i\n\\(\\log(P_i) = \\alpha + i_i\\) (semi-logs)\n\n\n\n\nThis is useful if the true relationship is nonlinear\nAlso useful, to interpret the coefficients"
  },
  {
    "objectID": "slides/session_4/transcript.html#coefficients-interpetation",
    "href": "slides/session_4/transcript.html#coefficients-interpetation",
    "title": "Multiple Regressions",
    "section": "Coefficients interpetation",
    "text": "Coefficients interpetation\n\nExample:\n\n(police_spending and prevention_policies in million dollars) \\[\\text{number_or_crimes} = 0.005\\% - 0.001 \\text{pol_spend} - 0.005 \\text{prev_pol} + 0.002 \\text{population density}\\]\n\nreads: when holding other variables constant a 0.1 million increase in police spending reduces crime rate by 0.001%\ninterpretation?\n\nproblematic because variables have different units\nwe can say that prevention policies are more efficient than police spending ceteris paribus\n\nTake logs: \\[\\log(\\text{number_or_crimes}) = 0.005\\% - 0.15 \\log(\\text{pol_spend}) - 0.4 \\log(\\text{prev_pol}) + 0.2 \\log(\\text{population density})\\]\n\nnow we have an estimate of elasticities\na \\(1\\%\\) increase in police spending leads to a \\(0.15\\%\\) decrease in the number of crimes"
  },
  {
    "objectID": "slides/session_4/transcript.html#hypotheses",
    "href": "slides/session_4/transcript.html#hypotheses",
    "title": "Multiple Regressions",
    "section": "Hypotheses",
    "text": "Hypotheses\n\n\n\n\nRecall what we do:\n\nwe have the data \\(X,Y\\)\nwe choose a model: \\[ Y = \\alpha + X \\beta \\]\nfrom the data we compute estimates: \\[\\hat{\\beta}  = (X'X)^{-1} X' Y \\] \\[\\hat{\\alpha} = Y- X \\beta \\]\nestimates are a precise function of data\n\nexact formula not important here\n\n\n\n\n\n\nWe make some hypotheses on the data generation process:\n\n\\(Y = X \\beta + \\epsilon\\)\n\\(\\mathbb{E}\\left[ \\epsilon \\right] = 0\\)\n\\(\\epsilon\\) multivariate normal with covariance matrix \\(\\sigma^2 I_n\\)\n\n\\(\\forall i, \\sigma(\\epsilon_i) = \\sigma\\)\n\\(\\forall i,j, cov(\\epsilon_i, \\epsilon_j) = 0\\)\n\n\n\nUnder these hypotheses:\n\n\\(\\hat{\\beta}\\) is an unbiased estimate of true parameter \\(\\beta\\)\n\ni.e. \\(\\mathbb{E} [\\hat{\\beta}] = \\beta\\)\n\none can prove \\(Var(\\hat{\\beta}) = \\sigma^2 I_n\\)\n\\(\\sigma\\) can be estimated by \\(\\hat{\\sigma}=S\\frac{\\sum_i (y_i-{pred}_i)^2}{N-p}\\)\n\n\\(N-p\\): degrees of freedoms\n\none can estimate: \\(\\sigma(\\hat{\\beta_k})\\)\n\nit is the \\(i\\)-th diagonal element of \\(\\hat{\\sigma}^2 X'X\\)"
  },
  {
    "objectID": "slides/session_4/transcript.html#is-the-regression-significant",
    "href": "slides/session_4/transcript.html#is-the-regression-significant",
    "title": "Multiple Regressions",
    "section": "Is the regression significant?",
    "text": "Is the regression significant?\n\n\n\nApproach is very similar to the one-dimensional case\nFisher criterium (F-test):\n\n\\(H0\\): all coeficients are 0\n\ni.e. true model is \\(y=\\alpha + \\epsilon\\)\n\n\\(H1\\): some coefficients are not 0\n\nStatistics: \\[F=\\frac{MSR}{MSE}\\]\n\n\\(MSR\\): mean-squared error of constant model\n\\(MSE\\): mean-squared error of full model\n\n\n\n\n\nUnder:\n\nthe model assumptions about the data generation process\nthe H0 hypothesis\n\n… the distribution of \\(F\\) is known\nIt is remarkable that it doesn’t depend on \\(\\sigma\\) !\n\nOne can produce a p-value.\n\nprobability to obtain this statistics given hypothesis H0\nif very low, H0 is rejected"
  },
  {
    "objectID": "slides/session_4/transcript.html#is-each-coefficient-significant",
    "href": "slides/session_4/transcript.html#is-each-coefficient-significant",
    "title": "Multiple Regressions",
    "section": "Is each coefficient significant ?",
    "text": "Is each coefficient significant ?\n\nStudent test. Given a coefficient \\(\\beta_k\\):\n\n\\(H0\\): coefficient is 0\n\\(H1\\): coefficient is not zero\n\nStatistics: \\(t = \\frac{\\hat{\\beta_k}}{\\hat{\\sigma}(\\hat{\\beta_k})}\\)\n\nwhere \\(\\hat{\\sigma}(\\beta_k)\\) is \\(i\\)-th diagonal element of \\(\\hat{\\sigma}^2 X'X\\)\nit compares the estimated value of a coefficient to its estimated standard deviation\n\nUnder the inference hypotheses, distribution of \\(t\\) is known.\n\nit is a student distribution\n\nProcedure:\n\nCompute \\(t\\). Check acceptance threshold \\(t*\\) at probability \\(\\alpha\\) (ex 5%)\nCoefficient is significant with probability \\(1-\\alpha\\) if \\(t&gt;t*\\)\nOr just look at the \\(p-value\\): probability that \\(t\\) would be as high as it is, assuming \\(H0\\)"
  },
  {
    "objectID": "slides/session_4/transcript.html#confidence-intervals",
    "href": "slides/session_4/transcript.html#confidence-intervals",
    "title": "Multiple Regressions",
    "section": "Confidence intervals",
    "text": "Confidence intervals\n\nSame as in the 1d case.\nTake estimate \\(\\color{red}{\\beta_i}\\) with an estimate of its standard deviation \\(\\color{red}{\\hat{\\sigma}(\\beta_i)}\\)\nCompute student \\(\\color{red}{t^{\\star}}\\) at \\(\\color{red}{\\alpha}\\) confidence level (ex: \\(\\alpha=5\\\\%\\)) such that:\n\n\\(P(|t|&gt;t^{\\star})&lt;\\alpha\\)\n\nProduce confidence intervals at \\(\\alpha\\) confidence level:\n\n\\([\\color{red}{\\beta_i} - t^{\\star} \\color{red}{\\hat{\\sigma}(\\beta_i)}, \\color{red}{\\beta_i} + t^{\\star} \\color{red}{\\hat{\\sigma}(\\beta_i)}]\\)\n\nInterpretation:\n\nfor a given confidence interval at confidence level \\(\\alpha\\)…\nthe probability that our coefficient was obtained, if the true coefficient were outside of it, is smaller than \\(\\alpha\\)"
  },
  {
    "objectID": "slides/session_4/transcript.html#other-tests",
    "href": "slides/session_4/transcript.html#other-tests",
    "title": "Multiple Regressions",
    "section": "Other tests",
    "text": "Other tests\n\nThe tests seen so far rely on strong statistical assumptions (normality, homoscedasticity, etc..)\nSome tests can be used to test these assumptions:\n\nJarque-Bera: is the distribution of data truly normal\nDurbin-Watson: are residuals autocorrelated (makes sense for time-series)\n…\n\nIn case assumptions are not met…\n\n… still possible to do econometrics\n… but beyond the scope of this course"
  },
  {
    "objectID": "slides/session_4/transcript.html#variable-selection-1",
    "href": "slides/session_4/transcript.html#variable-selection-1",
    "title": "Multiple Regressions",
    "section": "Variable selection",
    "text": "Variable selection\n\n\n\nI’ve got plenty of data:\n\n\\(y\\): gdp\n\\(x_1\\): investment\n\\(x_2\\): inflation\n\\(x_3\\): education\n\\(x_4\\): unemployment\n…\n\n\n\n\nMany possible regressions:\n\n\\(y = α + \\beta_1 x_1\\)\n\\(y = α + \\beta_2 x_2 + \\beta_3 x_4\\)\n…\n\n\n\n\n. . .\n\nWhich one do I choose ?\n\nputting everything together is not an option (kitchen sink regression)"
  },
  {
    "objectID": "slides/session_4/transcript.html#not-enough-coefficients",
    "href": "slides/session_4/transcript.html#not-enough-coefficients",
    "title": "Multiple Regressions",
    "section": "Not enough coefficients",
    "text": "Not enough coefficients\n\nSuppose you run a regression: \\[y = \\alpha + \\beta_1 x_1 + \\epsilon\\] and are genuinely interested in coefficient \\(\\beta_1\\)\nBut unknowingly to you, the actual model is \\[y = \\alpha + \\beta_1 x_1 + \\beta_2 x_2 + \\eta\\]\nThe residual \\(y - \\alpha - \\beta_1 x_1\\) is not white noise\n\nspecification hypotheses are violated\nestimate \\(\\hat{\\beta_1}\\) will have a bias (omitted variable bias)\nto correct the bias we add \\(x_2\\)\n\neven though we are not interested in \\(x_2\\) by itself\nwe control for \\(x_2\\))"
  },
  {
    "objectID": "slides/session_4/transcript.html#example",
    "href": "slides/session_4/transcript.html#example",
    "title": "Multiple Regressions",
    "section": "Example",
    "text": "Example\n\n\nSuppose I want to check Okun’s law. I consider the following model: \\[\\text{gdp_growth} = \\alpha + \\beta \\times \\text{unemployment}\\]\nI obtain: \\[\\text{gdp_growth} = 0.01 - 0.1 \\times \\text{unemployment} + e_i\\]\nThen I inspect visually the residuals: not normal at all!\nConclusion: my regression is misspecified, \\(0.1\\) is a biased (useless) estimate\nI need to control for additional variables. For instance: \\[\\text{gdp_growth} = \\alpha + \\beta_1 \\text{unemployment} + \\beta_2 \\text{interest rate}\\]\nUntil the residuals are actually white noise"
  },
  {
    "objectID": "slides/session_4/transcript.html#colinear-regressors",
    "href": "slides/session_4/transcript.html#colinear-regressors",
    "title": "Multiple Regressions",
    "section": "Colinear regressors",
    "text": "Colinear regressors\n\n\nWhat happens if two regressors are (almost) colinear? \\[y = \\alpha + \\beta_1 x_1 + \\beta_2 x_2\\] where \\(x_2 = \\kappa x_1\\)\nIntuitively: parameters are not unique\n\nif \\(y = \\alpha + \\beta_1 x_1\\) is the right model…\nthen \\(y = \\alpha + \\beta_1 \\lambda x_1 + \\beta_2 (1-\\lambda) \\frac{1}{\\kappa} x_2\\) is exactly as good…\n\nMathematically: \\((X'X)\\) is not invertible.\nWhen regressors are almost colinear, coefficients can have a lot of variability.\nTest:\n\ncorrelation statistics\ncorrelation plot"
  },
  {
    "objectID": "slides/session_4/transcript.html#choosing-regressors",
    "href": "slides/session_4/transcript.html#choosing-regressors",
    "title": "Multiple Regressions",
    "section": "Choosing regressors",
    "text": "Choosing regressors\n\\[y = \\alpha + \\beta_1 x_1 + ... \\beta_n x_n\\]\nWhich regressors to choose ?\n\nMethod 1 : remove coefficients with lowest t (less significant) to maximize adjusted R-squared\n\nremove regressors with lowest t\n\nnot the one you are interested in ;)\n\nregress again\nsee if adjusted \\(R^2\\) is decreasing\n\nif so continue\notherwise cancel last step and stop\n\n\nMethod 2 : choose combination to maximize Akaike Information Criterium\n\nAIC: \\(p - log(L)\\)\n\\(L\\) is likelihood\ncomputed by all good econometric softwares"
  },
  {
    "objectID": "slides/session_4/graphs/inference.html",
    "href": "slides/session_4/graphs/inference.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "from matplotlib import pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n\ndef generate_dataset(μ1, μ2, α, β, σ, N=10):\n    xvec = np.random.uniform(μ1, μ2, N)\n    yvec = α + β*xvec + np.random.normal(size=N)*σ\n    return pd.DataFrame({'x': xvec, 'y': yvec})\n\n\ndf = generate_dataset(0.0, 1.0, 0.1, 0.8, 0.1)\n\n\nplt.plot(df['x'], df['y'], 'o')\nplt.grid()\n\n\n\n\n\n\n\n\n\ndef plot_distribution(α, β, σ, N=100000, μ1=0.0, μ2=1.0):\n    xvec = np.random.uniform(μ1, μ2, N)\n    yvec = α + β*xvec + np.random.normal(size=N)*σ\n    plt.plot(xvec, yvec, '.r', alpha=0.005)\n    plt.plot(xvec, α + β*xvec, color='black')\n\n# missing ridge line\n\n\nimport statsmodels\n\n\nμ1 = 0\nμ2 = 1.0\nα = 0.1\nβ = 0.8\nσ = 0.2\nN = 20\nK = 1000\n\n\nimport statsmodels.formula.api as smf\n\n\ndf = generate_dataset(μ1, μ2, α, β, σ, N=N)\n\n\nres = smf.ols(formula='y ~ x + 1', data=df).fit()\nparams = res.params\nαhat = params['Intercept']\nβhat = params['x']\nσhat = res.resid.std()\n\n\nres.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\ny\nR-squared:\n0.692\n\n\nModel:\nOLS\nAdj. R-squared:\n0.675\n\n\nMethod:\nLeast Squares\nF-statistic:\n40.48\n\n\nDate:\nTue, 26 Jan 2021\nProb (F-statistic):\n5.41e-06\n\n\nTime:\n04:02:36\nLog-Likelihood:\n7.6662\n\n\nNo. Observations:\n20\nAIC:\n-11.33\n\n\nDf Residuals:\n18\nBIC:\n-9.341\n\n\nDf Model:\n1\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n0.1210\n0.077\n1.565\n0.135\n-0.041\n0.283\n\n\nx\n0.7941\n0.125\n6.362\n0.000\n0.532\n1.056\n\n\n\n\n\n\n\n\nOmnibus:\n1.410\nDurbin-Watson:\n1.507\n\n\nProb(Omnibus):\n0.494\nJarque-Bera (JB):\n0.890\n\n\nSkew:\n-0.081\nProb(JB):\n0.641\n\n\nKurtosis:\n1.979\nCond. No.\n4.20\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\nres.predict(df['x'])\n\n0     0.326200\n1     0.211704\n2     0.798819\n3     0.603306\n4     0.573319\n5     0.823919\n6     0.740622\n7     0.503227\n8     0.292622\n9     0.489566\n10    0.138720\n11    0.355157\n12    0.594171\n13    0.883917\n14    0.266229\n15    0.827021\n16    0.912376\n17    0.163088\n18    0.684858\n19    0.732782\ndtype: float64\n\n\n\nfor i in [1,2,3]:\n    \n    fig = plt.figure(figsize=(10,14))\n    plt.subplot(311)\n    plot_distribution(0.1, 0.8, 0.2)\n    plt.grid()\n    plt.title(f\"True Distribution: $y = {α:.2f} + {β:.2f} x + {σ:.2f} u$\")\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n\n    plt.subplot(312)\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n    if i&gt;=2:\n        plt.plot(df['x'], df['y'], 'o')\n    if i&gt;=3:\n        plt.plot(df['x'], res.predict(), label=f'$\\hat{{α}}={αhat:.2f}; \\hat{{β}}={βhat:.2f}$')\n        plt.legend(loc='lower right')\n    plt.title(\"Random Draw\")\n    plt.grid()\n    \n    plt.savefig(f\"regression_uncertainty_{i}.png\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport scipy.stats\n\n\ndatasets = [generate_dataset(μ1, μ2, αhat, βhat, σhat, N=N) for i in range(K)]\nall_params = [smf.ols(formula='x ~ y + 1', data=df).fit() for df in datasets]\nαvec = np.array( [e.params['Intercept'] for e in all_params] )\nβvec = np.array( [e.params['y'] for e in all_params] )\n\n\ngkd = scipy.stats.kde.gaussian_kde(βvec)\n\n\nfor i in [1,2,3,4,5,6,7,8,9,10,100]:\n\n    fig = plt.figure(figsize=(10,14))\n    plt.subplot(311)\n    plot_distribution(0.1, 0.8, 0.2)\n    plt.grid()\n    plt.title(f\"True Distribution: $y = {αhat:.2f} + {βhat:.2f} x + {σhat:.2f} u$\")\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n    \n    plt.subplot(312)\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n    df = datasets[i]\n    if i&gt;=2:\n        plt.plot(df['x'], df['y'], 'o')\n    plt.title(\"Random Draw\")\n    plt.grid()\n\n    plt.subplot(313)\n    if i==3:\n        plt.plot(βvec[i], βvec[i]*0, 'o')\n    if i&gt;4:\n        plt.plot(βvec[3:i], βvec[3:i]*0, 'o')\n    if i&gt;10:\n        xx = np.linspace(0.2, 1.4, 10000)\n        plt.plot( βvec, gkd.pdf(βvec), '.')\n    plt.title(\"Distribution of β\")\n    plt.xlim(0.2, 1.4)\n    plt.ylim(-0.1, 4)\n    plt.grid()\n\n    plt.tight_layout()\n\n    plt.savefig(f\"random_estimates_{i}.png\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplt.plot( βvec, βvec*0, 'o')"
  },
  {
    "objectID": "slides/session_4/Regressions.html",
    "href": "slides/session_4/Regressions.html",
    "title": "Regressions",
    "section": "",
    "text": "Import the Duncan/carData dataset\n\nimport statsmodels.api as sm\ndataset = sm.datasets.get_rdataset(\"Duncan\", \"carData\")\ndf = dataset.data\ndf.head()\n\n\n\n\n\n\n\n\ntype\nincome\neducation\nprestige\n\n\n\n\naccountant\nprof\n62\n86\n82\n\n\npilot\nprof\n72\n76\n83\n\n\narchitect\nprof\n75\n92\n90\n\n\nauthor\nprof\n55\n90\n76\n\n\nchemist\nprof\n64\n86\n90\n\n\n\n\n\n\n\nEstimate by hand the model \\(\\text{income} = \\alpha + \\beta  \\times \\text{education}\\) . Plot.\nCompute total, explained, unexplained variance. Compute R^2 statistics\nUse statsmodels (formula API) to estimate \\(\\text{income} = \\alpha + \\beta  \\times \\text{education}\\). Comment regression statistics.\n\n#https://www.statsmodels.org/stable/generated/statsmodels.formula.api.ols.html\n\nfrom statsmodels.formula import api as smf\n\nmodel_1 = smf.ols(\"income ~ education\", df)\nres_1 = model_1.fit()\n\n&lt;statsmodels.regression.linear_model.RegressionResultsWrapper at 0x7ffad5b135e0&gt;\n\n\n\nres_1.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nincome\nR-squared:\n0.525\n\n\nModel:\nOLS\nAdj. R-squared:\n0.514\n\n\nMethod:\nLeast Squares\nF-statistic:\n47.51\n\n\nDate:\nTue, 02 Feb 2021\nProb (F-statistic):\n1.84e-08\n\n\nTime:\n11:29:50\nLog-Likelihood:\n-190.42\n\n\nNo. Observations:\n45\nAIC:\n384.8\n\n\nDf Residuals:\n43\nBIC:\n388.5\n\n\nDf Model:\n1\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n10.6035\n5.198\n2.040\n0.048\n0.120\n21.087\n\n\neducation\n0.5949\n0.086\n6.893\n0.000\n0.421\n0.769\n\n\n\n\n\n\n\n\nOmnibus:\n9.841\nDurbin-Watson:\n1.736\n\n\nProb(Omnibus):\n0.007\nJarque-Bera (JB):\n10.609\n\n\nSkew:\n0.776\nProb(JB):\n0.00497\n\n\nKurtosis:\n4.802\nCond. No.\n123.\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\nThe estimated regresssion is income = 10.6 + 0.59 education. At a 5% p-value level both the intercept and the coefficient are significant. R-squared is 0.52: the model explains half of the variance.\nUse statsmodels to estimate \\(\\text{income} = \\alpha + \\beta  \\times \\text{prestige}\\). Comment regression statistics.\n\n# \n\n__Use statsmodels to estimate $ = + + _2 $. Comment regression statistics.__\nWHich model would you recommend? For which purpose?\nPlot the regression with prestige\nCheck visually normality of residuals"
  },
  {
    "objectID": "slides/session_4/Regressions.html#linear-regressions",
    "href": "slides/session_4/Regressions.html#linear-regressions",
    "title": "Regressions",
    "section": "",
    "text": "Import the Duncan/carData dataset\n\nimport statsmodels.api as sm\ndataset = sm.datasets.get_rdataset(\"Duncan\", \"carData\")\ndf = dataset.data\ndf.head()\n\n\n\n\n\n\n\n\ntype\nincome\neducation\nprestige\n\n\n\n\naccountant\nprof\n62\n86\n82\n\n\npilot\nprof\n72\n76\n83\n\n\narchitect\nprof\n75\n92\n90\n\n\nauthor\nprof\n55\n90\n76\n\n\nchemist\nprof\n64\n86\n90\n\n\n\n\n\n\n\nEstimate by hand the model \\(\\text{income} = \\alpha + \\beta  \\times \\text{education}\\) . Plot.\nCompute total, explained, unexplained variance. Compute R^2 statistics\nUse statsmodels (formula API) to estimate \\(\\text{income} = \\alpha + \\beta  \\times \\text{education}\\). Comment regression statistics.\n\n#https://www.statsmodels.org/stable/generated/statsmodels.formula.api.ols.html\n\nfrom statsmodels.formula import api as smf\n\nmodel_1 = smf.ols(\"income ~ education\", df)\nres_1 = model_1.fit()\n\n&lt;statsmodels.regression.linear_model.RegressionResultsWrapper at 0x7ffad5b135e0&gt;\n\n\n\nres_1.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nincome\nR-squared:\n0.525\n\n\nModel:\nOLS\nAdj. R-squared:\n0.514\n\n\nMethod:\nLeast Squares\nF-statistic:\n47.51\n\n\nDate:\nTue, 02 Feb 2021\nProb (F-statistic):\n1.84e-08\n\n\nTime:\n11:29:50\nLog-Likelihood:\n-190.42\n\n\nNo. Observations:\n45\nAIC:\n384.8\n\n\nDf Residuals:\n43\nBIC:\n388.5\n\n\nDf Model:\n1\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n10.6035\n5.198\n2.040\n0.048\n0.120\n21.087\n\n\neducation\n0.5949\n0.086\n6.893\n0.000\n0.421\n0.769\n\n\n\n\n\n\n\n\nOmnibus:\n9.841\nDurbin-Watson:\n1.736\n\n\nProb(Omnibus):\n0.007\nJarque-Bera (JB):\n10.609\n\n\nSkew:\n0.776\nProb(JB):\n0.00497\n\n\nKurtosis:\n4.802\nCond. No.\n123.\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\nThe estimated regresssion is income = 10.6 + 0.59 education. At a 5% p-value level both the intercept and the coefficient are significant. R-squared is 0.52: the model explains half of the variance.\nUse statsmodels to estimate \\(\\text{income} = \\alpha + \\beta  \\times \\text{prestige}\\). Comment regression statistics.\n\n# \n\n__Use statsmodels to estimate $ = + + _2 $. Comment regression statistics.__\nWHich model would you recommend? For which purpose?\nPlot the regression with prestige\nCheck visually normality of residuals"
  },
  {
    "objectID": "slides/session_4/Regressions.html#finding-the-right-model",
    "href": "slides/session_4/Regressions.html#finding-the-right-model",
    "title": "Regressions",
    "section": "Finding the right model",
    "text": "Finding the right model\nImport dataset from data.dta. Explore dataset (statistics, plots)\nOur goal is to explain z by x and y. Run a regression.\nExamine the residuals of the regression. What’s wrong? Remedy?"
  },
  {
    "objectID": "slides/session_4/Regressions.html#taylor-rule",
    "href": "slides/session_4/Regressions.html#taylor-rule",
    "title": "Regressions",
    "section": "Taylor Rule",
    "text": "Taylor Rule\nIn 1993, John taylor, estimated, using US data the regression: \\(i_t = i^{\\star} + \\alpha_{\\pi} \\pi_t + \\alpha_{\\pi} y_t\\) where \\(\\pi_t\\) is inflation and \\(y_t\\) the output gap (let’s say deviation from real gdp from the trend). He found that both coefficients were not significantly different from \\(0.5\\). Our goal, is to replicate the same analysis.\n\nImporting the Data\nImport macrodata dataset from statsmodels (https://www.statsmodels.org/devel/datasets/generated/macrodata.html). Describe briefly its content using the metadata.\n\nimport statsmodels.api as sm\ndataset = sm.datasets.macrodata.load_pandas()\n\n\n# the dataset object contains some data on the dataset: explore them (dataset.+Tab)\n\nExtract the dataframe from the dataset object. Print first lines and summary statistics.\n\ndf = dataset.data\ndf\n\n\n\n\n\n\n\n\nyear\nquarter\nrealgdp\nrealcons\nrealinv\nrealgovt\nrealdpi\ncpi\nm1\ntbilrate\nunemp\npop\ninfl\nrealint\n\n\n\n\n0\n1959.0\n1.0\n2710.349\n1707.4\n286.898\n470.045\n1886.9\n28.980\n139.7\n2.82\n5.8\n177.146\n0.00\n0.00\n\n\n1\n1959.0\n2.0\n2778.801\n1733.7\n310.859\n481.301\n1919.7\n29.150\n141.7\n3.08\n5.1\n177.830\n2.34\n0.74\n\n\n2\n1959.0\n3.0\n2775.488\n1751.8\n289.226\n491.260\n1916.4\n29.350\n140.5\n3.82\n5.3\n178.657\n2.74\n1.09\n\n\n3\n1959.0\n4.0\n2785.204\n1753.7\n299.356\n484.052\n1931.3\n29.370\n140.0\n4.33\n5.6\n179.386\n0.27\n4.06\n\n\n4\n1960.0\n1.0\n2847.699\n1770.5\n331.722\n462.199\n1955.5\n29.540\n139.6\n3.50\n5.2\n180.007\n2.31\n1.19\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n198\n2008.0\n3.0\n13324.600\n9267.7\n1990.693\n991.551\n9838.3\n216.889\n1474.7\n1.17\n6.0\n305.270\n-3.16\n4.33\n\n\n199\n2008.0\n4.0\n13141.920\n9195.3\n1857.661\n1007.273\n9920.4\n212.174\n1576.5\n0.12\n6.9\n305.952\n-8.79\n8.91\n\n\n200\n2009.0\n1.0\n12925.410\n9209.2\n1558.494\n996.287\n9926.4\n212.671\n1592.8\n0.22\n8.1\n306.547\n0.94\n-0.71\n\n\n201\n2009.0\n2.0\n12901.504\n9189.0\n1456.678\n1023.528\n10077.5\n214.469\n1653.6\n0.18\n9.2\n307.226\n3.37\n-3.19\n\n\n202\n2009.0\n3.0\n12990.341\n9256.0\n1486.398\n1044.088\n10040.6\n216.385\n1673.9\n0.12\n9.6\n308.013\n3.56\n-3.44\n\n\n\n\n203 rows × 14 columns\n\n\n\n\ndf.head()\n\n\n\n\n\n\n\n\nyear\nquarter\nrealgdp\nrealcons\nrealinv\nrealgovt\nrealdpi\ncpi\nm1\ntbilrate\nunemp\npop\ninfl\nrealint\n\n\n\n\n0\n1959.0\n1.0\n2710.349\n1707.4\n286.898\n470.045\n1886.9\n28.98\n139.7\n2.82\n5.8\n177.146\n0.00\n0.00\n\n\n1\n1959.0\n2.0\n2778.801\n1733.7\n310.859\n481.301\n1919.7\n29.15\n141.7\n3.08\n5.1\n177.830\n2.34\n0.74\n\n\n2\n1959.0\n3.0\n2775.488\n1751.8\n289.226\n491.260\n1916.4\n29.35\n140.5\n3.82\n5.3\n178.657\n2.74\n1.09\n\n\n3\n1959.0\n4.0\n2785.204\n1753.7\n299.356\n484.052\n1931.3\n29.37\n140.0\n4.33\n5.6\n179.386\n0.27\n4.06\n\n\n4\n1960.0\n1.0\n2847.699\n1770.5\n331.722\n462.199\n1955.5\n29.54\n139.6\n3.50\n5.2\n180.007\n2.31\n1.19\n\n\n\n\n\n\n\n\n\nPreparing the Data\nCompute inflation as the growth and store it in the dataframe as variable π.\nAdd nominal interest rate to the database (use the Fisher relation).\nDetrend GDP using Hodrick-Prescott filter. If needed, Check wikipedia and the documentation. The result is a trend tau and a residual epsilon. Store log(tau/residual) as y"
  },
  {
    "objectID": "slides/session_4/Regressions.html#run-the-regression",
    "href": "slides/session_4/Regressions.html#run-the-regression",
    "title": "Regressions",
    "section": "Run the regression",
    "text": "Run the regression\nRun the basic regression. Interpret the results.\nWhich control variables would you propose to add? Does it increase prediction power? How do you interpret that?"
  },
  {
    "objectID": "slides/session_8/index_archive.html#classification",
    "href": "slides/session_8/index_archive.html#classification",
    "title": "Introduction to Machine Learning (2)",
    "section": "Classification",
    "text": "Classification"
  },
  {
    "objectID": "slides/session_8/index_archive.html#classification-problems",
    "href": "slides/session_8/index_archive.html#classification-problems",
    "title": "Introduction to Machine Learning (2)",
    "section": "Classification Problems",
    "text": "Classification Problems"
  },
  {
    "objectID": "slides/session_8/index_archive.html#other-classifiers",
    "href": "slides/session_8/index_archive.html#other-classifiers",
    "title": "Introduction to Machine Learning (2)",
    "section": "Other Classifiers",
    "text": "Other Classifiers"
  },
  {
    "objectID": "slides/session_8/index_archive.html#validation",
    "href": "slides/session_8/index_archive.html#validation",
    "title": "Introduction to Machine Learning (2)",
    "section": "Validation",
    "text": "Validation"
  },
  {
    "objectID": "slides/session_8/graphs/inference.html",
    "href": "slides/session_8/graphs/inference.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "from matplotlib import pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n\ndef generate_dataset(μ1, μ2, α, β, σ, N=10):\n    xvec = np.random.uniform(μ1, μ2, N)\n    yvec = α + β*xvec + np.random.normal(size=N)*σ\n    return pd.DataFrame({'x': xvec, 'y': yvec})\n\n\ndf = generate_dataset(0.0, 1.0, 0.1, 0.8, 0.1)\n\n\nplt.plot(df['x'], df['y'], 'o')\nplt.grid()\n\n\n\n\n\n\n\n\n\ndef plot_distribution(α, β, σ, N=100000, μ1=0.0, μ2=1.0):\n    xvec = np.random.uniform(μ1, μ2, N)\n    yvec = α + β*xvec + np.random.normal(size=N)*σ\n    plt.plot(xvec, yvec, '.r', alpha=0.005)\n    plt.plot(xvec, α + β*xvec, color='black')\n\n# missing ridge line\n\n\nimport statsmodels\n\n\nμ1 = 0\nμ2 = 1.0\nα = 0.1\nβ = 0.8\nσ = 0.2\nN = 20\nK = 1000\n\n\nimport statsmodels.formula.api as smf\n\n\ndf = generate_dataset(μ1, μ2, α, β, σ, N=N)\n\n\nres = smf.ols(formula='y ~ x + 1', data=df).fit()\nparams = res.params\nαhat = params['Intercept']\nβhat = params['x']\nσhat = res.resid.std()\n\n\nres.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\ny\nR-squared:\n0.692\n\n\nModel:\nOLS\nAdj. R-squared:\n0.675\n\n\nMethod:\nLeast Squares\nF-statistic:\n40.48\n\n\nDate:\nTue, 26 Jan 2021\nProb (F-statistic):\n5.41e-06\n\n\nTime:\n04:02:36\nLog-Likelihood:\n7.6662\n\n\nNo. Observations:\n20\nAIC:\n-11.33\n\n\nDf Residuals:\n18\nBIC:\n-9.341\n\n\nDf Model:\n1\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n0.1210\n0.077\n1.565\n0.135\n-0.041\n0.283\n\n\nx\n0.7941\n0.125\n6.362\n0.000\n0.532\n1.056\n\n\n\n\n\n\n\n\nOmnibus:\n1.410\nDurbin-Watson:\n1.507\n\n\nProb(Omnibus):\n0.494\nJarque-Bera (JB):\n0.890\n\n\nSkew:\n-0.081\nProb(JB):\n0.641\n\n\nKurtosis:\n1.979\nCond. No.\n4.20\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\nres.predict(df['x'])\n\n0     0.326200\n1     0.211704\n2     0.798819\n3     0.603306\n4     0.573319\n5     0.823919\n6     0.740622\n7     0.503227\n8     0.292622\n9     0.489566\n10    0.138720\n11    0.355157\n12    0.594171\n13    0.883917\n14    0.266229\n15    0.827021\n16    0.912376\n17    0.163088\n18    0.684858\n19    0.732782\ndtype: float64\n\n\n\nfor i in [1,2,3]:\n    \n    fig = plt.figure(figsize=(10,14))\n    plt.subplot(311)\n    plot_distribution(0.1, 0.8, 0.2)\n    plt.grid()\n    plt.title(f\"True Distribution: $y = {α:.2f} + {β:.2f} x + {σ:.2f} u$\")\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n\n    plt.subplot(312)\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n    if i&gt;=2:\n        plt.plot(df['x'], df['y'], 'o')\n    if i&gt;=3:\n        plt.plot(df['x'], res.predict(), label=f'$\\hat{{α}}={αhat:.2f}; \\hat{{β}}={βhat:.2f}$')\n        plt.legend(loc='lower right')\n    plt.title(\"Random Draw\")\n    plt.grid()\n    \n    plt.savefig(f\"regression_uncertainty_{i}.png\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport scipy.stats\n\n\ndatasets = [generate_dataset(μ1, μ2, αhat, βhat, σhat, N=N) for i in range(K)]\nall_params = [smf.ols(formula='x ~ y + 1', data=df).fit() for df in datasets]\nαvec = np.array( [e.params['Intercept'] for e in all_params] )\nβvec = np.array( [e.params['y'] for e in all_params] )\n\n\ngkd = scipy.stats.kde.gaussian_kde(βvec)\n\n\nfor i in [1,2,3,4,5,6,7,8,9,10,100]:\n\n    fig = plt.figure(figsize=(10,14))\n    plt.subplot(311)\n    plot_distribution(0.1, 0.8, 0.2)\n    plt.grid()\n    plt.title(f\"True Distribution: $y = {αhat:.2f} + {βhat:.2f} x + {σhat:.2f} u$\")\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n    \n    plt.subplot(312)\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n    df = datasets[i]\n    if i&gt;=2:\n        plt.plot(df['x'], df['y'], 'o')\n    plt.title(\"Random Draw\")\n    plt.grid()\n\n    plt.subplot(313)\n    if i==3:\n        plt.plot(βvec[i], βvec[i]*0, 'o')\n    if i&gt;4:\n        plt.plot(βvec[3:i], βvec[3:i]*0, 'o')\n    if i&gt;10:\n        xx = np.linspace(0.2, 1.4, 10000)\n        plt.plot( βvec, gkd.pdf(βvec), '.')\n    plt.title(\"Distribution of β\")\n    plt.xlim(0.2, 1.4)\n    plt.ylim(-0.1, 4)\n    plt.grid()\n\n    plt.tight_layout()\n\n    plt.savefig(f\"random_estimates_{i}.png\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplt.plot( βvec, βvec*0, 'o')"
  },
  {
    "objectID": "slides/session_3/graphs/Untitled1.html",
    "href": "slides/session_3/graphs/Untitled1.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "from matplotlib import pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n\nimport statsmodels.api as sm\n\n\ndf.describe()\n\n\n\n\n\n\n\n\nincome\neducation\nprestige\n\n\n\n\ncount\n45.000000\n45.000000\n45.000000\n\n\nmean\n41.866667\n52.555556\n47.688889\n\n\nstd\n24.435072\n29.760831\n31.510332\n\n\nmin\n7.000000\n7.000000\n3.000000\n\n\n25%\n21.000000\n26.000000\n16.000000\n\n\n50%\n42.000000\n45.000000\n41.000000\n\n\n75%\n64.000000\n84.000000\n81.000000\n\n\nmax\n81.000000\n100.000000\n97.000000\n\n\n\n\n\n\n\n\ndf.cov()\n\n\n\n\n\n\n\n\nincome\neducation\nprestige\n\n\n\n\nincome\n597.072727\n526.871212\n645.071212\n\n\neducation\n526.871212\n885.707071\n798.904040\n\n\nprestige\n645.071212\n798.904040\n992.901010\n\n\n\n\n\n\n\n\nfrom matplotlib import pyplot as plt\n\n\nplt.figure(figsize=(8,6))\nplt.plot(df['education'],df['income'],'o')\nplt.grid()\nplt.xlabel(\"x (Education)\")\nplt.ylabel(\"y (Income)\")\nplt.savefig(\"data_description.png\")\n\n\n\n\n\n\n\n\n\nfor i in [1,2,3]:\n    xvec = np.linspace(10,100)\n\n    plt.figure(figsize=(12,8))\n    plt.plot(df['education'],df['income'],'o')\n\n    plt.plot(xvec, xvec * 0 + 50)\n    if i&gt;=2:\n        plt.plot(xvec, xvec )\n    if i&gt;=3:\n        plt.plot(xvec,  90- 0.6*xvec )\n\n    plt.grid()\n    plt.xlabel(\"x (Education)\")\n    plt.ylabel(\"y (Income)\")\n    plt.savefig(f\"which_line_{i}.png\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfrom ipywidgets import interact\n\n\nimport matplotlib.patches as patches\n\n\na = 0.1\nb = 1.0\nind = 23\n\n\napprox =  a + b*xvec\n\n# Create figure and axes\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\nplt.plot(df['education'],df['income'],'o')\nplt.plot(xvec, approx, color='red')\n\nx, y = df['education'][ind], df['income'][ind]\nplt.plot(x, y, 'o', color='red' )\np = a+b*x\nplt.grid(True)\nh = abs(p-y)\nplt.vlines(x, y+h, y, color='red')\n\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.savefig(f\"error_0.png\")\n\n\n\n\n\n\n\n\n\nplt.vlines?\n\n\nSignature:\nplt.vlines(\n    x,\n    ymin,\n    ymax,\n    colors=None,\n    linestyles='solid',\n    label='',\n    *,\n    data=None,\n    **kwargs,\n)\nDocstring:\nPlot vertical lines.\nPlot vertical lines at each *x* from *ymin* to *ymax*.\nParameters\n----------\nx : float or array-like\n    x-indexes where to plot the lines.\nymin, ymax : float or array-like\n    Respective beginning and end of each line. If scalars are\n    provided, all lines will have same length.\ncolors : list of colors, default: :rc:`lines.color`\nlinestyles : {'solid', 'dashed', 'dashdot', 'dotted'}, optional\nlabel : str, default: ''\nReturns\n-------\n`~matplotlib.collections.LineCollection`\nOther Parameters\n----------------\n**kwargs : `~matplotlib.collections.LineCollection` properties.\nSee Also\n--------\nhlines : horizontal lines\naxvline: vertical line across the axes\nNotes\n-----\n.. note::\n    In addition to the above described arguments, this function can take\n    a *data* keyword argument. If such a *data* argument is given,\n    the following arguments can also be string ``s``, which is\n    interpreted as ``data[s]`` (unless this raises an exception):\n    *x*, *ymin*, *ymax*, *colors*.\n    Objects passed as **data** must support item access (``data[s]``) and\n    membership test (``s in data``).\nFile:      ~/.local/opt/miniconda/lib/python3.8/site-packages/matplotlib/pyplot.py\nType:      function\n\n\n\n\n\na = 0.1\nb = 1.0\nind = 23\n\n\napprox =  a + b*xvec\n\n# Create figure and axes\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\nplt.plot(df['education'],df['income'],'o')\nplt.plot(xvec, approx, color='red')\n\nx, y = df['education'][ind], df['income'][ind]\nplt.plot(x, y, 'o', color='red' )\np = a+b*x\nplt.grid(True)\nh = abs(p-y)\nif p-y&gt;0:\n    # Create a Rectangle patch\n    rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n    ax.add_patch(rect)\n    \nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.savefig(f\"errors_{1}.png\")\n\n\n\n\n\n\n\n\n\ndef L(a,b):\n    Δ = a + b*df['education'] - df['income']\n    return (Δ**2).sum()\n\n\na = 0.1\nb = 0.8\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red')\n\nplt.grid(True)\nfor ind in range(df.shape[0]):\n    \n    x, y = df['education'][ind], df['income'][ind]\n    p = a+b*x\n\n    h = abs(p-y)\n    if p-y&gt;0:\n        # Create a Rectangle patch\n        rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\n    else:\n        rect = patches.Rectangle((x,y-h),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"errors_2.png\")\n\n\n\n\n\n\n\n\n\na = 90\nb = -0.6\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red')\n\nplt.grid(True)\nfor ind in range(df.shape[0]):\n    \n    x, y = df['education'][ind], df['income'][ind]\n    p = a+b*x\n\n    h = abs(p-y)\n    if p-y&gt;0:\n        # Create a Rectangle patch\n        rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\n    else:\n        rect = patches.Rectangle((x,y-h),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"errors_3.png\")\n\n\n\n\n\n\n\n\n\nimport scipy.optimize\n\n\nscipy.optimize.minimize(lambda x: L(x[0], x[1]),np.array([0.5, 0.5]))\n\n      fun: 12480.970174488397\n hess_inv: array([[ 7.14169839e-09, -3.91281920e-09],\n       [-3.91281920e-09,  2.46663613e-09]])\n      jac: array([0.00024414, 0.00012207])\n  message: 'Desired error not necessarily achieved due to precision loss.'\n     nfev: 57\n      nit: 7\n     njev: 19\n   status: 2\n  success: False\n        x: array([10.60350224,  0.59485938])\n\n\n\na = 10\nb = 0.59\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red')\n\nplt.grid(True)\nfor ind in range(df.shape[0]):\n    \n    x, y = df['education'][ind], df['income'][ind]\n    p = a+b*x\n\n    h = abs(p-y)\n    if p-y&gt;0:\n        # Create a Rectangle patch\n        rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\n    else:\n        rect = patches.Rectangle((x,y-h),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"errors_4.png\")\n\n\n\n\n\n\n\n\n\na = 10\nb = 0.59\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red', alpha=0.5)\n\nplt.plot(60, a + b*60, 'o', color='red',)\n\nprint(a+b*60)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"prediction.png\")\n\n45.4\n\n\n\n\n\n\n\n\n\n\na = 10\nb = 0.59\n\napprox =  (a + b*df['education'] - df['income'])\n\nplt.figure(figsize=(12,6))\n\nplt.subplot(121)\nplt.plot(approx)\nplt.grid(False)\nplt.title(\"Residuals\")\n\n\nplt.subplot(122)\ndistplot(approx)\nplt.title(\"Distribution of residuals\")\nplt.grid()\n\nplt.savefig(\"residuals.png\")\n\n/home/pablo/.local/opt/miniconda/lib/python3.8/site-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n  warnings.warn(msg, FutureWarning)\n\n\n\n\n\n\n\n\n\n\n(a + b*df['education'] - df['income']).std()\n\n16.842782676352154\n\n\n\n\n\n/home/pablo/.local/opt/miniconda/lib/python3.8/site-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n  warnings.warn(msg, FutureWarning)\n\n\n\n\n\n\n\n\n\n\nfrom scipy.stats import f\n\n\nf(0.3)\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n&lt;ipython-input-191-91b22dc02480&gt; in &lt;module&gt;\n----&gt; 1 f(0.3)\n\n~/.local/opt/miniconda/lib/python3.8/site-packages/scipy/stats/_distn_infrastructure.py in __call__(self, *args, **kwds)\n    778 \n    779     def __call__(self, *args, **kwds):\n--&gt; 780         return self.freeze(*args, **kwds)\n    781     __call__.__doc__ = freeze.__doc__\n    782 \n\n~/.local/opt/miniconda/lib/python3.8/site-packages/scipy/stats/_distn_infrastructure.py in freeze(self, *args, **kwds)\n    775 \n    776         \"\"\"\n--&gt; 777         return rv_frozen(self, *args, **kwds)\n    778 \n    779     def __call__(self, *args, **kwds):\n\n~/.local/opt/miniconda/lib/python3.8/site-packages/scipy/stats/_distn_infrastructure.py in __init__(self, dist, *args, **kwds)\n    422         self.dist = dist.__class__(**dist._updated_ctor_param())\n    423 \n--&gt; 424         shapes, _, _ = self.dist._parse_args(*args, **kwds)\n    425         self.a, self.b = self.dist._get_support(*shapes)\n    426 \n\nTypeError: _parse_args() missing 1 required positional argument: 'dfd'\n\n\n\n\nnp.rand\n\n\nK = 100\nxvec = np.linspace(0,1,K)\ne1 = np.random.randn(K)*0.1\nyvec = 0.1 + xvec*0.4 + e1\ne2 = np.random.randn(K)*0.05\nyvec2 = 0.1 + xvec*(xvec-1)/2 + e2\ne3 = np.random.randn(K)*xvec/2\nyvec3 = 0.1 + xvec + e3\n\nyvec4 = 0.1 + np.sin(xvec*6) + np.random.randn(K)*xvec/2\n\n\nfrom dolo.numeric.processes import VAR1\n\n\nsim = VAR1( ρ=0.8, Σ=0.001).simulate(N=1,T=100)\nyvec4 = 0.1 + xvec*0.4 + sim.ravel()\n\n\nplt.figure(figsize=(18,6))\nplt.subplot(241)\nplt.plot(xvec, yvec,'o')\nplt.plot(xvec, 0.1 + xvec*0.4 )\nplt.ylabel(\"Series\")\nplt.title(\"white noise\")\nplt.subplot(242)\nplt.plot(xvec, yvec2, 'o')\nplt.plot(xvec, yvec2*0)\nplt.title('nonlinear')\nplt.subplot(243)\nplt.plot(xvec, yvec3,'o')\nplt.plot(xvec, 0.1 + xvec)\nplt.title('heteroskedastic')\nplt.subplot(244)\nplt.plot(xvec, yvec4,'o')\nplt.plot(xvec, xvec*0.6)\n\nplt.title('correlated')\n\n\nplt.subplot(245)\nplt.plot(xvec, e1,'o')\nplt.ylabel(\"Residuals\")\nplt.subplot(246)\nplt.plot(xvec, yvec2-0.075, 'o')\n\nplt.subplot(247)\nplt.plot(xvec, e3,'o')\nplt.subplot(248)\nplt.plot(xvec, sim.ravel(),'o')\n\nplt.tight_layout()\n\nplt.savefig(\"residuals_circus.png\")"
  },
  {
    "objectID": "slides/session_3/Untitled.html",
    "href": "slides/session_3/Untitled.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "!pip install statsmodels\n\nCollecting statsmodels\n  Downloading statsmodels-0.13.5-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (9.9 MB)\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 9.9/9.9 MB 5.1 MB/s eta 0:00:00m eta 0:00:01[36m0:00:01\nRequirement already satisfied: pandas&gt;=0.25 in /home/pablo/.local/opt/mambaforge/lib/python3.10/site-packages (from statsmodels) (1.4.4)\nRequirement already satisfied: numpy&gt;=1.17 in /home/pablo/.local/opt/mambaforge/lib/python3.10/site-packages (from statsmodels) (1.22.4)\nRequirement already satisfied: scipy&gt;=1.3 in /home/pablo/.local/opt/mambaforge/lib/python3.10/site-packages (from statsmodels) (1.9.1)\nCollecting patsy&gt;=0.5.2\n  Downloading patsy-0.5.3-py2.py3-none-any.whl (233 kB)\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 233.8/233.8 kB 4.7 MB/s eta 0:00:00 MB/s eta 0:00:01\nRequirement already satisfied: packaging&gt;=21.3 in /home/pablo/.local/opt/mambaforge/lib/python3.10/site-packages (from statsmodels) (21.3)\nRequirement already satisfied: pyparsing!=3.0.5,&gt;=2.0.2 in /home/pablo/.local/opt/mambaforge/lib/python3.10/site-packages (from packaging&gt;=21.3-&gt;statsmodels) (3.0.9)\nRequirement already satisfied: python-dateutil&gt;=2.8.1 in /home/pablo/.local/opt/mambaforge/lib/python3.10/site-packages (from pandas&gt;=0.25-&gt;statsmodels) (2.8.2)\nRequirement already satisfied: pytz&gt;=2020.1 in /home/pablo/.local/opt/mambaforge/lib/python3.10/site-packages (from pandas&gt;=0.25-&gt;statsmodels) (2022.2.1)\nRequirement already satisfied: six in /home/pablo/.local/opt/mambaforge/lib/python3.10/site-packages (from patsy&gt;=0.5.2-&gt;statsmodels) (1.16.0)\nInstalling collected packages: patsy, statsmodels\nSuccessfully installed patsy-0.5.3 statsmodels-0.13.5\n\n\n\nimport statsmodels.api as sm\ndataset = sm.datasets.get_rdataset(\"Duncan\", \"carData\")\ndf = dataset.data\n\n\ndf.head()\n\n\n\n\n\n\n\n\ntype\nincome\neducation\nprestige\n\n\n\n\naccountant\nprof\n62\n86\n82\n\n\npilot\nprof\n72\n76\n83\n\n\narchitect\nprof\n75\n92\n90\n\n\nauthor\nprof\n55\n90\n76\n\n\nchemist\nprof\n64\n86\n90\n\n\n\n\n\n\n\n\ndfs = df.sort_values('income', ascending=False).head()\n\n\ndf.mean()\n\n/tmp/ipykernel_20796/3698961737.py:1: FutureWarning: Dropping of nuisance columns in DataFrame reductions (with 'numeric_only=None') is deprecated; in a future version this will raise TypeError.  Select only valid columns before calling the reduction.\n  df.mean()\n\n\nincome       41.866667\neducation    52.555556\nprestige     47.688889\ndtype: float64\n\n\n\ndf.median()\n\n/tmp/ipykernel_20796/530051474.py:1: FutureWarning: Dropping of nuisance columns in DataFrame reductions (with 'numeric_only=None') is deprecated; in a future version this will raise TypeError.  Select only valid columns before calling the reduction.\n  df.median()\n\n\nincome       42.0\neducation    45.0\nprestige     41.0\ndtype: float64\n\n\n\ndf.describe()\n\n\n\n\n\n\n\n\nincome\neducation\nprestige\n\n\n\n\ncount\n45.000000\n45.000000\n45.000000\n\n\nmean\n41.866667\n52.555556\n47.688889\n\n\nstd\n24.435072\n29.760831\n31.510332\n\n\nmin\n7.000000\n7.000000\n3.000000\n\n\n25%\n21.000000\n26.000000\n16.000000\n\n\n50%\n42.000000\n45.000000\n41.000000\n\n\n75%\n64.000000\n84.000000\n81.000000\n\n\nmax\n81.000000\n100.000000\n97.000000\n\n\n\n\n\n\n\n\ndfs['income'].plot()\n\n\n\n\n\n\n\n\n\ndf['income'].hist()\n\n\n\n\n\n\n\n\n\ndf['education'].hist()\n\n\n\n\n\n\n\n\n\ndf['prestige'].hist()\n\n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\n\n\nplt.plot(df['education'], df['income'],'o')\n\n\n\n\n\n\n\n\n\nplt.plot(df['prestige'], df['income'],'o')\n\n\n\n\n\n\n\n\n\ndf.corr()\n\n\n\n\n\n\n\n\nincome\neducation\nprestige\n\n\n\n\nincome\n1.000000\n0.724512\n0.837801\n\n\neducation\n0.724512\n1.000000\n0.851916\n\n\nprestige\n0.837801\n0.851916\n1.000000\n\n\n\n\n\n\n\n\nimport statsmodels.formula.api as sm\n\n\nmodel = sm.ols(formula=\"income ~ education\", data=df)\n\n\nresult = model.fit()\n\n\nresult.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nincome\nR-squared:\n0.525\n\n\nModel:\nOLS\nAdj. R-squared:\n0.514\n\n\nMethod:\nLeast Squares\nF-statistic:\n47.51\n\n\nDate:\nWed, 01 Feb 2023\nProb (F-statistic):\n1.84e-08\n\n\nTime:\n09:38:54\nLog-Likelihood:\n-190.42\n\n\nNo. Observations:\n45\nAIC:\n384.8\n\n\nDf Residuals:\n43\nBIC:\n388.5\n\n\nDf Model:\n1\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n10.6035\n5.198\n2.040\n0.048\n0.120\n21.087\n\n\neducation\n0.5949\n0.086\n6.893\n0.000\n0.421\n0.769\n\n\n\n\n\n\n\n\nOmnibus:\n9.841\nDurbin-Watson:\n1.736\n\n\nProb(Omnibus):\n0.007\nJarque-Bera (JB):\n10.609\n\n\nSkew:\n0.776\nProb(JB):\n0.00497\n\n\nKurtosis:\n4.802\nCond. No.\n123.\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\n\"income ~ education\"   ~~   income = α + β * education"
  },
  {
    "objectID": "slides/session_7/graphs/Untitled1.html",
    "href": "slides/session_7/graphs/Untitled1.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "from matplotlib import pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n\nimport statsmodels.api as sm\n\n\ndf.describe()\n\n\n\n\n\n\n\n\nincome\neducation\nprestige\n\n\n\n\ncount\n45.000000\n45.000000\n45.000000\n\n\nmean\n41.866667\n52.555556\n47.688889\n\n\nstd\n24.435072\n29.760831\n31.510332\n\n\nmin\n7.000000\n7.000000\n3.000000\n\n\n25%\n21.000000\n26.000000\n16.000000\n\n\n50%\n42.000000\n45.000000\n41.000000\n\n\n75%\n64.000000\n84.000000\n81.000000\n\n\nmax\n81.000000\n100.000000\n97.000000\n\n\n\n\n\n\n\n\ndf.cov()\n\n\n\n\n\n\n\n\nincome\neducation\nprestige\n\n\n\n\nincome\n597.072727\n526.871212\n645.071212\n\n\neducation\n526.871212\n885.707071\n798.904040\n\n\nprestige\n645.071212\n798.904040\n992.901010\n\n\n\n\n\n\n\n\nfrom matplotlib import pyplot as plt\n\n\nplt.figure(figsize=(8,6))\nplt.plot(df['education'],df['income'],'o')\nplt.grid()\nplt.xlabel(\"x (Education)\")\nplt.ylabel(\"y (Income)\")\nplt.savefig(\"data_description.png\")\n\n\n\n\n\n\n\n\n\nfor i in [1,2,3]:\n    xvec = np.linspace(10,100)\n\n    plt.figure(figsize=(12,8))\n    plt.plot(df['education'],df['income'],'o')\n\n    plt.plot(xvec, xvec * 0 + 50)\n    if i&gt;=2:\n        plt.plot(xvec, xvec )\n    if i&gt;=3:\n        plt.plot(xvec,  90- 0.6*xvec )\n\n    plt.grid()\n    plt.xlabel(\"x (Education)\")\n    plt.ylabel(\"y (Income)\")\n    plt.savefig(f\"which_line_{i}.png\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfrom ipywidgets import interact\n\n\nimport matplotlib.patches as patches\n\n\na = 0.1\nb = 1.0\nind = 23\n\n\napprox =  a + b*xvec\n\n# Create figure and axes\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\nplt.plot(df['education'],df['income'],'o')\nplt.plot(xvec, approx, color='red')\n\nx, y = df['education'][ind], df['income'][ind]\nplt.plot(x, y, 'o', color='red' )\np = a+b*x\nplt.grid(True)\nh = abs(p-y)\nplt.vlines(x, y+h, y, color='red')\n\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.savefig(f\"error_0.png\")\n\n\n\n\n\n\n\n\n\nplt.vlines?\n\n\nSignature:\nplt.vlines(\n    x,\n    ymin,\n    ymax,\n    colors=None,\n    linestyles='solid',\n    label='',\n    *,\n    data=None,\n    **kwargs,\n)\nDocstring:\nPlot vertical lines.\nPlot vertical lines at each *x* from *ymin* to *ymax*.\nParameters\n----------\nx : float or array-like\n    x-indexes where to plot the lines.\nymin, ymax : float or array-like\n    Respective beginning and end of each line. If scalars are\n    provided, all lines will have same length.\ncolors : list of colors, default: :rc:`lines.color`\nlinestyles : {'solid', 'dashed', 'dashdot', 'dotted'}, optional\nlabel : str, default: ''\nReturns\n-------\n`~matplotlib.collections.LineCollection`\nOther Parameters\n----------------\n**kwargs : `~matplotlib.collections.LineCollection` properties.\nSee Also\n--------\nhlines : horizontal lines\naxvline: vertical line across the axes\nNotes\n-----\n.. note::\n    In addition to the above described arguments, this function can take\n    a *data* keyword argument. If such a *data* argument is given,\n    the following arguments can also be string ``s``, which is\n    interpreted as ``data[s]`` (unless this raises an exception):\n    *x*, *ymin*, *ymax*, *colors*.\n    Objects passed as **data** must support item access (``data[s]``) and\n    membership test (``s in data``).\nFile:      ~/.local/opt/miniconda/lib/python3.8/site-packages/matplotlib/pyplot.py\nType:      function\n\n\n\n\n\na = 0.1\nb = 1.0\nind = 23\n\n\napprox =  a + b*xvec\n\n# Create figure and axes\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\nplt.plot(df['education'],df['income'],'o')\nplt.plot(xvec, approx, color='red')\n\nx, y = df['education'][ind], df['income'][ind]\nplt.plot(x, y, 'o', color='red' )\np = a+b*x\nplt.grid(True)\nh = abs(p-y)\nif p-y&gt;0:\n    # Create a Rectangle patch\n    rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n    ax.add_patch(rect)\n    \nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.savefig(f\"errors_{1}.png\")\n\n\n\n\n\n\n\n\n\ndef L(a,b):\n    Δ = a + b*df['education'] - df['income']\n    return (Δ**2).sum()\n\n\na = 0.1\nb = 0.8\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red')\n\nplt.grid(True)\nfor ind in range(df.shape[0]):\n    \n    x, y = df['education'][ind], df['income'][ind]\n    p = a+b*x\n\n    h = abs(p-y)\n    if p-y&gt;0:\n        # Create a Rectangle patch\n        rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\n    else:\n        rect = patches.Rectangle((x,y-h),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"errors_2.png\")\n\n\n\n\n\n\n\n\n\na = 90\nb = -0.6\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red')\n\nplt.grid(True)\nfor ind in range(df.shape[0]):\n    \n    x, y = df['education'][ind], df['income'][ind]\n    p = a+b*x\n\n    h = abs(p-y)\n    if p-y&gt;0:\n        # Create a Rectangle patch\n        rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\n    else:\n        rect = patches.Rectangle((x,y-h),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"errors_3.png\")\n\n\n\n\n\n\n\n\n\nimport scipy.optimize\n\n\nscipy.optimize.minimize(lambda x: L(x[0], x[1]),np.array([0.5, 0.5]))\n\n      fun: 12480.970174488397\n hess_inv: array([[ 7.14169839e-09, -3.91281920e-09],\n       [-3.91281920e-09,  2.46663613e-09]])\n      jac: array([0.00024414, 0.00012207])\n  message: 'Desired error not necessarily achieved due to precision loss.'\n     nfev: 57\n      nit: 7\n     njev: 19\n   status: 2\n  success: False\n        x: array([10.60350224,  0.59485938])\n\n\n\na = 10\nb = 0.59\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red')\n\nplt.grid(True)\nfor ind in range(df.shape[0]):\n    \n    x, y = df['education'][ind], df['income'][ind]\n    p = a+b*x\n\n    h = abs(p-y)\n    if p-y&gt;0:\n        # Create a Rectangle patch\n        rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\n    else:\n        rect = patches.Rectangle((x,y-h),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"errors_4.png\")\n\n\n\n\n\n\n\n\n\na = 10\nb = 0.59\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red', alpha=0.5)\n\nplt.plot(60, a + b*60, 'o', color='red',)\n\nprint(a+b*60)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"prediction.png\")\n\n45.4\n\n\n\n\n\n\n\n\n\n\na = 10\nb = 0.59\n\napprox =  (a + b*df['education'] - df['income'])\n\nplt.figure(figsize=(12,6))\n\nplt.subplot(121)\nplt.plot(approx)\nplt.grid(False)\nplt.title(\"Residuals\")\n\n\nplt.subplot(122)\ndistplot(approx)\nplt.title(\"Distribution of residuals\")\nplt.grid()\n\nplt.savefig(\"residuals.png\")\n\n/home/pablo/.local/opt/miniconda/lib/python3.8/site-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n  warnings.warn(msg, FutureWarning)\n\n\n\n\n\n\n\n\n\n\n(a + b*df['education'] - df['income']).std()\n\n16.842782676352154\n\n\n\n\n\n/home/pablo/.local/opt/miniconda/lib/python3.8/site-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n  warnings.warn(msg, FutureWarning)\n\n\n\n\n\n\n\n\n\n\nfrom scipy.stats import f\n\n\nf(0.3)\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n&lt;ipython-input-191-91b22dc02480&gt; in &lt;module&gt;\n----&gt; 1 f(0.3)\n\n~/.local/opt/miniconda/lib/python3.8/site-packages/scipy/stats/_distn_infrastructure.py in __call__(self, *args, **kwds)\n    778 \n    779     def __call__(self, *args, **kwds):\n--&gt; 780         return self.freeze(*args, **kwds)\n    781     __call__.__doc__ = freeze.__doc__\n    782 \n\n~/.local/opt/miniconda/lib/python3.8/site-packages/scipy/stats/_distn_infrastructure.py in freeze(self, *args, **kwds)\n    775 \n    776         \"\"\"\n--&gt; 777         return rv_frozen(self, *args, **kwds)\n    778 \n    779     def __call__(self, *args, **kwds):\n\n~/.local/opt/miniconda/lib/python3.8/site-packages/scipy/stats/_distn_infrastructure.py in __init__(self, dist, *args, **kwds)\n    422         self.dist = dist.__class__(**dist._updated_ctor_param())\n    423 \n--&gt; 424         shapes, _, _ = self.dist._parse_args(*args, **kwds)\n    425         self.a, self.b = self.dist._get_support(*shapes)\n    426 \n\nTypeError: _parse_args() missing 1 required positional argument: 'dfd'\n\n\n\n\nnp.rand\n\n\nK = 100\nxvec = np.linspace(0,1,K)\ne1 = np.random.randn(K)*0.1\nyvec = 0.1 + xvec*0.4 + e1\ne2 = np.random.randn(K)*0.05\nyvec2 = 0.1 + xvec*(xvec-1)/2 + e2\ne3 = np.random.randn(K)*xvec/2\nyvec3 = 0.1 + xvec + e3\n\nyvec4 = 0.1 + np.sin(xvec*6) + np.random.randn(K)*xvec/2\n\n\nfrom dolo.numeric.processes import VAR1\n\n\nsim = VAR1( ρ=0.8, Σ=0.001).simulate(N=1,T=100)\nyvec4 = 0.1 + xvec*0.4 + sim.ravel()\n\n\nplt.figure(figsize=(18,6))\nplt.subplot(241)\nplt.plot(xvec, yvec,'o')\nplt.plot(xvec, 0.1 + xvec*0.4 )\nplt.ylabel(\"Series\")\nplt.title(\"white noise\")\nplt.subplot(242)\nplt.plot(xvec, yvec2, 'o')\nplt.plot(xvec, yvec2*0)\nplt.title('nonlinear')\nplt.subplot(243)\nplt.plot(xvec, yvec3,'o')\nplt.plot(xvec, 0.1 + xvec)\nplt.title('heteroskedastic')\nplt.subplot(244)\nplt.plot(xvec, yvec4,'o')\nplt.plot(xvec, xvec*0.6)\n\nplt.title('correlated')\n\n\nplt.subplot(245)\nplt.plot(xvec, e1,'o')\nplt.ylabel(\"Residuals\")\nplt.subplot(246)\nplt.plot(xvec, yvec2-0.075, 'o')\n\nplt.subplot(247)\nplt.plot(xvec, e3,'o')\nplt.subplot(248)\nplt.plot(xvec, sim.ravel(),'o')\n\nplt.tight_layout()\n\nplt.savefig(\"residuals_circus.png\")"
  },
  {
    "objectID": "slides/session_7/index_handout.html",
    "href": "slides/session_7/index_handout.html",
    "title": "Introduction to Machine Learning (2)",
    "section": "",
    "text": "Binary Classification\n\nGoal is to make a prediction \\(c_n = f(x_{1,1}, ... x_{k,n})\\) …\n…where \\(c_i\\) is a binary variable (\\(\\in\\{0,1\\}\\))\n… and \\((x_{i,n})_k\\), \\(k\\) different features to predict \\(c_n\\)\n\nMulticategory Classification\n\nThe variable to predict takes values in a non ordered set with \\(p\\) different values\n\n\n\n\n\n\n\n\nGiven a regression model (a linear predictor) \\[ a_0 + a_1 x_1 + a_2 x_2 + \\cdots a_n x_n \\]\none can build a classification model: \\[ f(x_1, ..., x_n) = \\sigma( a_0 + a_1 x_1 + a_2 x_2 + \\cdots a_n x_n )\\] where \\(\\sigma(x)=\\frac{1}{1+\\exp(-x)}\\) is the logistic function a.k.a. sigmoid\nThe loss function to minimize is: \\[L() = \\sum_n (c_n - \\sigma( a_{0} + a_1 x_{1,n} + a_2 x_{2,n} + \\cdots a_k x_{k,n} ) )^2\\]\nThis works for any regression model (LASSO, RIDGE, nonlinear…)\n\n\n\n\n\n\n\n\n\nThe linear model predicts an intensity/score (not a category) \\[ f(x_1, ..., x_n) = \\sigma( \\underbrace{a_0 + a_1 x_1 + a_2 x_2 + \\cdots a_n x_n }_{\\text{score}})\\]\nTo make a prediction: round to 0 or 1.\n\n\n\n\n\n\n\nIf there are \\(P\\) categories to predict:\n\nbuild a linear predictor \\(f_p\\) for each category \\(p\\)\nlinear predictor is also called score\n\nTo predict:\n\nevaluate the score of all categories\nchoose the one with highest score\n\nTo train the model:\n\ntrain separately all scores (works for any predictor, not just linear)\n… there are more subtle approaches (not here)",
    "crumbs": [
      "lectures",
      "Introduction to Machine Learning (2)"
    ]
  },
  {
    "objectID": "slides/session_7/index_handout.html#classification-problem",
    "href": "slides/session_7/index_handout.html#classification-problem",
    "title": "Introduction to Machine Learning (2)",
    "section": "",
    "text": "Binary Classification\n\nGoal is to make a prediction \\(c_n = f(x_{1,1}, ... x_{k,n})\\) …\n…where \\(c_i\\) is a binary variable (\\(\\in\\{0,1\\}\\))\n… and \\((x_{i,n})_k\\), \\(k\\) different features to predict \\(c_n\\)\n\nMulticategory Classification\n\nThe variable to predict takes values in a non ordered set with \\(p\\) different values",
    "crumbs": [
      "lectures",
      "Introduction to Machine Learning (2)"
    ]
  },
  {
    "objectID": "slides/session_7/index_handout.html#logistic-regression",
    "href": "slides/session_7/index_handout.html#logistic-regression",
    "title": "Introduction to Machine Learning (2)",
    "section": "",
    "text": "Given a regression model (a linear predictor) \\[ a_0 + a_1 x_1 + a_2 x_2 + \\cdots a_n x_n \\]\none can build a classification model: \\[ f(x_1, ..., x_n) = \\sigma( a_0 + a_1 x_1 + a_2 x_2 + \\cdots a_n x_n )\\] where \\(\\sigma(x)=\\frac{1}{1+\\exp(-x)}\\) is the logistic function a.k.a. sigmoid\nThe loss function to minimize is: \\[L() = \\sum_n (c_n - \\sigma( a_{0} + a_1 x_{1,n} + a_2 x_{2,n} + \\cdots a_k x_{k,n} ) )^2\\]\nThis works for any regression model (LASSO, RIDGE, nonlinear…)",
    "crumbs": [
      "lectures",
      "Introduction to Machine Learning (2)"
    ]
  },
  {
    "objectID": "slides/session_7/index_handout.html#logistic-regression-1",
    "href": "slides/session_7/index_handout.html#logistic-regression-1",
    "title": "Introduction to Machine Learning (2)",
    "section": "",
    "text": "The linear model predicts an intensity/score (not a category) \\[ f(x_1, ..., x_n) = \\sigma( \\underbrace{a_0 + a_1 x_1 + a_2 x_2 + \\cdots a_n x_n }_{\\text{score}})\\]\nTo make a prediction: round to 0 or 1.",
    "crumbs": [
      "lectures",
      "Introduction to Machine Learning (2)"
    ]
  },
  {
    "objectID": "slides/session_7/index_handout.html#multinomial-regression",
    "href": "slides/session_7/index_handout.html#multinomial-regression",
    "title": "Introduction to Machine Learning (2)",
    "section": "",
    "text": "If there are \\(P\\) categories to predict:\n\nbuild a linear predictor \\(f_p\\) for each category \\(p\\)\nlinear predictor is also called score\n\nTo predict:\n\nevaluate the score of all categories\nchoose the one with highest score\n\nTo train the model:\n\ntrain separately all scores (works for any predictor, not just linear)\n… there are more subtle approaches (not here)",
    "crumbs": [
      "lectures",
      "Introduction to Machine Learning (2)"
    ]
  },
  {
    "objectID": "slides/session_7/index_handout.html#common-classification-algorithms",
    "href": "slides/session_7/index_handout.html#common-classification-algorithms",
    "title": "Introduction to Machine Learning (2)",
    "section": "Common classification algorithms",
    "text": "Common classification algorithms\nThere are many:\n\nLogistic Regression\nNaive Bayes Classifier\nNearest Distance\nneural networks (replace score in sigmoid by n.n.)\nDecision Trees\nSupport Vector Machines",
    "crumbs": [
      "lectures",
      "Introduction to Machine Learning (2)"
    ]
  },
  {
    "objectID": "slides/session_7/index_handout.html#nearest-distance",
    "href": "slides/session_7/index_handout.html#nearest-distance",
    "title": "Introduction to Machine Learning (2)",
    "section": "Nearest distance",
    "text": "Nearest distance\n\n\n\nIdea:\n\nin order to predict category \\(c\\) corresponding to \\(x\\) find the closest point \\(x_0\\) in the training set\nAssign to \\(x\\) the same category as \\(x_0\\)\n\nBut this would be very susceptible to noise\nAmended idea: \\(k-nearest\\) neighbours\n\nlook for the \\(k\\) points closest to \\(x\\)\nlabel \\(x\\) with the same category as the majority of them\n\nRemark: this algorithm uses Euclidean distance. This is why it is important to normalize the dataset.",
    "crumbs": [
      "lectures",
      "Introduction to Machine Learning (2)"
    ]
  },
  {
    "objectID": "slides/session_7/index_handout.html#decision-tree-random-forests",
    "href": "slides/session_7/index_handout.html#decision-tree-random-forests",
    "title": "Introduction to Machine Learning (2)",
    "section": "Decision Tree / Random Forests",
    "text": "Decision Tree / Random Forests\n\n\n\nDecision Tree\n\nrecursively find simple criteria to subdivide dataset\n\nProblems:\n\nGreedy: algorithm does not simplify branches\neasily overfits\n\nExtension : random tree forest\n\nuses several (randomly generated) trees to generate a prediction\nsolves the overfitting problem",
    "crumbs": [
      "lectures",
      "Introduction to Machine Learning (2)"
    ]
  },
  {
    "objectID": "slides/session_7/index_handout.html#support-vector-classification",
    "href": "slides/session_7/index_handout.html#support-vector-classification",
    "title": "Introduction to Machine Learning (2)",
    "section": "Support Vector Classification",
    "text": "Support Vector Classification\n\n\n\n\nSeparates data by one line (hyperplane).\n\nChooses the largest margin according to support vectors\n\nCan use a nonlinear kernel.",
    "crumbs": [
      "lectures",
      "Introduction to Machine Learning (2)"
    ]
  },
  {
    "objectID": "slides/session_7/index_handout.html#all-these-algorithms-are-super-easy-to-use",
    "href": "slides/session_7/index_handout.html#all-these-algorithms-are-super-easy-to-use",
    "title": "Introduction to Machine Learning (2)",
    "section": "All these algorithms are super easy to use!",
    "text": "All these algorithms are super easy to use!\nExamples:\n\nDecision Tree\n\nfrom sklearn.tree import DecisionTreeClassifier\nclf = DecisionTreeClassifier(random_state=0)\n. . .\n\nSupport Vector\n\nfrom sklearn.svm import SVC\nclf = SVC(random_state=0)\n. . .\n\nRidge Regression\n\nfrom sklearn.linear_model import Ridge\nclf = Ridge(random_state=0)",
    "crumbs": [
      "lectures",
      "Introduction to Machine Learning (2)"
    ]
  },
  {
    "objectID": "slides/session_7/index_handout.html#validity-of-a-classification-algorithm",
    "href": "slides/session_7/index_handout.html#validity-of-a-classification-algorithm",
    "title": "Introduction to Machine Learning (2)",
    "section": "Validity of a classification algorithm",
    "text": "Validity of a classification algorithm\n\nIndependently of how the classification is made, its validity can be assessed with a similar procedure as in the regression.\nSeparate training set and test set\n\ndo not touch test set at all during the training\n\nCompute score: number of correctly identified categories\n\nnote that this is not the same as the loss function minimized by the training",
    "crumbs": [
      "lectures",
      "Introduction to Machine Learning (2)"
    ]
  },
  {
    "objectID": "slides/session_7/index_handout.html#classification-matrix",
    "href": "slides/session_7/index_handout.html#classification-matrix",
    "title": "Introduction to Machine Learning (2)",
    "section": "Classification matrix",
    "text": "Classification matrix\n\nFor binary classification, we focus on the classification matrix or confusion matrix.\n\n\n\n\nPredicted\n(0) Actual\n(1) Actual\n\n\n\n\n0\ntrue negatives (TN)\nfalse negatives (FN)\n\n\n1\nfalse positives (FP)\ntrue positives (TP)\n\n\n\n. . .\nWe can then define different measures:\n\nSensitivity aka True Positive Rate (TPR): \\(\\frac{TP}{FP+TP}\\)\nFalse Positive Rate (FPR): \\(\\frac{FP}{TN+FP}\\)\nOverall accuracy: \\(\\frac{\\text{TN}+\\text{TP}}{\\text{total}}\\)\n\n. . .\nWhich one to favour depends on the use case",
    "crumbs": [
      "lectures",
      "Introduction to Machine Learning (2)"
    ]
  },
  {
    "objectID": "slides/session_7/index_handout.html#example-london-police",
    "href": "slides/session_7/index_handout.html#example-london-police",
    "title": "Introduction to Machine Learning (2)",
    "section": "Example: London Police",
    "text": "Example: London Police\n\n\n\nPolice cameras in London\n\n\nAccording to London Police the cameras in London have\n\nTrue Positive Identification rate of over 80% at a fixed number of False Positive Alerts.29 nov. 2022\n\n. . .\nInterpretation? Is failure rate too high?",
    "crumbs": [
      "lectures",
      "Introduction to Machine Learning (2)"
    ]
  },
  {
    "objectID": "slides/session_7/index_handout.html#example",
    "href": "slides/session_7/index_handout.html#example",
    "title": "Introduction to Machine Learning (2)",
    "section": "Example",
    "text": "Example\n\n\n\nIn-sample confusion matrix\n\n\nBased on consumer data, an algorithm tries to predict the credit score from.\nCan you calculate: FPR, TPR and overall accuracy?",
    "crumbs": [
      "lectures",
      "Introduction to Machine Learning (2)"
    ]
  },
  {
    "objectID": "slides/session_7/index_handout.html#confusion-matrix-with-sklearn",
    "href": "slides/session_7/index_handout.html#confusion-matrix-with-sklearn",
    "title": "Introduction to Machine Learning (2)",
    "section": "Confusion matrix with sklearn",
    "text": "Confusion matrix with sklearn\n\nPredict on the test set:\n\ny_pred = model.predict(x_test)\n\nCompute confusion matrix:\n\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)",
    "crumbs": [
      "lectures",
      "Introduction to Machine Learning (2)"
    ]
  },
  {
    "objectID": "slides/session_7/index.html#classification-problem",
    "href": "slides/session_7/index.html#classification-problem",
    "title": "Introduction to Machine Learning (2)",
    "section": "Classification problem",
    "text": "Classification problem\n\nBinary Classification\n\nGoal is to make a prediction \\(c_n = f(x_{1,1}, ... x_{k,n})\\) …\n…where \\(c_i\\) is a binary variable (\\(\\in\\{0,1\\}\\))\n… and \\((x_{i,n})_k\\), \\(k\\) different features to predict \\(c_n\\)\n\nMulticategory Classification\n\nThe variable to predict takes values in a non ordered set with \\(p\\) different values"
  },
  {
    "objectID": "slides/session_7/index.html#logistic-regression",
    "href": "slides/session_7/index.html#logistic-regression",
    "title": "Introduction to Machine Learning (2)",
    "section": "Logistic regression",
    "text": "Logistic regression\n\n\n\nGiven a regression model (a linear predictor) \\[ a_0 + a_1 x_1 + a_2 x_2 + \\cdots a_n x_n \\]\none can build a classification model: \\[ f(x_1, ..., x_n) = \\sigma( a_0 + a_1 x_1 + a_2 x_2 + \\cdots a_n x_n )\\] where \\(\\sigma(x)=\\frac{1}{1+\\exp(-x)}\\) is the logistic function a.k.a. sigmoid\nThe loss function to minimize is: \\[L() = \\sum_n (c_n - \\sigma( a_{0} + a_1 x_{1,n} + a_2 x_{2,n} + \\cdots a_k x_{k,n} ) )^2\\]\nThis works for any regression model (LASSO, RIDGE, nonlinear…)"
  },
  {
    "objectID": "slides/session_7/index.html#logistic-regression-1",
    "href": "slides/session_7/index.html#logistic-regression-1",
    "title": "Introduction to Machine Learning (2)",
    "section": "Logistic regression",
    "text": "Logistic regression\n\nThe linear model predicts an intensity/score (not a category) \\[ f(x_1, ..., x_n) = \\sigma( \\underbrace{a_0 + a_1 x_1 + a_2 x_2 + \\cdots a_n x_n }_{\\text{score}})\\]\nTo make a prediction: round to 0 or 1."
  },
  {
    "objectID": "slides/session_7/index.html#multinomial-regression",
    "href": "slides/session_7/index.html#multinomial-regression",
    "title": "Introduction to Machine Learning (2)",
    "section": "Multinomial regression",
    "text": "Multinomial regression\n\n\nIf there are \\(P\\) categories to predict:\n\nbuild a linear predictor \\(f_p\\) for each category \\(p\\)\nlinear predictor is also called score\n\nTo predict:\n\nevaluate the score of all categories\nchoose the one with highest score\n\nTo train the model:\n\ntrain separately all scores (works for any predictor, not just linear)\n… there are more subtle approaches (not here)"
  },
  {
    "objectID": "slides/session_7/index.html#common-classification-algorithms",
    "href": "slides/session_7/index.html#common-classification-algorithms",
    "title": "Introduction to Machine Learning (2)",
    "section": "Common classification algorithms",
    "text": "Common classification algorithms\nThere are many:\n\nLogistic Regression\nNaive Bayes Classifier\nNearest Distance\nneural networks (replace score in sigmoid by n.n.)\nDecision Trees\nSupport Vector Machines"
  },
  {
    "objectID": "slides/session_7/index.html#nearest-distance",
    "href": "slides/session_7/index.html#nearest-distance",
    "title": "Introduction to Machine Learning (2)",
    "section": "Nearest distance",
    "text": "Nearest distance\n\n\n\nIdea:\n\nin order to predict category \\(c\\) corresponding to \\(x\\) find the closest point \\(x_0\\) in the training set\nAssign to \\(x\\) the same category as \\(x_0\\)\n\nBut this would be very susceptible to noise\nAmended idea: \\(k-nearest\\) neighbours\n\nlook for the \\(k\\) points closest to \\(x\\)\nlabel \\(x\\) with the same category as the majority of them\n\nRemark: this algorithm uses Euclidean distance. This is why it is important to normalize the dataset."
  },
  {
    "objectID": "slides/session_7/index.html#decision-tree-random-forests",
    "href": "slides/session_7/index.html#decision-tree-random-forests",
    "title": "Introduction to Machine Learning (2)",
    "section": "Decision Tree / Random Forests",
    "text": "Decision Tree / Random Forests\n\n\n\nDecision Tree\n\nrecursively find simple criteria to subdivide dataset\n\nProblems:\n\nGreedy: algorithm does not simplify branches\neasily overfits\n\nExtension : random tree forest\n\nuses several (randomly generated) trees to generate a prediction\nsolves the overfitting problem"
  },
  {
    "objectID": "slides/session_7/index.html#support-vector-classification",
    "href": "slides/session_7/index.html#support-vector-classification",
    "title": "Introduction to Machine Learning (2)",
    "section": "Support Vector Classification",
    "text": "Support Vector Classification\n\n\n\n\nSeparates data by one line (hyperplane).\n\nChooses the largest margin according to support vectors\n\nCan use a nonlinear kernel."
  },
  {
    "objectID": "slides/session_7/index.html#all-these-algorithms-are-super-easy-to-use",
    "href": "slides/session_7/index.html#all-these-algorithms-are-super-easy-to-use",
    "title": "Introduction to Machine Learning (2)",
    "section": "All these algorithms are super easy to use!",
    "text": "All these algorithms are super easy to use!\nExamples:\n\nDecision Tree\n\nfrom sklearn.tree import DecisionTreeClassifier\nclf = DecisionTreeClassifier(random_state=0)\n\n\nSupport Vector\n\nfrom sklearn.svm import SVC\nclf = SVC(random_state=0)\n\n\n\nRidge Regression\n\nfrom sklearn.linear_model import Ridge\nclf = Ridge(random_state=0)"
  },
  {
    "objectID": "slides/session_7/index.html#validity-of-a-classification-algorithm",
    "href": "slides/session_7/index.html#validity-of-a-classification-algorithm",
    "title": "Introduction to Machine Learning (2)",
    "section": "Validity of a classification algorithm",
    "text": "Validity of a classification algorithm\n\nIndependently of how the classification is made, its validity can be assessed with a similar procedure as in the regression.\nSeparate training set and test set\n\ndo not touch test set at all during the training\n\nCompute score: number of correctly identified categories\n\nnote that this is not the same as the loss function minimized by the training"
  },
  {
    "objectID": "slides/session_7/index.html#classification-matrix",
    "href": "slides/session_7/index.html#classification-matrix",
    "title": "Introduction to Machine Learning (2)",
    "section": "Classification matrix",
    "text": "Classification matrix\n\nFor binary classification, we focus on the classification matrix or confusion matrix.\n\n\n\n\nPredicted\n(0) Actual\n(1) Actual\n\n\n\n\n0\ntrue negatives (TN)\nfalse negatives (FN)\n\n\n1\nfalse positives (FP)\ntrue positives (TP)\n\n\n\n\nWe can then define different measures:\n\nSensitivity aka True Positive Rate (TPR): \\(\\frac{TP}{FP+TP}\\)\nFalse Positive Rate (FPR): \\(\\frac{FP}{TN+FP}\\)\nOverall accuracy: \\(\\frac{\\text{TN}+\\text{TP}}{\\text{total}}\\)\n\n\n\nWhich one to favour depends on the use case"
  },
  {
    "objectID": "slides/session_7/index.html#example-london-police",
    "href": "slides/session_7/index.html#example-london-police",
    "title": "Introduction to Machine Learning (2)",
    "section": "Example: London Police",
    "text": "Example: London Police\n\nPolice cameras in LondonAccording to London Police the cameras in London have\n\nTrue Positive Identification rate of over 80% at a fixed number of False Positive Alerts.29 nov. 2022\n\n\nInterpretation? Is failure rate too high?"
  },
  {
    "objectID": "slides/session_7/index.html#example",
    "href": "slides/session_7/index.html#example",
    "title": "Introduction to Machine Learning (2)",
    "section": "Example",
    "text": "Example\n\nIn-sample confusion matrixBased on consumer data, an algorithm tries to predict the credit score from.\nCan you calculate: FPR, TPR and overall accuracy?"
  },
  {
    "objectID": "slides/session_7/index.html#confusion-matrix-with-sklearn",
    "href": "slides/session_7/index.html#confusion-matrix-with-sklearn",
    "title": "Introduction to Machine Learning (2)",
    "section": "Confusion matrix with sklearn",
    "text": "Confusion matrix with sklearn\n\nPredict on the test set:\n\ny_pred = model.predict(x_test)\n\nCompute confusion matrix:\n\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)"
  },
  {
    "objectID": "slides/session_1/index.html#general-1",
    "href": "slides/session_1/index.html#general-1",
    "title": "Introduction",
    "section": "General (1)",
    "text": "General (1)\n\nYour instructors:\n\nPablo Winadnt: pwinant@escp.eu (course and tutorials)\nRabab Khatib: rabab.khatib@edu.escp.eu (tutorials)\n\nHint: start your mail subject by [dbe]",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#general-2",
    "href": "slides/session_1/index.html#general-2",
    "title": "Introduction",
    "section": "General (2)",
    "text": "General (2)\n\nAll course material on www.mosphere.fr/dbe\nTutorials on Nuvolos\n\na datascience platform\nyou’ll be able to keep a full backup afterwards\n\nCollaboration between students is strongly encouraged",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#so-what-will-we-do",
    "href": "slides/session_1/index.html#so-what-will-we-do",
    "title": "Introduction",
    "section": "So what will we do ?",
    "text": "So what will we do ?\n\n\nProgramming\nEconometrics / Machine Learning\nTalk about economics",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#data-based-economics-1",
    "href": "slides/session_1/index.html#data-based-economics-1",
    "title": "Introduction",
    "section": "Data-based economics (1)",
    "text": "Data-based economics (1)\n\nMost economists use data all the time\n\nto illustrate facts\n\nor debunk myths\n\nto test theories",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#what-do-economists-do",
    "href": "slides/session_1/index.html#what-do-economists-do",
    "title": "Introduction",
    "section": "What do economists do ?",
    "text": "What do economists do ?\n\n\nimport data\nclean the data\n\ndeal with heterogenous sources, missing data, abnormal observerations\nsuper time consuming\nwe’ll make this part easy for you\n\ndescribe the data (statistics), visualize it\ninterpret it using a model\npresent results",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#econometricks",
    "href": "slides/session_1/index.html#econometricks",
    "title": "Introduction",
    "section": "Econometricks",
    "text": "Econometricks\n\nAn art invented by economists: \\[\\underbrace{y}_{\\text{dependent variable}} = a \\underbrace{x}_{\\text{explanatory variable}} + b\\]\n\n\n\nMain challenge:\n\ngiven dataset \\((x_i, y_i)\\)\nfind \\(a\\) while controlling for \\(b\\)\nunderstand robustness of results\npredict new values of \\(y\\) for new values of \\(x\\)",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#econometricks-example-1",
    "href": "slides/session_1/index.html#econometricks-example-1",
    "title": "Introduction",
    "section": "Econometricks: Example 1",
    "text": "Econometricks: Example 1\nCheck out the following website: How happy are you?\n\nWhat is \\(x\\) ? What is \\(y\\) ?",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#econometricks-example-2",
    "href": "slides/session_1/index.html#econometricks-example-2",
    "title": "Introduction",
    "section": "Econometricks: Example 2",
    "text": "Econometricks: Example 2\n\\[\\underbrace{y}_{\\text{dependent variable}} = a \\underbrace{x}_{\\text{explanatory variable}} + b\\]\n\n\nA famous study:\n\nyoung men who go to war receive in average lower wages when they return than men who didn’t go to war\n… is it because they skipped college?\n… or did they choose to go to war because they were less skilled for college?\n\nHow to know which is right?",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#econometricks-example-2-1",
    "href": "slides/session_1/index.html#econometricks-example-2-1",
    "title": "Introduction",
    "section": "Econometricks: Example 2",
    "text": "Econometricks: Example 2\n\\[\\underbrace{y}_{\\text{dependent variable}} = a \\underbrace{x}_{\\text{explanatory variable}} + b\\]\n\n\nHow to know which is right?\n\nfind a way to extract causality\ninstrumental variables\n\nThis was worth a Nobel Prize! (D. Card, J. Angrist, G.W. Imbens)",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#big-data-era-and-machine-learning-1",
    "href": "slides/session_1/index.html#big-data-era-and-machine-learning-1",
    "title": "Introduction",
    "section": "Big Data Era and Machine Learning (1)",
    "text": "Big Data Era and Machine Learning (1)\n\nData has become very abundant\nLarge amounts of data of all kinds\n\nstructured (tables, …)\nunstructured (text, images, …)\n\nMachine learning:\n\na set of powerful algorithms…\n… so powerful some call it artificial intelligence\n\nthey learn by processing data\n\n… to extract information and relations in large data sets",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#big-data-era-and-machine-learning-2",
    "href": "slides/session_1/index.html#big-data-era-and-machine-learning-2",
    "title": "Introduction",
    "section": "Big Data Era and Machine Learning (2)",
    "text": "Big Data Era and Machine Learning (2)\n\nMachine learning:\n\na set of powerful algorithms…\n… so powerful some call it artificial intelligence\n\nthey learn by processing data\n\n… to extract information and relations in large data sets\n…\n\nComparison with econometrics\n\nML has it own, partially redundant, jargon\nharder to study causality, standard deviation (precision)",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#machine-learning",
    "href": "slides/session_1/index.html#machine-learning",
    "title": "Introduction",
    "section": "Machine Learning",
    "text": "Machine Learning\n\\[\\underbrace{y}_{\\text{predicted variable}} = f( \\underbrace{x}_{\\text{feature}} , a)\\]\n\nChallenge:\n\ngiven dataset \\((x_i, y_i)\\)\nfind \\(a\\), that is find a nonlinear relationship between \\(a\\) and \\(b\\)\npredict new values of \\(y\\) given new values of \\(x\\)\n\nWhat is the difference with econometrics?",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#big-data-era-and-machine-learning-1-1",
    "href": "slides/session_1/index.html#big-data-era-and-machine-learning-1-1",
    "title": "Introduction",
    "section": "Big Data Era and Machine Learning (1)",
    "text": "Big Data Era and Machine Learning (1)\n\nSentiment analysis: predict population’s optimism by analyzing tweets.\nCheck sentiment viz",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#big-data-era-and-machine-learning-2-1",
    "href": "slides/session_1/index.html#big-data-era-and-machine-learning-2-1",
    "title": "Introduction",
    "section": "Big Data Era and Machine Learning (2)",
    "text": "Big Data Era and Machine Learning (2)\n\nBeautiful people (from NVIDIA presentation)",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#big-data-era-and-machine-learning-2-2",
    "href": "slides/session_1/index.html#big-data-era-and-machine-learning-2-2",
    "title": "Introduction",
    "section": "Big Data Era and Machine Learning (2)",
    "text": "Big Data Era and Machine Learning (2)\n\nBeautiful people (from NVIDIA presentation)Task: predict second and third columns from the first one.\nSolution: deep learning with artificial neural nets",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#why-program-in-python",
    "href": "slides/session_1/index.html#why-program-in-python",
    "title": "Introduction",
    "section": "Why program in Python?",
    "text": "Why program in Python?\n\nWhy learn and use Python?\nAnd not \n\nR\nSPSS\nStata\nMatlab\nC\nJavascript\nSQL\n…",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#because",
    "href": "slides/session_1/index.html#because",
    "title": "Introduction",
    "section": "Because",
    "text": "Because\nPython is: Easy",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#because-1",
    "href": "slides/session_1/index.html#because-1",
    "title": "Introduction",
    "section": "Because",
    "text": "Because\nPython is: Free",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#because-2",
    "href": "slides/session_1/index.html#because-2",
    "title": "Introduction",
    "section": "Because",
    "text": "Because\nPython is: Popular\n\n(TIOBE Index)",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#because-3",
    "href": "slides/session_1/index.html#because-3",
    "title": "Introduction",
    "section": "Because",
    "text": "Because\nPython has:\n\na lively community\nlots of online ressources\nlibraries for virtually anything",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#because-4",
    "href": "slides/session_1/index.html#because-4",
    "title": "Introduction",
    "section": "Because",
    "text": "Because\n   \n\nThe lingua Franca of Machine learning\n\nAll major machine learning softwares are written or interface with Python",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#why-learn-programming-1",
    "href": "slides/session_1/index.html#why-learn-programming-1",
    "title": "Introduction",
    "section": "Why learn programming ? (1)",
    "text": "Why learn programming ? (1)\n\n\nResearchers (econometricians or data scientists) spend 80% of their time writing code.\nPresentation (plots, interactive apps) is key and relies on\n\n… programming\n\nInteraction with code becomes unavoidable in business environment\nfixing the website\nquerying the database, …\n…",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#why-learn-programming-2",
    "href": "slides/session_1/index.html#why-learn-programming-2",
    "title": "Introduction",
    "section": "Why learn programming ? (2)",
    "text": "Why learn programming ? (2)\n\n\n\nWorth investing a bit of time to learn it\n\nyou can easily become an expert\n\nAnd can do anything\nHave an AI do your work with the right API\nPlus it’s fun\n\n\n\n\n\nimport antigravity",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#why-should-you-learn-programming-2",
    "href": "slides/session_1/index.html#why-should-you-learn-programming-2",
    "title": "Introduction",
    "section": "Why should you learn programming ? (2)",
    "text": "Why should you learn programming ? (2)\n\nimport antigravity",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#how-good-should-you-program",
    "href": "slides/session_1/index.html#how-good-should-you-program",
    "title": "Introduction",
    "section": "How good should you program ?",
    "text": "How good should you program ?\n\n\n\n\n\n\n\n\n\n\n\nWe will “assume” everybody as some prior experience with Python\nEven though some of you have possibly never touched it\nWe’ll do some catchup today\nAnd count on you to find the resources to learn what you need when you need it\nOf course you can always ask questions",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#additional-resources",
    "href": "slides/session_1/index.html#additional-resources",
    "title": "Introduction",
    "section": "Additional resources",
    "text": "Additional resources\nPlenty of online resources to learn python/econometrics/machine learning\n\nlearnpython sponsored by datacamp\nquantecon: designed for economists, good examples of projects\nPython Data Science Handbook: by Jake Van der Plas, very complete. Online free version.\nIntroduction to Econometrics with R, in R but very clear (beginner and advanced versions)",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#quantecon",
    "href": "slides/session_1/index.html#quantecon",
    "title": "Introduction",
    "section": "Quantecon",
    "text": "Quantecon\n\n\n\n\n\n\n\n\n\nQuantEcon\n\n\n\n\n\n\n\nTom Sargent\n\n\n\n\n\n\n\nJohn Stachurski\n\n\n\n\n\n\n \n\nQuantecon: free online lectures to learn python programming and (advanced) economics\n\nnow with a section on datascience\nit is excellent!\nwe will use some of it today",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_6/graphs/Untitled1.html",
    "href": "slides/session_6/graphs/Untitled1.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "from matplotlib import pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n\nimport statsmodels.api as sm\n\n\ndf.describe()\n\n\n\n\n\n\n\n\nincome\neducation\nprestige\n\n\n\n\ncount\n45.000000\n45.000000\n45.000000\n\n\nmean\n41.866667\n52.555556\n47.688889\n\n\nstd\n24.435072\n29.760831\n31.510332\n\n\nmin\n7.000000\n7.000000\n3.000000\n\n\n25%\n21.000000\n26.000000\n16.000000\n\n\n50%\n42.000000\n45.000000\n41.000000\n\n\n75%\n64.000000\n84.000000\n81.000000\n\n\nmax\n81.000000\n100.000000\n97.000000\n\n\n\n\n\n\n\n\ndf.cov()\n\n\n\n\n\n\n\n\nincome\neducation\nprestige\n\n\n\n\nincome\n597.072727\n526.871212\n645.071212\n\n\neducation\n526.871212\n885.707071\n798.904040\n\n\nprestige\n645.071212\n798.904040\n992.901010\n\n\n\n\n\n\n\n\nfrom matplotlib import pyplot as plt\n\n\nplt.figure(figsize=(8,6))\nplt.plot(df['education'],df['income'],'o')\nplt.grid()\nplt.xlabel(\"x (Education)\")\nplt.ylabel(\"y (Income)\")\nplt.savefig(\"data_description.png\")\n\n\n\n\n\n\n\n\n\nfor i in [1,2,3]:\n    xvec = np.linspace(10,100)\n\n    plt.figure(figsize=(12,8))\n    plt.plot(df['education'],df['income'],'o')\n\n    plt.plot(xvec, xvec * 0 + 50)\n    if i&gt;=2:\n        plt.plot(xvec, xvec )\n    if i&gt;=3:\n        plt.plot(xvec,  90- 0.6*xvec )\n\n    plt.grid()\n    plt.xlabel(\"x (Education)\")\n    plt.ylabel(\"y (Income)\")\n    plt.savefig(f\"which_line_{i}.png\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfrom ipywidgets import interact\n\n\nimport matplotlib.patches as patches\n\n\na = 0.1\nb = 1.0\nind = 23\n\n\napprox =  a + b*xvec\n\n# Create figure and axes\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\nplt.plot(df['education'],df['income'],'o')\nplt.plot(xvec, approx, color='red')\n\nx, y = df['education'][ind], df['income'][ind]\nplt.plot(x, y, 'o', color='red' )\np = a+b*x\nplt.grid(True)\nh = abs(p-y)\nplt.vlines(x, y+h, y, color='red')\n\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.savefig(f\"error_0.png\")\n\n\n\n\n\n\n\n\n\nplt.vlines?\n\n\nSignature:\nplt.vlines(\n    x,\n    ymin,\n    ymax,\n    colors=None,\n    linestyles='solid',\n    label='',\n    *,\n    data=None,\n    **kwargs,\n)\nDocstring:\nPlot vertical lines.\nPlot vertical lines at each *x* from *ymin* to *ymax*.\nParameters\n----------\nx : float or array-like\n    x-indexes where to plot the lines.\nymin, ymax : float or array-like\n    Respective beginning and end of each line. If scalars are\n    provided, all lines will have same length.\ncolors : list of colors, default: :rc:`lines.color`\nlinestyles : {'solid', 'dashed', 'dashdot', 'dotted'}, optional\nlabel : str, default: ''\nReturns\n-------\n`~matplotlib.collections.LineCollection`\nOther Parameters\n----------------\n**kwargs : `~matplotlib.collections.LineCollection` properties.\nSee Also\n--------\nhlines : horizontal lines\naxvline: vertical line across the axes\nNotes\n-----\n.. note::\n    In addition to the above described arguments, this function can take\n    a *data* keyword argument. If such a *data* argument is given,\n    the following arguments can also be string ``s``, which is\n    interpreted as ``data[s]`` (unless this raises an exception):\n    *x*, *ymin*, *ymax*, *colors*.\n    Objects passed as **data** must support item access (``data[s]``) and\n    membership test (``s in data``).\nFile:      ~/.local/opt/miniconda/lib/python3.8/site-packages/matplotlib/pyplot.py\nType:      function\n\n\n\n\n\na = 0.1\nb = 1.0\nind = 23\n\n\napprox =  a + b*xvec\n\n# Create figure and axes\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\nplt.plot(df['education'],df['income'],'o')\nplt.plot(xvec, approx, color='red')\n\nx, y = df['education'][ind], df['income'][ind]\nplt.plot(x, y, 'o', color='red' )\np = a+b*x\nplt.grid(True)\nh = abs(p-y)\nif p-y&gt;0:\n    # Create a Rectangle patch\n    rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n    ax.add_patch(rect)\n    \nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.savefig(f\"errors_{1}.png\")\n\n\n\n\n\n\n\n\n\ndef L(a,b):\n    Δ = a + b*df['education'] - df['income']\n    return (Δ**2).sum()\n\n\na = 0.1\nb = 0.8\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red')\n\nplt.grid(True)\nfor ind in range(df.shape[0]):\n    \n    x, y = df['education'][ind], df['income'][ind]\n    p = a+b*x\n\n    h = abs(p-y)\n    if p-y&gt;0:\n        # Create a Rectangle patch\n        rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\n    else:\n        rect = patches.Rectangle((x,y-h),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"errors_2.png\")\n\n\n\n\n\n\n\n\n\na = 90\nb = -0.6\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red')\n\nplt.grid(True)\nfor ind in range(df.shape[0]):\n    \n    x, y = df['education'][ind], df['income'][ind]\n    p = a+b*x\n\n    h = abs(p-y)\n    if p-y&gt;0:\n        # Create a Rectangle patch\n        rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\n    else:\n        rect = patches.Rectangle((x,y-h),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"errors_3.png\")\n\n\n\n\n\n\n\n\n\nimport scipy.optimize\n\n\nscipy.optimize.minimize(lambda x: L(x[0], x[1]),np.array([0.5, 0.5]))\n\n      fun: 12480.970174488397\n hess_inv: array([[ 7.14169839e-09, -3.91281920e-09],\n       [-3.91281920e-09,  2.46663613e-09]])\n      jac: array([0.00024414, 0.00012207])\n  message: 'Desired error not necessarily achieved due to precision loss.'\n     nfev: 57\n      nit: 7\n     njev: 19\n   status: 2\n  success: False\n        x: array([10.60350224,  0.59485938])\n\n\n\na = 10\nb = 0.59\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red')\n\nplt.grid(True)\nfor ind in range(df.shape[0]):\n    \n    x, y = df['education'][ind], df['income'][ind]\n    p = a+b*x\n\n    h = abs(p-y)\n    if p-y&gt;0:\n        # Create a Rectangle patch\n        rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\n    else:\n        rect = patches.Rectangle((x,y-h),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"errors_4.png\")\n\n\n\n\n\n\n\n\n\na = 10\nb = 0.59\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red', alpha=0.5)\n\nplt.plot(60, a + b*60, 'o', color='red',)\n\nprint(a+b*60)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"prediction.png\")\n\n45.4\n\n\n\n\n\n\n\n\n\n\na = 10\nb = 0.59\n\napprox =  (a + b*df['education'] - df['income'])\n\nplt.figure(figsize=(12,6))\n\nplt.subplot(121)\nplt.plot(approx)\nplt.grid(False)\nplt.title(\"Residuals\")\n\n\nplt.subplot(122)\ndistplot(approx)\nplt.title(\"Distribution of residuals\")\nplt.grid()\n\nplt.savefig(\"residuals.png\")\n\n/home/pablo/.local/opt/miniconda/lib/python3.8/site-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n  warnings.warn(msg, FutureWarning)\n\n\n\n\n\n\n\n\n\n\n(a + b*df['education'] - df['income']).std()\n\n16.842782676352154\n\n\n\n\n\n/home/pablo/.local/opt/miniconda/lib/python3.8/site-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n  warnings.warn(msg, FutureWarning)\n\n\n\n\n\n\n\n\n\n\nfrom scipy.stats import f\n\n\nf(0.3)\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n&lt;ipython-input-191-91b22dc02480&gt; in &lt;module&gt;\n----&gt; 1 f(0.3)\n\n~/.local/opt/miniconda/lib/python3.8/site-packages/scipy/stats/_distn_infrastructure.py in __call__(self, *args, **kwds)\n    778 \n    779     def __call__(self, *args, **kwds):\n--&gt; 780         return self.freeze(*args, **kwds)\n    781     __call__.__doc__ = freeze.__doc__\n    782 \n\n~/.local/opt/miniconda/lib/python3.8/site-packages/scipy/stats/_distn_infrastructure.py in freeze(self, *args, **kwds)\n    775 \n    776         \"\"\"\n--&gt; 777         return rv_frozen(self, *args, **kwds)\n    778 \n    779     def __call__(self, *args, **kwds):\n\n~/.local/opt/miniconda/lib/python3.8/site-packages/scipy/stats/_distn_infrastructure.py in __init__(self, dist, *args, **kwds)\n    422         self.dist = dist.__class__(**dist._updated_ctor_param())\n    423 \n--&gt; 424         shapes, _, _ = self.dist._parse_args(*args, **kwds)\n    425         self.a, self.b = self.dist._get_support(*shapes)\n    426 \n\nTypeError: _parse_args() missing 1 required positional argument: 'dfd'\n\n\n\n\nnp.rand\n\n\nK = 100\nxvec = np.linspace(0,1,K)\ne1 = np.random.randn(K)*0.1\nyvec = 0.1 + xvec*0.4 + e1\ne2 = np.random.randn(K)*0.05\nyvec2 = 0.1 + xvec*(xvec-1)/2 + e2\ne3 = np.random.randn(K)*xvec/2\nyvec3 = 0.1 + xvec + e3\n\nyvec4 = 0.1 + np.sin(xvec*6) + np.random.randn(K)*xvec/2\n\n\nfrom dolo.numeric.processes import VAR1\n\n\nsim = VAR1( ρ=0.8, Σ=0.001).simulate(N=1,T=100)\nyvec4 = 0.1 + xvec*0.4 + sim.ravel()\n\n\nplt.figure(figsize=(18,6))\nplt.subplot(241)\nplt.plot(xvec, yvec,'o')\nplt.plot(xvec, 0.1 + xvec*0.4 )\nplt.ylabel(\"Series\")\nplt.title(\"white noise\")\nplt.subplot(242)\nplt.plot(xvec, yvec2, 'o')\nplt.plot(xvec, yvec2*0)\nplt.title('nonlinear')\nplt.subplot(243)\nplt.plot(xvec, yvec3,'o')\nplt.plot(xvec, 0.1 + xvec)\nplt.title('heteroskedastic')\nplt.subplot(244)\nplt.plot(xvec, yvec4,'o')\nplt.plot(xvec, xvec*0.6)\n\nplt.title('correlated')\n\n\nplt.subplot(245)\nplt.plot(xvec, e1,'o')\nplt.ylabel(\"Residuals\")\nplt.subplot(246)\nplt.plot(xvec, yvec2-0.075, 'o')\n\nplt.subplot(247)\nplt.plot(xvec, e3,'o')\nplt.subplot(248)\nplt.plot(xvec, sim.ravel(),'o')\n\nplt.tight_layout()\n\nplt.savefig(\"residuals_circus.png\")"
  },
  {
    "objectID": "slides/session_6/index_handout.html#what-is-machine-learning-1",
    "href": "slides/session_6/index_handout.html#what-is-machine-learning-1",
    "title": "Introduction to Machine Learning",
    "section": "What is Machine learning?",
    "text": "What is Machine learning?\nDefinition Candidates:\nArthur Samuel: Field of study that gives computers the ability to learn without being explicitly programmed\nTom Mitchell: A computer program is said to learn from experience E with respect to some class of tasks T and performance measure P if its performance at tasks in T, as measured by P, improves with experience E.",
    "crumbs": [
      "lectures",
      "Introduction to Machine Learning"
    ]
  },
  {
    "objectID": "slides/session_6/index_handout.html#what-about-artificial-intelligence",
    "href": "slides/session_6/index_handout.html#what-about-artificial-intelligence",
    "title": "Introduction to Machine Learning",
    "section": "What about artificial intelligence ?",
    "text": "What about artificial intelligence ?\n\n\n\nAIs\n\nthink and learn\nmimmic human cognition",
    "crumbs": [
      "lectures",
      "Introduction to Machine Learning"
    ]
  },
  {
    "objectID": "slides/session_6/index_handout.html#econometrics-vs-machine-learning",
    "href": "slides/session_6/index_handout.html#econometrics-vs-machine-learning",
    "title": "Introduction to Machine Learning",
    "section": "Econometrics vs Machine Learning",
    "text": "Econometrics vs Machine Learning\n\nEconometrics is essentially a subfield of machine learning with a different jargon and a focus on:\n\nstudying properties and validity of results\n\ndata is scarce\ninference\n\nsingling out effects of specific explanatory variables\nestablishing causality\n\nMachine learning:\n\nstructure data\nmake predictions (interpolate data)",
    "crumbs": [
      "lectures",
      "Introduction to Machine Learning"
    ]
  },
  {
    "objectID": "slides/session_6/index_handout.html#data-types",
    "href": "slides/session_6/index_handout.html#data-types",
    "title": "Introduction to Machine Learning",
    "section": "Data types",
    "text": "Data types\n\nstructured:\n\ntabular\n\nlong\nwide\n\n\nunstructured:\n\nfiles\nnetworks\ntext, mails\nimages, sound",
    "crumbs": [
      "lectures",
      "Introduction to Machine Learning"
    ]
  },
  {
    "objectID": "slides/session_6/index_handout.html#tabular-data",
    "href": "slides/session_6/index_handout.html#tabular-data",
    "title": "Introduction to Machine Learning",
    "section": "Tabular Data",
    "text": "Tabular Data\n\n\n\ntabular data",
    "crumbs": [
      "lectures",
      "Introduction to Machine Learning"
    ]
  },
  {
    "objectID": "slides/session_6/index_handout.html#networks",
    "href": "slides/session_6/index_handout.html#networks",
    "title": "Introduction to Machine Learning",
    "section": "Networks",
    "text": "Networks\n\nBanking networks\nProduction network",
    "crumbs": [
      "lectures",
      "Introduction to Machine Learning"
    ]
  },
  {
    "objectID": "slides/session_6/index_handout.html#big-data-1",
    "href": "slides/session_6/index_handout.html#big-data-1",
    "title": "Introduction to Machine Learning",
    "section": "Big Data",
    "text": "Big Data\n\nBig data:\n\nwide data (K&gt;&gt;N)\nlong data (N&gt;&gt;K)\nheterogenous, unstructured data\n\nMight not even fit in memory\n\nout of core computations\nlearn from a subset of the data",
    "crumbs": [
      "lectures",
      "Introduction to Machine Learning"
    ]
  },
  {
    "objectID": "slides/session_6/index_handout.html#big-subfields-of-machine-learning",
    "href": "slides/session_6/index_handout.html#big-subfields-of-machine-learning",
    "title": "Introduction to Machine Learning",
    "section": "Big Subfields of Machine Learning",
    "text": "Big Subfields of Machine Learning\n\n\n\nTraditional classification\n\nsupervised (labelled data)\n\nregression: predict quantity\nclassification: predict index (categorical variable)\n\nunsupervised (no labels)\n\ndimension reduction\nclustering\n\nsemi-supervised / self-supervised\nreinforcement learning\n\nBazillions of different algorithms: https://scikit-learn.org/stable/user_guide.html\n\n\n\n\nsupervised: regression:\n\n\n\nAge\n\n\nActivity\n\n\nSalary\n\n\n\n\n23\n\n\nExplorer\n\n\n1200\n\n\n\n\n40\n\n\nMortician\n\n\n2000\n\n\n\n\n45\n\n\nMortician\n\n\n2500\n\n\n\n\n33\n\n\nMovie Star\n\n\n3000\n\n\n\n\n35\n\n\nExplorer\n\n\n???\n\n\n\n\n\nsupervised: regression:\n\nPredict: \\(y = f(x; \\theta)\\)\n\n\n\n\nsupervised: regression\n\n\n\n\n\n\n\nAge\n\n\nSalary\n\n\nActivity\n\n\n\n\n23\n\n\n1200\n\n\nExplorer\n\n\n\n\n40\n\n\n2000\n\n\nMortician\n\n\n\n\n45\n\n\n2500\n\n\nMortician\n\n\n\n\n33\n\n\n3000\n\n\nMovie Star\n\n\n\n\n35\n\n\n3000\n\n\n???\n\n\n\n\n\nsupervised: classification\n\nOutput is discrete\nA regression with discrete output\n\ntrain \\(\\sigma(f(x; \\theta))\\) where \\(\\sigma(x)=\\frac{1}{1-e^{-x}}\\)\n\n\n\n\n\nclassification\n\n\n\n\n\n\n\nAge\n\n\nSalary\n\n\nActivity\n\n\n\n\n23\n\n\n1200\n\n\nExplorer\n\n\n\n\n40\n\n\n2000\n\n\nMortician\n\n\n\n\n45\n\n\n2500\n\n\nMortician\n\n\n\n\n33\n\n\n3000\n\n\nMovie Star\n\n\n\n\n35\n\n\n3000\n\n\n???\n\n\n\n\n\nunsupervised\n\n\n\nAge\n\n\nSalary\n\n\nActivity\n\n\n\n\n23\n\n\n1200\n\n\nExplorer\n\n\n\n\n40\n\n\n2000\n\n\nMortician\n\n\n\n\n45\n\n\n2500\n\n\nMortician\n\n\n\n\n33\n\n\n3000\n\n\nMovie Star\n\n\n\n\n35\n\n\n3000\n\n\nExplorer\n\n\n\n\n\nunsupervised\n\norganize data without labels\n\ndimension reduction: describe data with less parameters\nclustering: sort data into “similar groups” (exemple)\n\n\n\n\nunsupervised: clustering\n\n\n\nkmeansclustering\n\n\n\n\nunsupervised: clustering\nWomen buying dresses during the year:",
    "crumbs": [
      "lectures",
      "Introduction to Machine Learning"
    ]
  },
  {
    "objectID": "slides/session_6/index_handout.html#difference-with-traditional-regression",
    "href": "slides/session_6/index_handout.html#difference-with-traditional-regression",
    "title": "Introduction to Machine Learning",
    "section": "Difference with traditional regression",
    "text": "Difference with traditional regression\n\\[\\underbrace{y}_{\\text{explained variable}} = a \\underbrace{x}_{\\text{explanatory variable}} + b\\]",
    "crumbs": [
      "lectures",
      "Introduction to Machine Learning"
    ]
  },
  {
    "objectID": "slides/session_6/index_handout.html#difference-with-traditional-regression-1",
    "href": "slides/session_6/index_handout.html#difference-with-traditional-regression-1",
    "title": "Introduction to Machine Learning",
    "section": "Difference with traditional regression",
    "text": "Difference with traditional regression\n\\[\\underbrace{y}_{\\text{labels}} = a \\underbrace{x}_{\\text{features}} + b\\]\n. . .\n\n\n\n\n\n\n\nEconometrics\nMachine learning\n\n\n\n\nRegressand / independent variable / explanatory variable\nFeatures\n\n\nRegressor / dependent variable / explained variable\nLabels\n\n\nRegression\nModel Training",
    "crumbs": [
      "lectures",
      "Introduction to Machine Learning"
    ]
  },
  {
    "objectID": "slides/session_6/index_handout.html#difference-with-traditional-regression-2",
    "href": "slides/session_6/index_handout.html#difference-with-traditional-regression-2",
    "title": "Introduction to Machine Learning",
    "section": "Difference with traditional regression",
    "text": "Difference with traditional regression\n\n\nBig data requires other means to process the data:\n\ndata is long: so many observations \\(x\\) doesn’t fit in the memory\n\nneed to use incremental training method to use only a subsample at a time\n\ndata is wide: so many features, the model is crudely overspecified\n\nneed to build dimension reduction into the objective\n\ndata is nonlinear:\n\nuse nonlinear model (and nonlinear training)\n\ndata is not a simple vector…\n\nsame as nonlinear",
    "crumbs": [
      "lectures",
      "Introduction to Machine Learning"
    ]
  },
  {
    "objectID": "slides/session_6/index_handout.html#long-data",
    "href": "slides/session_6/index_handout.html#long-data",
    "title": "Introduction to Machine Learning",
    "section": "Long data",
    "text": "Long data\nLong data is characterized by a high number of observations.\n\n\n\n\n\nModern society is gathering a lot of data.\n\nin doesn’t fit in the computer memory so we can’t run a basic regression\n\nIn some cases we would also like to update our model continuously:\n\nincremental regression\n\n\n\nWe need a way to fit a model on a subset of the data at a time.",
    "crumbs": [
      "lectures",
      "Introduction to Machine Learning"
    ]
  },
  {
    "objectID": "slides/session_6/index_handout.html#long-data-1",
    "href": "slides/session_6/index_handout.html#long-data-1",
    "title": "Introduction to Machine Learning",
    "section": "Long data",
    "text": "Long data\n\n\nTraditional regression:\n\nfull sample \\(X,Y=(x_i,y_i)_{i=1:N}\\)\nOLS: \\(\\min_{a,b} \\sum_{i=1}^N (a x_i + b - y_i)^2\\)\nclosed-form solution: \\(a = X^{\\prime}X Y\\) and \\(b= ...\\)\nhard to compute if \\(X\\) is very big\n\n\n\nIncremental learning:\n\ngiven initial \\(a_n\\), \\(b_n\\)\npick \\(N\\) random observations (the batch)\n\nregress them to get new estimate \\(a\\), \\(b\\)\nthis minimizes the square of errors\n\nupdate with (possibly varying) learning rate \\(\\beta_n\\):\n\n\\(a_{n+1} \\leftarrow a_n (1-\\beta_n) + \\beta_n a\\)\n\\(b_{n+1} \\leftarrow b_n (1-\\beta_n) + \\beta_n b\\)\n\nprocess is not biased (that is \\(a\\) converges to the true value) as long as one decreases \\(\\beta\\) sufficiently fast over time (ex: \\(\\beta_n=\\frac{1}{n}\\))",
    "crumbs": [
      "lectures",
      "Introduction to Machine Learning"
    ]
  },
  {
    "objectID": "slides/session_6/index_handout.html#formalisation-a-typical-machine-learning-task",
    "href": "slides/session_6/index_handout.html#formalisation-a-typical-machine-learning-task",
    "title": "Introduction to Machine Learning",
    "section": "Formalisation: a typical machine learning task",
    "text": "Formalisation: a typical machine learning task\n\nvector of unknowns: \\(\\theta=(a,b)\\)\ndataset \\(X,Y=(x_i,y_i)_{i=1:N}\\)\nfor a random draw \\(\\omega = (a_{\\sigma(i)}, b_{\\sigma(i)})_{i=[1,N]} \\subset (X,Y)\\)\n\n\\(\\omega\\) is just a random batch of size \\(N\\)\n\ndefine the empirical risk (or empirical cost) \\[\\xi(\\theta, \\omega) = \\sum_{(x,y) \\in \\omega} (y - (a x + b))^2\\]\nwe want to minimize theoretical risk: \\[\\Xi(\\theta) = \\mathbb{E} \\left[ \\xi(\\theta, \\omega)\\right]\\]",
    "crumbs": [
      "lectures",
      "Introduction to Machine Learning"
    ]
  },
  {
    "objectID": "slides/session_6/index_handout.html#training-gradient-descent",
    "href": "slides/session_6/index_handout.html#training-gradient-descent",
    "title": "Introduction to Machine Learning",
    "section": "Training: Gradient Descent",
    "text": "Training: Gradient Descent\n\n\n\nHow do we minimize a function \\(f(a,b)\\)?\nGradient descent:\n\n\\(a_k, b_k\\) given\ncompute the gradient (slope) \\(\\nabla_{a,b} f = \\begin{bmatrix} \\frac{\\partial f}{\\partial a} \\\\\\\\ \\frac{\\partial f}{\\partial b}\\end{bmatrix}\\)\nfollow the steepest slope: (Newton Algorithm)\n\n\\[ \\begin{bmatrix} a_{k+1} \\\\\\\\ b_{k+1} \\end{bmatrix} \\leftarrow  \\begin{bmatrix} a_k \\\\\\\\ b_k \\end{bmatrix} - \\nabla_{a,b} f\\]\n\nbut not too fast: use learning rate \\(\\lambda\\): \\[ \\begin{bmatrix} a_{k+1} \\\\\\\\ b_{k+1} \\end{bmatrix} \\leftarrow  (1-\\lambda) \\begin{bmatrix} a_k \\\\\\\\ b_k \\end{bmatrix} + \\lambda (- \\nabla_{a,b} f )\\]",
    "crumbs": [
      "lectures",
      "Introduction to Machine Learning"
    ]
  },
  {
    "objectID": "slides/session_6/index_handout.html#some-possible-issues",
    "href": "slides/session_6/index_handout.html#some-possible-issues",
    "title": "Introduction to Machine Learning",
    "section": "Some possible issues",
    "text": "Some possible issues\n \n\nIn practice, choosing the right learning rate \\(\\lambda\\) is crucial\n\\(\\lambda\\) is a metaparameter of the model training.",
    "crumbs": [
      "lectures",
      "Introduction to Machine Learning"
    ]
  },
  {
    "objectID": "slides/session_6/index_handout.html#wide-data",
    "href": "slides/session_6/index_handout.html#wide-data",
    "title": "Introduction to Machine Learning",
    "section": "Wide data",
    "text": "Wide data\n\nWide Data is characterized by a high number of features compared to the number of observations.\n\n. . .\nProblem:\n\nwith many independent variables \\(x_1, ... x_K\\), \\(K&gt;&gt;N\\) and one dependent variable \\(y\\) the regression \\[y = a_1 x_1 + a_2 x_2 + \\cdots + a_N x_N + b\\] is grossly overidentified.",
    "crumbs": [
      "lectures",
      "Introduction to Machine Learning"
    ]
  },
  {
    "objectID": "slides/session_6/index_handout.html#wide-data-regression",
    "href": "slides/session_6/index_handout.html#wide-data-regression",
    "title": "Introduction to Machine Learning",
    "section": "Wide data regression",
    "text": "Wide data regression\nMain Idea: penalize non-zero coefficients to encourage scarcity\n. . .\n\n\n\n\nRidge: \\[\\Xi(a,b) = \\min_{a,b} \\sum_{i=1}^N ( \\sum_j a_j x_j + b - y_i)^2 + \\mu \\sum_i |a_i|^2\\]\n\nshrinks parameters towards zero\nclosed form\n\nLasso: \\[\\Xi(a,b) = \\min_{a,b} \\sum_{i=1}^N (\\sum_j a_j x_j + b - y_i)^2 + \\mu \\sum_i |a_i|\\]\n\neliminates zero coefficients\n\nElastic: Ridge + Lasso\n\n\n\n\nRemarks:\n\n\\(\\mu\\) is called a regularization term.\nit is a hyperparameter\n\\(\\mu \\uparrow\\), bias increases, variance decreases",
    "crumbs": [
      "lectures",
      "Introduction to Machine Learning"
    ]
  },
  {
    "objectID": "slides/session_6/index_handout.html#training",
    "href": "slides/session_6/index_handout.html#training",
    "title": "Introduction to Machine Learning",
    "section": "Training",
    "text": "Training\nTo perform Lasso and ridge regression:\n\nAI approach:\n\nminimize objective \\(\\Xi(a,b)\\) directly.\napproach is known as (stochastic) Gradient Descent\n\nUse special algorithms",
    "crumbs": [
      "lectures",
      "Introduction to Machine Learning"
    ]
  },
  {
    "objectID": "slides/session_6/index_handout.html#example-imf-challenge",
    "href": "slides/session_6/index_handout.html#example-imf-challenge",
    "title": "Introduction to Machine Learning",
    "section": "Example: IMF challenge",
    "text": "Example: IMF challenge\n\nAn internal IMF challenge to predict crises in countries\nLots of different approaches\nLots of data:\n\nwhich one is relevant\nmachine must select relevant informations\n\nExample: Lasso Regressions and Forecasting Models in Applied Stress Testing by Jorge A. Chan-Lau\n\nin a given developing country\ntries to predict probability of default in various sectors",
    "crumbs": [
      "lectures",
      "Introduction to Machine Learning"
    ]
  },
  {
    "objectID": "slides/session_6/index_handout.html#nonlinear-regression-1",
    "href": "slides/session_6/index_handout.html#nonlinear-regression-1",
    "title": "Introduction to Machine Learning",
    "section": "Nonlinear Regression",
    "text": "Nonlinear Regression\n\nSo far, we have assumed,\n\n\\(y_i = a + b x_i\\)\n\\(y_i = a + b x_i + μ_1 (a^2 + b^2) + μ_2 (|a| + |b|)\\)\ndefined \\(\\Xi(a,b)\\) and tried to minimize it\n\nSame approach works for fully nonlinear models\n\n\\(y_i = a x_i + a^2 x_i^2 + c\\)\n\\(y_i = \\varphi(x; \\theta)\\) ()\n\nSpecial case: neural network:\n\nprimer tensor playground",
    "crumbs": [
      "lectures",
      "Introduction to Machine Learning"
    ]
  },
  {
    "objectID": "slides/session_6/index_handout.html#how-to-evaluate-the-machine-learning",
    "href": "slides/session_6/index_handout.html#how-to-evaluate-the-machine-learning",
    "title": "Introduction to Machine Learning",
    "section": "how to evaluate the machine learning",
    "text": "how to evaluate the machine learning\nIn machine learning we can’t perform statistical inference easily. How do we assess the validity of a model?\n. . .\nBasic idea (independent of how complex the algorithm is)\n\nseparate data in\n\ntraining set (in-sample)\ntest set (out of sample)\n\ntrain using only the training set\nevaluate performance on the test set\n\n. . .\nPerformance can be:\n\nfitness, number of classification errors (false positive, false negative)",
    "crumbs": [
      "lectures",
      "Introduction to Machine Learning"
    ]
  },
  {
    "objectID": "slides/session_6/index_handout.html#how-to-evaluate-the-machine-learning-1",
    "href": "slides/session_6/index_handout.html#how-to-evaluate-the-machine-learning-1",
    "title": "Introduction to Machine Learning",
    "section": "how to evaluate the machine learning",
    "text": "how to evaluate the machine learning\nIn case the training method depends itself on many parameters (the hyperparameters) we make three samples instead:\n\ntraining set (in-sample)\nvalidation set (to update hyperparameters)\ntest set (out of sample)\n\nGolden Rule: the test set should not be used to estimate the model, and should not affect the choice any training parameter (hyperparameter).",
    "crumbs": [
      "lectures",
      "Introduction to Machine Learning"
    ]
  },
  {
    "objectID": "slides/session_6/index_handout.html#section",
    "href": "slides/session_6/index_handout.html#section",
    "title": "Introduction to Machine Learning",
    "section": "",
    "text": "Traintest\n\n\n. . .\nThe test set reveals that orange model is overfitting.",
    "crumbs": [
      "lectures",
      "Introduction to Machine Learning"
    ]
  },
  {
    "objectID": "slides/session_6/index_handout.html#how-to-choose-the-validation-set",
    "href": "slides/session_6/index_handout.html#how-to-choose-the-validation-set",
    "title": "Introduction to Machine Learning",
    "section": "How to choose the validation set?",
    "text": "How to choose the validation set?\nHoldout validation approach:\n\nkeeps x% of the data for the training, (100-x)% for the test\n\n. . .\nHow to choose the sizes of the subsets?\n\nsmall dataset: 90-10\nbig data set: 70-30 (we can afford to waste more training data for the test)\n\n. . .\n\nProblem:\n\nare we sure the validation size is correct? Are the results determined by an (un-) lucky draw?\na problem for smaller datasets",
    "crumbs": [
      "lectures",
      "Introduction to Machine Learning"
    ]
  },
  {
    "objectID": "slides/session_6/index_handout.html#how-to-choose-the-validation-set-1",
    "href": "slides/session_6/index_handout.html#how-to-choose-the-validation-set-1",
    "title": "Introduction to Machine Learning",
    "section": "How to choose the validation set?",
    "text": "How to choose the validation set?\nA more robust solution: \\(k\\)-fold validation\n\n\n\nsplit dataset randomly in \\(K\\) subsets of equal size \\(S_1, ... S_K\\)\nuse subset \\(S_i\\) as test set, the rest as training set, compute the score\ncompare the scores obtained for all \\(i\\in[1,K]\\)\n\nthey should be similar (compute standard deviation)\n\naverage them",
    "crumbs": [
      "lectures",
      "Introduction to Machine Learning"
    ]
  },
  {
    "objectID": "slides/session_6/index_handout.html#another-library-to-perform-regressions",
    "href": "slides/session_6/index_handout.html#another-library-to-perform-regressions",
    "title": "Introduction to Machine Learning",
    "section": "Another library to perform regressions",
    "text": "Another library to perform regressions\n\nstatsmodels:\n\nexplanatory analysis\nstatistical tests\nformula interface for many estimation algorithms\n\nstateless approach (model.fit() returns another object)\n\n\nlinearmodels\n\nextends statsmodels (very similar interface)\n\n(panel models, IV, systems…)\n\n\nsklearn:\n\nprediction\nfaster for big datasets\ncommon interface for several machine learning tasks\n\nstateful approach (model is modified by .fit operation)\n\ndefacto standard for machine learning",
    "crumbs": [
      "lectures",
      "Introduction to Machine Learning"
    ]
  },
  {
    "objectID": "slides/session_6/index_handout.html#in-practice",
    "href": "slides/session_6/index_handout.html#in-practice",
    "title": "Introduction to Machine Learning",
    "section": "In practice",
    "text": "In practice\n\n\nBasic sklearn workflow:\n\n\nimport data\n\nfeatures: a matrix X (2d numpy array)\nlabels: a vector y (1d numpy array)\n\nsplit the data, between training and test datasets\n\nsplit needs to be random to avoid any bias\n\nnormalize the data\n\nmost ML algorithm are sensitive to scale\n\ncreate a model (independent from data)\ntrain the model on training dataset\nevaluate accuracy on test dataset (here \\(R^2\\))\nuse the model to make predictions\n\n\n\n\nfrom sklearn.datasets import load_diabetes\ndataset = load_diabetes()\nX = dataset['data']\ny = dataset['target']\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.1)\n\n#Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\nmodel.score(X_test, y_test)\nmodel.predict(X_new)\n\n\nThe workflow is always the same, no matter what the model is\n\ntry sklearn.linear_model.Lasso instead of LinearRegression",
    "crumbs": [
      "lectures",
      "Introduction to Machine Learning"
    ]
  },
  {
    "objectID": "slides/session_6/index_handout.html#k-fold-validation-with-sklearn",
    "href": "slides/session_6/index_handout.html#k-fold-validation-with-sklearn",
    "title": "Introduction to Machine Learning",
    "section": "\\(k\\)-fold validation with sklearn",
    "text": "\\(k\\)-fold validation with sklearn\nfrom sklearn.model_selection import KFold\nkf = KFold(n_splits=10)\n\nfor train_index, test_index in kf.split(X):\n   X_train, X_test = X[train_index], X[test_index]\n   y_train, y_test = y[train_index], y[test_index]\n\n   ## train a model in X_train, y_train\n   ## test it on X_test, y_test",
    "crumbs": [
      "lectures",
      "Introduction to Machine Learning"
    ]
  },
  {
    "objectID": "slides/session_6/index.html#regressions",
    "href": "slides/session_6/index.html#regressions",
    "title": "Introduction to Machine Learning",
    "section": "Regressions",
    "text": "Regressions"
  },
  {
    "objectID": "slides/session_6/index.html#what-is-machine-learning-1",
    "href": "slides/session_6/index.html#what-is-machine-learning-1",
    "title": "Introduction to Machine Learning",
    "section": "What is Machine learning?",
    "text": "What is Machine learning?\nDefinition Candidates:\nArthur Samuel: Field of study that gives computers the ability to learn without being explicitly programmed\nTom Mitchell: A computer program is said to learn from experience E with respect to some class of tasks T and performance measure P if its performance at tasks in T, as measured by P, improves with experience E."
  },
  {
    "objectID": "slides/session_6/index.html#what-about-artificial-intelligence",
    "href": "slides/session_6/index.html#what-about-artificial-intelligence",
    "title": "Introduction to Machine Learning",
    "section": "What about artificial intelligence ?",
    "text": "What about artificial intelligence ?\n\n\n\nAIs\n\nthink and learn\nmimmic human cognition"
  },
  {
    "objectID": "slides/session_6/index.html#econometrics-vs-machine-learning",
    "href": "slides/session_6/index.html#econometrics-vs-machine-learning",
    "title": "Introduction to Machine Learning",
    "section": "Econometrics vs Machine Learning",
    "text": "Econometrics vs Machine Learning\n\nEconometrics is essentially a subfield of machine learning with a different jargon and a focus on:\n\nstudying properties and validity of results\n\ndata is scarce\ninference\n\nsingling out effects of specific explanatory variables\nestablishing causality\n\nMachine learning:\n\nstructure data\nmake predictions (interpolate data)"
  },
  {
    "objectID": "slides/session_6/index.html#data-types",
    "href": "slides/session_6/index.html#data-types",
    "title": "Introduction to Machine Learning",
    "section": "Data types",
    "text": "Data types\n\nstructured:\n\ntabular\n\nlong\nwide\n\n\nunstructured:\n\nfiles\nnetworks\ntext, mails\nimages, sound"
  },
  {
    "objectID": "slides/session_6/index.html#tabular-data",
    "href": "slides/session_6/index.html#tabular-data",
    "title": "Introduction to Machine Learning",
    "section": "Tabular Data",
    "text": "Tabular Data\n\ntabular data"
  },
  {
    "objectID": "slides/session_6/index.html#networks",
    "href": "slides/session_6/index.html#networks",
    "title": "Introduction to Machine Learning",
    "section": "Networks",
    "text": "Networks\n\nBanking networks\nProduction network"
  },
  {
    "objectID": "slides/session_6/index.html#big-data-1",
    "href": "slides/session_6/index.html#big-data-1",
    "title": "Introduction to Machine Learning",
    "section": "Big Data",
    "text": "Big Data\n\nBig data:\n\nwide data (K&gt;&gt;N)\nlong data (N&gt;&gt;K)\nheterogenous, unstructured data\n\nMight not even fit in memory\n\nout of core computations\nlearn from a subset of the data"
  },
  {
    "objectID": "slides/session_6/index.html#big-subfields-of-machine-learning",
    "href": "slides/session_6/index.html#big-subfields-of-machine-learning",
    "title": "Introduction to Machine Learning",
    "section": "Big Subfields of Machine Learning",
    "text": "Big Subfields of Machine Learning\n\n\n\nTraditional classification\n\nsupervised (labelled data)\n\nregression: predict quantity\nclassification: predict index (categorical variable)\n\nunsupervised (no labels)\n\ndimension reduction\nclustering\n\nsemi-supervised / self-supervised\nreinforcement learning\n\nBazillions of different algorithms: https://scikit-learn.org/stable/user_guide.html\n\n\n\n\nsupervised: regression:\n\n\n\nAge\n\n\nActivity\n\n\nSalary\n\n\n\n\n23\n\n\nExplorer\n\n\n1200\n\n\n\n\n40\n\n\nMortician\n\n\n2000\n\n\n\n\n45\n\n\nMortician\n\n\n2500\n\n\n\n\n33\n\n\nMovie Star\n\n\n3000\n\n\n\n\n35\n\n\nExplorer\n\n\n???\n\n\n\n\n\nsupervised: regression:\n\nPredict: \\(y = f(x; \\theta)\\)\n\n\n\n\nsupervised: regression\n\n\n\n\n\n\n\nAge\n\n\nSalary\n\n\nActivity\n\n\n\n\n23\n\n\n1200\n\n\nExplorer\n\n\n\n\n40\n\n\n2000\n\n\nMortician\n\n\n\n\n45\n\n\n2500\n\n\nMortician\n\n\n\n\n33\n\n\n3000\n\n\nMovie Star\n\n\n\n\n35\n\n\n3000\n\n\n???\n\n\n\n\n\nsupervised: classification\n\nOutput is discrete\nA regression with discrete output\n\ntrain \\(\\sigma(f(x; \\theta))\\) where \\(\\sigma(x)=\\frac{1}{1-e^{-x}}\\)\n\n\n\n\n\nclassification\n\n\n\n\n\n\n\nAge\n\n\nSalary\n\n\nActivity\n\n\n\n\n23\n\n\n1200\n\n\nExplorer\n\n\n\n\n40\n\n\n2000\n\n\nMortician\n\n\n\n\n45\n\n\n2500\n\n\nMortician\n\n\n\n\n33\n\n\n3000\n\n\nMovie Star\n\n\n\n\n35\n\n\n3000\n\n\n???\n\n\n\n\n\nunsupervised\n\n\n\nAge\n\n\nSalary\n\n\nActivity\n\n\n\n\n23\n\n\n1200\n\n\nExplorer\n\n\n\n\n40\n\n\n2000\n\n\nMortician\n\n\n\n\n45\n\n\n2500\n\n\nMortician\n\n\n\n\n33\n\n\n3000\n\n\nMovie Star\n\n\n\n\n35\n\n\n3000\n\n\nExplorer\n\n\n\n\n\nunsupervised\n\norganize data without labels\n\ndimension reduction: describe data with less parameters\nclustering: sort data into “similar groups” (exemple)\n\n\n\n\nunsupervised: clustering\n\n\n\nkmeansclustering\n\n\n\n\nunsupervised: clustering\nWomen buying dresses during the year:"
  },
  {
    "objectID": "slides/session_6/index.html#difference-with-traditional-regression",
    "href": "slides/session_6/index.html#difference-with-traditional-regression",
    "title": "Introduction to Machine Learning",
    "section": "Difference with traditional regression",
    "text": "Difference with traditional regression\n\\[\\underbrace{y}_{\\text{explained variable}} = a \\underbrace{x}_{\\text{explanatory variable}} + b\\]"
  },
  {
    "objectID": "slides/session_6/index.html#difference-with-traditional-regression-1",
    "href": "slides/session_6/index.html#difference-with-traditional-regression-1",
    "title": "Introduction to Machine Learning",
    "section": "Difference with traditional regression",
    "text": "Difference with traditional regression\n\\[\\underbrace{y}_{\\text{labels}} = a \\underbrace{x}_{\\text{features}} + b\\]\n\n\n\n\n\n\n\n\nEconometrics\nMachine learning\n\n\n\n\nRegressand / independent variable / explanatory variable\nFeatures\n\n\nRegressor / dependent variable / explained variable\nLabels\n\n\nRegression\nModel Training"
  },
  {
    "objectID": "slides/session_6/index.html#difference-with-traditional-regression-2",
    "href": "slides/session_6/index.html#difference-with-traditional-regression-2",
    "title": "Introduction to Machine Learning",
    "section": "Difference with traditional regression",
    "text": "Difference with traditional regression\n\n\nBig data requires other means to process the data:\n\ndata is long: so many observations \\(x\\) doesn’t fit in the memory\n\nneed to use incremental training method to use only a subsample at a time\n\ndata is wide: so many features, the model is crudely overspecified\n\nneed to build dimension reduction into the objective\n\ndata is nonlinear:\n\nuse nonlinear model (and nonlinear training)\n\ndata is not a simple vector…\n\nsame as nonlinear"
  },
  {
    "objectID": "slides/session_6/index.html#long-data",
    "href": "slides/session_6/index.html#long-data",
    "title": "Introduction to Machine Learning",
    "section": "Long data",
    "text": "Long data\nLong data is characterized by a high number of observations.\n\n\n\n\n\nModern society is gathering a lot of data.\n\nin doesn’t fit in the computer memory so we can’t run a basic regression\n\nIn some cases we would also like to update our model continuously:\n\nincremental regression\n\n\n\nWe need a way to fit a model on a subset of the data at a time."
  },
  {
    "objectID": "slides/session_6/index.html#long-data-1",
    "href": "slides/session_6/index.html#long-data-1",
    "title": "Introduction to Machine Learning",
    "section": "Long data",
    "text": "Long data\n\n\nTraditional regression:\n\nfull sample \\(X,Y=(x_i,y_i)_{i=1:N}\\)\nOLS: \\(\\min_{a,b} \\sum_{i=1}^N (a x_i + b - y_i)^2\\)\nclosed-form solution: \\(a = X^{\\prime}X Y\\) and \\(b= ...\\)\nhard to compute if \\(X\\) is very big\n\n\n\nIncremental learning:\n\ngiven initial \\(a_n\\), \\(b_n\\)\npick \\(N\\) random observations (the batch)\n\nregress them to get new estimate \\(a\\), \\(b\\)\nthis minimizes the square of errors\n\nupdate with (possibly varying) learning rate \\(\\beta_n\\):\n\n\\(a_{n+1} \\leftarrow a_n (1-\\beta_n) + \\beta_n a\\)\n\\(b_{n+1} \\leftarrow b_n (1-\\beta_n) + \\beta_n b\\)\n\nprocess is not biased (that is \\(a\\) converges to the true value) as long as one decreases \\(\\beta\\) sufficiently fast over time (ex: \\(\\beta_n=\\frac{1}{n}\\))"
  },
  {
    "objectID": "slides/session_6/index.html#formalisation-a-typical-machine-learning-task",
    "href": "slides/session_6/index.html#formalisation-a-typical-machine-learning-task",
    "title": "Introduction to Machine Learning",
    "section": "Formalisation: a typical machine learning task",
    "text": "Formalisation: a typical machine learning task\n\nvector of unknowns: \\(\\theta=(a,b)\\)\ndataset \\(X,Y=(x_i,y_i)_{i=1:N}\\)\nfor a random draw \\(\\omega = (a_{\\sigma(i)}, b_{\\sigma(i)})_{i=[1,N]} \\subset (X,Y)\\)\n\n\\(\\omega\\) is just a random batch of size \\(N\\)\n\ndefine the empirical risk (or empirical cost) \\[\\xi(\\theta, \\omega) = \\sum_{(x,y) \\in \\omega} (y - (a x + b))^2\\]\nwe want to minimize theoretical risk: \\[\\Xi(\\theta) = \\mathbb{E} \\left[ \\xi(\\theta, \\omega)\\right]\\]"
  },
  {
    "objectID": "slides/session_6/index.html#training-gradient-descent",
    "href": "slides/session_6/index.html#training-gradient-descent",
    "title": "Introduction to Machine Learning",
    "section": "Training: Gradient Descent",
    "text": "Training: Gradient Descent\n\n\n\nHow do we minimize a function \\(f(a,b)\\)?\nGradient descent:\n\n\\(a_k, b_k\\) given\ncompute the gradient (slope) \\(\\nabla_{a,b} f = \\begin{bmatrix} \\frac{\\partial f}{\\partial a} \\\\\\\\ \\frac{\\partial f}{\\partial b}\\end{bmatrix}\\)\nfollow the steepest slope: (Newton Algorithm)\n\n\\[ \\begin{bmatrix} a_{k+1} \\\\\\\\ b_{k+1} \\end{bmatrix} \\leftarrow  \\begin{bmatrix} a_k \\\\\\\\ b_k \\end{bmatrix} - \\nabla_{a,b} f\\]\n\nbut not too fast: use learning rate \\(\\lambda\\): \\[ \\begin{bmatrix} a_{k+1} \\\\\\\\ b_{k+1} \\end{bmatrix} \\leftarrow  (1-\\lambda) \\begin{bmatrix} a_k \\\\\\\\ b_k \\end{bmatrix} + \\lambda (- \\nabla_{a,b} f )\\]"
  },
  {
    "objectID": "slides/session_6/index.html#some-possible-issues",
    "href": "slides/session_6/index.html#some-possible-issues",
    "title": "Introduction to Machine Learning",
    "section": "Some possible issues",
    "text": "Some possible issues\n \n\nIn practice, choosing the right learning rate \\(\\lambda\\) is crucial\n\\(\\lambda\\) is a metaparameter of the model training."
  },
  {
    "objectID": "slides/session_6/index.html#wide-data",
    "href": "slides/session_6/index.html#wide-data",
    "title": "Introduction to Machine Learning",
    "section": "Wide data",
    "text": "Wide data\n\nWide Data is characterized by a high number of features compared to the number of observations.\n\n\nProblem:\n\nwith many independent variables \\(x_1, ... x_K\\), \\(K&gt;&gt;N\\) and one dependent variable \\(y\\) the regression \\[y = a_1 x_1 + a_2 x_2 + \\cdots + a_N x_N + b\\] is grossly overidentified."
  },
  {
    "objectID": "slides/session_6/index.html#wide-data-regression",
    "href": "slides/session_6/index.html#wide-data-regression",
    "title": "Introduction to Machine Learning",
    "section": "Wide data regression",
    "text": "Wide data regression\nMain Idea: penalize non-zero coefficients to encourage scarcity\n\n\n\n\n\nRidge: \\[\\Xi(a,b) = \\min_{a,b} \\sum_{i=1}^N ( \\sum_j a_j x_j + b - y_i)^2 + \\mu \\sum_i |a_i|^2\\]\n\nshrinks parameters towards zero\nclosed form\n\nLasso: \\[\\Xi(a,b) = \\min_{a,b} \\sum_{i=1}^N (\\sum_j a_j x_j + b - y_i)^2 + \\mu \\sum_i |a_i|\\]\n\neliminates zero coefficients\n\nElastic: Ridge + Lasso\n\n\n\n\nRemarks:\n\n\\(\\mu\\) is called a regularization term.\nit is a hyperparameter\n\\(\\mu \\uparrow\\), bias increases, variance decreases"
  },
  {
    "objectID": "slides/session_6/index.html#training",
    "href": "slides/session_6/index.html#training",
    "title": "Introduction to Machine Learning",
    "section": "Training",
    "text": "Training\nTo perform Lasso and ridge regression:\n\nAI approach:\n\nminimize objective \\(\\Xi(a,b)\\) directly.\napproach is known as (stochastic) Gradient Descent\n\nUse special algorithms"
  },
  {
    "objectID": "slides/session_6/index.html#example-imf-challenge",
    "href": "slides/session_6/index.html#example-imf-challenge",
    "title": "Introduction to Machine Learning",
    "section": "Example: IMF challenge",
    "text": "Example: IMF challenge\n\nAn internal IMF challenge to predict crises in countries\nLots of different approaches\nLots of data:\n\nwhich one is relevant\nmachine must select relevant informations\n\nExample: Lasso Regressions and Forecasting Models in Applied Stress Testing by Jorge A. Chan-Lau\n\nin a given developing country\ntries to predict probability of default in various sectors"
  },
  {
    "objectID": "slides/session_6/index.html#nonlinear-regression-1",
    "href": "slides/session_6/index.html#nonlinear-regression-1",
    "title": "Introduction to Machine Learning",
    "section": "Nonlinear Regression",
    "text": "Nonlinear Regression\n\nSo far, we have assumed,\n\n\\(y_i = a + b x_i\\)\n\\(y_i = a + b x_i + μ_1 (a^2 + b^2) + μ_2 (|a| + |b|)\\)\ndefined \\(\\Xi(a,b)\\) and tried to minimize it\n\nSame approach works for fully nonlinear models\n\n\\(y_i = a x_i + a^2 x_i^2 + c\\)\n\\(y_i = \\varphi(x; \\theta)\\) ()\n\nSpecial case: neural network:\n\nprimer tensor playground"
  },
  {
    "objectID": "slides/session_6/index.html#how-to-evaluate-the-machine-learning",
    "href": "slides/session_6/index.html#how-to-evaluate-the-machine-learning",
    "title": "Introduction to Machine Learning",
    "section": "how to evaluate the machine learning",
    "text": "how to evaluate the machine learning\nIn machine learning we can’t perform statistical inference easily. How do we assess the validity of a model?\n\nBasic idea (independent of how complex the algorithm is)\n\nseparate data in\n\ntraining set (in-sample)\ntest set (out of sample)\n\ntrain using only the training set\nevaluate performance on the test set\n\n\n\nPerformance can be:\n\nfitness, number of classification errors (false positive, false negative)"
  },
  {
    "objectID": "slides/session_6/index.html#how-to-evaluate-the-machine-learning-1",
    "href": "slides/session_6/index.html#how-to-evaluate-the-machine-learning-1",
    "title": "Introduction to Machine Learning",
    "section": "how to evaluate the machine learning",
    "text": "how to evaluate the machine learning\nIn case the training method depends itself on many parameters (the hyperparameters) we make three samples instead:\n\ntraining set (in-sample)\nvalidation set (to update hyperparameters)\ntest set (out of sample)\n\nGolden Rule: the test set should not be used to estimate the model, and should not affect the choice any training parameter (hyperparameter)."
  },
  {
    "objectID": "slides/session_6/index.html#section",
    "href": "slides/session_6/index.html#section",
    "title": "Introduction to Machine Learning",
    "section": "",
    "text": "Traintest\nThe test set reveals that orange model is overfitting."
  },
  {
    "objectID": "slides/session_6/index.html#how-to-choose-the-validation-set",
    "href": "slides/session_6/index.html#how-to-choose-the-validation-set",
    "title": "Introduction to Machine Learning",
    "section": "How to choose the validation set?",
    "text": "How to choose the validation set?\nHoldout validation approach:\n\nkeeps x% of the data for the training, (100-x)% for the test\n\n\nHow to choose the sizes of the subsets?\n\nsmall dataset: 90-10\nbig data set: 70-30 (we can afford to waste more training data for the test)\n\n\n\n\nProblem:\n\nare we sure the validation size is correct? Are the results determined by an (un-) lucky draw?\na problem for smaller datasets"
  },
  {
    "objectID": "slides/session_6/index.html#how-to-choose-the-validation-set-1",
    "href": "slides/session_6/index.html#how-to-choose-the-validation-set-1",
    "title": "Introduction to Machine Learning",
    "section": "How to choose the validation set?",
    "text": "How to choose the validation set?\nA more robust solution: \\(k\\)-fold validation\n\n\n\nsplit dataset randomly in \\(K\\) subsets of equal size \\(S_1, ... S_K\\)\nuse subset \\(S_i\\) as test set, the rest as training set, compute the score\ncompare the scores obtained for all \\(i\\in[1,K]\\)\n\nthey should be similar (compute standard deviation)\n\naverage them"
  },
  {
    "objectID": "slides/session_6/index.html#another-library-to-perform-regressions",
    "href": "slides/session_6/index.html#another-library-to-perform-regressions",
    "title": "Introduction to Machine Learning",
    "section": "Another library to perform regressions",
    "text": "Another library to perform regressions\n\nstatsmodels:\n\nexplanatory analysis\nstatistical tests\nformula interface for many estimation algorithms\n\nstateless approach (model.fit() returns another object)\n\n\nlinearmodels\n\nextends statsmodels (very similar interface)\n\n(panel models, IV, systems…)\n\n\nsklearn:\n\nprediction\nfaster for big datasets\ncommon interface for several machine learning tasks\n\nstateful approach (model is modified by .fit operation)\n\ndefacto standard for machine learning"
  },
  {
    "objectID": "slides/session_6/index.html#in-practice",
    "href": "slides/session_6/index.html#in-practice",
    "title": "Introduction to Machine Learning",
    "section": "In practice",
    "text": "In practice\n\n\nBasic sklearn workflow:\n\n\nimport data\n\nfeatures: a matrix X (2d numpy array)\nlabels: a vector y (1d numpy array)\n\nsplit the data, between training and test datasets\n\nsplit needs to be random to avoid any bias\n\nnormalize the data\n\nmost ML algorithm are sensitive to scale\n\ncreate a model (independent from data)\ntrain the model on training dataset\nevaluate accuracy on test dataset (here \\(R^2\\))\nuse the model to make predictions\n\n\n\n\nfrom sklearn.datasets import load_diabetes\ndataset = load_diabetes()\nX = dataset['data']\ny = dataset['target']\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.1)\n\n#Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\nmodel.score(X_test, y_test)\nmodel.predict(X_new)\n\n\nThe workflow is always the same, no matter what the model is\n\ntry sklearn.linear_model.Lasso instead of LinearRegression"
  },
  {
    "objectID": "slides/session_6/index.html#k-fold-validation-with-sklearn",
    "href": "slides/session_6/index.html#k-fold-validation-with-sklearn",
    "title": "Introduction to Machine Learning",
    "section": "\\(k\\)-fold validation with sklearn",
    "text": "\\(k\\)-fold validation with sklearn\nfrom sklearn.model_selection import KFold\nkf = KFold(n_splits=10)\n\nfor train_index, test_index in kf.split(X):\n   X_train, X_test = X[train_index], X[test_index]\n   y_train, y_test = y[train_index], y[test_index]\n\n   ## train a model in X_train, y_train\n   ## test it on X_test, y_test"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "Date\n\n\nTitle\n\n\n\n\n\n\nJan 15, 2025\n\n\nIntroduction\n\n\n\n\nJan 21, 2025\n\n\nDataframes\n\n\n\n\nJan 29, 2025\n\n\nLinear Regression\n\n\n\n\nFeb 5, 2025\n\n\nMultiple Regression\n\n\n\n\nFeb 12, 2025\n\n\nIntroduction to Instrumental Variables\n\n\n\n\nFeb 19, 2025\n\n\nIntroduction to Machine Learning\n\n\n\n\nMar 4, 2025\n\n\nIntroduction to Machine Learning (2)\n\n\n\n\nMar 25, 2025\n\n\nText Analysis\n\n\n\n\nApr 1, 2025\n\n\nLarge Language Models for Finance\n\n\n\n\nApr 8, 2025\n\n\nFinal Exam 🤞\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#schedule",
    "href": "index.html#schedule",
    "title": "Data-Based Economics",
    "section": "",
    "text": "Date\n\n\nTitle\n\n\n\n\n\n\nJan 15, 2025\n\n\nIntroduction\n\n\n\n\nJan 21, 2025\n\n\nDataframes\n\n\n\n\nJan 29, 2025\n\n\nLinear Regression\n\n\n\n\nFeb 5, 2025\n\n\nMultiple Regression\n\n\n\n\nFeb 12, 2025\n\n\nIntroduction to Instrumental Variables\n\n\n\n\nFeb 19, 2025\n\n\nIntroduction to Machine Learning\n\n\n\n\nMar 4, 2025\n\n\nIntroduction to Machine Learning (2)\n\n\n\n\nMar 25, 2025\n\n\nText Analysis\n\n\n\n\nApr 1, 2025\n\n\nLarge Language Models for Finance\n\n\n\n\nApr 8, 2025\n\n\nFinal Exam 🤞\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#evaluation",
    "href": "index.html#evaluation",
    "title": "Data-Based Economics",
    "section": "Evaluation",
    "text": "Evaluation\n\nCoursework (50%)\n\na little replication exercise to do in small groups (2/3 students max)\n\nFinal exam (in-class and on computers) (50%)\n\nan MCQ part about the theory\nsimple coding exercises"
  },
  {
    "objectID": "tutorials/session_5/happiness_regression_correction.html",
    "href": "tutorials/session_5/happiness_regression_correction.html",
    "title": "Regressions 2",
    "section": "",
    "text": "We will analyse those data to find relationships between the happiness score and economy, family, health, freedom, trust, perception of corruption, generosity…\nThe dataset contains the following variables:\n\nCountry : Country name\nOverall rank : Country ranking based on happiness score\nScore : Individual personal happiness rating from 0 to 10.\nGDP per capita : GDP per capita of each country in terms of purchasing power parity (PPP) (in USD)\nSocial support : Individual rating that determines whether, when you have problems, your family or friends would help you. Binary responses (0 or 1).\nHealthy life expectancy : Healthy life expectancy at birth is based on data from the World Health Organization (WHO)\nFreedom to make life choices : Individual rating that determines whether you are atisfied or dissatisfied with your freedom to choose hat you do with your life. Binary responses (0 or 1).\nGenerosity : Generosity is the residual from the regression of the national mean of responses to the question “Have you donated money to a charity in the last month?” on GDP per capita.\nPerceptions of corruption : Average of binary responses to two GWP questions: corruption in government and corruption in business."
  },
  {
    "objectID": "tutorials/session_5/happiness_regression_correction.html#ii-linear-regression",
    "href": "tutorials/session_5/happiness_regression_correction.html#ii-linear-regression",
    "title": "Regressions 2",
    "section": "II) Linear regression",
    "text": "II) Linear regression"
  },
  {
    "objectID": "tutorials/session_5/happiness_regression_correction.html#a-simple-linear-regression",
    "href": "tutorials/session_5/happiness_regression_correction.html#a-simple-linear-regression",
    "title": "Regressions 2",
    "section": "A) Simple linear regression",
    "text": "A) Simple linear regression\nPerform various linear regressions to predict the Happiness score using one of the variables available in the dataset.\n\ndf.columns\n\nIndex(['Overall_rank', 'Country_or_region', 'Score', 'GDP_per_capita',\n       'Social_support', 'Healthy_life_expectancy',\n       'Freedom_to_make_life_choices', 'Generosity',\n       'Perceptions_of_corruption'],\n      dtype='object')\n\n\n\nmodel_1 = smf.ols(\"Score ~ GDP_per_capita\", df)\nres_1 = model_1.fit()\nres_1.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nScore\nR-squared:\n0.630\n\n\nModel:\nOLS\nAdj. R-squared:\n0.628\n\n\nMethod:\nLeast Squares\nF-statistic:\n262.5\n\n\nDate:\nWed, 15 Feb 2023\nProb (F-statistic):\n4.32e-35\n\n\nTime:\n11:00:56\nLog-Likelihood:\n-159.97\n\n\nNo. Observations:\n156\nAIC:\n323.9\n\n\nDf Residuals:\n154\nBIC:\n330.0\n\n\nDf Model:\n1\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n3.3993\n0.135\n25.120\n0.000\n3.132\n3.667\n\n\nGDP_per_capita\n2.2181\n0.137\n16.202\n0.000\n1.948\n2.489\n\n\n\n\n\n\n\n\nOmnibus:\n1.139\nDurbin-Watson:\n1.378\n\n\nProb(Omnibus):\n0.566\nJarque-Bera (JB):\n1.244\n\n\nSkew:\n-0.177\nProb(JB):\n0.537\n\n\nKurtosis:\n2.742\nCond. No.\n4.77\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\nmodel_1 = smf.ols(\"Score ~ GDP_per_capita + Healthy_life_expectancy + Freedom_to_make_life_choices\", df)\nres_1 = model_1.fit()\n\n\nres_1.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nScore\nR-squared:\n0.742\n\n\nModel:\nOLS\nAdj. R-squared:\n0.737\n\n\nMethod:\nLeast Squares\nF-statistic:\n146.1\n\n\nDate:\nWed, 15 Feb 2023\nProb (F-statistic):\n1.42e-44\n\n\nTime:\n11:00:13\nLog-Likelihood:\n-131.75\n\n\nNo. Observations:\n156\nAIC:\n271.5\n\n\nDf Residuals:\n152\nBIC:\n283.7\n\n\nDf Model:\n3\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n2.4201\n0.167\n14.519\n0.000\n2.091\n2.749\n\n\nGDP_per_capita\n1.1781\n0.210\n5.599\n0.000\n0.762\n1.594\n\n\nHealthy_life_expectancy\n1.4578\n0.348\n4.189\n0.000\n0.770\n2.145\n\n\nFreedom_to_make_life_choices\n2.1993\n0.349\n6.298\n0.000\n1.509\n2.889\n\n\n\n\n\n\n\n\nOmnibus:\n11.927\nDurbin-Watson:\n1.497\n\n\nProb(Omnibus):\n0.003\nJarque-Bera (JB):\n12.394\n\n\nSkew:\n-0.665\nProb(JB):\n0.00204\n\n\nKurtosis:\n3.369\nCond. No.\n14.2\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\nsns.regplot(x='GDP_per_capita', y='Score', data=df)\n\n\n\n\n\n\n\n\n\nmodel_2 = smf.ols(\"Score ~ Healthy_life_expectancy\", df)\nres_2 = model_2.fit()\nres_2.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nScore\nR-squared:\n0.608\n\n\nModel:\nOLS\nAdj. R-squared:\n0.606\n\n\nMethod:\nLeast Squares\nF-statistic:\n239.1\n\n\nDate:\nTue, 14 Feb 2023\nProb (F-statistic):\n3.79e-33\n\n\nTime:\n20:44:17\nLog-Likelihood:\n-164.48\n\n\nNo. Observations:\n156\nAIC:\n333.0\n\n\nDf Residuals:\n154\nBIC:\n339.1\n\n\nDf Model:\n1\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n2.8068\n0.177\n15.837\n0.000\n2.457\n3.157\n\n\nHealthy_life_expectancy\n3.5854\n0.232\n15.462\n0.000\n3.127\n4.043\n\n\n\n\n\n\n\n\nOmnibus:\n6.324\nDurbin-Watson:\n1.140\n\n\nProb(Omnibus):\n0.042\nJarque-Bera (JB):\n3.543\n\n\nSkew:\n-0.148\nProb(JB):\n0.170\n\n\nKurtosis:\n2.324\nCond. No.\n6.41\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\nsns.regplot(x='Healthy_life_expectancy', y='Score', data=df)"
  },
  {
    "objectID": "tutorials/session_5/happiness_regression_correction.html#b-multiple-linear-regression",
    "href": "tutorials/session_5/happiness_regression_correction.html#b-multiple-linear-regression",
    "title": "Regressions 2",
    "section": "B) Multiple linear regression",
    "text": "B) Multiple linear regression\n\nMultiple linear regression\n\nmodel_3 = smf.ols(\"Score ~ Healthy_life_expectancy + Freedom_to_make_life_choices + GDP_per_capita +Social_support\", df)\nres_3= model_3.fit()\nres_3.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nScore\nR-squared:\n0.771\n\n\nModel:\nOLS\nAdj. R-squared:\n0.765\n\n\nMethod:\nLeast Squares\nF-statistic:\n127.0\n\n\nDate:\nTue, 14 Feb 2023\nProb (F-statistic):\n2.82e-47\n\n\nTime:\n20:44:20\nLog-Likelihood:\n-122.62\n\n\nNo. Observations:\n156\nAIC:\n255.2\n\n\nDf Residuals:\n151\nBIC:\n270.5\n\n\nDf Model:\n4\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n1.8921\n0.199\n9.491\n0.000\n1.498\n2.286\n\n\nHealthy_life_expectancy\n1.1414\n0.337\n3.384\n0.001\n0.475\n1.808\n\n\nFreedom_to_make_life_choices\n1.8458\n0.340\n5.423\n0.000\n1.173\n2.518\n\n\nGDP_per_capita\n0.8105\n0.216\n3.745\n0.000\n0.383\n1.238\n\n\nSocial_support\n1.0166\n0.235\n4.331\n0.000\n0.553\n1.480\n\n\n\n\n\n\n\n\nOmnibus:\n5.077\nDurbin-Watson:\n1.641\n\n\nProb(Omnibus):\n0.079\nJarque-Bera (JB):\n4.685\n\n\nSkew:\n-0.413\nProb(JB):\n0.0961\n\n\nKurtosis:\n3.198\nCond. No.\n17.8\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\n### By comparing adjusted $R^2$, find the regression which explains best happiness.\n\n\n\nPolynomial regression\n\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.linear_model import LinearRegression\n\n\nx=df.Score.values.reshape(-1,1)\ny=df[\"Healthy_life_expectancy\"].values.reshape(-1,1)\nplt.scatter(df[\"Score\"],df[\"Healthy_life_expectancy\"],color=\"green\")\n\npolynomial_regression=PolynomialFeatures(degree=4)\nx_polynomial=polynomial_regression.fit_transform(x)\n\n#%% fit\nlinear_regression2=LinearRegression()\nlinear_regression2.fit(x_polynomial,y)\n\n#%%\ny_head2=linear_regression2.predict(x_polynomial)\n\nplt.plot(x,y_head2,color=\"red\",label=\"poly\")\nplt.legend()\nplt.show()"
  },
  {
    "objectID": "tutorials/session_5/instrumental_variables.html",
    "href": "tutorials/session_5/instrumental_variables.html",
    "title": "Instrumental variables",
    "section": "",
    "text": "Create four random series of length \\(N=1000\\)\n\n\\(x\\): education\n\\(y\\): salary\n\\(z\\): ambition\n\\(q\\): early smoking\n\nsuch that:\n\n\\(x\\) and \\(z\\) cause \\(y\\)\n\\(z\\) causes \\(x\\)\n\\(q\\) is correlated with \\(x\\), not with \\(z\\)\n\nA problem arises when the confounding factor \\(z\\) is not observed. In that case, we can estimate the direct effect of \\(x\\) on \\(y\\) by using \\(q\\) as an instrument.\nRun the follwing code to create a mock dataset.\n\nimport numpy as np\nimport pandas as pd\n\n\nN = 100000\nϵ_z = np.random.randn(N)*0.1\nϵ_x = np.random.randn(N)*0.1\nϵ_q = np.random.randn(N)*0.01\nϵ_y = np.random.randn(N)*0.01\n\n\nz = 0.1 + ϵ_z\nq = 0.5 + 0.1234*ϵ_x + ϵ_q\n# here we must change the definition so that q affects x:\n# x = 0.1 + z + ϵ_x\nx = 0.1 + z + q + ϵ_x\ny  = 1.0 + 0.9*x + 0.4*z + ϵ_y\n\n\ndf = pd.DataFrame({\n    \"x\": x,\n    \"y\": y,\n    \"z\": z,\n    \"q\": q\n})\n\nDescribe the dataframe. Compute the correlations between the variables. Are they compatible with the hypotheses for IV?\n\ndf.head()\n\n\n\n\n\n\n\n\nx\ny\nz\nq\n\n\n\n\n0\n0.458958\n1.428012\n-0.006158\n0.489963\n\n\n1\n0.536544\n1.535235\n0.119739\n0.484211\n\n\n2\n0.550795\n1.561178\n0.149119\n0.470899\n\n\n3\n0.774870\n1.773310\n0.184079\n0.501838\n\n\n4\n0.761371\n1.769818\n0.197662\n0.501622\n\n\n\n\n\n\n\n\ndf.describe()\n\n\n\n\n\n\n\n\nx\ny\nz\nq\n\n\n\n\ncount\n100000.000000\n100000.000000\n100000.000000\n100000.000000\n\n\nmean\n0.699704\n1.669716\n0.099930\n0.499973\n\n\nstd\n0.150261\n0.164733\n0.099805\n0.015818\n\n\nmin\n-0.037950\n0.874772\n-0.301234\n0.429432\n\n\n25%\n0.598491\n1.558824\n0.032560\n0.489285\n\n\n50%\n0.699121\n1.669068\n0.099462\n0.499978\n\n\n75%\n0.800179\n1.780555\n0.167347\n0.510695\n\n\nmax\n1.329398\n2.349659\n0.522942\n0.567387\n\n\n\n\n\n\n\n\ndf.corr()\n\n\n\n\n\n\n\n\nx\ny\nz\nq\n\n\n\n\nx\n1.000000\n0.981526\n0.662762\n0.618551\n\n\ny\n0.981526\n1.000000\n0.786408\n0.507140\n\n\nz\n0.662762\n0.786408\n1.000000\n-0.002547\n\n\nq\n0.618551\n0.507140\n-0.002547\n1.000000\n\n\n\n\n\n\n\n\n\n\nUse linearmodels to run a regression estimating the effect of \\(x\\) on \\(y\\) (note the slight API change w.r.t. statsmodels). Comment.\n\nfrom linearmodels import OLS, IV2SLS\n\n\nmodel = OLS.from_formula(\"y ~ x\", df)\nres = model.fit()\nres      # in statsmodels would be res.summary()\n\n\nOLS Estimation Summary\n\n\nDep. Variable:\ny\nR-squared:\n0.9634\n\n\nEstimator:\nOLS\nAdj. R-squared:\n0.9634\n\n\nNo. Observations:\n100000\nF-statistic:\n2.637e+06\n\n\nDate:\nWed, Feb 21 2024\nP-value (F-stat)\n0.0000\n\n\nTime:\n15:08:54\nDistribution:\nchi2(1)\n\n\nCov. Estimator:\nrobust\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter Estimates\n\n\n\nParameter\nStd. Err.\nT-stat\nP-value\nLower CI\nUpper CI\n\n\nIntercept\n0.9168\n0.0005\n1932.5\n0.0000\n0.9159\n0.9177\n\n\nx\n1.0761\n0.0007\n1624.0\n0.0000\n1.0748\n1.0774\n\n\n\nid: 0x7f79702b7c50\n\n\nThe regression is globally very significant (p-value &lt; 1.e-5). The predictive power is very high (R^2=0.96).\nConstants and coefficients are both statistically very significant (p-values&lt;1e-5 for both) and the confidence intervals are very small.\nAssume briefly that z is known and control the regression by z. What happens?\n\nmodel = OLS.from_formula(\"y ~ x + z\", df)\nres = model.fit()\nres  \n\n\nOLS Estimation Summary\n\n\nDep. Variable:\ny\nR-squared:\n0.9963\n\n\nEstimator:\nOLS\nAdj. R-squared:\n0.9963\n\n\nNo. Observations:\n100000\nF-statistic:\n2.713e+07\n\n\nDate:\nWed, Feb 21 2024\nP-value (F-stat)\n0.0000\n\n\nTime:\n15:08:59\nDistribution:\nchi2(2)\n\n\nCov. Estimator:\nrobust\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter Estimates\n\n\n\nParameter\nStd. Err.\nT-stat\nP-value\nLower CI\nUpper CI\n\n\nIntercept\n1.0000\n0.0002\n5752.0\n0.0000\n0.9997\n1.0004\n\n\nx\n0.9000\n0.0003\n3213.3\n0.0000\n0.8994\n0.9005\n\n\nz\n0.4000\n0.0004\n944.90\n0.0000\n0.3992\n0.4008\n\n\n\nid: 0x7f79702eb020\n\n\n\n\n\nMake a causality graph, summarizing what you know from the equations.\nUse \\(q\\) to instrument the effect of x on y. Comment.\n\nfrom linearmodels import IV2SLS\nformula = (\n    \"y ~ 1 + [x~q]\"   # IV2SLS has no intercept by default\n)\nmod = IV2SLS.from_formula(formula, df)\nres = mod.fit()\nres\n\n\nIV-2SLS Estimation Summary\n\n\nDep. Variable:\ny\nR-squared:\n0.9389\n\n\nEstimator:\nIV-2SLS\nAdj. R-squared:\n0.9389\n\n\nNo. Observations:\n100000\nF-statistic:\n4.316e+05\n\n\nDate:\nWed, Feb 14 2024\nP-value (F-stat)\n0.0000\n\n\nTime:\n11:30:43\nDistribution:\nchi2(1)\n\n\nCov. Estimator:\nrobust\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter Estimates\n\n\n\nParameter\nStd. Err.\nT-stat\nP-value\nLower CI\nUpper CI\n\n\nIntercept\n1.0383\n0.0010\n1071.1\n0.0000\n1.0364\n1.0402\n\n\nx\n0.9022\n0.0014\n656.96\n0.0000\n0.8995\n0.9048\n\n\n\nEndogenous: xInstruments: qRobust Covariance (Heteroskedastic)Debiased: Falseid: 0x7fcf7dd34d10\n\n\n\ncomment"
  },
  {
    "objectID": "tutorials/session_5/instrumental_variables.html#iv-example-on-mock-dataset",
    "href": "tutorials/session_5/instrumental_variables.html#iv-example-on-mock-dataset",
    "title": "Instrumental variables",
    "section": "",
    "text": "Create four random series of length \\(N=1000\\)\n\n\\(x\\): education\n\\(y\\): salary\n\\(z\\): ambition\n\\(q\\): early smoking\n\nsuch that:\n\n\\(x\\) and \\(z\\) cause \\(y\\)\n\\(z\\) causes \\(x\\)\n\\(q\\) is correlated with \\(x\\), not with \\(z\\)\n\nA problem arises when the confounding factor \\(z\\) is not observed. In that case, we can estimate the direct effect of \\(x\\) on \\(y\\) by using \\(q\\) as an instrument.\nRun the follwing code to create a mock dataset.\n\nimport numpy as np\nimport pandas as pd\n\n\nN = 100000\nϵ_z = np.random.randn(N)*0.1\nϵ_x = np.random.randn(N)*0.1\nϵ_q = np.random.randn(N)*0.01\nϵ_y = np.random.randn(N)*0.01\n\n\nz = 0.1 + ϵ_z\nq = 0.5 + 0.1234*ϵ_x + ϵ_q\n# here we must change the definition so that q affects x:\n# x = 0.1 + z + ϵ_x\nx = 0.1 + z + q + ϵ_x\ny  = 1.0 + 0.9*x + 0.4*z + ϵ_y\n\n\ndf = pd.DataFrame({\n    \"x\": x,\n    \"y\": y,\n    \"z\": z,\n    \"q\": q\n})\n\nDescribe the dataframe. Compute the correlations between the variables. Are they compatible with the hypotheses for IV?\n\ndf.head()\n\n\n\n\n\n\n\n\nx\ny\nz\nq\n\n\n\n\n0\n0.458958\n1.428012\n-0.006158\n0.489963\n\n\n1\n0.536544\n1.535235\n0.119739\n0.484211\n\n\n2\n0.550795\n1.561178\n0.149119\n0.470899\n\n\n3\n0.774870\n1.773310\n0.184079\n0.501838\n\n\n4\n0.761371\n1.769818\n0.197662\n0.501622\n\n\n\n\n\n\n\n\ndf.describe()\n\n\n\n\n\n\n\n\nx\ny\nz\nq\n\n\n\n\ncount\n100000.000000\n100000.000000\n100000.000000\n100000.000000\n\n\nmean\n0.699704\n1.669716\n0.099930\n0.499973\n\n\nstd\n0.150261\n0.164733\n0.099805\n0.015818\n\n\nmin\n-0.037950\n0.874772\n-0.301234\n0.429432\n\n\n25%\n0.598491\n1.558824\n0.032560\n0.489285\n\n\n50%\n0.699121\n1.669068\n0.099462\n0.499978\n\n\n75%\n0.800179\n1.780555\n0.167347\n0.510695\n\n\nmax\n1.329398\n2.349659\n0.522942\n0.567387\n\n\n\n\n\n\n\n\ndf.corr()\n\n\n\n\n\n\n\n\nx\ny\nz\nq\n\n\n\n\nx\n1.000000\n0.981526\n0.662762\n0.618551\n\n\ny\n0.981526\n1.000000\n0.786408\n0.507140\n\n\nz\n0.662762\n0.786408\n1.000000\n-0.002547\n\n\nq\n0.618551\n0.507140\n-0.002547\n1.000000\n\n\n\n\n\n\n\n\n\n\nUse linearmodels to run a regression estimating the effect of \\(x\\) on \\(y\\) (note the slight API change w.r.t. statsmodels). Comment.\n\nfrom linearmodels import OLS, IV2SLS\n\n\nmodel = OLS.from_formula(\"y ~ x\", df)\nres = model.fit()\nres      # in statsmodels would be res.summary()\n\n\nOLS Estimation Summary\n\n\nDep. Variable:\ny\nR-squared:\n0.9634\n\n\nEstimator:\nOLS\nAdj. R-squared:\n0.9634\n\n\nNo. Observations:\n100000\nF-statistic:\n2.637e+06\n\n\nDate:\nWed, Feb 21 2024\nP-value (F-stat)\n0.0000\n\n\nTime:\n15:08:54\nDistribution:\nchi2(1)\n\n\nCov. Estimator:\nrobust\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter Estimates\n\n\n\nParameter\nStd. Err.\nT-stat\nP-value\nLower CI\nUpper CI\n\n\nIntercept\n0.9168\n0.0005\n1932.5\n0.0000\n0.9159\n0.9177\n\n\nx\n1.0761\n0.0007\n1624.0\n0.0000\n1.0748\n1.0774\n\n\n\nid: 0x7f79702b7c50\n\n\nThe regression is globally very significant (p-value &lt; 1.e-5). The predictive power is very high (R^2=0.96).\nConstants and coefficients are both statistically very significant (p-values&lt;1e-5 for both) and the confidence intervals are very small.\nAssume briefly that z is known and control the regression by z. What happens?\n\nmodel = OLS.from_formula(\"y ~ x + z\", df)\nres = model.fit()\nres  \n\n\nOLS Estimation Summary\n\n\nDep. Variable:\ny\nR-squared:\n0.9963\n\n\nEstimator:\nOLS\nAdj. R-squared:\n0.9963\n\n\nNo. Observations:\n100000\nF-statistic:\n2.713e+07\n\n\nDate:\nWed, Feb 21 2024\nP-value (F-stat)\n0.0000\n\n\nTime:\n15:08:59\nDistribution:\nchi2(2)\n\n\nCov. Estimator:\nrobust\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter Estimates\n\n\n\nParameter\nStd. Err.\nT-stat\nP-value\nLower CI\nUpper CI\n\n\nIntercept\n1.0000\n0.0002\n5752.0\n0.0000\n0.9997\n1.0004\n\n\nx\n0.9000\n0.0003\n3213.3\n0.0000\n0.8994\n0.9005\n\n\nz\n0.4000\n0.0004\n944.90\n0.0000\n0.3992\n0.4008\n\n\n\nid: 0x7f79702eb020\n\n\n\n\n\nMake a causality graph, summarizing what you know from the equations.\nUse \\(q\\) to instrument the effect of x on y. Comment.\n\nfrom linearmodels import IV2SLS\nformula = (\n    \"y ~ 1 + [x~q]\"   # IV2SLS has no intercept by default\n)\nmod = IV2SLS.from_formula(formula, df)\nres = mod.fit()\nres\n\n\nIV-2SLS Estimation Summary\n\n\nDep. Variable:\ny\nR-squared:\n0.9389\n\n\nEstimator:\nIV-2SLS\nAdj. R-squared:\n0.9389\n\n\nNo. Observations:\n100000\nF-statistic:\n4.316e+05\n\n\nDate:\nWed, Feb 14 2024\nP-value (F-stat)\n0.0000\n\n\nTime:\n11:30:43\nDistribution:\nchi2(1)\n\n\nCov. Estimator:\nrobust\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter Estimates\n\n\n\nParameter\nStd. Err.\nT-stat\nP-value\nLower CI\nUpper CI\n\n\nIntercept\n1.0383\n0.0010\n1071.1\n0.0000\n1.0364\n1.0402\n\n\nx\n0.9022\n0.0014\n656.96\n0.0000\n0.8995\n0.9048\n\n\n\nEndogenous: xInstruments: qRobust Covariance (Heteroskedastic)Debiased: Falseid: 0x7fcf7dd34d10\n\n\n\ncomment"
  },
  {
    "objectID": "tutorials/session_5/instrumental_variables.html#return-on-education",
    "href": "tutorials/session_5/instrumental_variables.html#return-on-education",
    "title": "Instrumental variables",
    "section": "Return on Education",
    "text": "Return on Education\nWe follow the excellent R tutorial from the (excellent) Econometrics with R book.\nThe goal is to measure the effect of schooling on earnings, while correcting the endogeneity bias by using distance to college as an instrument.\nDownload the college distance dataset with statsmodels. Describe the dataset and extract the dataframe.\nhttps://vincentarelbundock.github.io/Rdatasets/datasets.html\n\nimport statsmodels.api as sm\nds = sm.datasets.get_rdataset(\"CollegeDistance\", \"AER\")\n\n\nds?\n\n\nType:            Dataset\nString form:     &lt;class 'statsmodels.datasets.utils.Dataset'&gt;\nLength:          5\nFile:            ~/.local/opt/micromamba/envs/escp/lib/python3.12/site-packages/statsmodels/datasets/utils.py\nDocstring:      \n.. container::\n=============== ===============\nCollegeDistance R Documentation\n=============== ===============\n.. rubric:: College Distance Data\n   :name: CollegeDistance\n.. rubric:: Description\n   :name: description\nCross-section data from the High School and Beyond survey conducted\nby the Department of Education in 1980, with a follow-up in 1986. The\nsurvey included students from approximately 1,100 high schools.\n.. rubric:: Usage\n   :name: usage\n.. code:: R\n   data(\"CollegeDistance\")\n.. rubric:: Format\n   :name: format\nA data frame containing 4,739 observations on 14 variables.\ngender\n   factor indicating gender.\nethnicity\n   factor indicating ethnicity (African-American, Hispanic or other).\nscore\n   base year composite test score. These are achievement tests given\n   to high school seniors in the sample.\nfcollege\n   factor. Is the father a college graduate?\nmcollege\n   factor. Is the mother a college graduate?\nhome\n   factor. Does the family own their home?\nurban\n   factor. Is the school in an urban area?\nunemp\n   county unemployment rate in 1980.\nwage\n   state hourly wage in manufacturing in 1980.\ndistance\n   distance from 4-year college (in 10 miles).\ntuition\n   average state 4-year college tuition (in 1000 USD).\neducation\n   number of years of education.\nincome\n   factor. Is the family income above USD 25,000 per year?\nregion\n   factor indicating region (West or other).\n.. rubric:: Details\n   :name: details\nRouse (1995) computed years of education by assigning 12 years to all\nmembers of the senior class. Each additional year of secondary\neducation counted as a one year. Students with vocational degrees\nwere assigned 13 years, AA degrees were assigned 14 years, BA degrees\nwere assigned 16 years, those with some graduate education were\nassigned 17 years, and those with a graduate degree were assigned 18\nyears.\nStock and Watson (2007) provide separate data files for the students\nfrom Western states and the remaining students. ``CollegeDistance``\nincludes both data sets, subsets are easily obtained (see also\nexamples).\n.. rubric:: Source\n   :name: source\nOnline complements to Stock and Watson (2007).\n.. rubric:: References\n   :name: references\nRouse, C.E. (1995). Democratization or Diversion? The Effect of\nCommunity Colleges on Educational Attainment. *Journal of Business &\nEconomic Statistics*, **12**, 217–224.\nStock, J.H. and Watson, M.W. (2007). *Introduction to Econometrics*,\n2nd ed. Boston: Addison Wesley.\n.. rubric:: See Also\n   :name: see-also\n``StockWatson2007``\n.. rubric:: Examples\n   :name: examples\n.. code:: R\n   ## exclude students from Western states\n   data(\"CollegeDistance\")\n   cd &lt;- subset(CollegeDistance, region != \"west\")\n   summary(cd)\nClass docstring:\ndict() -&gt; new empty dictionary\ndict(mapping) -&gt; new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -&gt; new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -&gt; new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)\n\n\n\n\n# describe dataset\n# print(ds.__doc__)\n\n\ndf = ds.data # dataframe attached to dataset\n\n\n# describe dataframe\n\ndf.head()\n\n\n\n\n\n\n\n\ngender\nethnicity\nscore\nfcollege\nmcollege\nhome\nurban\nunemp\nwage\ndistance\ntuition\neducation\nincome\nregion\n\n\nrownames\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\nmale\nother\n39.150002\nyes\nno\nyes\nyes\n6.2\n8.09\n0.2\n0.88915\n12\nhigh\nother\n\n\n2\nfemale\nother\n48.869999\nno\nno\nyes\nyes\n6.2\n8.09\n0.2\n0.88915\n12\nlow\nother\n\n\n3\nmale\nother\n48.740002\nno\nno\nyes\nyes\n6.2\n8.09\n0.2\n0.88915\n12\nlow\nother\n\n\n4\nmale\nafam\n40.400002\nno\nno\nyes\nyes\n6.2\n8.09\n0.2\n0.88915\n12\nlow\nother\n\n\n5\nfemale\nother\n40.480000\nno\nno\nno\nyes\n5.6\n8.09\n0.4\n0.88915\n13\nlow\nother\n\n\n\n\n\n\n\nHow is income encoded? Create a binary variable income_binary to replace it.\n\ndf['income'] # takes two values `high` an `low`\n\nrownames\n1       high\n2        low\n3        low\n4        low\n5        low\n        ... \n9391    high\n9401    high\n9411    high\n9421    high\n9431    high\nName: income, Length: 4739, dtype: object\n\n\n\ndf['income'].unique()\n\narray(['high', 'low'], dtype=object)\n\n\n\n# define a binary variable `income_binary` : 0 if income is low, 1 otherwise\n\n\ndf['income_binary'] = (df['income'] == 'high')*1.0\n# multiply by 1.0 to convert booleans into binary\n\n\ndf['income_binary']\n\nrownames\n1       1.0\n2       0.0\n3       0.0\n4       0.0\n5       0.0\n       ... \n9391    1.0\n9401    1.0\n9411    1.0\n9421    1.0\n9431    1.0\nName: income_binary, Length: 4739, dtype: float64\n\n\nPlot an histogram of distance to college.\n\ndf['distance'].describe()\n\ncount    4739.000000\nmean        1.802870\nstd         2.297128\nmin         0.000000\n25%         0.400000\n50%         1.000000\n75%         2.500000\nmax        20.000000\nName: distance, dtype: float64\n\n\n\ndf['distance'].hist()\n\n\n\n\n\n\n\n\n\n# other ways to do a histogram\n\n\nfrom matplotlib import pyplot as plt\n# plt.hist(df['distance']) # same graph\n\n\n# use seaborn\nimport seaborn as sns\nsns.histplot(df['distance'])\n\n\n\n\n\n\n\n\nRun the naive regression \\(income_{binary}=\\beta_0 + \\beta_1 \\text{education} + u\\).\n\nfrom linearmodels import IV2SLS\nformula = (\n    \"income_binary ~ 1 + education\"   # IV2SLS has no intercept by default\n)\nmod = IV2SLS.from_formula(formula, df)\nres = mod.fit()\nres\n\n\nOLS Estimation Summary\n\n\nDep. Variable:\nincome_binary\nR-squared:\n0.0480\n\n\nEstimator:\nOLS\nAdj. R-squared:\n0.0478\n\n\nNo. Observations:\n4739\nF-statistic:\n227.43\n\n\nDate:\nWed, Feb 14 2024\nP-value (F-stat)\n0.0000\n\n\nTime:\n11:57:29\nDistribution:\nchi2(1)\n\n\nCov. Estimator:\nrobust\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter Estimates\n\n\n\nParameter\nStd. Err.\nT-stat\nP-value\nLower CI\nUpper CI\n\n\nIntercept\n-0.4780\n0.0499\n-9.5702\n0.0000\n-0.5759\n-0.3801\n\n\neducation\n0.0555\n0.0037\n15.081\n0.0000\n0.0483\n0.0627\n\n\n\nid: 0x7fcf62b1dc40\n\n\nAugment the regression with unemp, hispanic, af-am, female and urban. Notice that categorical variables are encoded automatically. What are the treatment values? Change it using the syntax (C(var,Treatment='ref'))\n\ndf.columns\n\nIndex(['gender', 'ethnicity', 'score', 'fcollege', 'mcollege', 'home', 'urban',\n       'unemp', 'wage', 'distance', 'tuition', 'education', 'income', 'region',\n       'income_binary'],\n      dtype='object')\n\n\n\nfrom linearmodels import IV2SLS\nformula = (\n    \"income_binary ~ 1 + education + gender + ethnicity + urban + unemp\"   # IV2SLS has no intercept by default\n)\nmod = IV2SLS.from_formula(formula, df)\nres = mod.fit()\nres\n\n\nOLS Estimation Summary\n\n\nDep. Variable:\nincome_binary\nR-squared:\n0.0830\n\n\nEstimator:\nOLS\nAdj. R-squared:\n0.0818\n\n\nNo. Observations:\n4739\nF-statistic:\n456.93\n\n\nDate:\nWed, Feb 14 2024\nP-value (F-stat)\n0.0000\n\n\nTime:\n12:02:32\nDistribution:\nchi2(6)\n\n\nCov. Estimator:\nrobust\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter Estimates\n\n\n\nParameter\nStd. Err.\nT-stat\nP-value\nLower CI\nUpper CI\n\n\nIntercept\n-0.4159\n0.0538\n-7.7362\n0.0000\n-0.5212\n-0.3105\n\n\neducation\n0.0511\n0.0036\n14.030\n0.0000\n0.0440\n0.0583\n\n\ngender[T.male]\n0.0490\n0.0128\n3.8341\n0.0001\n0.0239\n0.0740\n\n\nethnicity[T.hispanic]\n-0.0296\n0.0185\n-1.6006\n0.1095\n-0.0660\n0.0067\n\n\nethnicity[T.other]\n0.1235\n0.0167\n7.3992\n0.0000\n0.0908\n0.1563\n\n\nurban[T.yes]\n-0.0470\n0.0149\n-3.1556\n0.0016\n-0.0763\n-0.0178\n\n\nunemp\n-0.0115\n0.0023\n-5.0997\n0.0000\n-0.0159\n-0.0071\n\n\n\nid: 0x7fcf62a4b4d0\n\n\n\ndf['ethnicity'].unique()\n\narray(['other', 'afam', 'hispanic'], dtype=object)\n\n\nThe library has created automatically dummy variable for categories. For the ethnicity variable, it has used afam as reference value. Let’s use other as reference value.\n\n#\n\n# C(ethnicity) -&gt; flags ethnicity as categorical variable\n$ C(ethnicity, Treatment(reference='other'))\n\n\nfrom linearmodels import IV2SLS\nformula = (\n    \"income_binary ~ 1 + education + gender + C(ethnicity, Treatment(reference='other')) + urban + unemp\"   # IV2SLS has no intercept by default\n)\nmod = IV2SLS.from_formula(formula, df)\nres = mod.fit()\nres\n\n\nOLS Estimation Summary\n\n\nDep. Variable:\nincome_binary\nR-squared:\n0.0830\n\n\nEstimator:\nOLS\nAdj. R-squared:\n0.0818\n\n\nNo. Observations:\n4739\nF-statistic:\n456.93\n\n\nDate:\nWed, Feb 14 2024\nP-value (F-stat)\n0.0000\n\n\nTime:\n12:10:11\nDistribution:\nchi2(6)\n\n\nCov. Estimator:\nrobust\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter Estimates\n\n\n\nParameter\nStd. Err.\nT-stat\nP-value\nLower CI\nUpper CI\n\n\nIntercept\n-0.2923\n0.0541\n-5.4047\n0.0000\n-0.3983\n-0.1863\n\n\neducation\n0.0511\n0.0036\n14.030\n0.0000\n0.0440\n0.0583\n\n\ngender[T.male]\n0.0490\n0.0128\n3.8341\n0.0001\n0.0239\n0.0740\n\n\nC(ethnicity, Treatment(reference='other'))[T.afam]\n-0.1235\n0.0167\n-7.3992\n0.0000\n-0.1563\n-0.0908\n\n\nC(ethnicity, Treatment(reference='other'))[T.hispanic]\n-0.1532\n0.0151\n-10.127\n0.0000\n-0.1828\n-0.1235\n\n\nurban[T.yes]\n-0.0470\n0.0149\n-3.1556\n0.0016\n-0.0763\n-0.0178\n\n\nunemp\n-0.0115\n0.0023\n-5.0997\n0.0000\n-0.0159\n-0.0071\n\n\n\nid: 0x7fcf62b1c5c0\n\n\nThe regression is highly significant (R^2&gt;0 with p-value &lt; 1e.-5). The predictive power is low, with only 8% of total variance explained by education.\nAll coefficients are significant at a 2% confidence level.\nAccording to the results:\nComment the results and explain the selection problem\nExplain why distance to college might be used to instrument the effect of schooling.\nRun an IV regression, where distance is used to instrument schooling.\nlook at: https://bashtage.github.io/linearmodels/ (two-stage least squares)\n\nfrom linearmodels import IV2SLS\nformula = (\n    \"income_binary ~ 1 + [education~distance] + gender + C(ethnicity, Treatment(reference='other')) + urban + unemp\"   # IV2SLS has no intercept by default\n)\nmod = IV2SLS.from_formula(formula, df)\nres = mod.fit()\nres\n\n\nIV-2SLS Estimation Summary\n\n\nDep. Variable:\nincome_binary\nR-squared:\n-0.2734\n\n\nEstimator:\nIV-2SLS\nAdj. R-squared:\n-0.2750\n\n\nNo. Observations:\n4739\nF-statistic:\n213.68\n\n\nDate:\nWed, Feb 14 2024\nP-value (F-stat)\n0.0000\n\n\nTime:\n12:16:16\nDistribution:\nchi2(6)\n\n\nCov. Estimator:\nrobust\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter Estimates\n\n\n\nParameter\nStd. Err.\nT-stat\nP-value\nLower CI\nUpper CI\n\n\nIntercept\n-2.4218\n0.5313\n-4.5582\n0.0000\n-3.4631\n-1.3805\n\n\ngender[T.male]\n0.0456\n0.0150\n3.0301\n0.0024\n0.0161\n0.0750\n\n\nC(ethnicity, Treatment(reference='other'))[T.afam]\n-0.0456\n0.0283\n-1.6123\n0.1069\n-0.1011\n0.0098\n\n\nC(ethnicity, Treatment(reference='other'))[T.hispanic]\n-0.1075\n0.0223\n-4.8322\n0.0000\n-0.1511\n-0.0639\n\n\nurban[T.yes]\n-0.0527\n0.0182\n-2.8947\n0.0038\n-0.0884\n-0.0170\n\n\nunemp\n-0.0101\n0.0027\n-3.7771\n0.0002\n-0.0153\n-0.0048\n\n\neducation\n0.2032\n0.0378\n5.3800\n0.0000\n0.1292\n0.2773\n\n\n\nEndogenous: educationInstruments: distanceRobust Covariance (Heteroskedastic)Debiased: Falseid: 0x7fcf624aa3f0\n\n\nComment the results. Compare with the R tutorials."
  },
  {
    "objectID": "tutorials/session_4/Regressions_correction.html",
    "href": "tutorials/session_4/Regressions_correction.html",
    "title": "(Multiple) Regressions",
    "section": "",
    "text": "In this tutorial you will learn to run regressions with statsmodels."
  },
  {
    "objectID": "tutorials/session_4/Regressions_correction.html#linear-regressions",
    "href": "tutorials/session_4/Regressions_correction.html#linear-regressions",
    "title": "(Multiple) Regressions",
    "section": "Linear regressions",
    "text": "Linear regressions\nImport the Duncan/carData dataset\n\nimport statsmodels.api as sm\ndataset = sm.datasets.get_rdataset(\"Duncan\", \"carData\", cache=True)\ndf = dataset.data\ndf.head()\n\n\n---------------------------------------------------------------------------\nTimeoutError                              Traceback (most recent call last)\nCell In[5], line 2\n      1 import statsmodels.api as sm\n----&gt; 2 dataset = sm.datasets.get_rdataset(\"Duncan\", \"carData\", cache=True)\n      3 df = dataset.data\n      4 df.head()\n\nFile ~/.local/opt/micromamba/envs/escp/lib/python3.12/site-packages/statsmodels/datasets/utils.py:241, in get_rdataset(dataname, package, cache)\n    238 data = read_csv(data, index_col=0)\n    239 data = _maybe_reset_index(data)\n--&gt; 241 title = _get_dataset_meta(dataname, package, cache)\n    242 doc, _ = _get_data(docs_base_url, dataname, cache, \"rst\")\n    244 return Dataset(data=data, __doc__=doc.read(), package=package, title=title,\n    245                from_cache=from_cache)\n\nFile ~/.local/opt/micromamba/envs/escp/lib/python3.12/site-packages/statsmodels/datasets/utils.py:182, in _get_dataset_meta(dataname, package, cache)\n    177 def _get_dataset_meta(dataname, package, cache):\n    178     # get the index, you'll probably want this cached because you have\n    179     # to download info about all the data to get info about any of the data...\n    180     index_url = (\"https://raw.githubusercontent.com/vincentarelbundock/\"\n    181                  \"Rdatasets/master/datasets.csv\")\n--&gt; 182     data, _ = _urlopen_cached(index_url, cache)\n    183     data = data.decode('utf-8', 'strict')\n    184     index = read_csv(StringIO(data))\n\nFile ~/.local/opt/micromamba/envs/escp/lib/python3.12/site-packages/statsmodels/datasets/utils.py:157, in _urlopen_cached(url, cache)\n    155 # not using the cache or did not find it in cache\n    156 if not from_cache:\n--&gt; 157     data = urlopen(url, timeout=3).read()\n    158     if cache is not None:  # then put it in the cache\n    159         _cache_it(data, cache_path)\n\nFile ~/.local/opt/micromamba/envs/escp/lib/python3.12/http/client.py:495, in HTTPResponse.read(self, amt)\n    493 else:\n    494     try:\n--&gt; 495         s = self._safe_read(self.length)\n    496     except IncompleteRead:\n    497         self._close_conn()\n\nFile ~/.local/opt/micromamba/envs/escp/lib/python3.12/http/client.py:640, in HTTPResponse._safe_read(self, amt)\n    633 def _safe_read(self, amt):\n    634     \"\"\"Read the number of bytes requested.\n    635 \n    636     This function should be used when &lt;amt&gt; bytes \"should\" be present for\n    637     reading. If the bytes are truly not available (due to EOF), then the\n    638     IncompleteRead exception can be used to detect the problem.\n    639     \"\"\"\n--&gt; 640     data = self.fp.read(amt)\n    641     if len(data) &lt; amt:\n    642         raise IncompleteRead(data, amt-len(data))\n\nFile ~/.local/opt/micromamba/envs/escp/lib/python3.12/socket.py:707, in SocketIO.readinto(self, b)\n    705 while True:\n    706     try:\n--&gt; 707         return self._sock.recv_into(b)\n    708     except timeout:\n    709         self._timeout_occurred = True\n\nFile ~/.local/opt/micromamba/envs/escp/lib/python3.12/ssl.py:1252, in SSLSocket.recv_into(self, buffer, nbytes, flags)\n   1248     if flags != 0:\n   1249         raise ValueError(\n   1250           \"non-zero flags not allowed in calls to recv_into() on %s\" %\n   1251           self.__class__)\n-&gt; 1252     return self.read(nbytes, buffer)\n   1253 else:\n   1254     return super().recv_into(buffer, nbytes, flags)\n\nFile ~/.local/opt/micromamba/envs/escp/lib/python3.12/ssl.py:1104, in SSLSocket.read(self, len, buffer)\n   1102 try:\n   1103     if buffer is not None:\n-&gt; 1104         return self._sslobj.read(len, buffer)\n   1105     else:\n   1106         return self._sslobj.read(len)\n\nTimeoutError: The read operation timed out\n\n\n\n\n# quickly explore the database:\ndf.describe()\n\n\n\n\n\n\n\n\nincome\neducation\nprestige\n\n\n\n\ncount\n45.000000\n45.000000\n45.000000\n\n\nmean\n41.866667\n52.555556\n47.688889\n\n\nstd\n24.435072\n29.760831\n31.510332\n\n\nmin\n7.000000\n7.000000\n3.000000\n\n\n25%\n21.000000\n26.000000\n16.000000\n\n\n50%\n42.000000\n45.000000\n41.000000\n\n\n75%\n64.000000\n84.000000\n81.000000\n\n\nmax\n81.000000\n100.000000\n97.000000\n\n\n\n\n\n\n\nEstimate by hand the model \\(\\text{income} = \\alpha + \\beta  \\times \\text{education}\\) . Plot.\nHere we use the formula from the course. This is not needed in general as the libraries compute all of that for us.\n\n# Compute covariance matrix:\nΣ = df[ ['income', 'education'] ].cov()\nΣ\n\n\n\n\n\n\n\n\nincome\neducation\n\n\n\n\nincome\n597.072727\n526.871212\n\n\neducation\n526.871212\n885.707071\n\n\n\n\n\n\n\n\n# compute averages\nμ = df[ ['income', 'education'] ].mean()\nμ\n\nincome       41.866667\neducation    52.555556\ndtype: float64\n\n\n\nβ = Σ.loc['income','education'] / Σ.loc['education','education']\nβ\n\n0.5948594400410561\n\n\n\nα = μ['income'] - β*μ['education']\n\n\nα\n\n10.603498317842273\n\n\n\nprediction = α + β*df['education']\n\n\nfrom matplotlib import pyplot as plt\nplt.plot(df['education'], df['income'], '.')\nplt.plot(df['education'], prediction)\n\n\n\n\n\n\n\n\nCompute total, explained, unexplained variance. Compute R^2 statistics\nSame as before. We do it only to check that the formulas yield the same results as the libraries used below.\n\ndf['prediction'] = α + β*df['education']\ndf['error_term'] =  df['income'] - prediction\n\n\nSigma = df[['income', 'education', 'prediction', 'error_term']].cov()\n\n\ntotal_variance = Sigma.loc['income','income'] \nprediction_variance = Sigma.loc['prediction','prediction']\nerror_variance = Sigma.loc['error_term', 'error_term']\n\n\ntotal_variance\n\n597.0727272727273\n\n\n\nprediction_variance\n\n313.4143142161768\n\n\n\nerror_variance\n\n283.6584130565506\n\n\n\n# we observe that total variance is equal to prediction + error variance\nprediction_variance + error_variance\n\n597.0727272727274\n\n\n\n# we can now copute R^2:\nmyRsquared = 1 - error_variance/total_variance\n\n\nmyRsquared\n\n0.5249181546907554\n\n\nUse statsmodels (formula API) to estimate \\(\\text{income} = \\alpha + \\beta  \\times \\text{education}\\). Comment regression statistics.\n\n#https://www.statsmodels.org/stable/generated/statsmodels.formula.api.ols.html\n\nfrom statsmodels.formula import api as smf\n\nmodel_1 = smf.ols(\"income ~ education\", df)\nres_1 = model_1.fit()\n\n\nres_1.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nincome\nR-squared:\n0.525\n\n\nModel:\nOLS\nAdj. R-squared:\n0.514\n\n\nMethod:\nLeast Squares\nF-statistic:\n47.51\n\n\nDate:\nWed, 21 Feb 2024\nProb (F-statistic):\n1.84e-08\n\n\nTime:\n14:04:58\nLog-Likelihood:\n-190.42\n\n\nNo. Observations:\n45\nAIC:\n384.8\n\n\nDf Residuals:\n43\nBIC:\n388.5\n\n\nDf Model:\n1\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n10.6035\n5.198\n2.040\n0.048\n0.120\n21.087\n\n\neducation\n0.5949\n0.086\n6.893\n0.000\n0.421\n0.769\n\n\n\n\n\n\n\n\nOmnibus:\n9.841\nDurbin-Watson:\n1.736\n\n\nProb(Omnibus):\n0.007\nJarque-Bera (JB):\n10.609\n\n\nSkew:\n0.776\nProb(JB):\n0.00497\n\n\nKurtosis:\n4.802\nCond. No.\n123.\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\nThe estimated regresssion is income = 10.6 + 0.59 education. At a 5% p-value level both the intercept and the coefficient are significant. R-squared is 0.52: the model explains half of the variance.\nUse statsmodels to estimate \\(\\text{income} = \\alpha + \\beta  \\times \\text{prestige}\\). Comment regression statistics.\n\n# we just need to change the formula\nmodel_2 = smf.ols(\"income ~ prestige\", df)\nres_2 = model_2.fit()\n\n\nres_2.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nincome\nR-squared:\n0.702\n\n\nModel:\nOLS\nAdj. R-squared:\n0.695\n\n\nMethod:\nLeast Squares\nF-statistic:\n101.3\n\n\nDate:\nWed, 21 Feb 2024\nProb (F-statistic):\n7.14e-13\n\n\nTime:\n14:04:58\nLog-Likelihood:\n-179.93\n\n\nNo. Observations:\n45\nAIC:\n363.9\n\n\nDf Residuals:\n43\nBIC:\n367.5\n\n\nDf Model:\n1\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n10.8840\n3.678\n2.959\n0.005\n3.467\n18.301\n\n\nprestige\n0.6497\n0.065\n10.062\n0.000\n0.519\n0.780\n\n\n\n\n\n\n\n\nOmnibus:\n8.893\nDurbin-Watson:\n2.048\n\n\nProb(Omnibus):\n0.012\nJarque-Bera (JB):\n19.848\n\n\nSkew:\n0.047\nProb(JB):\n4.90e-05\n\n\nKurtosis:\n6.252\nCond. No.\n104.\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\nThe estimated regresssion is income = 10.6 + 0.59 education. At a 0.5% p-value level both the intercept and the coefficient are significant. R-squared is 0.70: the model predicts income better than the former one.\n__Use statsmodels to estimate $ = + + _2 + $. Comment regression statistics.__\n\n# again, we just change the formula, as seen during the lectures\nmodel_3 = smf.ols(\"income ~ education + prestige\", df)\nres_3 = model_3.fit()\n\n\nres_3.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nincome\nR-squared:\n0.702\n\n\nModel:\nOLS\nAdj. R-squared:\n0.688\n\n\nMethod:\nLeast Squares\nF-statistic:\n49.55\n\n\nDate:\nWed, 21 Feb 2024\nProb (F-statistic):\n8.88e-12\n\n\nTime:\n14:04:58\nLog-Likelihood:\n-179.90\n\n\nNo. Observations:\n45\nAIC:\n365.8\n\n\nDf Residuals:\n42\nBIC:\n371.2\n\n\nDf Model:\n2\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n10.4264\n4.164\n2.504\n0.016\n2.024\n18.829\n\n\neducation\n0.0323\n0.132\n0.244\n0.808\n-0.234\n0.299\n\n\nprestige\n0.6237\n0.125\n5.003\n0.000\n0.372\n0.875\n\n\n\n\n\n\n\n\nOmnibus:\n9.200\nDurbin-Watson:\n2.053\n\n\nProb(Omnibus):\n0.010\nJarque-Bera (JB):\n21.265\n\n\nSkew:\n0.075\nProb(JB):\n2.41e-05\n\n\nKurtosis:\n6.364\nCond. No.\n168.\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\nThe \\(R^2\\) is only slightly higher than last model, but adjusted \\(R^2\\) is actually lower: the model has less predictive power.\nThe coefficient for education is not significant. It should be dropped from the regresssion.\nThis might happen, because education and prestige are correlated. Let’s check it:\n\ndf[['prestige','education']].corr()\n\n\n\n\n\n\n\n\nprestige\neducation\n\n\n\n\nprestige\n1.000000\n0.851916\n\n\neducation\n0.851916\n1.000000\n\n\n\n\n\n\n\nEducation and prestige are correlated at 83%. It makes no sense keeping the two in the same regression.\nWHich model would you recommend? For which purpose?\nIf the goal is to predict income, the one with prestige only, has the highest prediction power. If we are interested in the effect of education, we keep only education.\nPlot the regression with prestige\n\nx = df['prestige']\n\n\n# compute predicted values:\na = res_2.params.Intercept\nb = res_2.params.prestige\ny = a + b*x\n\n\n# shorter version\ny = res_2.predict(x)\n\n\nfrom matplotlib import pyplot as plt\nplt.plot(x, df['income'],'o')\nplt.plot(x, y)\nplt.xlabel(\"prestige\")\nplt.xlabel(\"income\")\n\nText(0.5, 0, 'income')\n\n\n\n\n\n\n\n\n\nCheck visually normality of residuals\n\npred = a + b*x\nactual = df['income']\nresid = actual - pred  # same as res_2.resid\n\n\nplt.plot(x,resid, 'o')\n\n\n\n\n\n\n\n\n\nplt.hist(resid)\n\n(array([ 1.,  0.,  0.,  2., 19., 11.,  6.,  4.,  1.,  1.]),\n array([-46.40643935, -37.72299114, -29.03954294, -20.35609473,\n        -11.67264653,  -2.98919832,   5.69424989,  14.37769809,\n         23.0611463 ,  31.74459451,  40.42804271]),\n &lt;BarContainer object of 10 artists&gt;)\n\n\n\n\n\n\n\n\n\nThe plot is not very supportive of a normal distribution. The distribution of errors seems skewed to the right."
  },
  {
    "objectID": "tutorials/session_4/Regressions_correction.html#taylor-rule",
    "href": "tutorials/session_4/Regressions_correction.html#taylor-rule",
    "title": "(Multiple) Regressions",
    "section": "Taylor Rule",
    "text": "Taylor Rule\nIn 1993, John taylor, estimated, using US data the regression: \\(i_t = i^{\\star} + \\alpha_{\\pi} \\pi_t + \\alpha_{\\pi} y_t\\) where \\(\\pi_t\\) is inflation and \\(y_t\\) the output gap (let’s say deviation from real gdp from the trend). He found that both coefficients were not significantly different from \\(0.5\\). Our goal, is to replicate the same analysis.\nImport macro data from statsmodels (https://www.statsmodels.org/devel/datasets/generated/macrodata.html)\n\nimport statsmodels\n\n## google: stats models macrodata\n## google: statsmodels datasets  -&gt; example in the tutorial\n\n# https://www.statsmodels.org/0.6.1/datasets/index.html\n# example about how to use lengley database\n\n\nimport statsmodels.api as sm\n\n\nsm.datasets.macrodata\n\n&lt;module 'statsmodels.datasets.macrodata' from '/opt/conda/lib/python3.10/site-packages/statsmodels/datasets/macrodata/__init__.py'&gt;\n\n\n\nds = sm.datasets.macrodata.load_pandas()\n\n\ndf = ds.raw_data\ndf.head()\n\n\n\n\n\n\n\n\nyear\nquarter\nrealgdp\nrealcons\nrealinv\nrealgovt\nrealdpi\ncpi\nm1\ntbilrate\nunemp\npop\ninfl\nrealint\n\n\n\n\n0\n1959.0\n1.0\n2710.349\n1707.4\n286.898\n470.045\n1886.9\n28.98\n139.7\n2.82\n5.8\n177.146\n0.00\n0.00\n\n\n1\n1959.0\n2.0\n2778.801\n1733.7\n310.859\n481.301\n1919.7\n29.15\n141.7\n3.08\n5.1\n177.830\n2.34\n0.74\n\n\n2\n1959.0\n3.0\n2775.488\n1751.8\n289.226\n491.260\n1916.4\n29.35\n140.5\n3.82\n5.3\n178.657\n2.74\n1.09\n\n\n3\n1959.0\n4.0\n2785.204\n1753.7\n299.356\n484.052\n1931.3\n29.37\n140.0\n4.33\n5.6\n179.386\n0.27\n4.06\n\n\n4\n1960.0\n1.0\n2847.699\n1770.5\n331.722\n462.199\n1955.5\n29.54\n139.6\n3.50\n5.2\n180.007\n2.31\n1.19\n\n\n\n\n\n\n\nCreate a database with all variables of interest including detrended gdp\n\ngdp = df['realgdp']\ninflation = df['infl']\nrealint = df['realint']\n\n\nddf = df # \n\n\nddf.head()\n\n\n\n\n\n\n\n\nyear\nquarter\nrealgdp\nrealcons\nrealinv\nrealgovt\nrealdpi\ncpi\nm1\ntbilrate\nunemp\npop\ninfl\nrealint\n\n\n\n\n0\n1959.0\n1.0\n2710.349\n1707.4\n286.898\n470.045\n1886.9\n28.98\n139.7\n2.82\n5.8\n177.146\n0.00\n0.00\n\n\n1\n1959.0\n2.0\n2778.801\n1733.7\n310.859\n481.301\n1919.7\n29.15\n141.7\n3.08\n5.1\n177.830\n2.34\n0.74\n\n\n2\n1959.0\n3.0\n2775.488\n1751.8\n289.226\n491.260\n1916.4\n29.35\n140.5\n3.82\n5.3\n178.657\n2.74\n1.09\n\n\n3\n1959.0\n4.0\n2785.204\n1753.7\n299.356\n484.052\n1931.3\n29.37\n140.0\n4.33\n5.6\n179.386\n0.27\n4.06\n\n\n4\n1960.0\n1.0\n2847.699\n1770.5\n331.722\n462.199\n1955.5\n29.54\n139.6\n3.50\n5.2\n180.007\n2.31\n1.19\n\n\n\n\n\n\n\nWe use the fisher relation: \\(r_t = i_t - \\pi_t\\)\n\nddf['ir'] = ddf['realint'] + ddf['infl']\n\nto detrend the gdp, we use hp-filter function from scipy google: hpfilter scipy. This is a classical tool in macroeconomics.\n\nfrom statsmodels.tsa.filters.hp_filter import hpfilter\n\n\ncycle, trend = hpfilter(ddf['realgdp'])\n\n\nplt.subplot(211)\nplt.plot(trend, label='Detrended Data')\nplt.plot(trend+cycle, label='Actual data')\nplt.title(\"GDP\")\nplt.legend(loc='upper left')\nplt.subplot(212)\nplt.plot(cycle)\nplt.title(\"Cyclical Component\")\nplt.tight_layout()\n\n\n\n\n\n\n\n\n\nddf['gdp'] = cycle/trend*100 # nominal interest rate and inflation are in percent\n\n\nddf.head()\n\n\n\n\n\n\n\n\nyear\nquarter\nrealgdp\nrealcons\nrealinv\nrealgovt\nrealdpi\ncpi\nm1\ntbilrate\nunemp\npop\ninfl\nrealint\nir\ngdp\n\n\n\n\n0\n1959.0\n1.0\n2710.349\n1707.4\n286.898\n470.045\n1886.9\n28.98\n139.7\n2.82\n5.8\n177.146\n0.00\n0.00\n0.00\n1.479383\n\n\n1\n1959.0\n2.0\n2778.801\n1733.7\n310.859\n481.301\n1919.7\n29.15\n141.7\n3.08\n5.1\n177.830\n2.34\n0.74\n3.08\n2.967657\n\n\n2\n1959.0\n3.0\n2775.488\n1751.8\n289.226\n491.260\n1916.4\n29.35\n140.5\n3.82\n5.3\n178.657\n2.74\n1.09\n3.83\n1.792534\n\n\n3\n1959.0\n4.0\n2785.204\n1753.7\n299.356\n484.052\n1931.3\n29.37\n140.0\n4.33\n5.6\n179.386\n0.27\n4.06\n4.33\n1.110571\n\n\n4\n1960.0\n1.0\n2847.699\n1770.5\n331.722\n462.199\n1955.5\n29.54\n139.6\n3.50\n5.2\n180.007\n2.31\n1.19\n3.50\n2.331547\n\n\n\n\n\n\n\nRun the basic regression\n\nfrom statsmodels.formula import api as sm\n\n\nmodel = sm.ols(\"ir ~ infl + gdp\", data=ddf) # no intercept\nresults = model.fit()\nresults.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nir\nR-squared:\n0.389\n\n\nModel:\nOLS\nAdj. R-squared:\n0.383\n\n\nMethod:\nLeast Squares\nF-statistic:\n63.65\n\n\nDate:\nWed, 21 Feb 2024\nProb (F-statistic):\n4.06e-22\n\n\nTime:\n14:05:00\nLog-Likelihood:\n-448.17\n\n\nNo. Observations:\n203\nAIC:\n902.3\n\n\nDf Residuals:\n200\nBIC:\n912.3\n\n\nDf Model:\n2\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n3.2035\n0.252\n12.696\n0.000\n2.706\n3.701\n\n\ninfl\n0.5288\n0.050\n10.557\n0.000\n0.430\n0.628\n\n\ngdp\n0.0795\n0.105\n0.759\n0.449\n-0.127\n0.286\n\n\n\n\n\n\n\n\nOmnibus:\n30.222\nDurbin-Watson:\n0.417\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n50.662\n\n\nSkew:\n0.796\nProb(JB):\n9.98e-12\n\n\nKurtosis:\n4.858\nCond. No.\n8.56\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\nWhich control variables would you propose to add? Does it increase prediction power? How do you interpret that?\n\nddf.head()\n\n\n\n\n\n\n\n\nyear\nquarter\nrealgdp\nrealcons\nrealinv\nrealgovt\nrealdpi\ncpi\nm1\ntbilrate\nunemp\npop\ninfl\nrealint\nir\ngdp\n\n\n\n\n0\n1959.0\n1.0\n2710.349\n1707.4\n286.898\n470.045\n1886.9\n28.98\n139.7\n2.82\n5.8\n177.146\n0.00\n0.00\n0.00\n1.479383\n\n\n1\n1959.0\n2.0\n2778.801\n1733.7\n310.859\n481.301\n1919.7\n29.15\n141.7\n3.08\n5.1\n177.830\n2.34\n0.74\n3.08\n2.967657\n\n\n2\n1959.0\n3.0\n2775.488\n1751.8\n289.226\n491.260\n1916.4\n29.35\n140.5\n3.82\n5.3\n178.657\n2.74\n1.09\n3.83\n1.792534\n\n\n3\n1959.0\n4.0\n2785.204\n1753.7\n299.356\n484.052\n1931.3\n29.37\n140.0\n4.33\n5.6\n179.386\n0.27\n4.06\n4.33\n1.110571\n\n\n4\n1960.0\n1.0\n2847.699\n1770.5\n331.722\n462.199\n1955.5\n29.54\n139.6\n3.50\n5.2\n180.007\n2.31\n1.19\n3.50\n2.331547\n\n\n\n\n\n\n\n\nmodel = sm.ols(\"ir ~ infl + gdp + pop + unemp -1\", data=ddf) # no intercept\nresults = model.fit()\nresults.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nir\nR-squared (uncentered):\n0.884\n\n\nModel:\nOLS\nAdj. R-squared (uncentered):\n0.882\n\n\nMethod:\nLeast Squares\nF-statistic:\n380.2\n\n\nDate:\nWed, 21 Feb 2024\nProb (F-statistic):\n5.64e-92\n\n\nTime:\n14:05:00\nLog-Likelihood:\n-432.84\n\n\nNo. Observations:\n203\nAIC:\n873.7\n\n\nDf Residuals:\n199\nBIC:\n886.9\n\n\nDf Model:\n4\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\ninfl\n0.4380\n0.049\n8.895\n0.000\n0.341\n0.535\n\n\ngdp\n0.5710\n0.120\n4.739\n0.000\n0.333\n0.809\n\n\npop\n-0.0050\n0.002\n-2.068\n0.040\n-0.010\n-0.000\n\n\nunemp\n0.8064\n0.108\n7.458\n0.000\n0.593\n1.020\n\n\n\n\n\n\n\n\nOmnibus:\n5.307\nDurbin-Watson:\n0.391\n\n\nProb(Omnibus):\n0.070\nJarque-Bera (JB):\n7.501\n\n\nSkew:\n0.070\nProb(JB):\n0.0235\n\n\nKurtosis:\n3.931\nCond. No.\n247.\n\n\n\nNotes:[1] R² is computed without centering (uncentered) since the model does not contain a constant.[2] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\nAt confidence level 2.5% gdp is between 0.333 and 0.809.\nAt confidence level 2.5% infl is between 0.341 and 0.535.\nThe coefficients would be significantly different from 0.5 if 0.5 was not in the condifence interval."
  },
  {
    "objectID": "tutorials/session_8/old_homework copy.html",
    "href": "tutorials/session_8/old_homework copy.html",
    "title": "Predicting booking cancellations",
    "section": "",
    "text": "The scientific review Data-in-Brief, publishes raw data after a rigorous referee process.\nThe following entry contains booking data for two hotels in Portugal, with many informations about the clients.\nYour goal is to propose a machine learning model to predict whether a given booking will be cancelled.\n(note that the dataset is rather large and that some operations may take some time to complete)\n\nPreparation\nImport the dataset. Describe it.\n\nimport pandas\ndf = pandas.read_csv(\"hotel_booking.csv\")\n\n\ndf.describe()\n\n\n\n\n\n\n\n\nis_canceled\nlead_time\narrival_date_year\narrival_date_week_number\narrival_date_day_of_month\nstays_in_weekend_nights\nstays_in_week_nights\nadults\nchildren\nbabies\nis_repeated_guest\nprevious_cancellations\nprevious_bookings_not_canceled\nbooking_changes\nagent\ncompany\ndays_in_waiting_list\nadr\nrequired_car_parking_spaces\ntotal_of_special_requests\n\n\n\n\ncount\n119390.000000\n119390.000000\n119390.000000\n119390.000000\n119390.000000\n119390.000000\n119390.000000\n119390.000000\n119386.000000\n119390.000000\n119390.000000\n119390.000000\n119390.000000\n119390.000000\n103050.000000\n6797.000000\n119390.000000\n119390.000000\n119390.000000\n119390.000000\n\n\nmean\n0.370416\n104.011416\n2016.156554\n27.165173\n15.798241\n0.927599\n2.500302\n1.856403\n0.103890\n0.007949\n0.031912\n0.087118\n0.137097\n0.221124\n86.693382\n189.266735\n2.321149\n101.831122\n0.062518\n0.571363\n\n\nstd\n0.482918\n106.863097\n0.707476\n13.605138\n8.780829\n0.998613\n1.908286\n0.579261\n0.398561\n0.097436\n0.175767\n0.844336\n1.497437\n0.652306\n110.774548\n131.655015\n17.594721\n50.535790\n0.245291\n0.792798\n\n\nmin\n0.000000\n0.000000\n2015.000000\n1.000000\n1.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n1.000000\n6.000000\n0.000000\n-6.380000\n0.000000\n0.000000\n\n\n25%\n0.000000\n18.000000\n2016.000000\n16.000000\n8.000000\n0.000000\n1.000000\n2.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n9.000000\n62.000000\n0.000000\n69.290000\n0.000000\n0.000000\n\n\n50%\n0.000000\n69.000000\n2016.000000\n28.000000\n16.000000\n1.000000\n2.000000\n2.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n14.000000\n179.000000\n0.000000\n94.575000\n0.000000\n0.000000\n\n\n75%\n1.000000\n160.000000\n2017.000000\n38.000000\n23.000000\n2.000000\n3.000000\n2.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n229.000000\n270.000000\n0.000000\n126.000000\n0.000000\n1.000000\n\n\nmax\n1.000000\n737.000000\n2017.000000\n53.000000\n31.000000\n19.000000\n50.000000\n55.000000\n10.000000\n10.000000\n1.000000\n26.000000\n72.000000\n21.000000\n535.000000\n543.000000\n391.000000\n5400.000000\n8.000000\n5.000000\n\n\n\n\n\n\n\nSplit the dataset between a train set and a validation set.\nThe validation set should not be touched until the very end.\n\nimport sklearn\nimport sklearn.model_selection\n\n\ndf_ml, df_validation = sklearn.model_selection.train_test_split(df, test_size=0.2, random_state=56)\n# until the very last question, you should use *only* the training set\n\nSplit the df_ml dataframe between a training set and a test set.\n\ndf_train, df_test = sklearn.model_selection.train_test_split(df_ml)\n# the various algorithms can be trained and tested using df_train and df_test\n\n\n\nTraining\nJustify why a machine learning model seems appropriate to predict cancellation. Which one(s) could you use?\nImplement two or more classification models, to predict cancellation.\nCompare their performance on the test set. Which one would you choose?\n\n\nValidation\nUsing your preferred model, use the validation set to compute the confusion matrix. Comment."
  },
  {
    "objectID": "tutorials/session_8/sentiment_analysis.html",
    "href": "tutorials/session_8/sentiment_analysis.html",
    "title": "Confusion Matrix and Sentiment Analysis",
    "section": "",
    "text": "The following code processes the Lending Club Dataset from kaggle.\nRun and comment the following instructions (fix them if needed). Inspect he dataframe?\n\n# importing libraries\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nimport sklearn\nimport numpy as np\n\n/tmp/ipykernel_7230/3363083914.py:2: DeprecationWarning: \nPyarrow will become a required dependency of pandas in the next major release of pandas (pandas 3.0),\n(to allow more performant data types, such as the Arrow string type, and better interoperability with other libraries)\nbut was not found to be installed on your system.\nIf this would cause problems for you,\nplease provide us feedback at https://github.com/pandas-dev/pandas/issues/54466\n        \n  import pandas as pd\n\n\n\n# import dataset\nloan = pd.read_csv('loans.csv', low_memory=True)\n\n\nloan\n\n\n\n\n\n\n\n\nloan_amnt\nterm\nsub_grade\nemp_length\nannual_inc\nloan_status\ndti\nmths_since_recent_inq\nrevol_util\nnum_op_rev_tl\n...\naddr_state__SD\naddr_state__TN\naddr_state__TX\naddr_state__UT\naddr_state__VA\naddr_state__VT\naddr_state__WA\naddr_state__WI\naddr_state__WV\naddr_state__WY\n\n\n\n\n0\n3600.0\n1.0\n24.0\n10.0\n55000.0\n0.0\n5.91\n4.0\n29.7\n4.0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n1\n20000.0\n2.0\n14.0\n10.0\n63000.0\n0.0\n10.78\n10.0\n56.2\n4.0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n2\n10400.0\n2.0\n51.0\n3.0\n104433.0\n0.0\n25.37\n1.0\n64.5\n7.0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n3\n20000.0\n1.0\n11.0\n10.0\n85000.0\n0.0\n17.61\n8.0\n5.7\n3.0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n4\n10000.0\n1.0\n2.0\n6.0\n85000.0\n0.0\n13.07\n1.0\n34.5\n13.0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n848449\n22400.0\n2.0\n22.0\n10.0\n119000.0\n1.0\n23.22\n1.0\n51.5\n12.0\n...\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n\n\n848450\n19400.0\n2.0\n24.0\n0.0\n78000.0\n0.0\n13.02\n2.0\n63.8\n9.0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n848451\n11200.0\n2.0\n22.0\n5.0\n86000.0\n1.0\n4.80\n10.0\n54.7\n7.0\n...\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n\n\n848452\n23800.0\n2.0\n24.0\n10.0\n119000.0\n0.0\n32.73\n0.0\n89.5\n8.0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n848453\n24000.0\n2.0\n24.0\n6.0\n110000.0\n1.0\n18.30\n9.0\n68.1\n8.0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n848454 rows × 66 columns\n\n\n\nRun and comment the following instructions (fix them if needed). What kind of modeling exercise is performed?\n\nloan['loan_status'].value_counts()\n\nloan_status\n0.0    672377\n1.0    176077\nName: count, dtype: int64\n\n\nThe objective here is to build a model to predict which loans will default (loan_status=1). It is a classification exercise. Since the number of regressors is fairly large it is natural to look for a machine learning approcah.\n\n#  create a list of all regressors (excluding loan_status)\nfeatures = loan.columns.to_list()\nfeatures.remove('loan_status')\nfeatures\n\n['loan_amnt',\n 'term',\n 'sub_grade',\n 'emp_length',\n 'annual_inc',\n 'dti',\n 'mths_since_recent_inq',\n 'revol_util',\n 'num_op_rev_tl',\n 'home_ownership__ANY',\n 'home_ownership__MORTGAGE',\n 'home_ownership__NONE',\n 'home_ownership__OTHER',\n 'home_ownership__OWN',\n 'home_ownership__RENT',\n 'addr_state__AK',\n 'addr_state__AL',\n 'addr_state__AR',\n 'addr_state__AZ',\n 'addr_state__CA',\n 'addr_state__CO',\n 'addr_state__CT',\n 'addr_state__DC',\n 'addr_state__DE',\n 'addr_state__FL',\n 'addr_state__GA',\n 'addr_state__HI',\n 'addr_state__ID',\n 'addr_state__IL',\n 'addr_state__IN',\n 'addr_state__KS',\n 'addr_state__KY',\n 'addr_state__LA',\n 'addr_state__MA',\n 'addr_state__MD',\n 'addr_state__ME',\n 'addr_state__MI',\n 'addr_state__MN',\n 'addr_state__MO',\n 'addr_state__MS',\n 'addr_state__MT',\n 'addr_state__NC',\n 'addr_state__ND',\n 'addr_state__NE',\n 'addr_state__NH',\n 'addr_state__NJ',\n 'addr_state__NM',\n 'addr_state__NV',\n 'addr_state__NY',\n 'addr_state__OH',\n 'addr_state__OK',\n 'addr_state__OR',\n 'addr_state__PA',\n 'addr_state__RI',\n 'addr_state__SC',\n 'addr_state__SD',\n 'addr_state__TN',\n 'addr_state__TX',\n 'addr_state__UT',\n 'addr_state__VA',\n 'addr_state__VT',\n 'addr_state__WA',\n 'addr_state__WI',\n 'addr_state__WV',\n 'addr_state__WY']\n\n\n\n# split dataset into training and test set\n# 25% looks a bit big given the abundance of data\n# use a random state to make results replicable\ndf_train, df_test = train_test_split(loan, test_size=0.25, random_state=42)\n\n\n# we choose a classification model (logistic regression)\nclf = LogisticRegression()\n\nclf.fit(df_train[features], df_train['loan_status'])\n\n/home/pablo/.local/opt/micromamba/envs/escp/lib/python3.12/site-packages/sklearn/linear_model/_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n\n\nLogisticRegression()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.  LogisticRegression?Documentation for LogisticRegressioniFittedLogisticRegression() \n\n\n\n# make prediction on the test set\ny_pred = clf.predict(df_test[features])\n\n# compute the score of the fitted model on the test set\nprint(\n    'Accuracy of logistic regression classifier on test set: {:.2f}'.format(\n        clf.score(df_test[features], df_test['loan_status'])\n    )\n)\n\nAccuracy of logistic regression classifier on test set: 0.79\n\n\n\n# compute the confusion matrix\ncal = sklearn.metrics.confusion_matrix(df_test['loan_status'], y_pred, labels=clf.classes_)\nprint(cal)\n\n[[165146   2918]\n [ 41439   2611]]\n\n\n\n#\nfrom sklearn.metrics import ConfusionMatrixDisplay\ndisp = ConfusionMatrixDisplay(confusion_matrix=cal, display_labels=clf.classes_)\ndisp.plot()\n\n\n\n\n\n\n\n\nFor the confusion matrix that was just computed compute accuracy, precision, recall and f1 score (lookup the definitions if needed).\n\n# compute the different statistics (by hand or programmatically)\n\nrecall = cal[1,1] / (cal[1,0] + cal[1,1])\nrecall\n\n0.05927355278093076\n\n\nComment on the model validity.\nThe model fails to detect 95% of non-performing loans. It is very inefficient."
  },
  {
    "objectID": "tutorials/session_8/sentiment_analysis.html#lending-club-dataset",
    "href": "tutorials/session_8/sentiment_analysis.html#lending-club-dataset",
    "title": "Confusion Matrix and Sentiment Analysis",
    "section": "",
    "text": "The following code processes the Lending Club Dataset from kaggle.\nRun and comment the following instructions (fix them if needed). Inspect he dataframe?\n\n# importing libraries\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nimport sklearn\nimport numpy as np\n\n/tmp/ipykernel_7230/3363083914.py:2: DeprecationWarning: \nPyarrow will become a required dependency of pandas in the next major release of pandas (pandas 3.0),\n(to allow more performant data types, such as the Arrow string type, and better interoperability with other libraries)\nbut was not found to be installed on your system.\nIf this would cause problems for you,\nplease provide us feedback at https://github.com/pandas-dev/pandas/issues/54466\n        \n  import pandas as pd\n\n\n\n# import dataset\nloan = pd.read_csv('loans.csv', low_memory=True)\n\n\nloan\n\n\n\n\n\n\n\n\nloan_amnt\nterm\nsub_grade\nemp_length\nannual_inc\nloan_status\ndti\nmths_since_recent_inq\nrevol_util\nnum_op_rev_tl\n...\naddr_state__SD\naddr_state__TN\naddr_state__TX\naddr_state__UT\naddr_state__VA\naddr_state__VT\naddr_state__WA\naddr_state__WI\naddr_state__WV\naddr_state__WY\n\n\n\n\n0\n3600.0\n1.0\n24.0\n10.0\n55000.0\n0.0\n5.91\n4.0\n29.7\n4.0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n1\n20000.0\n2.0\n14.0\n10.0\n63000.0\n0.0\n10.78\n10.0\n56.2\n4.0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n2\n10400.0\n2.0\n51.0\n3.0\n104433.0\n0.0\n25.37\n1.0\n64.5\n7.0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n3\n20000.0\n1.0\n11.0\n10.0\n85000.0\n0.0\n17.61\n8.0\n5.7\n3.0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n4\n10000.0\n1.0\n2.0\n6.0\n85000.0\n0.0\n13.07\n1.0\n34.5\n13.0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n848449\n22400.0\n2.0\n22.0\n10.0\n119000.0\n1.0\n23.22\n1.0\n51.5\n12.0\n...\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n\n\n848450\n19400.0\n2.0\n24.0\n0.0\n78000.0\n0.0\n13.02\n2.0\n63.8\n9.0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n848451\n11200.0\n2.0\n22.0\n5.0\n86000.0\n1.0\n4.80\n10.0\n54.7\n7.0\n...\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n\n\n848452\n23800.0\n2.0\n24.0\n10.0\n119000.0\n0.0\n32.73\n0.0\n89.5\n8.0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n848453\n24000.0\n2.0\n24.0\n6.0\n110000.0\n1.0\n18.30\n9.0\n68.1\n8.0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n848454 rows × 66 columns\n\n\n\nRun and comment the following instructions (fix them if needed). What kind of modeling exercise is performed?\n\nloan['loan_status'].value_counts()\n\nloan_status\n0.0    672377\n1.0    176077\nName: count, dtype: int64\n\n\nThe objective here is to build a model to predict which loans will default (loan_status=1). It is a classification exercise. Since the number of regressors is fairly large it is natural to look for a machine learning approcah.\n\n#  create a list of all regressors (excluding loan_status)\nfeatures = loan.columns.to_list()\nfeatures.remove('loan_status')\nfeatures\n\n['loan_amnt',\n 'term',\n 'sub_grade',\n 'emp_length',\n 'annual_inc',\n 'dti',\n 'mths_since_recent_inq',\n 'revol_util',\n 'num_op_rev_tl',\n 'home_ownership__ANY',\n 'home_ownership__MORTGAGE',\n 'home_ownership__NONE',\n 'home_ownership__OTHER',\n 'home_ownership__OWN',\n 'home_ownership__RENT',\n 'addr_state__AK',\n 'addr_state__AL',\n 'addr_state__AR',\n 'addr_state__AZ',\n 'addr_state__CA',\n 'addr_state__CO',\n 'addr_state__CT',\n 'addr_state__DC',\n 'addr_state__DE',\n 'addr_state__FL',\n 'addr_state__GA',\n 'addr_state__HI',\n 'addr_state__ID',\n 'addr_state__IL',\n 'addr_state__IN',\n 'addr_state__KS',\n 'addr_state__KY',\n 'addr_state__LA',\n 'addr_state__MA',\n 'addr_state__MD',\n 'addr_state__ME',\n 'addr_state__MI',\n 'addr_state__MN',\n 'addr_state__MO',\n 'addr_state__MS',\n 'addr_state__MT',\n 'addr_state__NC',\n 'addr_state__ND',\n 'addr_state__NE',\n 'addr_state__NH',\n 'addr_state__NJ',\n 'addr_state__NM',\n 'addr_state__NV',\n 'addr_state__NY',\n 'addr_state__OH',\n 'addr_state__OK',\n 'addr_state__OR',\n 'addr_state__PA',\n 'addr_state__RI',\n 'addr_state__SC',\n 'addr_state__SD',\n 'addr_state__TN',\n 'addr_state__TX',\n 'addr_state__UT',\n 'addr_state__VA',\n 'addr_state__VT',\n 'addr_state__WA',\n 'addr_state__WI',\n 'addr_state__WV',\n 'addr_state__WY']\n\n\n\n# split dataset into training and test set\n# 25% looks a bit big given the abundance of data\n# use a random state to make results replicable\ndf_train, df_test = train_test_split(loan, test_size=0.25, random_state=42)\n\n\n# we choose a classification model (logistic regression)\nclf = LogisticRegression()\n\nclf.fit(df_train[features], df_train['loan_status'])\n\n/home/pablo/.local/opt/micromamba/envs/escp/lib/python3.12/site-packages/sklearn/linear_model/_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n\n\nLogisticRegression()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.  LogisticRegression?Documentation for LogisticRegressioniFittedLogisticRegression() \n\n\n\n# make prediction on the test set\ny_pred = clf.predict(df_test[features])\n\n# compute the score of the fitted model on the test set\nprint(\n    'Accuracy of logistic regression classifier on test set: {:.2f}'.format(\n        clf.score(df_test[features], df_test['loan_status'])\n    )\n)\n\nAccuracy of logistic regression classifier on test set: 0.79\n\n\n\n# compute the confusion matrix\ncal = sklearn.metrics.confusion_matrix(df_test['loan_status'], y_pred, labels=clf.classes_)\nprint(cal)\n\n[[165146   2918]\n [ 41439   2611]]\n\n\n\n#\nfrom sklearn.metrics import ConfusionMatrixDisplay\ndisp = ConfusionMatrixDisplay(confusion_matrix=cal, display_labels=clf.classes_)\ndisp.plot()\n\n\n\n\n\n\n\n\nFor the confusion matrix that was just computed compute accuracy, precision, recall and f1 score (lookup the definitions if needed).\n\n# compute the different statistics (by hand or programmatically)\n\nrecall = cal[1,1] / (cal[1,0] + cal[1,1])\nrecall\n\n0.05927355278093076\n\n\nComment on the model validity.\nThe model fails to detect 95% of non-performing loans. It is very inefficient."
  },
  {
    "objectID": "tutorials/session_8/sentiment_analysis.html#the-dataset",
    "href": "tutorials/session_8/sentiment_analysis.html#the-dataset",
    "title": "Confusion Matrix and Sentiment Analysis",
    "section": "The Dataset",
    "text": "The Dataset\nWe use the News Sentiment Dataset from Kaggle.\n\nImport Dataset as a pandas dataframe. Remove rows where selected_text is not available.\n\n\n# the following command checks the current working directory \n# it should end with session_8\n%pwd\n\n'/home/pablo/Teaching/escp/dbe/tutorials/session_8'\n\n\n\nimport pandas\ndf = pandas.read_csv(\"Tweets.csv\")\n\n\ndf.head(5)\n\n\n\n\n\n\n\n\ntextID\ntext\nselected_text\nsentiment\n\n\n\n\n0\ncb774db0d1\nI`d have responded, if I were going\nI`d have responded, if I were going\nneutral\n\n\n1\n549e992a42\nSooo SAD I will 🦈 miss you here in San Diego!!!\nSooo SAD\nnegative\n\n\n2\n088c60f138\nmy boss is bullying me...\nbullying me\nnegative\n\n\n3\n9642c003ef\nwhat interview! leave me alone\nleave me alone\nnegative\n\n\n4\n358bd9e861\nSons of ****, why couldn`t they put them on t...\nSons of ****,\nnegative\n\n\n\n\n\n\n\n\nDescribe Dataset (text and graphs). What is the distribution of the various sentiment values?\n\n\ndf['sentiment'].value_counts() / len(df['sentiment'])\n\nsentiment\nneutral     0.404570\npositive    0.312288\nnegative    0.283141\nName: count, dtype: float64\n\n\nThe sentiments are rather balanced (30% positive, 30% negative)\n\nimport seaborn as sns\n\n\nsns.histplot(df['sentiment'])\n\n\n\n\n\n\n\n\n\nCount the number of tweets mentioning trump.\n\n\n# count number of non-available values\nsum( df['selected_text'].isna() )\n\n1\n\n\n\n# remove na (~ is negation)\ndf = df[~ df['selected_text'].isna()]\n\n\nsum( df['selected_text'].str.count('trump') )\n\n2\n\n\n\nSplit Dataset into training, and test set.\n\n\nfrom sklearn.model_selection import train_test_split\n\ndf_train, df_test = train_test_split(df, random_state=123)\n\n\ndf_train\n\n\n\n\n\n\n\n\ntextID\ntext\nselected_text\nsentiment\n\n\n\n\n24126\n52a34843de\nZeb has napped for 6 hours already today, and ...\nhe must be growing fast\npositive\n\n\n8513\nf1049a3c9c\ngood stuff, cant wait for the results\ngood stuff,\npositive\n\n\n10881\n2cc253edc6\nI have the best bestfriend in the whole world...\nbest\npositive\n\n\n10826\ne1a023ed94\nnot good you`re not comin close to where i lo...\nnot good you`re not comin close to where i lov...\nneutral\n\n\n7852\nd442dd8d79\nMaybe until Wednesday?\nMaybe until Wednesday?\nneutral\n\n\n...\n...\n...\n...\n...\n\n\n15378\ncfbec13b5d\n_dam haha, that would be cool. brianna and i s...\nhaha, that would be cool.\npositive\n\n\n21603\ndc582b9f85\nYAY!! that`s so cool aww that woulda been sw...\n! I`m just glad\npositive\n\n\n17731\n1d36d815e9\ni knoww she is da best!\na best\npositive\n\n\n15726\na0d6b5cd94\n**** the day flies when u got 3647 things to d...\n**** the day flies when u got 3647 things to d...\nnegative\n\n\n19967\n2277651477\n_cheryl Lucky, now I want to teleport\n_cheryl Lucky, now I want to teleport\nneutral\n\n\n\n\n20610 rows × 4 columns"
  },
  {
    "objectID": "tutorials/session_8/sentiment_analysis.html#classifying-tweets",
    "href": "tutorials/session_8/sentiment_analysis.html#classifying-tweets",
    "title": "Confusion Matrix and Sentiment Analysis",
    "section": "Classifying tweets",
    "text": "Classifying tweets\nThe goal is now to to build a tweet classifier to predict a tweet sentiment, without any human input.\n\nExtract features from the training dataset. What do you do with non-words / punctuation?\n\n(hint: check the CountVectorizer function and the tutorial on sklearn webpage.)\n\nfrom sklearn.feature_extraction.text import CountVectorizer\ncount_vect = CountVectorizer()\nX_train = count_vect.fit_transform(df_train['selected_text'])\n\n\nX_train\n\n&lt;20610x14807 sparse matrix of type '&lt;class 'numpy.int64'&gt;'\n    with 129423 stored elements in Compressed Sparse Row format&gt;\n\n\n\nConvert occurrencies to frequencies. Make another version with tf-idf.\n\n\n# compute simple frequencies\n# from sklearn.feature_extraction.text import TfidfTransformer\n# tf_transformer = TfidfTransformer(use_idf=False).fit(X_train)\n# X_train_tf = tf_transformer.transform(X_train)\n# X_train_tf.shape\n\n\n# weight counts by inverse frequencies\nfrom sklearn.feature_extraction.text import TfidfTransformer\ntf_transformer = TfidfTransformer(use_idf=True).fit(X_train)\nX_train_tf = tf_transformer.transform(X_train)\nX_train_tf.shape\n\n(20610, 14807)\n\n\n\nChoose a classifier to predict the sentiment on the validation set. Compute the confusion matrix.\n\n\n# note that we are using `transform`, not `fit_transform` as we are not recomputing the f\nX_test = count_vect.transform(df_test['selected_text'])\nX_itf_test = tf_transformer.transform(X_test)\n\n\nfrom sklearn.naive_bayes import MultinomialNB\nclf = MultinomialNB().fit(X_train_tf,df_train['sentiment'])\n\n\nprediction = clf.predict(X_itf_test)\n\n\n# compare prediction to actual sentiment\n\n\nfrom sklearn.metrics import confusion_matrix\n\nmat = confusion_matrix(prediction, df_test['sentiment'])\nmat\n\narray([[1112,   50,   37],\n       [ 752, 2687,  533],\n       [  71,   48, 1580]])\n\n\n\naccuracy = (mat[0,0] + mat[1,1] +mat[2,2]) / mat.sum()\naccuracy\n\n0.7829694323144105"
  },
  {
    "objectID": "tutorials/session_3/Phillips_curve_correction.html",
    "href": "tutorials/session_3/Phillips_curve_correction.html",
    "title": "Visualizing the Philips Curve",
    "section": "",
    "text": "The Philips Curve was initially discovered as a statistical relationship between unemployment and inflation. The original version used historical US data.\nOur goal here is to visually inspect the Philips curve using recent data, for several countries.\nIn the process we will learn to: - import dataframes, inspect them, merge them, clean the resulting data - use matplotlib to create graphs - bonus: experiment with other plotting libraries"
  },
  {
    "objectID": "tutorials/session_3/Phillips_curve_correction.html#importing-the-data",
    "href": "tutorials/session_3/Phillips_curve_correction.html#importing-the-data",
    "title": "Visualizing the Philips Curve",
    "section": "Importing the Data",
    "text": "Importing the Data\nWe start by loading library dbnomics. It is installed on the Nuvolos servers.\n\nimport dbnomics\n\nThe following code imports data for from dbnomics for a few countries.\n\ntable_1 = dbnomics.fetch_series([\n    \"OECD/DP_LIVE/FRA.CPI.TOT.AGRWTH.Q\",\n    \"OECD/DP_LIVE/GBR.CPI.TOT.AGRWTH.Q\",\n    \"OECD/DP_LIVE/USA.CPI.TOT.AGRWTH.Q\",\n    \"OECD/DP_LIVE/DEU.CPI.TOT.AGRWTH.Q\"\n])\n\n\ntable_2 = dbnomics.fetch_series([\n    \"OECD/MEI/DEU.LRUNTTTT.STSA.Q\",\n    \"OECD/MEI/FRA.LRUNTTTT.STSA.Q\",\n    \"OECD/MEI/USA.LRUNTTTT.STSA.Q\",\n    \"OECD/MEI/GBR.LRUNTTTT.STSA.Q\"\n])\n\nDescribe concisely the data that has been imported (periodicity, type of measure, …). You can either check dbnomics website or look at the databases.\n\ntable_1:\n\ngrowth of CPI index. The total of all goods. Quarterly data for France, UK, USA, Germany\n\ntable_2\n\nunemployment rate coming from LO\n\n\nShow the first rows of each database. Make a list of all columns.\n\n# first table\ntable_1.head(3)\n\n\n\n\n\n\n\n\n@frequency\nprovider_code\ndataset_code\ndataset_name\nseries_code\nseries_name\noriginal_period\nperiod\noriginal_value\nvalue\nLOCATION\nINDICATOR\nSUBJECT\nMEASURE\nFREQUENCY\nCountry\nIndicator\nSubject\nMeasure\nFrequency\n\n\n\n\n0\nquarterly\nOECD\nDP_LIVE\nOECD Data Live dataset\nFRA.CPI.TOT.AGRWTH.Q\nFrance – Inflation (CPI) – Total – Annual grow...\n1956-Q1\n1956-01-01\n1.746324\n1.746324\nFRA\nCPI\nTOT\nAGRWTH\nQ\nFrance\nInflation (CPI)\nTotal\nAnnual growth rate (%)\nQuarterly\n\n\n1\nquarterly\nOECD\nDP_LIVE\nOECD Data Live dataset\nFRA.CPI.TOT.AGRWTH.Q\nFrance – Inflation (CPI) – Total – Annual grow...\n1956-Q2\n1956-04-01\n1.838658\n1.838658\nFRA\nCPI\nTOT\nAGRWTH\nQ\nFrance\nInflation (CPI)\nTotal\nAnnual growth rate (%)\nQuarterly\n\n\n2\nquarterly\nOECD\nDP_LIVE\nOECD Data Live dataset\nFRA.CPI.TOT.AGRWTH.Q\nFrance – Inflation (CPI) – Total – Annual grow...\n1956-Q3\n1956-07-01\n2.670692\n2.670692\nFRA\nCPI\nTOT\nAGRWTH\nQ\nFrance\nInflation (CPI)\nTotal\nAnnual growth rate (%)\nQuarterly\n\n\n\n\n\n\n\n\n# to get the list of columns:\ntable_1.columns\n\nIndex(['@frequency', 'provider_code', 'dataset_code', 'dataset_name',\n       'series_code', 'series_name', 'original_period', 'period',\n       'original_value', 'value', 'LOCATION', 'INDICATOR', 'SUBJECT',\n       'MEASURE', 'FREQUENCY', 'Country', 'Indicator', 'Subject', 'Measure',\n       'Frequency'],\n      dtype='object')\n\n\n\n# second table\ntable_2.head(3)\n\n\n\n\n\n\n\n\n@frequency\nprovider_code\ndataset_code\ndataset_name\nseries_code\nseries_name\noriginal_period\nperiod\noriginal_value\nvalue\nLOCATION\nSUBJECT\nMEASURE\nFREQUENCY\nCountry\nSubject\nMeasure\nFrequency\n\n\n\n\n0\nquarterly\nOECD\nMEI\nMain Economic Indicators Publication\nDEU.LRUNTTTT.STSA.Q\nGermany – Labour Force Survey - quarterly rate...\n1962-Q1\n1962-01-01\n0.442249\n0.442249\nDEU\nLRUNTTTT\nSTSA\nQ\nGermany\nLabour Force Survey - quarterly rates &gt; Unempl...\nLevel, rate or national currency, s.a.\nQuarterly\n\n\n1\nquarterly\nOECD\nMEI\nMain Economic Indicators Publication\nDEU.LRUNTTTT.STSA.Q\nGermany – Labour Force Survey - quarterly rate...\n1962-Q2\n1962-04-01\n0.444882\n0.444882\nDEU\nLRUNTTTT\nSTSA\nQ\nGermany\nLabour Force Survey - quarterly rates &gt; Unempl...\nLevel, rate or national currency, s.a.\nQuarterly\n\n\n2\nquarterly\nOECD\nMEI\nMain Economic Indicators Publication\nDEU.LRUNTTTT.STSA.Q\nGermany – Labour Force Survey - quarterly rate...\n1962-Q3\n1962-07-01\n0.450347\n0.450347\nDEU\nLRUNTTTT\nSTSA\nQ\nGermany\nLabour Force Survey - quarterly rates &gt; Unempl...\nLevel, rate or national currency, s.a.\nQuarterly\n\n\n\n\n\n\n\n\n# to get the list of columns:\ntable_2.columns\n\nIndex(['@frequency', 'provider_code', 'dataset_code', 'dataset_name',\n       'series_code', 'series_name', 'original_period', 'period',\n       'original_value', 'value', 'LOCATION', 'SUBJECT', 'MEASURE',\n       'FREQUENCY', 'Country', 'Subject', 'Measure', 'Frequency'],\n      dtype='object')\n\n\nCompute averages and standard deviations for unemployment and inflation, per country.\n\n# reminder: to get averages for a whole table\n# we extract the relevant column with table_1['value']\nprint(\"Mean Inflation: \", table_1['value'].mean())\nprint(\"Mean Unemployment: \", table_2['value'].mean())\n\nMean Inflation:  3.8910539919538323\nMean Unemployment:  6.098550447670419\n\n\n\n# reminder: to get averages for a whole s\nprint(\"Std. Deviation Inflation: \", table_1['value'].std())\nprint(\"Std. Deviation Unemployment: \", table_2['value'].std())\n\nStd. Deviation Inflation:  3.5916466190299996\nStd. Deviation Unemployment:  2.550612600349251\n\n\nThere are two strategies to compute statistics per group.\n\n# option 1: by using pandas boolean selection \n\nThe first approach consists in keeping only the observations for a given country:\n\ntable_1['Country'].unique()\n\narray(['France', 'United Kingdom', 'United States', 'Germany'],\n      dtype=object)\n\n\n\ncountry = \"France\"\nis_france = (table_1['Country']==country)\ntable_1_france = table_1[is_france]\ntable_1_france['Country'].value_counts() # check \n\nCountry\nFrance    271\nName: count, dtype: int64\n\n\n\n# the preceding code can be replicated more concisely:\ntable_1_france = table_1[table_1['Country']==\"France\"]\n\n\n# or using a database query:\ntable_1_france = table_1.query(\"Country=='France'\")\n\n\n# we can now compute the statistics:\nprint(\"Mean Inflation: \", table_1_france['value'].mean())\nprint(\"Std. Deviation Inflation: \", table_1_france['value'].std())\n\nMean Inflation:  4.218004559985239\nStd. Deviation Inflation:  3.85319032016491\n\n\n\n# Here is a code to do it for all countries:\n\nfor country in table_1['Country'].unique():\n    print(f'Statistics for: {country}')\n\n    # inflation\n    table_1_country = table_1[table_1['Country']==country]\n    print(\"* Mean Inflation: \", table_1_country['value'].mean())\n    print(\"* Std. Deviation Inflation: \", table_1_country['value'].std())\n\n    # unemployment\n    table_2_country = table_2[table_2['Country']==country]\n    print(\"* Mean Inflation: \", table_2_country['value'].mean())\n    print(\"* Std. Deviation Inflation: \", table_2_country['value'].std())\n    print() # add empty line\n\nStatistics for: France\n* Mean Inflation:  4.218004559985239\n* Std. Deviation Inflation:  3.85319032016491\n* Mean Inflation:  8.680560014887725\n* Std. Deviation Inflation:  0.9840354763739427\n\nStatistics for: United Kingdom\n* Mean Inflation:  5.003996036162361\n* Std. Deviation Inflation:  4.768592756710978\n* Mean Inflation:  6.70511374527728\n* Std. Deviation Inflation:  2.388539226072565\n\nStatistics for: United States\n* Mean Inflation:  3.678550917822878\n* Std. Deviation Inflation:  2.7795046092217035\n* Mean Inflation:  5.851086956521739\n* Std. Deviation Inflation:  1.667886470619543\n\nStatistics for: Germany\n* Mean Inflation:  2.659118566666667\n* Std. Deviation Inflation:  1.8661314171203747\n* Mean Inflation:  4.989272203471847\n* Std. Deviation Inflation:  3.0671989448416817\n\n\n\n\n# option 2: by using groupby\n\nMany statistics can be computed by group.\n\nprint(\"Mean Inflation\")\ntable_1.groupby('Country')['value'].agg('mean')\n\nMean Inflation\n\n\nCountry\nFrance            4.218005\nGermany           2.659119\nUnited Kingdom    5.003996\nUnited States     3.678551\nName: value, dtype: float64\n\n\n\ntable_1.columns\n\nIndex(['@frequency', 'provider_code', 'dataset_code', 'dataset_name',\n       'series_code', 'series_name', 'original_period', 'period',\n       'original_value', 'value', 'LOCATION', 'INDICATOR', 'SUBJECT',\n       'MEASURE', 'FREQUENCY', 'Country', 'Indicator', 'Subject', 'Measure',\n       'Frequency'],\n      dtype='object')\n\n\n\nprint(\"Std Inflation\")\ntable_1.groupby('Country')['value'].agg('std')\n\nStd Inflation\n\n\nCountry\nFrance            3.853190\nGermany           1.866131\nUnited Kingdom    4.768593\nUnited States     2.779505\nName: value, dtype: float64\n\n\n\n# This can be done for several stats at the same time:\n\nprint(\"Statistics for Inflation\")\ntable_1.groupby('Country')['value'].agg(['mean','std'])\n\nStatistics for Inflation\n\n\n\n\n\n\n\n\n\nmean\nstd\n\n\nCountry\n\n\n\n\n\n\nFrance\n4.218005\n3.853190\n\n\nGermany\n2.659119\n1.866131\n\n\nUnited Kingdom\n5.003996\n4.768593\n\n\nUnited States\n3.678551\n2.779505\n\n\n\n\n\n\n\n\n# Same stats for Unemployment.\n\nprint(\"Statistics for Unemployment\")\ntable_2.groupby('Country')['value'].agg(['mean','std'])\n\nStatistics for Unemployment\n\n\n\n\n\n\n\n\n\nmean\nstd\n\n\nCountry\n\n\n\n\n\n\nFrance\n8.680560\n0.984035\n\n\nGermany\n4.989272\n3.067199\n\n\nUnited Kingdom\n6.705114\n2.388539\n\n\nUnited States\n5.851087\n1.667886\n\n\n\n\n\n\n\nComment: we observe differences in the level of structural unemployment. Volatility in Germany is rather impressive.\nThe following command merges the two databases together. Explain the role of argument on. What happened to the column names?\n\ntable = table_1.merge(table_2, on=[\"period\", 'Country']) \n\nThe on argument indicate, which columns identify a unique observation. Here the date and the country denote the same observation in both countries. However the column value of the first and the second database have a different meaning (resp unemployment and inflation). To distinguish them, they receive a suffix (_x and _y respectively).\nWe rename the new names for the sake of clarity and normalize everything with lower cases.\n\ntable = table.rename(columns={\n    'period': 'date',         # because it sounds more natural\n    'Country': 'country',\n    'value_x': 'inflation',\n    'value_y': 'unemployment'\n})\n\nOn the merged table, compute at once all the statistics computed before (use groupby and agg).\n\ntable[['country','inflation', 'unemployment']].groupby('country').agg( [ 'mean', 'std'])\n\n\n\n\n\n\n\n\ninflation\nunemployment\n\n\n\nmean\nstd\nmean\nstd\n\n\ncountry\n\n\n\n\n\n\n\n\nFrance\n1.664349\n1.381470\n8.680560\n0.984035\n\n\nGermany\n2.730136\n1.918303\n4.989272\n3.067199\n\n\nUnited Kingdom\n5.404707\n5.253143\n6.705114\n2.388539\n\n\nUnited States\n3.678551\n2.779505\n5.880812\n1.668049\n\n\n\n\n\n\n\nBefore we process further, we should tidy the dataframe by keeping only what we need. - Keep only the columns date, country, inflation and unemployment - Drop all na values - Make a copy of the result\n\ndf = table[['date', 'country', 'inflation', 'unemployment']].dropna()\n\n\ndf = df.copy()\n# note: the copy() function is here to avoid keeping references to the original database\n\n\nprint(df.shape)\n\n(811, 4)\n\n\nWhat is the maximum availability interval for each country? How would you proceed to keep only those dates where all datas are available? In the following we keep the f\n\n# optional: here is a quick way to visualize availability dates\nimport altair as alt\nalt.Chart(df).mark_point().encode(x='date', y='country', color='country')\n\n/opt/conda/lib/python3.10/site-packages/altair/utils/core.py:395: FutureWarning: the convert_dtype parameter is deprecated and will be removed in a future version.  Do ``ser.astype(object).apply()`` instead if you want ``convert_dtype=False``.\n  col = df[col_name].apply(to_list_if_array, convert_dtype=False)\n\n\n\n\n\n\n\n\n\ncdf = df.dropna() # remove all lines with non available values\n\n\ncdf.shape # compare with the cell above: there was no line with na.\n\n(811, 4)\n\n\n\n# the following computes all dates where data is available in all 4 countries\nall_available = cdf.groupby(\"date\")['inflation'].count() == 4\nall_available\n\ndate\n1956-01-01    False\n1956-04-01    False\n1956-07-01    False\n1956-10-01    False\n1957-01-01    False\n              ...  \n2022-07-01     True\n2022-10-01     True\n2023-01-01     True\n2023-04-01     True\n2023-07-01     True\nName: inflation, Length: 271, dtype: bool\n\n\n\n# keep only dates\ncommon_dates = all_available[all_available].index\ncommon_dates\n\nDatetimeIndex(['2003-01-01', '2003-04-01', '2003-07-01', '2003-10-01',\n               '2004-01-01', '2004-04-01', '2004-07-01', '2004-10-01',\n               '2005-01-01', '2005-04-01', '2005-07-01', '2005-10-01',\n               '2006-01-01', '2006-04-01', '2006-07-01', '2006-10-01',\n               '2007-01-01', '2007-04-01', '2007-07-01', '2007-10-01',\n               '2008-01-01', '2008-04-01', '2008-07-01', '2008-10-01',\n               '2009-01-01', '2009-04-01', '2009-07-01', '2009-10-01',\n               '2010-01-01', '2010-04-01', '2010-07-01', '2010-10-01',\n               '2011-01-01', '2011-04-01', '2011-07-01', '2011-10-01',\n               '2012-01-01', '2012-04-01', '2012-07-01', '2012-10-01',\n               '2013-01-01', '2013-04-01', '2013-07-01', '2013-10-01',\n               '2014-01-01', '2014-04-01', '2014-07-01', '2014-10-01',\n               '2015-01-01', '2015-04-01', '2015-07-01', '2015-10-01',\n               '2016-01-01', '2016-04-01', '2016-07-01', '2016-10-01',\n               '2017-01-01', '2017-04-01', '2017-07-01', '2017-10-01',\n               '2018-01-01', '2018-04-01', '2018-07-01', '2018-10-01',\n               '2019-01-01', '2019-04-01', '2019-07-01', '2019-10-01',\n               '2020-01-01', '2020-04-01', '2020-07-01', '2020-10-01',\n               '2021-01-01', '2021-04-01', '2021-07-01', '2021-10-01',\n               '2022-01-01', '2022-04-01', '2022-07-01', '2022-10-01',\n               '2023-01-01', '2023-04-01', '2023-07-01'],\n              dtype='datetime64[ns]', name='date', freq=None)\n\n\n\n# This can be done for several stats at the same time:\ncdf[ cdf['date'].isin(common_dates) ] \n\n\n\n\n\n\n\n\ndate\ncountry\ninflation\nunemployment\n\n\n\n\n0\n2003-01-01\nFrance\n2.366263\n7.922234\n\n\n1\n2003-04-01\nFrance\n1.912854\n8.089598\n\n\n2\n2003-07-01\nFrance\n1.932270\n8.036090\n\n\n3\n2003-10-01\nFrance\n2.184437\n8.349410\n\n\n4\n2004-01-01\nFrance\n1.800087\n8.518631\n\n\n...\n...\n...\n...\n...\n\n\n807\n2022-07-01\nGermany\n7.402639\n3.181081\n\n\n808\n2022-10-01\nGermany\n8.580543\n3.059473\n\n\n809\n2023-01-01\nGermany\n8.236768\n2.961556\n\n\n810\n2023-04-01\nGermany\n6.546894\n2.963810\n\n\n811\n2023-07-01\nGermany\n5.603836\n2.970260\n\n\n\n\n332 rows × 4 columns\n\n\n\nOur DataFrame is now ready for further analysis !\n\n# note: \n# the following code also works when dataframe is not cylindric\n# df = cdf # uncomment if you want to work on cylindric data"
  },
  {
    "objectID": "tutorials/session_3/Phillips_curve_correction.html#plotting-using-matplotlib",
    "href": "tutorials/session_3/Phillips_curve_correction.html#plotting-using-matplotlib",
    "title": "Visualizing the Philips Curve",
    "section": "Plotting using matplotlib",
    "text": "Plotting using matplotlib\nOur goal now consists in plotting inflation against unemployment to see whether a pattern emerges. We will first work on France.\n\nfrom matplotlib import pyplot as plt\n\nCreate a database df_fr which contains only the data for France.\n\ndf_fr = df[ df['country'] == 'France' ].copy() # again, we copy the result, because we plan to modify it\n\nThe following command create a line plot for inflation against unemployment. Can you transform it into a scatterplot ?\n\nplt.plot(df_fr['unemployment'], df_fr['inflation'], 'o')\n\n\n\n\n\n\n\n\nExpand the above command to make the plot nicer (label, title, grid, …)\n\nplt.plot(df_fr['unemployment'], df_fr['inflation'],'.')\nplt.grid()\nplt.xlabel(\"Unemployment (%)\")\nplt.ylabel(\"Inflation (%)\")\nplt.title(\"Phillips Curve\")\n\nText(0.5, 1.0, 'Phillips Curve')"
  },
  {
    "objectID": "tutorials/session_3/Phillips_curve_correction.html#visualizing-the-regression",
    "href": "tutorials/session_3/Phillips_curve_correction.html#visualizing-the-regression",
    "title": "Visualizing the Philips Curve",
    "section": "Visualizing the regression",
    "text": "Visualizing the regression\nThe following piece of code regresses inflation on unemployment.\n\nfrom statsmodels.formula import api as sm\nmodel = sm.ols(formula='inflation ~ unemployment', data=df_fr)\nresult = model.fit()\n\nWe can use the resulting model to “predict” inflation from unemployment.\n\nresult.predict(df_fr['unemployment'])\n\n0     2.366810\n1     2.211777\n2     2.261342\n3     1.971104\n4     1.814349\n        ...   \n78    3.064908\n79    3.055976\n80    3.141252\n81    2.926298\n82    2.888369\nLength: 83, dtype: float64\n\n\nStore the result in df_fr as reg_unemployment\n\ndf_fr['pred_inflation'] = result.predict(df_fr['unemployment'])\n\nBy expanding again, the command above to make a plot, add the regression line to the scatter plot.\n\nplt.plot(df_fr['unemployment'], df_fr['inflation'],'o', alpha=0.5)\nplt.plot(df_fr['unemployment'], df_fr['pred_inflation'], color='C0')\nplt.title(\"Philips Curve\")\nplt.xlabel(\"Unemployment (%)\")\nplt.ylabel(\"Inflation\")\nplt.grid()\n\n\n\n\n\n\n\n\nNow we would like to compare all countries. Can you find a way to represent the data for all of them (all on one graph, using subplots…) ?\n\n# this solution uses loops and iterators but the same can be done manually\n\n\ncountries = df['country'].unique()\n\n\ndf_countries = []\nfor c in countries:\n    \n    tmp = df[df['country']==c].copy()\n    \n    model = sm.ols(formula='inflation ~ unemployment', data=tmp)\n    result = model.fit()\n    \n    tmp['pred_inflation'] = result.predict(tmp['unemployment'])\n\n    df_countries.append(tmp)\n\n\n# all on one graph\nfor i, (d, c) in enumerate(zip(df_countries, countries)):\n    plt.plot(d['unemployment'], d['inflation'], 'o', alpha=0.2, label=c, color=f\"C{i}\") # missing 'o'\n    plt.plot(d['unemployment'], d['pred_inflation'],   color=f\"C{i}\") # missing 'o'\nplt.legend(loc='upper right')\n\n\n\n\n\n\n\n\n\n# using subplots\n\n\n# all on one graph\nfig = plt.subplots(2,2)\nfor i, (d, c) in enumerate(zip(df_countries, countries)):\n    plt.subplot(2,2,i+1)\n    plt.plot(d['unemployment'], d['inflation'], 'o', alpha=0.2, color=f\"C{i}\") # missing 'o'\n    plt.plot(d['unemployment'], d['pred_inflation'],   color=f\"C{i}\") # missing 'o'\n    plt.xlabel(\"Unemployment\")\n    plt.ylabel(\"Inflation\")\n    plt.title(c)\n    plt.tight_layout()\n\n\n\n\n\n\n\n\nAny comment on these results?\n\nFirst it would be nice to break the period into many subperiods. We know the story about the disappearnce of the Philips curve in the US (and the Lucas Critique).\nSecond, there seems to be a strong contrast between US/UK and Germany/France. If one remembers the mechanisms behind the Philips curve it is not surprising: prices and wages are more rigid in Europe.\n\nIn the case of Germany, the conclusion is certainly not too strong: there has been a lot of volatility.\nIn the case of France, the time span of the time series is much smaller which also weakens the conclusion."
  },
  {
    "objectID": "tutorials/session_3/Phillips_curve_correction.html#bonus-visualizing-data-using-altair",
    "href": "tutorials/session_3/Phillips_curve_correction.html#bonus-visualizing-data-using-altair",
    "title": "Visualizing the Philips Curve",
    "section": "Bonus: Visualizing data using altair",
    "text": "Bonus: Visualizing data using altair\nAltair is a visualization library (based on Vega-lite) which offers a different syntax to make plots.\nIt is well adapted to the exploration phase, as it can operate on a full database (without splitting it like we did for matplotlib). It also provides some data transformation tools like regressions, and ways to add some interactivity.\n\nimport altair as alt\n\nThe following command makes a basic plot from the dataframe df which contains all the countries. Can you enhance it by providing a title and encoding information to distinguish the various countries?\n\nchart = alt.Chart(df).mark_point().encode(\n    x='unemployment',\n    y='inflation',\n    # find a way to separate on the graph data from France and US\n).interactive()\nchart\n\n/opt/conda/lib/python3.10/site-packages/altair/utils/core.py:395: FutureWarning: the convert_dtype parameter is deprecated and will be removed in a future version.  Do ``ser.astype(object).apply()`` instead if you want ``convert_dtype=False``.\n  col = df[col_name].apply(to_list_if_array, convert_dtype=False)\n\n\n\n\n\n\n\n\n\n# solution: \nchart = alt.Chart(df, title=\"Data for all countries\").mark_point().encode(\n    x='unemployment',\n    y='inflation',\n    color=\"country\",\n)\nchart\n\n/opt/conda/lib/python3.10/site-packages/altair/utils/core.py:395: FutureWarning: the convert_dtype parameter is deprecated and will be removed in a future version.  Do ``ser.astype(object).apply()`` instead if you want ``convert_dtype=False``.\n  col = df[col_name].apply(to_list_if_array, convert_dtype=False)\n\n\n\n\n\n\n\n\nThe following graph plots a regression line, but for all countries, it is rather meaningless. Can you restrict the data to France only?\n\nchart = alt.Chart(df).mark_point().encode(\n    x='unemployment',\n    y='inflation',\n    # find a way to separate on the graph data from France and US\n)\nchart + chart.transform_regression('unemployment', 'inflation').mark_line()\n\n/opt/conda/lib/python3.10/site-packages/altair/utils/core.py:395: FutureWarning: the convert_dtype parameter is deprecated and will be removed in a future version.  Do ``ser.astype(object).apply()`` instead if you want ``convert_dtype=False``.\n  col = df[col_name].apply(to_list_if_array, convert_dtype=False)\n\n\n\n\n\n\n\n\n\n# solution (it is also possible to replace df by df_fr...)\nchart = alt.Chart(df).transform_filter('datum.country==\"France\"').mark_point().encode(\n    x='unemployment',\n    y='inflation',\n    # find a way to separate on the graph data from France and US\n)\nchart + chart.transform_regression('unemployment', 'inflation').mark_line()\n\n/opt/conda/lib/python3.10/site-packages/altair/utils/core.py:395: FutureWarning: the convert_dtype parameter is deprecated and will be removed in a future version.  Do ``ser.astype(object).apply()`` instead if you want ``convert_dtype=False``.\n  col = df[col_name].apply(to_list_if_array, convert_dtype=False)\n\n\n\n\n\n\n\n\nOne way to visualize data consists in adding some interactivity. Add some title and click on the legend\n\nmulti = alt.selection_multi(fields=[\"country\"])\n\nlegend = alt.Chart(df).mark_point().encode(\n    y=alt.Y('country:N', axis=alt.Axis(orient='right')),\n    color=alt.condition(multi, 'country:N', alt.value('lightgray'), legend=None)\n).add_selection(multi)\n\nchart_2 = alt.Chart(df).mark_point().encode(\n    x='unemployment',\n    y='inflation',\n    color=alt.condition(multi, 'country:N', alt.value('lightgray')),\n    # find a way to separate on the graph data from France and US\n)\n\n# Try to click on the legend\nchart_2 | legend\n\n/opt/conda/lib/python3.10/site-packages/altair/utils/deprecation.py:65: AltairDeprecationWarning: 'selection_multi' is deprecated.  Use 'selection_point'\n  warnings.warn(message, AltairDeprecationWarning, stacklevel=1)\n/opt/conda/lib/python3.10/site-packages/altair/utils/deprecation.py:65: AltairDeprecationWarning: 'add_selection' is deprecated. Use 'add_params' instead.\n  warnings.warn(message, AltairDeprecationWarning, stacklevel=1)\n/opt/conda/lib/python3.10/site-packages/altair/utils/core.py:395: FutureWarning: the convert_dtype parameter is deprecated and will be removed in a future version.  Do ``ser.astype(object).apply()`` instead if you want ``convert_dtype=False``.\n  col = df[col_name].apply(to_list_if_array, convert_dtype=False)\n\n\n\n\n\n\n\n\nBonus question: in the following graph you can select an interval in the left panel to select some subsample. Can you add the regression line(s) corresponding to the selected data to the last graph?\n\nbrush = alt.selection_interval(encodings=['x'],)\n\nhistorical_chart_1 = alt.Chart(df).mark_line().encode(\n    x='date',\n    y='unemployment',\n    color='country'\n).add_selection(\n    brush\n)\nhistorical_chart_2 = alt.Chart(df).mark_line().encode(\n    x='date',\n    y='inflation',\n    color='country'\n)\nchart = alt.Chart(df).mark_point().encode(\n    x='unemployment',\n    y='inflation',\n    # find a way to separate on the graph data from France and US\n    color=alt.condition(brush, 'country:N', alt.value('lightgray'))\n)\nalt.hconcat(historical_chart_1, historical_chart_2, chart,)\n\n/opt/conda/lib/python3.10/site-packages/altair/utils/deprecation.py:65: AltairDeprecationWarning: 'add_selection' is deprecated. Use 'add_params' instead.\n  warnings.warn(message, AltairDeprecationWarning, stacklevel=1)\n/opt/conda/lib/python3.10/site-packages/altair/utils/core.py:395: FutureWarning: the convert_dtype parameter is deprecated and will be removed in a future version.  Do ``ser.astype(object).apply()`` instead if you want ``convert_dtype=False``.\n  col = df[col_name].apply(to_list_if_array, convert_dtype=False)"
  },
  {
    "objectID": "tutorials/session_3/Phillips_curve_correction.html#bonus-2-plotly-express",
    "href": "tutorials/session_3/Phillips_curve_correction.html#bonus-2-plotly-express",
    "title": "Visualizing the Philips Curve",
    "section": "Bonus 2: Plotly Express",
    "text": "Bonus 2: Plotly Express\nAnother popular option is the plotly library for nice-looking interactive plots. Combined with dash or shiny, it can be used to build very powerful interactive interfaces.\n\nimport plotly.express as px\n\n\nfig = px.scatter(df, x='unemployment', y='inflation', color='country', title=\"Philips Curves\")\nfig\n\n/opt/conda/lib/python3.10/site-packages/plotly/express/_core.py:1979: FutureWarning: When grouping with a length-1 list-like, you will need to pass a length-1 tuple to get_group in a future version of pandas. Pass `(name,)` instead of `name` to silence this warning.\n  sf: grouped.get_group(s if len(s) &gt; 1 else s[0])"
  },
  {
    "objectID": "tutorials/session_7/Classification_correction.html",
    "href": "tutorials/session_7/Classification_correction.html",
    "title": "Classification and clustering",
    "section": "",
    "text": "The two csv files (origin: kaggle) contain the training set (resp the validation set) about the clients from a “global finance company”.\nYour goal is to use all available information to build a model to accurately predict the probability of default which is coded up as a qualitative variable with three values.\nUpdate: the test.csv file now contains the score that should be predicted.\nImport training set and validation sets\nWe follow a three sets approach and define the following sets: - data used for the developing the model (dataset from train.csv) will be split into: - training dataset (variable called train) - test data set (variable called tes - data use\n\nimport pandas\ndataset = pandas.read_csv(\"train.csv\")\nvalidation = pandas.read_csv(\"test.csv\")\n\nDescribe the dataset.\nHere is a list of columns\n\ndataset.columns\n\nIndex(['Unnamed: 0', 'ID', 'Customer_ID', 'Month', 'Name', 'Age', 'SSN',\n       'Occupation', 'Annual_Income', 'Monthly_Inhand_Salary',\n       'Num_Bank_Accounts', 'Num_Credit_Card', 'Interest_Rate', 'Num_of_Loan',\n       'Type_of_Loan', 'Delay_from_due_date', 'Num_of_Delayed_Payment',\n       'Changed_Credit_Limit', 'Num_Credit_Inquiries', 'Credit_Mix',\n       'Outstanding_Debt', 'Credit_Utilization_Ratio', 'Credit_History_Age',\n       'Payment_of_Min_Amount', 'Total_EMI_per_month',\n       'Amount_invested_monthly', 'Payment_Behaviour', 'Monthly_Balance',\n       'Credit_Score'],\n      dtype='object')\n\n\nHow is the credit category encoded? Create a new variable representing it with values 0,1,2.\nThe credit score can be found in column Credit_Score. It takes three values.\n\ndataset['Credit_Score'].unique()\n\narray(['Standard', 'Poor', 'Good'], dtype=object)\n\n\n\n# we can use the LabelEncoder function from sklearn\nfrom sklearn.preprocessing import LabelEncoder\ncle = LabelEncoder()\ndataset['Credit_Score'] = cle.fit_transform(dataset['Credit_Score'])\n\n\n\n# check which value corresponds to what\n# this is needed to interpret 0,1,2 below\nscore_categories = cle.inverse_transform([0,1,2])\nscore_categories\n\narray(['Good', 'Poor', 'Standard'], dtype=object)\n\n\nReencode all categorical variables as dummy variables. Remove variables that are not useful for the analysis.\nLet’s reencode all string data as ordinal values.\n\nfrom sklearn.preprocessing import LabelEncoder as le\n\ndataset['Payment_of_Min_Amount'] = le().fit_transform(dataset['Payment_of_Min_Amount'])\ndataset['Payment_Behaviour'] = le().fit_transform(dataset['Payment_Behaviour'])\ndataset['Occupation'] = le().fit_transform(dataset['Occupation'])\ndataset['Type_of_Loan'] = le().fit_transform(dataset['Type_of_Loan'])\ndataset['Credit_Mix'] = le().fit_transform(dataset['Credit_Mix'])\n\n\n\n# we won't use the name variable so that we drop it\ndataset.drop(columns=[\"Name\"], inplace=True)\n\n\n---------------------------------------------------------------------------\nKeyError                                  Traceback (most recent call last)\nCell In[129], line 2\n      1 # we won't use the name variable so that we drop it\n----&gt; 2 dataset.drop(columns=[\"Name\"], inplace=True)\n\nFile ~/.local/opt/micromamba/envs/escp/lib/python3.12/site-packages/pandas/core/frame.py:5568, in DataFrame.drop(self, labels, axis, index, columns, level, inplace, errors)\n   5420 def drop(\n   5421     self,\n   5422     labels: IndexLabel | None = None,\n   (...)\n   5429     errors: IgnoreRaise = \"raise\",\n   5430 ) -&gt; DataFrame | None:\n   5431     \"\"\"\n   5432     Drop specified labels from rows or columns.\n   5433 \n   (...)\n   5566             weight  1.0     0.8\n   5567     \"\"\"\n-&gt; 5568     return super().drop(\n   5569         labels=labels,\n   5570         axis=axis,\n   5571         index=index,\n   5572         columns=columns,\n   5573         level=level,\n   5574         inplace=inplace,\n   5575         errors=errors,\n   5576     )\n\nFile ~/.local/opt/micromamba/envs/escp/lib/python3.12/site-packages/pandas/core/generic.py:4782, in NDFrame.drop(self, labels, axis, index, columns, level, inplace, errors)\n   4780 for axis, labels in axes.items():\n   4781     if labels is not None:\n-&gt; 4782         obj = obj._drop_axis(labels, axis, level=level, errors=errors)\n   4784 if inplace:\n   4785     self._update_inplace(obj)\n\nFile ~/.local/opt/micromamba/envs/escp/lib/python3.12/site-packages/pandas/core/generic.py:4824, in NDFrame._drop_axis(self, labels, axis, level, errors, only_slice)\n   4822         new_axis = axis.drop(labels, level=level, errors=errors)\n   4823     else:\n-&gt; 4824         new_axis = axis.drop(labels, errors=errors)\n   4825     indexer = axis.get_indexer(new_axis)\n   4827 # Case for non-unique axis\n   4828 else:\n\nFile ~/.local/opt/micromamba/envs/escp/lib/python3.12/site-packages/pandas/core/indexes/base.py:7069, in Index.drop(self, labels, errors)\n   7067 if mask.any():\n   7068     if errors != \"ignore\":\n-&gt; 7069         raise KeyError(f\"{labels[mask].tolist()} not found in axis\")\n   7070     indexer = indexer[~mask]\n   7071 return self.delete(indexer)\n\nKeyError: \"['Name'] not found in axis\"\n\n\n\nMake several plots about the dataset (histograms, correlation plots, …)\nTip: there are cool ideas here\n\nimport seaborn as sns\n\n\nsns.histplot(dataset['Credit_Score'])\n\n\n\n\n\n\n\n\n\n# Let's plot the correlations\nfrom matplotlib import pyplot as plt\nplt.figure(figsize = (14,10))\nsns.heatmap(dataset.corr())\n\n\n\n\n\n\n\n\nWe see from the correlation plot that, as expected, ID, customer_ID, SSN and are not related to the other variables. More surprisingly this is also also the case of “occupation”. This simply means that the numerical variable resulting from the conversion of occupations to numbers, was not ordered. It would be useless in a linear regression, but we can try a nonlinear one.\nA better way to encode the categorical variables would be to create dummy variables for each value.\nSplit the train dataset into a df_train and a df_test dataset.\n\nimport sklearn.model_selection\ndf_train, df_test = sklearn.model_selection.train_test_split(dataset , test_size= 0.25, random_state=243 )\n\nImplement a logistic regression.\n\ndf_train.columns\n\nIndex(['Unnamed: 0', 'ID', 'Customer_ID', 'Month', 'Age', 'SSN', 'Occupation',\n       'Annual_Income', 'Monthly_Inhand_Salary', 'Num_Bank_Accounts',\n       'Num_Credit_Card', 'Interest_Rate', 'Num_of_Loan', 'Type_of_Loan',\n       'Delay_from_due_date', 'Num_of_Delayed_Payment', 'Changed_Credit_Limit',\n       'Num_Credit_Inquiries', 'Credit_Mix', 'Outstanding_Debt',\n       'Credit_Utilization_Ratio', 'Credit_History_Age',\n       'Payment_of_Min_Amount', 'Total_EMI_per_month',\n       'Amount_invested_monthly', 'Payment_Behaviour', 'Monthly_Balance',\n       'Credit_Score'],\n      dtype='object')\n\n\n\n# we keep only a subset of all variables:\nvariables = [\n    # 'Credit_Score',\n    'Changed_Credit_Limit',\n    'Payment_of_Min_Amount',\n    'Credit_Mix',\n    'Delay_from_due_date',\n    'Annual_Income',\n    'Monthly_Inhand_Salary',\n    'Age',\n    'Monthly_Balance',\n    'Num_of_Delayed_Payment',\n    'Outstanding_Debt',\n    'Payment_Behaviour',\n    'Credit_History_Age',\n    'Num_Bank_Accounts',\n    'Credit_Utilization_Ratio'\n]\n\n\ndf_test['Credit_Score']\n\n70144    0\n32059    1\n25287    2\n13496    1\n65970    2\n        ..\n59793    0\n33338    2\n51142    0\n29286    0\n58864    2\nName: Credit_Score, Length: 18750, dtype: int64\n\n\n\n# we split the set into features and labels:\nX = df_train.drop(columns=['Credit_Score'])[variables] # all columns except score\nY = df_train['Credit_Score']\n\n# same for the test set:\nX_test = df_test.drop(columns=['Credit_Score'])[variables] # all columns except score\nY_test = df_test['Credit_Score']\n\nWe need a logistic classifier, since we are predicting binary variables\n\nfrom sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression(max_iter=1000)\nregression = model.fit(X,Y)\n\n/home/pablo/.local/opt/micromamba/envs/escp/lib/python3.12/site-packages/sklearn/linear_model/_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n\n\n\nlr_score_test=model.score(X , Y)\nlr_score_test\n\n0.5916444444444444\n\n\nCompute the confusion matrix using the test set. Comment\nThis is how our model performs on the test set.\n\n# adjust the following code if needed\n\n\nactual = Y_test\npredicted = model.predict(X_test)\n\nFor classification problems a standard way to represent the performance, consists in computing the “confusion matrix”.\n\nfrom sklearn import metrics\n\nconfusion_matrix = metrics.confusion_matrix(actual, predicted)\nconfusion_matrix\n\narray([[ 862,   39, 2462],\n       [ 166, 2299, 3012],\n       [ 703, 1259, 7948]])\n\n\n\ncm_display_0 = metrics.ConfusionMatrixDisplay(confusion_matrix = confusion_matrix, display_labels = score_categories)\n\n\nfrom matplotlib import pyplot as plt\nfig, ax = plt.subplots(figsize=(10,10))\nax.grid(False)\ncm_display_0.plot(ax=ax)\n\n\n\n\n\n\n\n\nWe can also normalize by the number of observations for each category (divide each row by the total of this row).\n\nconfusion_matrix_percents = confusion_matrix / confusion_matrix.sum(axis=1)[:,None] *100\nconfusion_matrix_percents # check that each row sums to 1\n\narray([[25.6318763 ,  1.15967886, 73.20844484],\n       [ 3.03085631, 41.97553405, 54.99360964],\n       [ 7.0938446 , 12.70433905, 80.20181635]])\n\n\nThis tells us that 33% of the poor ratings were correctly detected (true positive). Or, equivalently, that 67% of them were not detected (false positive).\n\ncm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = confusion_matrix_percents, display_labels = score_categories)\n\n\nfrom matplotlib import pyplot as plt\n\nfig, ax = plt.subplots(figsize=(10,10))\nax.grid(False)\ncm_display.plot(ax=ax)\n\n\n\n\n\n\n\n\nSymmetrically, we can normalize by the number of predicted labels, i.e. the sum of each column.\n\nconfusion_matrix_percents = confusion_matrix / confusion_matrix.sum(axis=0)[None,:] *100\nconfusion_matrix_percents # check that *columns* sum to 1\n\narray([[49.79780474,  1.08423686, 18.34301892],\n       [ 9.58983247, 63.91437309, 22.44076889],\n       [40.6123628 , 35.00139005, 59.21621219]])\n\n\nAs before we can make a graphical representation:\n\ncm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = confusion_matrix_percents, display_labels = score_categories)\n\n\nfrom matplotlib import pyplot as plt\n\nfig, ax = plt.subplots(figsize=(10,10))\nax.grid(False)\ncm_display.plot(ax=ax)\n\n\n\n\n\n\n\n\nWe see now that of all the poor ratings that are detected 54% were actually poor. Hence 46% of them were incorrect.\nPerform the same analysis with other classification methods and compare their performance using the test set.\n\n# Clearly we need to use some nonlinear model instead\n\n\nfrom sklearn.neighbors import KNeighborsClassifier\nmodel = KNeighborsClassifier()\nregression = model.fit(X,Y)\n\n\nactual = Y_test\npredicted = model.predict(X_test)\n\n\nfrom sklearn import metrics\n\nconfusion_matrix = metrics.confusion_matrix(actual, predicted)\nconfusion_matrix\n\narray([[2022,  113, 1228],\n       [ 189, 4152, 1136],\n       [1077, 1395, 7438]])\n\n\n\ncm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = confusion_matrix, display_labels = score_categories)\n\n\nfrom matplotlib import pyplot as plt\n\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(12,4))\nax = plt.subplot(1,2,1)\nax.grid(False)\ncm_display_0.plot(ax=ax)\nplt.title(\"Logistic Regression\")\nax = plt.subplot(1,2,2)\nax.grid(False)\ncm_display.plot(ax=ax)\nplt.title(\"KNeighborsClassifier\")\n\nText(0.5, 1.0, 'KNeighborsClassifier')\n\n\n\n\n\n\n\n\n\nWe see that the new measure performs much better (all the wrong predictions are less frequent exept for a few more good ratings predicted as poor.\nFor poor ratings, the number of false negative is now 24% ((189+1136)/ (189+ 4152+ 1136)) and the number of false positive is 27% ((113+1395)/(113+4152+1395)). This is to be compare to the figures from the logistic regressison (67% and 46% respectively).\nWhich one would you choose? Test its performance on the validation set\nThe KNeighbours classifier clearly performs better on the training set. We still need to check that it generalises properly on the validation set.\nWe need to do the same preprocessing as before. Here we need to pay attention to the fact that the validation set is preprocessed exactly in the same way as the training set.\nA quick search (source) shows that the LabelEncoder attributes numbers in sorting orders: we can then do the same steps as before for the same results.\n\nfrom sklearn.preprocessing import LabelEncoder\n\n# encoder = LabelEncoder()\nvalidation['Payment_of_Min_Amount'] = le().fit_transform(validation['Payment_of_Min_Amount'])\nvalidation['Payment_Behaviour'] = le().fit_transform(validation['Payment_Behaviour'])\nvalidation['Occupation'] = le().fit_transform(validation['Occupation'])\nvalidation['Type_of_Loan'] = le().fit_transform(validation['Type_of_Loan'])\nvalidation['Credit_Mix'] = le().fit_transform(validation['Credit_Mix'])\nvalidation['Credit_Score'] = le().fit_transform(validation['Credit_Score'])\n\n\nX_valid = validation.drop(columns=['Credit_Score'])[variables] # all columns except score\nY_valid = validation['Credit_Score']\n\n\nactual = Y_valid\npredicted = model.predict(X_valid)\n\n\nconfusion_matrix = metrics.confusion_matrix(actual, predicted)\ncm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = confusion_matrix_percents, display_labels = score_categories)\ncm_display.plot()\n\n\n\n\n\n\n\n\n\n# normalize by the number of predicted labels (sum of columns)\n\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(12,4))\nax = plt.subplot(1,2,1)\ncm = confusion_matrix/confusion_matrix.sum(axis=0)[None, :]\ncm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = cm, display_labels = score_categories)\ncm_display.plot(ax=ax)\nplt.title(\"Normalized by column\")\nax = plt.subplot(1,2,2)\ncm = confusion_matrix/confusion_matrix.sum(axis=1)[:,None]\ncm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = cm, display_labels = score_categories)\ncm_display.plot(ax=ax)\nplt.title(\"Normalized by Rows\")\nplt.tight_layout()\n\n\n\n\n\n\n\n\nWe see that 27% of the poor grades (1-0.73) are misclassified (false negatives) and 25% of the bad scores are actually good or standard (false positive). This is close to the statistics on the training set.\nBonus: the use of the label encoder is not ideal, because it assumes some hierarchy of the undrelying model or requires the use of a nonlinear-model. The following code performs another encoding with one dummy variable per value.\n\nimport pandas\ndataset = pandas.read_csv(\"train.csv\")\nvalidation = pandas.read_csv(\"test.csv\")\n\n\nfrom sklearn.preprocessing import OneHotEncoder\n\n\ndef create_dummy(category):\n    # this create a new pandas dataframe where each columnn contains a dummy variable for category\n    ohe = OneHotEncoder(sparse_output=False)\n    ft = ohe.fit_transform(dataset[[category]])\n    df = pandas.DataFrame(ft, columns= ohe.categories_ )\n    return df\n\n\n# encoder = LabelEncoder()\npma = create_dummy(\"Payment_of_Min_Amount\")\npb = create_dummy('Payment_Behaviour')\nocc = create_dummy('Occupation')\ntol = create_dummy('Type_of_Loan')\ncm = create_dummy('Credit_Mix')\n\n\ndata = pandas.concat([\n    dataset.drop(columns=[\"Payment_of_Min_Amount\",\"Payment_Behaviour\", \"Occupation\", \"Type_of_Loan\", \"Credit_Mix\"]),\n    pma,\n    pb,\n    occ,\n    tol,\n    cm\n], axis=1)\n\n\n# Unfortunately, this crashes the kernel: we are limited by the memory of online instances"
  },
  {
    "objectID": "tutorials/session_7/Classification_correction.html#predicting-the-credit-score",
    "href": "tutorials/session_7/Classification_correction.html#predicting-the-credit-score",
    "title": "Classification and clustering",
    "section": "",
    "text": "The two csv files (origin: kaggle) contain the training set (resp the validation set) about the clients from a “global finance company”.\nYour goal is to use all available information to build a model to accurately predict the probability of default which is coded up as a qualitative variable with three values.\nUpdate: the test.csv file now contains the score that should be predicted.\nImport training set and validation sets\nWe follow a three sets approach and define the following sets: - data used for the developing the model (dataset from train.csv) will be split into: - training dataset (variable called train) - test data set (variable called tes - data use\n\nimport pandas\ndataset = pandas.read_csv(\"train.csv\")\nvalidation = pandas.read_csv(\"test.csv\")\n\nDescribe the dataset.\nHere is a list of columns\n\ndataset.columns\n\nIndex(['Unnamed: 0', 'ID', 'Customer_ID', 'Month', 'Name', 'Age', 'SSN',\n       'Occupation', 'Annual_Income', 'Monthly_Inhand_Salary',\n       'Num_Bank_Accounts', 'Num_Credit_Card', 'Interest_Rate', 'Num_of_Loan',\n       'Type_of_Loan', 'Delay_from_due_date', 'Num_of_Delayed_Payment',\n       'Changed_Credit_Limit', 'Num_Credit_Inquiries', 'Credit_Mix',\n       'Outstanding_Debt', 'Credit_Utilization_Ratio', 'Credit_History_Age',\n       'Payment_of_Min_Amount', 'Total_EMI_per_month',\n       'Amount_invested_monthly', 'Payment_Behaviour', 'Monthly_Balance',\n       'Credit_Score'],\n      dtype='object')\n\n\nHow is the credit category encoded? Create a new variable representing it with values 0,1,2.\nThe credit score can be found in column Credit_Score. It takes three values.\n\ndataset['Credit_Score'].unique()\n\narray(['Standard', 'Poor', 'Good'], dtype=object)\n\n\n\n# we can use the LabelEncoder function from sklearn\nfrom sklearn.preprocessing import LabelEncoder\ncle = LabelEncoder()\ndataset['Credit_Score'] = cle.fit_transform(dataset['Credit_Score'])\n\n\n\n# check which value corresponds to what\n# this is needed to interpret 0,1,2 below\nscore_categories = cle.inverse_transform([0,1,2])\nscore_categories\n\narray(['Good', 'Poor', 'Standard'], dtype=object)\n\n\nReencode all categorical variables as dummy variables. Remove variables that are not useful for the analysis.\nLet’s reencode all string data as ordinal values.\n\nfrom sklearn.preprocessing import LabelEncoder as le\n\ndataset['Payment_of_Min_Amount'] = le().fit_transform(dataset['Payment_of_Min_Amount'])\ndataset['Payment_Behaviour'] = le().fit_transform(dataset['Payment_Behaviour'])\ndataset['Occupation'] = le().fit_transform(dataset['Occupation'])\ndataset['Type_of_Loan'] = le().fit_transform(dataset['Type_of_Loan'])\ndataset['Credit_Mix'] = le().fit_transform(dataset['Credit_Mix'])\n\n\n\n# we won't use the name variable so that we drop it\ndataset.drop(columns=[\"Name\"], inplace=True)\n\n\n---------------------------------------------------------------------------\nKeyError                                  Traceback (most recent call last)\nCell In[129], line 2\n      1 # we won't use the name variable so that we drop it\n----&gt; 2 dataset.drop(columns=[\"Name\"], inplace=True)\n\nFile ~/.local/opt/micromamba/envs/escp/lib/python3.12/site-packages/pandas/core/frame.py:5568, in DataFrame.drop(self, labels, axis, index, columns, level, inplace, errors)\n   5420 def drop(\n   5421     self,\n   5422     labels: IndexLabel | None = None,\n   (...)\n   5429     errors: IgnoreRaise = \"raise\",\n   5430 ) -&gt; DataFrame | None:\n   5431     \"\"\"\n   5432     Drop specified labels from rows or columns.\n   5433 \n   (...)\n   5566             weight  1.0     0.8\n   5567     \"\"\"\n-&gt; 5568     return super().drop(\n   5569         labels=labels,\n   5570         axis=axis,\n   5571         index=index,\n   5572         columns=columns,\n   5573         level=level,\n   5574         inplace=inplace,\n   5575         errors=errors,\n   5576     )\n\nFile ~/.local/opt/micromamba/envs/escp/lib/python3.12/site-packages/pandas/core/generic.py:4782, in NDFrame.drop(self, labels, axis, index, columns, level, inplace, errors)\n   4780 for axis, labels in axes.items():\n   4781     if labels is not None:\n-&gt; 4782         obj = obj._drop_axis(labels, axis, level=level, errors=errors)\n   4784 if inplace:\n   4785     self._update_inplace(obj)\n\nFile ~/.local/opt/micromamba/envs/escp/lib/python3.12/site-packages/pandas/core/generic.py:4824, in NDFrame._drop_axis(self, labels, axis, level, errors, only_slice)\n   4822         new_axis = axis.drop(labels, level=level, errors=errors)\n   4823     else:\n-&gt; 4824         new_axis = axis.drop(labels, errors=errors)\n   4825     indexer = axis.get_indexer(new_axis)\n   4827 # Case for non-unique axis\n   4828 else:\n\nFile ~/.local/opt/micromamba/envs/escp/lib/python3.12/site-packages/pandas/core/indexes/base.py:7069, in Index.drop(self, labels, errors)\n   7067 if mask.any():\n   7068     if errors != \"ignore\":\n-&gt; 7069         raise KeyError(f\"{labels[mask].tolist()} not found in axis\")\n   7070     indexer = indexer[~mask]\n   7071 return self.delete(indexer)\n\nKeyError: \"['Name'] not found in axis\"\n\n\n\nMake several plots about the dataset (histograms, correlation plots, …)\nTip: there are cool ideas here\n\nimport seaborn as sns\n\n\nsns.histplot(dataset['Credit_Score'])\n\n\n\n\n\n\n\n\n\n# Let's plot the correlations\nfrom matplotlib import pyplot as plt\nplt.figure(figsize = (14,10))\nsns.heatmap(dataset.corr())\n\n\n\n\n\n\n\n\nWe see from the correlation plot that, as expected, ID, customer_ID, SSN and are not related to the other variables. More surprisingly this is also also the case of “occupation”. This simply means that the numerical variable resulting from the conversion of occupations to numbers, was not ordered. It would be useless in a linear regression, but we can try a nonlinear one.\nA better way to encode the categorical variables would be to create dummy variables for each value.\nSplit the train dataset into a df_train and a df_test dataset.\n\nimport sklearn.model_selection\ndf_train, df_test = sklearn.model_selection.train_test_split(dataset , test_size= 0.25, random_state=243 )\n\nImplement a logistic regression.\n\ndf_train.columns\n\nIndex(['Unnamed: 0', 'ID', 'Customer_ID', 'Month', 'Age', 'SSN', 'Occupation',\n       'Annual_Income', 'Monthly_Inhand_Salary', 'Num_Bank_Accounts',\n       'Num_Credit_Card', 'Interest_Rate', 'Num_of_Loan', 'Type_of_Loan',\n       'Delay_from_due_date', 'Num_of_Delayed_Payment', 'Changed_Credit_Limit',\n       'Num_Credit_Inquiries', 'Credit_Mix', 'Outstanding_Debt',\n       'Credit_Utilization_Ratio', 'Credit_History_Age',\n       'Payment_of_Min_Amount', 'Total_EMI_per_month',\n       'Amount_invested_monthly', 'Payment_Behaviour', 'Monthly_Balance',\n       'Credit_Score'],\n      dtype='object')\n\n\n\n# we keep only a subset of all variables:\nvariables = [\n    # 'Credit_Score',\n    'Changed_Credit_Limit',\n    'Payment_of_Min_Amount',\n    'Credit_Mix',\n    'Delay_from_due_date',\n    'Annual_Income',\n    'Monthly_Inhand_Salary',\n    'Age',\n    'Monthly_Balance',\n    'Num_of_Delayed_Payment',\n    'Outstanding_Debt',\n    'Payment_Behaviour',\n    'Credit_History_Age',\n    'Num_Bank_Accounts',\n    'Credit_Utilization_Ratio'\n]\n\n\ndf_test['Credit_Score']\n\n70144    0\n32059    1\n25287    2\n13496    1\n65970    2\n        ..\n59793    0\n33338    2\n51142    0\n29286    0\n58864    2\nName: Credit_Score, Length: 18750, dtype: int64\n\n\n\n# we split the set into features and labels:\nX = df_train.drop(columns=['Credit_Score'])[variables] # all columns except score\nY = df_train['Credit_Score']\n\n# same for the test set:\nX_test = df_test.drop(columns=['Credit_Score'])[variables] # all columns except score\nY_test = df_test['Credit_Score']\n\nWe need a logistic classifier, since we are predicting binary variables\n\nfrom sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression(max_iter=1000)\nregression = model.fit(X,Y)\n\n/home/pablo/.local/opt/micromamba/envs/escp/lib/python3.12/site-packages/sklearn/linear_model/_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n\n\n\nlr_score_test=model.score(X , Y)\nlr_score_test\n\n0.5916444444444444\n\n\nCompute the confusion matrix using the test set. Comment\nThis is how our model performs on the test set.\n\n# adjust the following code if needed\n\n\nactual = Y_test\npredicted = model.predict(X_test)\n\nFor classification problems a standard way to represent the performance, consists in computing the “confusion matrix”.\n\nfrom sklearn import metrics\n\nconfusion_matrix = metrics.confusion_matrix(actual, predicted)\nconfusion_matrix\n\narray([[ 862,   39, 2462],\n       [ 166, 2299, 3012],\n       [ 703, 1259, 7948]])\n\n\n\ncm_display_0 = metrics.ConfusionMatrixDisplay(confusion_matrix = confusion_matrix, display_labels = score_categories)\n\n\nfrom matplotlib import pyplot as plt\nfig, ax = plt.subplots(figsize=(10,10))\nax.grid(False)\ncm_display_0.plot(ax=ax)\n\n\n\n\n\n\n\n\nWe can also normalize by the number of observations for each category (divide each row by the total of this row).\n\nconfusion_matrix_percents = confusion_matrix / confusion_matrix.sum(axis=1)[:,None] *100\nconfusion_matrix_percents # check that each row sums to 1\n\narray([[25.6318763 ,  1.15967886, 73.20844484],\n       [ 3.03085631, 41.97553405, 54.99360964],\n       [ 7.0938446 , 12.70433905, 80.20181635]])\n\n\nThis tells us that 33% of the poor ratings were correctly detected (true positive). Or, equivalently, that 67% of them were not detected (false positive).\n\ncm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = confusion_matrix_percents, display_labels = score_categories)\n\n\nfrom matplotlib import pyplot as plt\n\nfig, ax = plt.subplots(figsize=(10,10))\nax.grid(False)\ncm_display.plot(ax=ax)\n\n\n\n\n\n\n\n\nSymmetrically, we can normalize by the number of predicted labels, i.e. the sum of each column.\n\nconfusion_matrix_percents = confusion_matrix / confusion_matrix.sum(axis=0)[None,:] *100\nconfusion_matrix_percents # check that *columns* sum to 1\n\narray([[49.79780474,  1.08423686, 18.34301892],\n       [ 9.58983247, 63.91437309, 22.44076889],\n       [40.6123628 , 35.00139005, 59.21621219]])\n\n\nAs before we can make a graphical representation:\n\ncm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = confusion_matrix_percents, display_labels = score_categories)\n\n\nfrom matplotlib import pyplot as plt\n\nfig, ax = plt.subplots(figsize=(10,10))\nax.grid(False)\ncm_display.plot(ax=ax)\n\n\n\n\n\n\n\n\nWe see now that of all the poor ratings that are detected 54% were actually poor. Hence 46% of them were incorrect.\nPerform the same analysis with other classification methods and compare their performance using the test set.\n\n# Clearly we need to use some nonlinear model instead\n\n\nfrom sklearn.neighbors import KNeighborsClassifier\nmodel = KNeighborsClassifier()\nregression = model.fit(X,Y)\n\n\nactual = Y_test\npredicted = model.predict(X_test)\n\n\nfrom sklearn import metrics\n\nconfusion_matrix = metrics.confusion_matrix(actual, predicted)\nconfusion_matrix\n\narray([[2022,  113, 1228],\n       [ 189, 4152, 1136],\n       [1077, 1395, 7438]])\n\n\n\ncm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = confusion_matrix, display_labels = score_categories)\n\n\nfrom matplotlib import pyplot as plt\n\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(12,4))\nax = plt.subplot(1,2,1)\nax.grid(False)\ncm_display_0.plot(ax=ax)\nplt.title(\"Logistic Regression\")\nax = plt.subplot(1,2,2)\nax.grid(False)\ncm_display.plot(ax=ax)\nplt.title(\"KNeighborsClassifier\")\n\nText(0.5, 1.0, 'KNeighborsClassifier')\n\n\n\n\n\n\n\n\n\nWe see that the new measure performs much better (all the wrong predictions are less frequent exept for a few more good ratings predicted as poor.\nFor poor ratings, the number of false negative is now 24% ((189+1136)/ (189+ 4152+ 1136)) and the number of false positive is 27% ((113+1395)/(113+4152+1395)). This is to be compare to the figures from the logistic regressison (67% and 46% respectively).\nWhich one would you choose? Test its performance on the validation set\nThe KNeighbours classifier clearly performs better on the training set. We still need to check that it generalises properly on the validation set.\nWe need to do the same preprocessing as before. Here we need to pay attention to the fact that the validation set is preprocessed exactly in the same way as the training set.\nA quick search (source) shows that the LabelEncoder attributes numbers in sorting orders: we can then do the same steps as before for the same results.\n\nfrom sklearn.preprocessing import LabelEncoder\n\n# encoder = LabelEncoder()\nvalidation['Payment_of_Min_Amount'] = le().fit_transform(validation['Payment_of_Min_Amount'])\nvalidation['Payment_Behaviour'] = le().fit_transform(validation['Payment_Behaviour'])\nvalidation['Occupation'] = le().fit_transform(validation['Occupation'])\nvalidation['Type_of_Loan'] = le().fit_transform(validation['Type_of_Loan'])\nvalidation['Credit_Mix'] = le().fit_transform(validation['Credit_Mix'])\nvalidation['Credit_Score'] = le().fit_transform(validation['Credit_Score'])\n\n\nX_valid = validation.drop(columns=['Credit_Score'])[variables] # all columns except score\nY_valid = validation['Credit_Score']\n\n\nactual = Y_valid\npredicted = model.predict(X_valid)\n\n\nconfusion_matrix = metrics.confusion_matrix(actual, predicted)\ncm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = confusion_matrix_percents, display_labels = score_categories)\ncm_display.plot()\n\n\n\n\n\n\n\n\n\n# normalize by the number of predicted labels (sum of columns)\n\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(12,4))\nax = plt.subplot(1,2,1)\ncm = confusion_matrix/confusion_matrix.sum(axis=0)[None, :]\ncm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = cm, display_labels = score_categories)\ncm_display.plot(ax=ax)\nplt.title(\"Normalized by column\")\nax = plt.subplot(1,2,2)\ncm = confusion_matrix/confusion_matrix.sum(axis=1)[:,None]\ncm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = cm, display_labels = score_categories)\ncm_display.plot(ax=ax)\nplt.title(\"Normalized by Rows\")\nplt.tight_layout()\n\n\n\n\n\n\n\n\nWe see that 27% of the poor grades (1-0.73) are misclassified (false negatives) and 25% of the bad scores are actually good or standard (false positive). This is close to the statistics on the training set.\nBonus: the use of the label encoder is not ideal, because it assumes some hierarchy of the undrelying model or requires the use of a nonlinear-model. The following code performs another encoding with one dummy variable per value.\n\nimport pandas\ndataset = pandas.read_csv(\"train.csv\")\nvalidation = pandas.read_csv(\"test.csv\")\n\n\nfrom sklearn.preprocessing import OneHotEncoder\n\n\ndef create_dummy(category):\n    # this create a new pandas dataframe where each columnn contains a dummy variable for category\n    ohe = OneHotEncoder(sparse_output=False)\n    ft = ohe.fit_transform(dataset[[category]])\n    df = pandas.DataFrame(ft, columns= ohe.categories_ )\n    return df\n\n\n# encoder = LabelEncoder()\npma = create_dummy(\"Payment_of_Min_Amount\")\npb = create_dummy('Payment_Behaviour')\nocc = create_dummy('Occupation')\ntol = create_dummy('Type_of_Loan')\ncm = create_dummy('Credit_Mix')\n\n\ndata = pandas.concat([\n    dataset.drop(columns=[\"Payment_of_Min_Amount\",\"Payment_Behaviour\", \"Occupation\", \"Type_of_Loan\", \"Credit_Mix\"]),\n    pma,\n    pb,\n    occ,\n    tol,\n    cm\n], axis=1)\n\n\n# Unfortunately, this crashes the kernel: we are limited by the memory of online instances"
  },
  {
    "objectID": "tutorials/session_7/Classification_correction.html#segmenting-the-bank-clients",
    "href": "tutorials/session_7/Classification_correction.html#segmenting-the-bank-clients",
    "title": "Classification and clustering",
    "section": "Segmenting the bank clients",
    "text": "Segmenting the bank clients\nWith the same database, without using the credit score, implement a k-means clustering algorithm.\n\nfrom sklearn.cluster import KMeans\nkm_model = KMeans(n_clusters=3)\nkm_model.fit(dataset)\n\nKMeans(n_clusters=3)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.  KMeans?Documentation for KMeansiFittedKMeans(n_clusters=3) \n\n\n\n# we then attribute each element in the training set to a cluster according to the model\ndataset['cluster'] = km_model.predict(dataset)\n\nAre the clusters related to the credit score?\nLet’s compute the proportion of each score in each cluster.\n\ndataset.groupby(\"cluster\")['Credit_Score'].value_counts(normalize =True)\n\ncluster  Credit_Score\n0        2               0.520876\n         1               0.299119\n         0               0.180006\n1        2               0.532145\n         1               0.285075\n         0               0.182780\n2        2               0.540301\n         1               0.283742\n         0               0.175958\nName: proportion, dtype: float64\n\n\nThe proportion of each score does not seem to depend much on the clustering variable.\nIt suggests there are indeed similarity clusters that are uncorrelated to the ability to repay"
  },
  {
    "objectID": "tutorials/session_1/qe_collections.html",
    "href": "tutorials/session_1/qe_collections.html",
    "title": "Collections",
    "section": "",
    "text": "Prerequisites\nOutcomes"
  },
  {
    "objectID": "tutorials/session_1/qe_collections.html#ordered-collections",
    "href": "tutorials/session_1/qe_collections.html#ordered-collections",
    "title": "Collections",
    "section": "Ordered Collections",
    "text": "Ordered Collections\n\nLists\nA Python list is an ordered collection of items.\nWe can create lists using the following syntax\n\n[item1, item2, ...,  itemN]\n\nwhere the ... represents any number of additional items.\nEach item can be of any type.\nLet’s create some lists.\n\n# created, but not assigned to a variable\n[2.0, 9.1, \"a rose is a rose is a rose\"]\n\n[2.0, 9.1, 'a rose is a rose is a rose']\n\n\n\n# stored as the variable `x`\nx = [2.0, 9.1, 12.5]\nprint(\"x has type\", type(x))\nx\n\nx has type &lt;class 'list'&gt;\n\n\n[2.0, 9.1, 12.5]\n\n\n\nWhat Can We Do with Lists?\nWe can access items in a list called mylist using mylist[N] where N is an integer.\nNote: Anytime that we use the syntax x[i] we are doing what is called indexing – it means that we are selecting a particular element of a collection x.\n\nx[1]\n\n9.1\n\n\nWait? Why did x[1] return 9.1 when the first element in x is actually 2.0?\nThis happened because Python starts counting at zero!\nLets repeat that one more time for emphasis Python starts counting at zero!\nTo access the first element of x we must use x[0]:\n\nx[0]\n\n2.0\n\n\nWe can also determine how many items are in a list using the len function.\n\nlen(x)\n\n3\n\n\nWhat happens if we try to index with a number higher than the number of items in a list?\n\n# uncomment the line below and run\nx[4]\n\n\n---------------------------------------------------------------------------\nIndexError                                Traceback (most recent call last)\nCell In[6], line 2\n      1 # uncomment the line below and run\n----&gt; 2 x[4]\n\nIndexError: list index out of range\n\n\n\nWe can check if a list contains an element using the in keyword.\n\n2.0 in x\n\nTrue\n\n\n\n1.5 in x\n\nFalse\n\n\nFor our list x, other common operations we might want to do are…\n\nx.reverse()\nx\n\n[12.5, 9.1, 2.0]\n\n\n\nnumber_list = [10, 25, 42, 1.0]\nprint(number_list)\nnumber_list.sort()\nprint(number_list)\n\n[10, 25, 42, 1.0]\n[1.0, 10, 25, 42]\n\n\nNote that in order to sort, we had to have all elements in our list be numbers (int and float), more on this below.\nWe could actually do the same with a list of strings. In this case, sort will put the items in alphabetical order.\n\nstr_list = [\"NY\", \"AZ\", \"TX\"]\nprint(str_list)\nstr_list.sort()\nprint(str_list)\n\n['NY', 'AZ', 'TX']\n['AZ', 'NY', 'TX']\n\n\nThe append method adds an element to the end of existing list.\n\nnum_list = [10, 25, 42, 8]\nprint(num_list)\nnum_list.append(10)\nprint(num_list)\n\n[10, 25, 42, 8]\n[10, 25, 42, 8, 10]\n\n\nHowever, if you call append with a list, it adds a list to the end, rather than the numbers in that list.\n\nnum_list = [10, 25, 42, 8]\nprint(num_list)\nnum_list.append([20, 4])\nprint(num_list)\n\n[10, 25, 42, 8]\n[10, 25, 42, 8, [20, 4]]\n\n\nTo combine the lists instead…\n\nnum_list = [10, 25, 42, 8]\nprint(num_list)\nnum_list.extend([20, 4])\nprint(num_list)\n\n[10, 25, 42, 8]\n[10, 25, 42, 8, 20, 4]\n\n\n\n\nExercise\nSee exercise 1 in the exercise list.\n\n\n\n\nLists of Different Types\nWhile most examples above have all used a list with a single type of variable, this is not required.\nLet’s carefully make a small change to the first example: replace 2.0 with 2\n\nx = [2, 9.1, 12.5]\n\nThis behavior is identical for many operations you might apply to a list.\n\nimport numpy as np\nx = [2, 9.1, 12.5]\nnp.mean(x)\n\n7.866666666666667\n\n\n\n# native python functions\nsum(x) / len(x)\n\n7.866666666666667\n\n\nHere we have also introduced a new module, Numpy, which provides many functions for working with numeric data.\nTaking this further, we can put completely different types of elements inside of a list.\n\n# stored as the variable `x`\nx = [2, \"hello\", 3.0]\nprint(\"x has type\", type(x))\nx\n\nTo see the types of individual elements in the list:\n\nprint(f\"type(x[0]) = {type(x[0])}, type(x[0]) = {type(x[1])}, type(x[2]) = {type(x[2])}\")\n\nWhile no programming limitations prevent this, you should be careful if you write code with different numeric and non-numeric types in the same list.\nFor example, if the types within the list cannot be compared, then how could you sort the elements of the list? (i.e. How do you determine whether the string “hello” is less than the integer 2, “hello” &lt; 2?)\n\nx = [2, \"hello\", 3.0]\n# uncomment the line below and see what happens!\n# x.sort()\n\nA few key exceptions to this general rule are:\n\nLists with both integers and floating points are less error-prone (since mathematical code using the list would work with both types).\n\nWhen working with lists and data, you may want to represent missing values with a different type than the existing values.\n\n\n\nThe range Function\nOne function you will see often in Python is the range function.\nIt has three versions:\n\nrange(N): goes from 0 to N-1\n\nrange(a, N): goes from a to N-1\n\nrange(a, N, d): goes from a to N-1, counting by d\n\nWhen we call the range function, we get back something that has type range:\n\nrange(1,4) # form 1 to 3 included\n\nrange(1, 4)\n\n\n\nr = range(5)  # from 0 to 4 included\nprint(\"type(r)\", type(r))\n\ntype(r) &lt;class 'range'&gt;\n\n\nTo turn the range into a list:\n\n[*r] # unpack elements\n\n[0, 1, 2, 3, 4]\n\n\n\nlist(r)\n\n[0, 1, 2, 3, 4]\n\n\n\nfor i in range(5):\n    print(i)\n\n0\n1\n2\n3\n4\n\n\n\n\nExercise\nSee exercise 2 in the exercise list.\n\n\nWhat are Tuples?\nTuples are very similar to lists and hold ordered collections of items.\nHowever, tuples and lists have three main differences:\n\nTuples are created using parenthesis — ( and ) — instead of square brackets — [ and ].\n\nTuples are immutable, which is a fancy computer science word meaning that they can’t be changed or altered after they are created.\n\nTuples and multiple return values from functions are tightly connected, as we will see in functions.\n\n\nt = (1, \"hello\", 3.0)\nprint(\"t is a\", type(t))\nt\n\nt is a &lt;class 'tuple'&gt;\n\n\n(1, 'hello', 3.0)\n\n\n\ntuple(list(t))\n\n(1, 'hello', 3.0)\n\n\nWe can convert a list to a tuple by calling the tuple function on a list.\n\nprint(\"x is a\", type(x))\nprint(\"tuple(x) is a\", type(tuple(x)))\ntuple(x)\n\nx is a &lt;class 'list'&gt;\ntuple(x) is a &lt;class 'tuple'&gt;\n\n\n(2, 9.1, 12.5)\n\n\nWe can also convert a tuple to a list using the list function.\n\nlist(t)\n\n[1, 'hello', 3.0]\n\n\nAs with a list, we access items in a tuple t using t[N] where N is an int.\n\nt[0]  # still start counting at 0\n\n1\n\n\n\nt[2]\n\n3.0\n\n\n\n\nExercise\nSee exercise 3 in the exercise list.\nTuples (and lists) can be unpacked directly into variables.\n\nx, y = (1, \"test\")\nprint(f\"x = {x}, y = {y}\")\n\nThis will be a convenient way to work with functions returning multiple values, as well as within comprehensions and loops.\n\n\nList vs Tuple: Which to Use?\nShould you use a list or tuple?\nThis depends on what you are storing, whether you might need to reorder the elements, or whether you’d add new elements without a complete reinterpretation of the underlying data.\nFor example, take data representing the GDP (in trillions) and population (in billions) for China in 2015.\n\nchina_data_2015 = (\"China\", 2015, 11.06, 1.371)\n\nprint(china_data_2015)\n\nIn this case, we have used a tuple since: (a) ordering would be meaningless; and (b) adding more data would require a reinterpretation of the whole data structure.\nOn the other hand, consider a list of GDP in China between 2013 and 2015.\n\ngdp_data = [9.607, 10.48, 11.06]\nprint(gdp_data)\n\nIn this case, we have used a list, since adding on a new element to the end of the list for GDP in 2016 would make complete sense.\nAlong these lines, collecting data on China for different years may make sense as a list of tuples (e.g. year, GDP, and population – although we will see better ways to store this sort of data in the Pandas section).\n\nchina_data = [(2015, 11.06, 1.371), (2014, 10.48, 1.364), (2013, 9.607, 1.357)]\nprint(china_data)\n\nIn general, a rule of thumb is to use a list unless you need to use a tuple.\nKey criteria for tuple use are when you want to:\n\nensure the order of elements can’t change\n\nensure the actual values of the elements can’t change\n\nuse the collection as a key in a dict (we will learn what this means soon)\n\n\n\nzip and enumerate\nTwo functions that can be extremely useful are zip and enumerate.\nBoth of these functions are best understood by example, so let’s see them in action and then talk about what they do.\n\ngdp_data = [9.607, 10.48, 11.06]\nyears = [2013, 2014, 2015]\nz = zip(years, gdp_data)\nprint(\"type(z)\", type(z))\n\ntype(z) &lt;class 'zip'&gt;\n\n\nTo see what is inside z, let’s convert it to a list.\n\nlist(z)\n\n[(2013, 9.607), (2014, 10.48), (2015, 11.06)]\n\n\nNotice that we now have a list where each item is a tuple.\nWithin each tuple, we have one item from each of the collections we passed to the zip function.\nIn particular, the first item in z contains the first item from [2013, 2014, 2015] and the first item from [9.607, 10.48, 11.06].\nThe second item in z contains the second item from each collection and so on.\nWe can access an element in this and then unpack the resulting tuple directly into variables.\n\nl = list(zip(years, gdp_data))\nx, y = l[0]\nprint(f\"year = {x}, GDP = {y}\")\n\nNow let’s experiment with enumerate.\n\ne = enumerate([\"a\", \"b\", \"c\"])\nprint(\"type(e)\", type(e))\ne\n\ntype(e) &lt;class 'enumerate'&gt;\n\n\n&lt;enumerate at 0x7fef3c8a01c0&gt;\n\n\nAgain, we call list(e) to see what is inside.\n\nlist(e)\n\n[(0, 'a'), (1, 'b'), (2, 'c')]\n\n\nWe again have a list of tuples, but this time, the first element in each tuple is the index of the second tuple element in the initial collection.\nNotice that the third item is (2, 'c') because [\"a\", \"b\", \"c\"][2] is 'c'\n\n\nExercise\nSee exercise 4 in the exercise list.\nAn important quirk of some iterable types that are not lists (such as the above zip) is that you cannot convert the same type to a list twice.\nThis is because zip, enumerate, and range produce what is called a generator.\nA generator will only produce each of its elements a single time, so if you call list on the same generator a second time, it will not have any elements to iterate over anymore.\nFor more information, refer to the Python documentation.\n\ngdp_data = [9.607, 10.48, 11.06]\nyears = [2013, 2014, 2015]\nz = zip(years, gdp_data)\nl = list(z)\nprint(l)\nm = list(z)\nprint(m)"
  },
  {
    "objectID": "tutorials/session_1/qe_collections.html#associative-collections",
    "href": "tutorials/session_1/qe_collections.html#associative-collections",
    "title": "Collections",
    "section": "Associative Collections",
    "text": "Associative Collections\n\n\nDictionaries\nA dictionary (or dict) associates keys with values.\nIt will feel similar to a dictionary for words, where the keys are words and the values are the associated definitions.\nThe most common way to create a dict is to use curly braces — { and } — like this:\n\n{\n    \"key1\": value1,\n    \"key2\": value2,\n    \"keyN\": valueN\n}\n\nwhere the ... indicates that we can have any number of additional terms.\nThe crucial part of the syntax is that each key-value pair is written key: value and that these pairs are separated by commas — ,.\nLet’s see an example using our aggregate data on China in 2015.\n\nchina_data = {\n    \"country\": \"China\",\n    \"year\": 2015,\n    \"GDP\" : 11.06,\n    \"population\": 1.371\n}\nprint(china_data)\n\n{'country': 'China', 'year': 2015, 'GDP': 11.06, 'population': 1.371}\n\n\nUnlike our above example using a tuple, a dict allows us to associate a name with each field, rather than having to remember the order within the tuple.\nOften, code that makes a dict is easier to read if we put each key: value pair on its own line. (Recall our earlier comment on using whitespace effectively to improve readability!)\nThe code below is equivalent to what we saw above.\n\nchina_data = {\n    \"country\": \"China\",\n    \"year\": 2015,\n    \"GDP\" : 11.06,\n    \"population\": 1.371\n}\n\nMost often, the keys (e.g. “country”, “year”, “GDP”, and “population”) will be strings, but we could also use numbers (int, or float) or even tuples (or, rarely, a combination of types).\nThe values can be any type and different from each other.\n\n\nExercise\nSee exercise 5 in the exercise list.\nThis next example is meant to emphasize how values can be anything – including another dictionary.\n\ncompanies = {\n    \"AAPL\": {\"bid\": 175.96, \"ask\": 175.98}, \n    \"GE\": {\"bid\": 1047.03, \"ask\": 1048.40},\n    \"TVIX\": {\"bid\": 8.38, \"ask\": 8.40}\n}\nprint(companies)\n\n{'AAPL': {'bid': 175.96, 'ask': 175.98}, 'GE': {'bid': 1047.03, 'ask': 1048.4}, 'TVIX': {'bid': 8.38, 'ask': 8.4}}\n\n\n\nGetting, Setting, and Updating dict Items\nWe can now ask Python to tell us the value for a particular key by using the syntax d[k], where d is our dict and k is the key for which we want to find the value.\nFor example,\n\nchina_data\n\n{'country': 'China', 'year': 2015, 'GDP': 11.06, 'population': 1.371}\n\n\n\nchina_data['year']\n\n2015\n\n\n\n\nprint(\n    f\"country = {china_data['country']}, population = {china_data['population']}\")\n\ncountry = China, population = 1.371\n\n\nNote: when inside of a formatting string, you can use ' instead of \" as above to ensure the formatting still works with the embedded code.\nIf we ask for the value of a key that is not in the dict, we will get an error.\n\n# uncomment the line below to see the error\n# china_data[\"inflation\"]\n\nWe can also add new items to a dict using the syntax d[new_key] = new_value.\nLet’s see some examples.\n\nchina_data\n\n{'country': 'China', 'year': 2015, 'GDP': 11.06, 'population': 1.371}\n\n\n\nchina_data[\"unemployment\"] = \"4.05%\"\nprint(china_data)\n\n{'country': 'China', 'year': 2015, 'GDP': 11.06, 'population': 1.371, 'unemployment': '4.05%'}\n\n\nTo update the value, we use assignment in the same way (which will create the key and value as required).\n\nprint(china_data)\nchina_data[\"unemployment\"] = \"4.051%\"\nprint(china_data)\n\n{'country': 'China', 'year': 2015, 'GDP': 11.06, 'population': 1.371, 'unemployment': '4.05%'}\n{'country': 'China', 'year': 2015, 'GDP': 11.06, 'population': 1.371, 'unemployment': '4.051%'}\n\n\nOr we could change the type.\n\nchina_data[\"unemployment\"] = False or True\nprint(china_data)\n\n{'country': 'China', 'year': 2015, 'GDP': 11.06, 'population': 1.371, 'unemployment': True}\n\n\n\n\nExercise\nSee exercise 6 in the exercise list.\n\n\nCommon dict Functionality\nWe can do some common things with dicts.\nWe will demonstrate them with examples below.\n\n# number of key-value pairs in a dict\nlen(china_data)\n\n5\n\n\n\n# get a list of all the keys\nlist(china_data.keys())\n\n['country', 'year', 'GDP', 'population', 'unemployment']\n\n\n\n# get a list of all the values\nlist(china_data.values())\n\n['China', 2015, 11.06, 1.371, True]\n\n\n\nmore_china_data = {\n    \"irrigated_land\": 690_070,\n    \"top_religions\":\n        {\"buddhist\": 18.2, \"christian\" : 5.1, \"muslim\": 1.8}\n}\n\n# Add all key-value pairs in mydict2 to mydict.\n# if the key already appears in mydict, overwrite the\n# value with the value in mydict2\nchina_data.update(more_china_data)\nchina_data\n\n{'country': 'China',\n 'year': 2015,\n 'GDP': 11.06,\n 'population': 1.371,\n 'unemployment': True,\n 'irrigated_land': 690070,\n 'top_religions': {'buddhist': 18.2, 'christian': 5.1, 'muslim': 1.8}}\n\n\n\ntype(china_data.get(\"book\"))\n\nNoneType\n\n\n\n# Get the value associated with a key or return a default value\n# use this to avoid the NameError we saw above if you have a reasonable\n# default value\nchina_data.get(\"irrigated_land\", \"Data Not Available\")\n\n690070\n\n\n\nchina_data.get(\"book\", \"Data Not Available\")\n\n'Data Not Available'\n\n\n\n\nExercise\nSee exercise 7 in the exercise list.\n\n\nExercise\nSee exercise 8 in the exercise list.\n\n\n\nSets (Optional)\nPython has an additional way to represent collections of items: sets.\nSets come up infrequently, but you should be aware of them.\nIf you are familiar with the mathematical concept of sets, then you will understand the majority of Python sets already.\nIf you don’t know the math behind sets, don’t worry: we’ll cover the basics of Python’s sets here.\nA set is an unordered collection of unique elements.\nThe syntax for creating a set uses curly bracket { and }.\n\n{item1, item2, ..., itemN}\n\nHere is an example.\n\ns = {1, \"hello\", 3.0}\nprint(\"s has type\", type(s))\ns\n\n\n\nExercise\nSee exercise 9 in the exercise list.\nAs with lists and tuples, we can check if something is in the set and check the set’s length:\n\nprint(\"len(s) =\", len(s))\n\"hello\" in s\n\nUnlike lists and tuples, we can’t extract elements of a set s using s[N] where N is a number.\n\n# Uncomment the line below to see what happens\n# s[1]\n\nThis is because sets are not ordered, so the notion of getting the second element (s[1]) is not well defined.\nWe add elements to a set s using s.add.\n\ns.add(100)\ns\n\n\ns.add(\"hello\") # nothing happens, why?\ns\n\nWe can also do set operations.\nConsider the set s from above and the set s2 = {\"hello\", \"world\"}.\n\ns.union(s2): returns a set with all elements in either s or s2\n\ns.intersection(s2): returns a set with all elements in both s and s2\n\ns.difference(s2): returns a set with all elements in s that aren’t in s2\n\ns.symmetric_difference(s2): returns a set with all elements in only one of s and s2\n\n\n\nExercise\nSee exercise 10 in the exercise list.\nAs with tuples and lists, a set function can convert other collections to sets.\n\nx = [1, 2, 3, 1]\nset(x)\n\n\nt = (1, 2, 3, 1)\nset(t)\n\nLikewise, we can convert sets to lists and tuples.\n\nlist(s)\n\n\ntuple(s)"
  },
  {
    "objectID": "tutorials/session_1/qe_collections.html#exercises",
    "href": "tutorials/session_1/qe_collections.html#exercises",
    "title": "Collections",
    "section": "Exercises",
    "text": "Exercises\n\nExercise 1\nIn the first cell, try y.append(z).\nIn the second cell try y.extend(z).\nExplain the behavior.\nWhen you are trying to explain use y.append? and y.extend? to see a description of what these methods are supposed to do.\n\ny = [\"a\", \"b\", \"c\"]\nz = [1, 2, 3]\n# \n\n['a', 'b', 'c', [1, 2, 3]]\n\n\n\ny = [\"a\", \"b\", \"c\"]\nz = [1, 2, 3]\n# \n\n['a', 'b', 'c', 1, 2, 3]\n\n\n(back to text)\n\n\nExercise 2\nExperiment with the other two versions of the range function.\n\na = 2\nN = 5\n\n# (range(a, N))\nlist(range(a, N))\n\n[2, 3, 4]\n\n\n\nrange?\n\n\nInit signature: range(self, /, *args, **kwargs)\nDocstring:     \nrange(stop) -&gt; range object\nrange(start, stop[, step]) -&gt; range object\nReturn an object that produces a sequence of integers from start (inclusive)\nto stop (exclusive) by step.  range(i, j) produces i, i+1, i+2, ..., j-1.\nstart defaults to 0, and stop is omitted!  range(4) produces 0, 1, 2, 3.\nThese are exactly the valid indices for a list of 4 elements.\nWhen step is given, it specifies the increment (or decrement).\nType:           type\nSubclasses:     \n\n\n\n\nd = 7\nlist(range(a, N, d)) \n\n[2]\n\n\n\nlist(range(0, 99, 2)) ;\n\n(back to text)\n\n[*range(0, 21, 5)]\n\n[0, 5, 10, 15, 20]\n\n\n\n\nExercise 3\nVerify that tuples are indeed immutable by attempting the following:\n\nChanging the first element of t to be 100\n\nAppending a new element \"!!\" to the end of t (remember with a list x we would use x.append(\"!!\") to do this\n\nSorting t\n\nReversing t\n\n\nt=(100,2,3,4)\n\n\nt+('!',)\n\n(100, 2, 3, 4, '!')\n\n\n\n# sorting t\nsorted(t)\n\n[2, 3, 4, 100]\n\n\n\n# reversing t\nt[::-1]  # from stackoverflow https://stackoverflow.com/questions/10201977/how-to-reverse-tuples-in-python\n\n(4, 3, 2, 100)\n\n\n(back to text)\n\n\nExercise 4\nChallenging For the tuple foo below, use a combination of zip, range, and len to mimic enumerate(foo).\nVerify that your proposed solution is correct by converting each to a list and checking equality with ==.\nYou can see what the answer should look like by starting with list(enumerate(foo)).\n\nfoo = (\"good\", \"luck!\")\n\n(back to text)\n\n\nExercise 5\nCreate a new dict which associates stock tickers with its stock price.\nHere are some tickers and a price.\n\nAAPL: 175.96\n\nGOOGL: 1047.43\n\nTVIX: 8.38\n\n\n# your code here\n\n(back to text)\n\n\nExercise 6\nLook at the World Factbook for Australia and create a dictionary with data containing the following types: float, string, integer, list, and dict. Choose any data you wish.\nTo confirm, you should have a dictionary that you identified via a key.\n\n# your code here\n\n(back to text)\n\n\nExercise 7\nUse Jupyter’s help facilities to learn how to use the pop method to remove the key \"irrigated_land\" (and its value) from the dict.\n\n# uncomment and use the Inspector or ?\n#china_data.pop()\n\n(back to text)\n\n\nExercise 8\nExplain what happens to the value you popped.\nExperiment with calling pop twice.\n\n# your code here\n\n(back to text)\n\n\nExercise 9\nTry creating a set with repeated elements (e.g. {1, 2, 1, 2, 1, 2}).\nWhat happens?\nWhy?\n\n# your code here\n\n(back to text)\n\n\nExercise 10\nTest out two of the operations described above using the original set we created, s, and the set created below s2.\n\ns2 = {\"hello\", \"world\"}\n\n\n# Operation 1\n\n\n# Operation 2\n\n(back to text)"
  },
  {
    "objectID": "tutorials/session_1/qe_functions_answers.html",
    "href": "tutorials/session_1/qe_functions_answers.html",
    "title": "Functions",
    "section": "",
    "text": "Prerequisites\nOutcomes"
  },
  {
    "objectID": "tutorials/session_1/qe_functions_answers.html#application-production-functions",
    "href": "tutorials/session_1/qe_functions_answers.html#application-production-functions",
    "title": "Functions",
    "section": "Application: Production Functions",
    "text": "Application: Production Functions\nProduction functions are useful when modeling the economics of firms producing goods or the aggregate output in an economy.\nThough the term “function” is used in a mathematical sense here, we will be making tight connections between the programming of mathematical functions and Python functions.\n\nFactors of Production\nThe factors of production are the inputs used in the production of some sort of output.\nSome example factors of production include\n\nPhysical capital, e.g. machines, buildings, computers, and power stations.\n\nLabor, e.g. all of the hours of work from different types of employees of a firm.\n\nHuman Capital, e.g. the knowledge of employees within a firm.\n\nA production function maps a set of inputs to the output, e.g. the amount of wheat produced by a farm, or widgets produced in a factory.\nAs an example of the notation, we denote the total units of labor and physical capital used in a factory as $ L $ and $ K $ respectively.\nIf we denote the physical output of the factory as $ Y $, then a production function $ F $ that transforms labor and capital into output might have the form:\n\\[\nY = F(K, L)\n\\]\n\n\n\nAn Example Production Function\nThroughout this lecture, we will use the Cobb-Douglas production function to help us understand how to create Python functions and why they are useful.\nThe Cobb-Douglas production function has appealing statistical properties when brought to data.\nThis function is displayed below.\n\\[\nY = z K^{\\alpha} L^{1-\\alpha}\n\\]\nThe function is parameterized by:\n\nA parameter $ $, called the “output elasticity of capital”.\n\nA value $ z $ called the Total Factor Productivity (TFP)."
  },
  {
    "objectID": "tutorials/session_1/qe_functions_answers.html#what-are-python-functions",
    "href": "tutorials/session_1/qe_functions_answers.html#what-are-python-functions",
    "title": "Functions",
    "section": "What are (Python) Functions?",
    "text": "What are (Python) Functions?\nIn this class, we will often talk about functions.\nSo what is a function?\nWe like to think of a function as a production line in a manufacturing plant: we pass zero or more things to it, operations take place in a set linear sequence, and zero or more things come out.\nWe use functions for the following purposes:\n\nRe-usability: Writing code to do a specific task just once, and reuse the code by calling the function.\n\nOrganization: Keep the code for distinct operations separated and organized.\n\nSharing/collaboration: Sharing code across multiple projects or sharing pieces of code with collaborators."
  },
  {
    "objectID": "tutorials/session_1/qe_functions_answers.html#how-to-define-python-functions",
    "href": "tutorials/session_1/qe_functions_answers.html#how-to-define-python-functions",
    "title": "Functions",
    "section": "How to Define (Python) Functions?",
    "text": "How to Define (Python) Functions?\nThe basic syntax to create our own function is as follows:\n\ndef function_name(inputs):\n    # step 1\n    # step 2\n    # ...\n    return outputs\n\nHere we see two new keywords: def and return.\n\ndef is used to tell Python we would like to define a new function.\n\nreturn is used to tell Python what we would like to return from a function.\n\nLet’s look at an example and then discuss each part:\n\ndef mean(numbers):\n    total = sum(numbers)\n    N = len(numbers)\n    answer = total / N\n\n    return answer\n\nHere we defined a function mean that has one input (numbers), does three steps, and has one output (answer).\nLet’s see what happens when we call this function on the list of numbers [1, 2, 3, 4].\n\nx = [1, 2, 3, 4]\nthe_mean = mean(x)\nthe_mean\n\nAdditionally, as we saw in the control flow lecture, indentation controls blocks of code (along with the scope rules).\nTo see this, compare a function with no inputs or return values.\n\ndef f():\n    print(\"1\")\n    print(\"2\")\nf()\n\nWith the following change of indentation…\n\ndef f():\n    print(\"1\")\nprint(\"2\")\nf()\n\n\n\nScope\nNotice that we named the input to the function x and we called the output the_mean.\nWhen we defined the function, the input was called numbers and the output answer… what gives?\nThis is an example of a programming concept called variable scope.\nIn Python, functions define their own scope for variables.\nIn English, this means that regardless of what name we give an input variable (x in this example), the input will always be referred to as numbers inside the body of the mean function.\nIt also means that although we called the output answer inside of the function mean, that this variable name was only valid inside of our function.\nTo use the output of the function, we had to give it our own name (the_mean in this example).\nAnother point to make here is that the intermediate variables we defined inside mean (total and N) are only defined inside of the mean function – we can’t access them from outside. We can verify this by trying to see what the value of total is:\n\ndef mean(numbers):\n    total = sum(numbers)\n    N = len(numbers)\n    answer = total / N\n    return answer # or directly return total / N\n\n# uncomment the line below and execute to see the error\n# total\n\nThis point can be taken even further: the same name can be bound to variables inside of blocks of code and in the outer “scope”.\n\nx = 4\nprint(f\"x = {x}\")\ndef f():\n    x = 5 # a different \"x\"\n    print(f\"x = {x}\")\nf() # calls function\nprint(f\"x = {x}\")\n\nThe final point we want to make about scope is that function inputs and output don’t have to be given a name outside the function.\n\nmean([10, 20, 30])\n\nNotice that we didn’t name the input or the output, but the function was called successfully.\nNow, we’ll use our new knowledge to define a function which computes the output from a Cobb-Douglas production function with parameters $ z = 1 $ and $ = 0.33 $ and takes inputs $ K $ and $ L $.\n\ndef cobb_douglas(K, L):\n\n    # Create alpha and z\n    z = 1\n    alpha = 0.33\n\n    return z * K**alpha * L**(1 - alpha)\n\nWe can use this function as we did the mean function.\n\ncobb_douglas(1.0, 0.5)\n\n\n\n\nRe-using Functions\nEconomists are often interested in this question: how much does output change if we modify our inputs?\nFor example, take a production function $ Y_1 = F(K_1,L_1) $ which produces $ Y_1 $ units of the goods.\nIf we then multiply the inputs each by $ \\(, so that\\) K_2 = K_1 $ and $ L_2 = L_1 $, then the output is\n\\[\nY_2 = F(K_2, L_2) = F(\\gamma K_1, \\gamma L_1)\n\\]\nHow does $ Y_1 $ compare to $ Y_2 $?\nAnswering this question involves something called returns to scale.\nReturns to scale tells us whether our inputs are more or less productive as we have more of them.\nFor example, imagine that you run a restaurant. How would you expect the amount of food you could produce would change if you could build an exact replica of your restaurant and kitchen and hire the same number of cooks and waiters? You would probably expect it to double.\nIf, for any $ K, L $, we multiply $ K, L $ by a value $ $ then\n\nIf $ &lt; $ then we say the production function has decreasing returns to scale.\n\nIf $ = $ then we say the production function has constant returns to scale.\n\nIf $ &gt; $ then we say the production function has increasing returns to scale.\n\nLet’s try it and see what our function is!\n\ny1 = cobb_douglas(1.0, 0.5)\nprint(y1)\ny2 = cobb_douglas(2*1.0, 2*0.5)\nprint(y2)\n\nHow did $ Y_1 $ and $ Y_2 $ relate?\n\ny2 / y1\n\n$ Y_2 $ was exactly double $ Y_1 $!\nLet’s write a function that will compute the returns to scale for different values of $ K $ and $ L $.\nThis is an example of how writing functions can allow us to re-use code in ways we might not originally anticipate. (You didn’t know we’d be writing a returns_to_scale function when we wrote cobb_douglas.)\n\ndef returns_to_scale(K, L, gamma):\n    y1 = cobb_douglas(K, L)\n    y2 = cobb_douglas(gamma*K, gamma*L)\n    y_ratio = y2 / y1\n    return y_ratio / gamma\n\n\nreturns_to_scale(1.0, 0.5, 2.0)\n\n\n\nExercise\nSee exercise 1 in the exercise list.\nIt turns out that with a little bit of algebra, we can check that this will always hold for our Cobb-Douglas example above.\nTo show this, take an arbitrary $ K, L $ and multiply the inputs by an arbitrary $ $.\n\\[\n\\begin{aligned}\n    F(\\gamma K, \\gamma L) &= z (\\gamma K)^{\\alpha} (\\gamma L)^{1-\\alpha}\\\\\n    &=  z \\gamma^{\\alpha}\\gamma^{1-\\alpha} K^{\\alpha} L^{1-\\alpha}\\\\\n    &= \\gamma z K^{\\alpha} L^{1-\\alpha} = \\gamma F(K, L)\n\\end{aligned}\n\\]\nFor an example of a production function that is not CRS, look at a generalization of the Cobb-Douglas production function that has different “output elasticities” for the 2 inputs.\n\\[\nY = z K^{\\alpha_1} L^{\\alpha_2}\n\\]\nNote that if $ _2 = 1 - _1 $, this is our Cobb-Douglas production function.\n\n\nExercise\nSee exercise 2 in the exercise list.\n\n\n\nMultiple Returns\nAnother valuable element to analyze on production functions is how output changes as we change only one of the inputs. We will call this the marginal product.\nFor example, compare the output using $ K, L $ units of inputs to that with an $ $ units of labor.\nThen the marginal product of labor (MPL) is defined as\n\\[\n\\frac{F(K, L + \\varepsilon) - F(K, L)}{\\varepsilon}\n\\]\nThis tells us how much additional output is created relative to the additional input. (Spoiler alert: This should look like the definition for a partial derivative!)\nIf the input can be divided into small units, then we can use calculus to take this limit, using the partial derivative of the production function relative to that input.\nIn this case, we define the marginal product of labor (MPL) and marginal product of capital (MPK) as\n\\[\n\\begin{aligned}\nMPL(K, L) &= \\frac{\\partial F(K, L)}{\\partial L}\\\\\nMPK(K, L) &= \\frac{\\partial F(K, L)}{\\partial K}\n\\end{aligned}\n\\]\nIn the Cobb-Douglas example above, this becomes\n\\[\n\\begin{aligned}\nMPK(K, L) &= z  \\alpha \\left(\\frac{K}{L} \\right)^{\\alpha - 1}\\\\\nMPL(K, L) &= (1-\\alpha) z \\left(\\frac{K}{L} \\right)^{\\alpha}\\\\\n\\end{aligned}\n\\]\nLet’s test it out with Python! We’ll also see that we can actually return multiple things in a Python function.\nThe syntax for a return statement with multiple items is return item1, item2, ….\nIn this case, we’ll compute both the MPL and the MPK and then return both.\n\ndef marginal_products(K, L, epsilon):\n\n    mpl = (cobb_douglas(K, L + epsilon) - cobb_douglas(K, L)) / epsilon\n    mpk = (cobb_douglas(K + epsilon, L) - cobb_douglas(K, L)) / epsilon\n\n    return mpl, mpk\n\n\ntup = marginal_products(1.0, 0.5,  1e-4)\nprint(tup)\n\nInstead of using the tuple, these can be directly unpacked to variables.\n\nmpl, mpk = marginal_products(1.0, 0.5,  1e-4)\nprint(f\"mpl = {mpl}, mpk = {mpk}\")\n\nWe can use this to calculate the marginal products for different K, fixing L using a comprehension.\n\nKs = [1.0, 2.0, 3.0]\n[marginal_products(K, 0.5, 1e-4) for K in Ks] # create a tuple for each K\n\n\n\nDocumentation\nIn a previous exercise, we asked you to find help for the cobb_douglas and returns_to_scale functions using ?.\nIt didn’t provide any useful information.\nTo provide this type of help information, we need to add what Python programmers call a “docstring” to our functions.\nThis is done by putting a string (not assigned to any variable name) as the first line of the body of the function (after the line with def).\nBelow is a new version of the template we used to define functions.\n\ndef function_name(inputs):\n    \"\"\"\n    Docstring\n    \"\"\"\n    # step 1\n    # step 2\n    # ...\n    return outputs\n\nLet’s re-define our cobb_douglas function to include a docstring.\n\ndef cobb_douglas(K, L):\n    \"\"\"\n    Computes the production F(K, L) for a Cobb-Douglas production function\n\n    Takes the form F(K, L) = z K^{\\alpha} L^{1 - \\alpha}\n\n    We restrict z = 1 and alpha = 0.33\n    \"\"\"\n    return 1.0 * K**(0.33) * L**(1.0 - 0.33)\n\nNow when we have Jupyter evaluate cobb_douglas?, our message is displayed (or use the Contextual Help window with Jupyterlab and Ctrl-I or Cmd-I).\n\ncobb_douglas?\n\nWe recommend that you always include at least a very simple docstring for nontrivial functions.\nThis is in the same spirit as adding comments to your code — it makes it easier for future readers/users (including yourself) to understand what the code does.\n\n\nExercise\nSee exercise 3 in the exercise list.\n\n\nDefault and Keyword Arguments\nFunctions can have optional arguments.\nTo accomplish this, we must these arguments a default value by saying name=default_value instead of just name as we list the arguments.\nTo demonstrate this functionality, let’s now make $ z $ and $ $ arguments to our cobb_douglas function!\n\ndef cobb_douglas(K, L, alpha=0.33, z=1):\n    \"\"\"\n    Computes the production F(K, L) for a Cobb-Douglas production function\n\n    Takes the form F(K, L) = z K^{\\alpha} L^{1 - \\alpha}\n    \"\"\"\n    return z * K**(alpha) * L**(1.0 - alpha)\n\nWe can now call this function by passing in just K and L. Notice that it will produce same result as earlier because alpha and z are the same as earlier.\n\ncobb_douglas(1.0, 0.5)\n\nHowever, we can also set the other arguments of the function by passing more than just K/L.\n\ncobb_douglas(1.0, 0.5, 0.35, 1.6)\n\nIn the example above, we used alpha = 0.35, z = 1.6.\nWe can also refer to function arguments by their name, instead of only their position (order).\nTo do this, we would write func_name(arg=value) for as many of the arguments as we want.\nHere’s how to do that with our cobb_douglas example.\n\ncobb_douglas(1.0, 0.5, z = 1.5)\n\n\n\nExercise\nSee exercise 4 in the exercise list.\nIn terms of variable scope, the z name within the function is different from any other z in the outer scope.\nTo be clear,\n\nx = 5\ndef f(x):\n    return x\nf(x) # \"coincidence\" that it has the same name\n\nThis is also true with named function arguments, above.\n\nz = 1.5\ncobb_douglas(1.0, 0.5, z = z) # no problem!\n\nIn that example, the z on the left hand side of z = z refers to the local variable name in the function whereas the z on the right hand side refers to the z in the outer scope.\n\n\nAside: Methods\nAs we learned earlier, all variables in Python have a type associated with them.\nDifferent types of variables have different functions or operations defined for them.\nFor example, I can divide one number by another or make a string uppercase.\nIt wouldn’t make sense to divide one string by another or make a number uppercase.\nWhen certain functionality is closely tied to the type of an object, it is often implemented as a special kind of function known as a method.\nFor now, you only need to know two things about methods:\n\nWe call them by doing variable.method_name(other_arguments) instead of function_name(variable, other_arguments).\n\nA method is a function, even though we call it using a different notation.\n\nWhen we introduced the core data types, we saw many methods defined on these types.\nLet’s revisit them for the str, or string type.\nNotice that we call each of these functions using the dot syntax described above.\n\ns = \"This is my handy string!\"\n\n\ns.upper()\n\n\ns.title()"
  },
  {
    "objectID": "tutorials/session_1/qe_functions_answers.html#more-on-scope-optional",
    "href": "tutorials/session_1/qe_functions_answers.html#more-on-scope-optional",
    "title": "Functions",
    "section": "More on Scope (Optional)",
    "text": "More on Scope (Optional)\nKeep in mind that with mathematical functions, the arguments are just dummy names that can be interchanged.\nThat is, the following are identical.\n\\[\n\\begin{eqnarray}\n    f(K, L) &= z\\, K^{\\alpha} L^{1-\\alpha}\\\\\n    f(K_2, L_2) &= z\\, K_2^{\\alpha} L_2^{1-\\alpha}\n\\end{eqnarray}\n\\]\nThe same concept applies to Python functions, where the arguments are just placeholder names, and our cobb_douglas function is identical to\n\ndef cobb_douglas2(K2, L2): # changed dummy variable names\n\n    # Create alpha and z\n    z = 1\n    alpha = 0.33\n\n    return z * K2**alpha * L2**(1 - alpha)\n\ncobb_douglas2(1.0, 0.5)\n\nThis is an appealing feature of functions for avoiding coding errors: names of variables within the function are localized and won’t clash with those on the outside (with more examples in scope).\nImportantly, when Python looks for variables matching a particular name, it begins in the most local scope.\nThat is, note that having an alpha in the outer scope does not impact the local one.\n\ndef cobb_douglas3(K, L, alpha): # added new argument\n\n    # Create alpha and z\n    z = 1\n\n    return z * K**alpha * L**(1 - alpha) # sees local argument alpha\n\nprint(cobb_douglas3(1.0, 0.5, 0.2))\nprint(\"Setting alpha, does the result change?\")\nalpha = 0.5 # in the outer scope\nprint(cobb_douglas3(1.0, 0.5, 0.2))\n\nA crucial element of the above function is that the alpha variable was available in the local scope of the function.\nConsider the alternative where it is not. We have removed the alpha function parameter as well as the local definition of alpha.\n\ndef cobb_douglas4(K, L): # added new argument\n\n    # Create alpha and z\n    z = 1\n\n    # there are no local alpha in scope!\n    return z * K**alpha * L**(1 - alpha)\n\nalpha = 0.2 # in the outer scope\nprint(f\"alpha = {alpha} gives {cobb_douglas4(1.0, 0.5)}\")\nalpha = 0.3\nprint(f\"alpha = {alpha} gives {cobb_douglas4(1.0, 0.5)}\")\n\nThe intuition of scoping does not apply only for the “global” vs. “function” naming of variables, but also for nesting.\nFor example, we can define a version of cobb_douglas which is also missing a z in its inner-most scope, then put the function inside of another function.\n\nz = 1\ndef output_given_alpha(alpha):\n    # Scoping logic:\n    # 1. local function name doesn't clash with global one\n    # 2. alpha comes from the function parameter\n    # 3. z comes from the outer global scope\n    def cobb_douglas(K, L):\n        return z * K**alpha * L**(1 - alpha)\n\n    # using this function\n    return cobb_douglas(1.0, 0.5)\n\nalpha = 100 # ignored\nalphas = [0.2, 0.3, 0.5]\n# comprehension variables also have local scope\n# and don't clash with the alpha = 100\n[output_given_alpha(alpha) for alpha in alphas]"
  },
  {
    "objectID": "tutorials/session_1/qe_functions_answers.html#exercises",
    "href": "tutorials/session_1/qe_functions_answers.html#exercises",
    "title": "Functions",
    "section": "Exercises",
    "text": "Exercises\n\nExercise 1\nWhat happens if we try different inputs in our Cobb-Douglas production function?\n\n# Compute returns to scale with different values of `K` and `L` and `gamma`\n\n(back to text)\n\n\nExercise 2\nDefine a function named var that takes a list (call it x) and computes the variance. This function should use the mean function that we defined earlier.\n$ = _i (x_i - (x))^2 $\n\n# Your code here.\n\n(back to text)\n\n\nExercise 3\nRedefine the returns_to_scale function and add a docstring.\nConfirm that it works by running the cell containing returns_to_scale? below.\nNote: You do not need to change the actual code in the function — just copy/paste and add a docstring in the correct line.\n\n# re-define the `returns_to_scale` function here\n\n\n# test it here\n\nreturns_to_scale?\n\n(back to text)\n\n\nExercise 4\nExperiment with the sep and end arguments to the print function.\nThese can only be set by name.\n\n# Your code here.\n\n(back to text)"
  },
  {
    "objectID": "tutorials/session_1/qe_control.html",
    "href": "tutorials/session_1/qe_control.html",
    "title": "Control Flow",
    "section": "",
    "text": "Prerequisites\nOutcomes"
  },
  {
    "objectID": "tutorials/session_1/qe_control.html#net-present-values-and-asset-pricing",
    "href": "tutorials/session_1/qe_control.html#net-present-values-and-asset-pricing",
    "title": "Control Flow",
    "section": "Net Present Values and Asset Pricing",
    "text": "Net Present Values and Asset Pricing\nIn this lecture, we’ll introduce two related topics from economics:\n\nNet present valuations\n\nAsset pricing\n\nThese topics will motivate some of the programming we do in this course.\nIn economics and finance, “assets” provide a stream of payoffs.\nThese “assets” can be concrete or abstract: a stock pays dividends over time, a bond pays interest, an apple tree provides apples, a job pays wages, and an education provides possible jobs (which, in turn, pay wages).\nWhen deciding the price to pay for an asset or how to choose between different alternatives, we need to take into account that most people would prefer to receive 1 today vs. 1 next year.\nThis reflection on consumer preferences leads to the notion of a discount rate. If you are indifferent between receiving 1.00 today and 1.10 next year, then the discount rate over the next year is $ r = 0.10 $.\nIf we assume that an individuals preferences are consistent over time, then we can apply that same discount rate to valuing assets further into the future.\nFor example, we would expect that the consumer would be indifferent between consuming 1.00 today and $ (1+r)(1+r) = 1.21 $ dollars two years from now (i.e. discount twice).\nInverting this formula, 1 delivered two years from now is equivalent to $ $ today."
  },
  {
    "objectID": "tutorials/session_1/qe_control.html#exercise",
    "href": "tutorials/session_1/qe_control.html#exercise",
    "title": "Control Flow",
    "section": "Exercise",
    "text": "Exercise\nSee exercise 1 in the exercise list.\n\n\nNet Present Value\nIf an asset pays a stream of payoffs over multiple time periods, then we can use a discount rate to calculate the value to the consumer of a entire sequence of payoffs.\nMost generally, we enumerate each discrete time period (e.g. year, month, day) by the index $ t $ where today is $ t=0 $ and the asset lives for $ T $ periods.\nList the payoff at each time period as $ y_t $, which we will assume, for now, is known in advance.\nThen if the discount factor is $ r $, the consumer “values” the payoff $ y_t $ delivered at time $ t $ as $ y_t $ where we note that if $ t=0 \\(, the value is just the current payoff\\) y_0 $.\nUsing this logic, we can write an expression for the value of the entire sequence of payoffs with a sum.\n \\[\nP_0 = \\sum_{t=0}^T \\left(\\frac{1}{1 + r}\\right)^t y_t \\tag{1}\n\\]\nIf $ y_t $ is a constant, then we can compute this sum with a simple formula!\nBelow, we present some useful formulas that come from infinite series that we will use to get our net present value formula.\nFor any constant $ 0 &lt; &lt; 1 $ and integer value $ &gt; 0 $,\n \\[\n\\begin{aligned}\n\\sum_{t=0}^{\\infty} \\beta^t & = \\frac{1}{1-\\beta}\\\\\n\\sum_{t=0}^{\\tau} \\beta^t &= \\frac{1- \\beta^{\\tau+1}}{1-\\beta}\\\\\n\\sum_{t=\\tau}^{\\infty} \\beta^t &=  \\frac{\\beta^{\\tau}}{1-\\beta}\n\\end{aligned} \\tag{2}\n\\]\nIn the case of an asset which pays one dollar until time $ T $, we can use these formulas, taking $ = $ and $ T = $, to find\n\\[\n\\begin{aligned}\nP_0 &= \\sum_{t=0}^T \\left(\\frac{1}{1 + r}\\right)^t = \\frac{1- (\\frac{1}{1+r})^{\\tau+1}}{1-\\frac{1}{1+r}}\\\\\n&= \\frac{1 + r}{r} - \\frac{1}{r}\\left(\\frac{1}{1+r} \\right)^\\tau\n\\end{aligned}\n\\]\nNote that we can also consider an asset that lives and pays forever if $ T= $, and from (2), the value of an asset which pays 1 forever is $ $."
  },
  {
    "objectID": "tutorials/session_1/qe_control.html#conditional-statements-and-blocks",
    "href": "tutorials/session_1/qe_control.html#conditional-statements-and-blocks",
    "title": "Control Flow",
    "section": "Conditional Statements and Blocks",
    "text": "Conditional Statements and Blocks\nSometimes, we will only want to execute some piece of code if a certain condition is met.\nThese conditions can be anything.\nFor example, we might add to total sales if the transaction value is positive, but add to total returns if the value is negative.\nOr, we might want to add up all incurred costs, only if the transaction happened before a certain date.\nWe use conditionals to run particular pieces of code when certain criterion are met.\nConditionals are closely tied to booleans, so if you don’t remember what those are, go back to the basics lecture for a refresher.\nThe basic syntax for conditionals is\n\nif condition:\n        \n    # code to run when condition is True\nelse:\n    # code to run if no conditions above are True\n\nNote that immediately following the condition, there is a colon and that the next line begins with blank spaces.\nUsing 4 spaces is a very strong convention, so that is what we do — we recommend that you do the same.\nAlso note that the else clause is optional.\nLet’s see some simple examples.\n\nif True:\n    print(\"This is where `True` code is run\")\n\nThis is where `True` code is run\n\n\nAlternatively, you could have a test which returns a booleans\n\nif 1 &lt; 2:\n     print(\"This is where `True` code is run\")\n\nThis is where `True` code is run\n\n\nThis example is equivalent to just typing the print statement, but the example below isn’t…\n\nif False:\n    print(\"This is where `True` code is run\")\n\nOr\n\nif 1 &gt; 2:\n     print(\"This is where `True` code is run\")\n\nNotice that when you run the cells above nothing is printed.\nThat is because the condition for the if statement was not true, so the code inside the indented block was never run.\nThis also allows us to demonstrate the role of indentation in determining the “block” of code.\n\nval = False\n\nif val is True: # check an expression\n    print(\"This is where `True` code is run\")\n    print(\"More code in the if block\")\n    print(\"Code runs after 'if' block, regardless of val\")"
  },
  {
    "objectID": "tutorials/session_1/qe_control.html#exercise-1",
    "href": "tutorials/session_1/qe_control.html#exercise-1",
    "title": "Control Flow",
    "section": "Exercise",
    "text": "Exercise\nSee exercise 2 in the exercise list.\nThe next example shows us how else works.\n\nval = (2 == 4)  # returns False\nif val is True:\n    print(\"This is where `True` code is run\")\nelse:\n    print(\"This is where `False` code is run\")\n    print(\"More else code\")\nprint(\"Code runs after 'if' block, regardless of val\")\n\nThe if False: ... part of this example is the same as the example before, but now, we added an else: clause.\nIn this case, because the conditional for the if statement was not True, the if code block was not executed, but the else block was.\nFinally, the Condition is True is assumed in the if statement, and is often left out. For example, the following are identical\n\nif (1 &lt; 2) is True:\n    print(\"1 &lt; 2\")\n\nif 1 &lt; 2:\n    print(\"1 &lt; 2\")"
  },
  {
    "objectID": "tutorials/session_1/qe_control.html#exercise-2",
    "href": "tutorials/session_1/qe_control.html#exercise-2",
    "title": "Control Flow",
    "section": "Exercise",
    "text": "Exercise\nSee exercise 3 in the exercise list."
  },
  {
    "objectID": "tutorials/session_1/qe_control.html#exercise-3",
    "href": "tutorials/session_1/qe_control.html#exercise-3",
    "title": "Control Flow",
    "section": "Exercise",
    "text": "Exercise\nSee exercise 4 in the exercise list.\n\nelif clauses\nSometimes, you have more than one condition you want to check.\nFor example, you might want to run a different set of code based on which quarter a particular transaction took place in.\nIn this case you could check whether the date is in Q1, or in Q2, or in Q3, or if not any of these it must be in Q4.\nThe way to express this type of conditional is to use one or more elif clause in addition to the if and the else.\nThe syntax is\n\nif condition1:\n    # code to run when condition1 is True\nelif condition2:\n    # code to run when condition2 is True\nelif condition3:\n    # code to run when condition3 is True\nelse:\n    # code to run when none of the above are true\n\nYou can include as many elif clauses as you want.\nAs before, the else part is optional.\nHere’s how we might express the quarter example referred to above.\n\nimport datetime\nhalloween = datetime.date(2017, 10, 31)\n\nif halloween.month &gt; 9:\n    print(\"Halloween is in Q4\")\nelif halloween.month &gt; 6:\n    print(\"Halloween is in Q3\")\nelif halloween.month &gt; 3:\n    print(\"Halloween is in Q2\")\nelse:\n    print(\"Halloween is in Q1\")\n\nNote that when there are multiple if or elif conditions, only the code corresponding to the first true clause is run.\nWe saw this in action above.\nWe know that when halloween.month &gt; 9 is true, then halloween.month &gt; 6 and halloween.month &gt; 3 must also be true, but only the code block associated with halloween.month &gt; 9 was printed."
  },
  {
    "objectID": "tutorials/session_1/qe_control.html#iteration",
    "href": "tutorials/session_1/qe_control.html#iteration",
    "title": "Control Flow",
    "section": "Iteration",
    "text": "Iteration\nWhen doing computations or analyzing data, we often need to repeat certain operations a finite number of times or until some condition is met.\nExamples include processing all data files in a directory (folder), aggregating revenues and costs for every period in a year, or computing the net present value of certain assets. (In fact, later in this section, we will verify the equations that we wrote down above.)\nThese are all examples of a programming concept called iteration.\nWe feel the concept is best understood through example, so we will present a contrived example and then discuss the details behind doing iteration in Python.\n\nA Contrived Example\nSuppose we wanted to print out the first 10 integers and their squares.\nWe could do something like this.\n\nprint(f\"1**2  is: {1**2}\")\nprint(f\"2**2  is: {2**2}\")\nprint(f\"3**2  is: {3**2}\")\nprint(f\"4**2  is: {4**2}\")\n# .. and so on until 10\n\n1**2  is: 1\n2**2  is: 4\n3**2  is: 9\n4**2  is: 16\n\n\nAs you can see, the code above is repetitive.\nFor each integer, the code is exactly the same except for the two places where the “current” integer appears.\nSuppose that I asked you to write the same print statement for an int stored in a variable named i.\nYou might write the following code:\n\nprint(f\"{i}**2 = {i**2}\")\n\nThis more general version of the operation suggests a strategy for achieving our goal with less repetition: have a variable i take on the values 1 through 10 (Quiz: How can we use range to create the numbers 1 to 10?) and run the line of code above for each new value of i.\nThis can be accomplished with a for loop!\n\nfor i in range(1, 10):\n    print(f\"{i}**2 = {i**2}\")\n\n1**2 = 1\n2**2 = 4\n3**2 = 9\n4**2 = 16\n5**2 = 25\n6**2 = 36\n7**2 = 49\n8**2 = 64\n9**2 = 81\n\n\nWhoa, what just happened?\nThe integer i took on the values in range(1, 11) one by one and for each new value it did the operations in the indented block (here just one line that called the print function).\n\n\nfor Loops\nThe general structure of a standard for loop is as follows.\n\nfor item in iterable:\n   # operation 1 with item\n   # operation 2 with item\n   # ...\n   # operation N with item\n\nwhere iterable is anything capable of producing one item at a time (see here for official definition from the Python team).\nWe’ve actually already seen some of the most common iterables!\nLists, tuples, dicts, and range/zip/enumerate objects are all iterables.\nNote that we can have as many operations as we want inside the indented block.\nWe will refer to the indented block as the “body” of the loop.\nWhen the for loop is executed, item will take on one value from iterable at a time and execute the loop body for each value.\n\n\n\nExercise\nSee exercise 5 in the exercise list.\nWhen iterating, each item in iterable might actually contain more than one value.\nRecall that tuples (and lists) can be unpacked directly into variables.\n\ntup = (4, \"test\")\ni, x = tup\nprint(f\"i = {i}, x = {x}, tup = {tup}\")\n\nAlso, recall that the value of a enumerate(iterable) is a tuple of the form (i, x) where iterable[i] == x.\nWhen we use enumerate in a for loop, we can “unpack” both values at the same time as follows:\n\n# revenue by quarter\ncompany_revenue = [5.12, 5.20, 5.50, 6.50]\n\nfor index, value in enumerate(company_revenue):\n    print(f\"quarter {index} revenue is ${value} million\")\n\nSimilarly, the index can be used to access another vector.\n\ncities = [\"Phoenix\", \"Austin\", \"San Diego\", \"New York\"]\nstates = [\"Arizona\", \"Texas\", \"California\", \"New York\"]\nfor index, city in enumerate(cities):\n    state = states[index]\n    print(f\"{city} is in {state}\")\n\n\n\nExercise\nSee exercise 6 in the exercise list.\n\n\nwhile Loops\nA related but slightly different form of iteration is to repeat something until some condition is met.\nThis is typically achieved using a while loop.\nThe structure of a while loop is\n\nwhile True_condition:\n    # repeat these steps\n\nwhere True_condition is some conditional statement that should evaluate to True when iterations should continue and False when Python should stop iterating.\nFor example, suppose we wanted to know the smallest N such that $ _{i=0}^N i &gt; 1000 $.\nWe figure this out using a while loop as follows.\n\ntotal = 0\ni = 0\nwhile total &lt;= 1000:\n    i = i + 1\n    total = total + i\n\nprint(\"The answer is\", i)\n\nLet’s check our work.\n\n# Should be just less than 1000 because range(45) goes from 0 to 44\nsum(range(45))\n\n\n# should be between 990 + 45 = 1035\nsum(range(46))\n\nA warning: one common programming error with while loops is to forget to set the variable you use in the condition prior to executing. For example, take the following code which correctly sets a counter\n\ni = 0\n\nAnd then executes a while loop\n\nwhile i &lt; 3:\n    print(i)\n    i = i + 1\nprint(\"done\")\n\nNo problems. But if you were to execute the above cell again, or another cell, the i=3 remains, and code is never executed (since i &lt; 3 begins as False).\n\nwhile i &lt; 3:\n    print(i)\n    i = i + 1\nprint(\"done\")\n\n\n\nExercise\nSee exercise 7 in the exercise list.\n\n\nbreak and continue\n\nbreak Out of a Loop\nSometimes we want to stop a loop early if some condition is met.\nLet’s revisit the example of finding the smallest N such that $ _{i=0}^N i &gt; 1000 $.\nClearly N must be less than 1000, so we know we will find the answer if we start with a for loop over all items in range(1001).\nThen, we can keep a running total as we proceed and tell Python to stop iterating through our range once total goes above 1000.\n\ntotal = 0\nfor i in range(1001):\n    total = total + i\n    if total &gt; 1000:\n        break\n\nprint(\"The answer is\", i)\n\n\n\nExercise\nSee exercise 8 in the exercise list.\n\n\ncontinue to the Next Iteration\nSometimes we might want to stop the body of a loop early if a condition is met.\nTo do this we can use the continue keyword.\nThe basic syntax for doing this is:\n\nfor item in iterable:\n    # always do these operations\n    if condition:\n        continue\n\n    # only do these operations if condition is False\n\nInside the loop body, Python will stop that loop iteration of the loop and continue directly to the next iteration when it encounters the continue statement.\nFor example, suppose I ask you to loop over the numbers 1 to 10 and print out the message “{i} An odd number!” whenever the number i is odd, and do nothing otherwise.\nYou can use continue to do this as follows:\n\nfor i in range(1, 11):\n    if i % 2 == 0:  # an even number... This is modulus division\n        continue\n\n    print(i, \"is an odd number!\")\n\n\n\nExercise\nSee exercise 9 in the exercise list."
  },
  {
    "objectID": "tutorials/session_1/qe_control.html#comprehension",
    "href": "tutorials/session_1/qe_control.html#comprehension",
    "title": "Control Flow",
    "section": "Comprehension",
    "text": "Comprehension\nOften, we will want to perform a very simple operation for every element of some iterable and create a new iterable with these values.\nThis could be done by writing a for loop and saving each value, but often using what is called a comprehension is more readable.\nLike many Python concepts, a comprehension is easiest to understand through example.\nImagine that we have a list x with a list of numbers. We would like to create a list x2 which has the squared values of x.\n\nx = list(range(4))\n\n# Create squared values with a loop\nx2_loop = []\nfor x_val in x:\n    x2_loop.append(x_val**2)\n\n# Create squared values with a comprehension\nx2_comp = [x_val**2 for x_val in x]\n\nprint(x2_loop)\nprint(x2_comp)\n\nNotice that much of the same text appears when we do the operation in the loop and when we do the operation with the comprehension.\n\nWe need to specify what we are iterating over – in both cases, this is for x_val in x.\n\nWe need to square each element x_val**2.\n\nIt needs to be stored somewhere – in x2_loop, this is done by appending each element to a list, and in x2_comp, this is done automatically because the operation is enclosed in a list.\n\nWe can do comprehension with many different types of iterables, so we demonstrate a few more below.\n\n# Create a dictionary from lists\ntickers = [\"AAPL\", \"GOOGL\", \"TVIX\"]\nprices = [175.96, 1047.43, 8.38]\nd = {key: value for key, value in zip(tickers, prices)}\nd\n\n\n# Create a list from a dictionary\nd = {\"AMZN\": \"Seattle\", \"TVIX\": \"Zurich\", \"AAPL\": \"Cupertino\"}\n\nhq_cities = [d[ticker] for ticker in d.keys()]\nhq_cities\n\n\nimport math\n\n# List from list\nx = range(10)\n\nsin_x = [math.sin(x_val) for x_val in x]\nsin_x"
  },
  {
    "objectID": "tutorials/session_1/qe_control.html#exercise-9",
    "href": "tutorials/session_1/qe_control.html#exercise-9",
    "title": "Control Flow",
    "section": "Exercise",
    "text": "Exercise\nSee exercise 10 in the exercise list.\nFinally, we can use this approach to build complicated nested dictionaries.\n\ngdp_data = [9.607, 10.48, 11.06]\nyears = [2013, 2014, 2015]\nexports = [ {\"manufacturing\": 2.4, \"agriculture\": 1.5, \"services\": 0.5},\n            {\"manufacturing\": 2.5, \"agriculture\": 1.4, \"services\": 0.9},\n            {\"manufacturing\": 2.7, \"agriculture\": 1.4, \"services\": 1.5}]\ndata = zip(years, gdp_data,exports)\ndata_dict = {year : {\"gdp\" : gdp, \"exports\": exports} for year, gdp, exports in data}\nprint(data_dict)\n\n# total exports by year\n[data_dict[year][\"exports\"][\"services\"] for year in data_dict.keys()]"
  },
  {
    "objectID": "tutorials/session_1/qe_control.html#exercises",
    "href": "tutorials/session_1/qe_control.html#exercises",
    "title": "Control Flow",
    "section": "Exercises",
    "text": "Exercises\n\nExercise 1\nGovernment bonds are often issued as zero-coupon bonds meaning that they make no payments throughout the entire time that they are held, but, rather make a single payment at the time of maturity.\nHow much should you be willing to pay for a zero-coupon bond that paid 100 in 10 years with an interest rate of 5%?\n\n# your code here\n\n(back to text)\n\n\nExercise 2\nRun the following two variations on the code with only a single change in the indentation.\nAfter, modify the x to print 3 and then 2, 3 instead.\n\nx = 1\n\nif x &gt; 0:\n    print(\"1\")\n    print(\"2\")\nprint(\"3\")\n\n1\n2\n3\n\n\n\nx = 1\n\nif x &gt; 0:\n    print(\"1\")\nprint(\"2\") # changed the indentation\nprint(\"3\")\n\n1\n2\n3\n\n\n(back to text)\n\n\nExercise 3\nUsing the code cell below as a start, print \"Good afternoon\" if the current_time is past noon.\nOtherwise, do nothing.\nWrite some conditional based on current_time.hour.\n\nimport datetime\ncurrent_time = datetime.datetime.now()\n\n## your code here\n\nmore text after\n(back to text)\n\n\nExercise 4\nIn this example, you will generate a random number between 0 and 1 and then display “x &gt; 0.5” or “x &lt; 0.5” depending on the value of the number.\nThis also introduces a new package numpy.random for drawing random numbers (more in the randomness lecture).\n\nimport numpy as np\nx = np.random.random()\nprint(f\"x = {x}\")\n\n## your code here\n\n(back to text)\n\n\nExercise 5\nIn economics, when an individual has some knowledge, skills, or education which provides them with a source of future income, we call it human capital.\nWhen a student graduating from high school is considering whether to continue with post-secondary education, they may consider that it gives them higher paying jobs in the future, but requires that they don’t begin working until after graduation.\nConsider the simplified example where a student has perfectly forecastable employment and is given two choices:\n\nBegin working immediately and make 40,000 a year until they retire 40 years later.\n\nPay 5,000 a year for the next 4 years to attend university, then get a job paying 50,000 a year until they retire 40 years after making the college attendance decision.\n\nShould the student enroll in school if the discount rate is r = 0.05?\n\n# Discount rate\nr = 0.05\n\n# High school wage\nw_hs = 40_000\n\n# College wage and cost of college\nc_college = 5_000\nw_college = 50_000\n\n# Compute npv of being a hs worker\n\n# Compute npv of attending college\n\n# Compute npv of being a college worker\n\n# Is npv_collegeworker - npv_collegecost &gt; npv_hsworker\n\n(back to text)\n\n\nExercise 6\nInstead of the above, write a for loop that uses the lists of cities and states below to print the same “{city} is in {state}” using a zip instead of an enumerate.\nTry using zip\n\ncities = [\"Phoenix\", \"Austin\", \"San Diego\", \"New York\"]\nstates = [\"Arizona\", \"Texas\", \"California\", \"New York\"]\n\n# Your code here\n\n(back to text)\n\n\nExercise 7\nCompanies often invest in training their employees to raise their productivity. Economists sometimes wonder why companies spend this money when this incentivizes other companies to hire their employees away with higher salaries since employees gain human capital from training?\nLet’s say that it costs a company 25,000 dollars to teach their employees Python, but it raises their output by 2,500 per month. How many months would an employee need to stay for the company to find it profitable to pay for their employees to learn Python if their discount rate is r = 0.01?\n\n# Define cost of teaching python\ncost = 25_000\nr = 0.01\n\n# Per month value\nadded_value = 2500\n\nn_months = 0\ntotal_npv = 0.0\n\n# Put condition below here\nwhile False: # (replace False with your condition here)\n    n_months = n_months + 1  # Increment how many months they've worked\n\n    # Increase total_npv\n\n(back to text)\n\n\nExercise 8\nTry to find the index of the first value in x that is greater than 0.999 using a for loop and break.\ntry iterating over range(len(x)).\n\nx = np.random.rand(10_000)\n# Your code here\n\n(back to text)\n\n\nExercise 9\nWrite a for loop that adds up all values in x that are greater than or equal to 0.5.\nUse the continue word to end the body of the loop early for all values of x that are less than 0.5.\nTry starting your loop with for value in x: instead of iterating over the indices of x.\n\nx = np.random.rand(10_000)\n# Your code here\n\n(back to text)\n\n\nExercise 10\nReturning to our previous example: print “{city} is in {state}” for each combination using a zip and a comprehension.\nTry using zip\n\ncities = [\"Phoenix\", \"Austin\", \"San Diego\", \"New York\"]\nstates = [\"Arizona\", \"Texas\", \"California\", \"New York\"]\n\n# your code here\n\n(back to text)"
  },
  {
    "objectID": "tutorials/session_1/qe_functions.html",
    "href": "tutorials/session_1/qe_functions.html",
    "title": "Functions",
    "section": "",
    "text": "Prerequisites\nOutcomes"
  },
  {
    "objectID": "tutorials/session_1/qe_functions.html#application-production-functions",
    "href": "tutorials/session_1/qe_functions.html#application-production-functions",
    "title": "Functions",
    "section": "Application: Production Functions",
    "text": "Application: Production Functions\nProduction functions are useful when modeling the economics of firms producing goods or the aggregate output in an economy.\nThough the term “function” is used in a mathematical sense here, we will be making tight connections between the programming of mathematical functions and Python functions.\n\nFactors of Production\nThe factors of production are the inputs used in the production of some sort of output.\nSome example factors of production include\n\nPhysical capital, e.g. machines, buildings, computers, and power stations.\n\nLabor, e.g. all of the hours of work from different types of employees of a firm.\n\nHuman Capital, e.g. the knowledge of employees within a firm.\n\nA production function maps a set of inputs to the output, e.g. the amount of wheat produced by a farm, or widgets produced in a factory.\nAs an example of the notation, we denote the total units of labor and physical capital used in a factory as $ L $ and $ K $ respectively.\nIf we denote the physical output of the factory as $ Y $, then a production function $ F $ that transforms labor and capital into output might have the form:\n\\[\nY = F(K, L)\n\\]\n\n\n\nAn Example Production Function\nThroughout this lecture, we will use the Cobb-Douglas production function to help us understand how to create Python functions and why they are useful.\nThe Cobb-Douglas production function has appealing statistical properties when brought to data.\nThis function is displayed below.\n\\[\nY = z K^{\\alpha} L^{1-\\alpha}\n\\]\nThe function is parameterized by:\n\nA parameter $ $, called the “output elasticity of capital”.\n\nA value $ z $ called the Total Factor Productivity (TFP)."
  },
  {
    "objectID": "tutorials/session_1/qe_functions.html#what-are-python-functions",
    "href": "tutorials/session_1/qe_functions.html#what-are-python-functions",
    "title": "Functions",
    "section": "What are (Python) Functions?",
    "text": "What are (Python) Functions?\nIn this class, we will often talk about functions.\nSo what is a function?\nWe like to think of a function as a production line in a manufacturing plant: we pass zero or more things to it, operations take place in a set linear sequence, and zero or more things come out.\nWe use functions for the following purposes:\n\nRe-usability: Writing code to do a specific task just once, and reuse the code by calling the function.\n\nOrganization: Keep the code for distinct operations separated and organized.\n\nSharing/collaboration: Sharing code across multiple projects or sharing pieces of code with collaborators."
  },
  {
    "objectID": "tutorials/session_1/qe_functions.html#how-to-define-python-functions",
    "href": "tutorials/session_1/qe_functions.html#how-to-define-python-functions",
    "title": "Functions",
    "section": "How to Define (Python) Functions?",
    "text": "How to Define (Python) Functions?\nThe basic syntax to create our own function is as follows:\n\ndef function_name(inputs):\n    # step 1\n    # step 2\n    # ...\n    return outputs\n\nHere we see two new keywords: def and return.\n\ndef is used to tell Python we would like to define a new function.\n\nreturn is used to tell Python what we would like to return from a function.\n\nLet’s look at an example and then discuss each part:\n\ndef mean(numbers):\n    total = sum(numbers)\n    N = len(numbers)\n    answer = total / N\n\n    return answer\n\nHere we defined a function mean that has one input (numbers), does three steps, and has one output (answer).\nLet’s see what happens when we call this function on the list of numbers [1, 2, 3, 4].\n\nx = [1, 2, 3, 4]\nthe_mean = mean(x)\nthe_mean\n\nAdditionally, as we saw in the control flow lecture, indentation controls blocks of code (along with the scope rules).\nTo see this, compare a function with no inputs or return values.\n\ndef f():\n    print(\"1\")\n    print(\"2\")\nf()\n\nWith the following change of indentation…\n\ndef f():\n    print(\"1\")\nprint(\"2\")\nf()\n\n\n\nScope\nNotice that we named the input to the function x and we called the output the_mean.\nWhen we defined the function, the input was called numbers and the output answer… what gives?\nThis is an example of a programming concept called variable scope.\nIn Python, functions define their own scope for variables.\nIn English, this means that regardless of what name we give an input variable (x in this example), the input will always be referred to as numbers inside the body of the mean function.\nIt also means that although we called the output answer inside of the function mean, that this variable name was only valid inside of our function.\nTo use the output of the function, we had to give it our own name (the_mean in this example).\nAnother point to make here is that the intermediate variables we defined inside mean (total and N) are only defined inside of the mean function – we can’t access them from outside. We can verify this by trying to see what the value of total is:\n\ndef mean(numbers):\n    total = sum(numbers)\n    N = len(numbers)\n    answer = total / N\n    return answer # or directly return total / N\n\n# uncomment the line below and execute to see the error\n# total\n\nThis point can be taken even further: the same name can be bound to variables inside of blocks of code and in the outer “scope”.\n\nx = 4\nprint(f\"x = {x}\")\ndef f():\n    x = 5 # a different \"x\"\n    print(f\"x = {x}\")\nf() # calls function\nprint(f\"x = {x}\")\n\nThe final point we want to make about scope is that function inputs and output don’t have to be given a name outside the function.\n\nmean([10, 20, 30])\n\nNotice that we didn’t name the input or the output, but the function was called successfully.\nNow, we’ll use our new knowledge to define a function which computes the output from a Cobb-Douglas production function with parameters $ z = 1 $ and $ = 0.33 $ and takes inputs $ K $ and $ L $.\n\ndef cobb_douglas(K, L):\n\n    # Create alpha and z\n    z = 1\n    alpha = 0.33\n\n    return z * K**alpha * L**(1 - alpha)\n\nWe can use this function as we did the mean function.\n\ncobb_douglas(1.0, 0.5)\n\n\n\n\nRe-using Functions\nEconomists are often interested in this question: how much does output change if we modify our inputs?\nFor example, take a production function $ Y_1 = F(K_1,L_1) $ which produces $ Y_1 $ units of the goods.\nIf we then multiply the inputs each by $ \\(, so that\\) K_2 = K_1 $ and $ L_2 = L_1 $, then the output is\n\\[\nY_2 = F(K_2, L_2) = F(\\gamma K_1, \\gamma L_1)\n\\]\nHow does $ Y_1 $ compare to $ Y_2 $?\nAnswering this question involves something called returns to scale.\nReturns to scale tells us whether our inputs are more or less productive as we have more of them.\nFor example, imagine that you run a restaurant. How would you expect the amount of food you could produce would change if you could build an exact replica of your restaurant and kitchen and hire the same number of cooks and waiters? You would probably expect it to double.\nIf, for any $ K, L $, we multiply $ K, L $ by a value $ $ then\n\nIf $ &lt; $ then we say the production function has decreasing returns to scale.\n\nIf $ = $ then we say the production function has constant returns to scale.\n\nIf $ &gt; $ then we say the production function has increasing returns to scale.\n\nLet’s try it and see what our function is!\n\ny1 = cobb_douglas(1.0, 0.5)\nprint(y1)\ny2 = cobb_douglas(2*1.0, 2*0.5)\nprint(y2)\n\nHow did $ Y_1 $ and $ Y_2 $ relate?\n\ny2 / y1\n\n$ Y_2 $ was exactly double $ Y_1 $!\nLet’s write a function that will compute the returns to scale for different values of $ K $ and $ L $.\nThis is an example of how writing functions can allow us to re-use code in ways we might not originally anticipate. (You didn’t know we’d be writing a returns_to_scale function when we wrote cobb_douglas.)\n\ndef returns_to_scale(K, L, gamma):\n    y1 = cobb_douglas(K, L)\n    y2 = cobb_douglas(gamma*K, gamma*L)\n    y_ratio = y2 / y1\n    return y_ratio / gamma\n\n\nreturns_to_scale(1.0, 0.5, 2.0)\n\n\n\nExercise\nSee exercise 1 in the exercise list.\nIt turns out that with a little bit of algebra, we can check that this will always hold for our Cobb-Douglas example above.\nTo show this, take an arbitrary $ K, L $ and multiply the inputs by an arbitrary $ $.\n\\[\n\\begin{aligned}\n    F(\\gamma K, \\gamma L) &= z (\\gamma K)^{\\alpha} (\\gamma L)^{1-\\alpha}\\\\\n    &=  z \\gamma^{\\alpha}\\gamma^{1-\\alpha} K^{\\alpha} L^{1-\\alpha}\\\\\n    &= \\gamma z K^{\\alpha} L^{1-\\alpha} = \\gamma F(K, L)\n\\end{aligned}\n\\]\nFor an example of a production function that is not CRS, look at a generalization of the Cobb-Douglas production function that has different “output elasticities” for the 2 inputs.\n\\[\nY = z K^{\\alpha_1} L^{\\alpha_2}\n\\]\nNote that if $ _2 = 1 - _1 $, this is our Cobb-Douglas production function.\n\n\nExercise\nSee exercise 2 in the exercise list.\n\n\n\nMultiple Returns\nAnother valuable element to analyze on production functions is how output changes as we change only one of the inputs. We will call this the marginal product.\nFor example, compare the output using $ K, L $ units of inputs to that with an $ $ units of labor.\nThen the marginal product of labor (MPL) is defined as\n\\[\n\\frac{F(K, L + \\varepsilon) - F(K, L)}{\\varepsilon}\n\\]\nThis tells us how much additional output is created relative to the additional input. (Spoiler alert: This should look like the definition for a partial derivative!)\nIf the input can be divided into small units, then we can use calculus to take this limit, using the partial derivative of the production function relative to that input.\nIn this case, we define the marginal product of labor (MPL) and marginal product of capital (MPK) as\n\\[\n\\begin{aligned}\nMPL(K, L) &= \\frac{\\partial F(K, L)}{\\partial L}\\\\\nMPK(K, L) &= \\frac{\\partial F(K, L)}{\\partial K}\n\\end{aligned}\n\\]\nIn the Cobb-Douglas example above, this becomes\n\\[\n\\begin{aligned}\nMPK(K, L) &= z  \\alpha \\left(\\frac{K}{L} \\right)^{\\alpha - 1}\\\\\nMPL(K, L) &= (1-\\alpha) z \\left(\\frac{K}{L} \\right)^{\\alpha}\\\\\n\\end{aligned}\n\\]\nLet’s test it out with Python! We’ll also see that we can actually return multiple things in a Python function.\nThe syntax for a return statement with multiple items is return item1, item2, ….\nIn this case, we’ll compute both the MPL and the MPK and then return both.\n\ndef marginal_products(K, L, epsilon):\n\n    mpl = (cobb_douglas(K, L + epsilon) - cobb_douglas(K, L)) / epsilon\n    mpk = (cobb_douglas(K + epsilon, L) - cobb_douglas(K, L)) / epsilon\n\n    return mpl, mpk\n\n\ntup = marginal_products(1.0, 0.5,  1e-4)\nprint(tup)\n\nInstead of using the tuple, these can be directly unpacked to variables.\n\nmpl, mpk = marginal_products(1.0, 0.5,  1e-4)\nprint(f\"mpl = {mpl}, mpk = {mpk}\")\n\nWe can use this to calculate the marginal products for different K, fixing L using a comprehension.\n\nKs = [1.0, 2.0, 3.0]\n[marginal_products(K, 0.5, 1e-4) for K in Ks] # create a tuple for each K\n\n\n\nDocumentation\nIn a previous exercise, we asked you to find help for the cobb_douglas and returns_to_scale functions using ?.\nIt didn’t provide any useful information.\nTo provide this type of help information, we need to add what Python programmers call a “docstring” to our functions.\nThis is done by putting a string (not assigned to any variable name) as the first line of the body of the function (after the line with def).\nBelow is a new version of the template we used to define functions.\n\ndef function_name(inputs):\n    \"\"\"\n    Docstring\n    \"\"\"\n    # step 1\n    # step 2\n    # ...\n    return outputs\n\nLet’s re-define our cobb_douglas function to include a docstring.\n\ndef cobb_douglas(K, L):\n    \"\"\"\n    Computes the production F(K, L) for a Cobb-Douglas production function\n\n    Takes the form F(K, L) = z K^{\\alpha} L^{1 - \\alpha}\n\n    We restrict z = 1 and alpha = 0.33\n    \"\"\"\n    return 1.0 * K**(0.33) * L**(1.0 - 0.33)\n\nNow when we have Jupyter evaluate cobb_douglas?, our message is displayed (or use the Contextual Help window with Jupyterlab and Ctrl-I or Cmd-I).\n\ncobb_douglas?\n\nWe recommend that you always include at least a very simple docstring for nontrivial functions.\nThis is in the same spirit as adding comments to your code — it makes it easier for future readers/users (including yourself) to understand what the code does.\n\n\nExercise\nSee exercise 3 in the exercise list.\n\n\nDefault and Keyword Arguments\nFunctions can have optional arguments.\nTo accomplish this, we must these arguments a default value by saying name=default_value instead of just name as we list the arguments.\nTo demonstrate this functionality, let’s now make $ z $ and $ $ arguments to our cobb_douglas function!\n\ndef cobb_douglas(K, L, alpha=0.33, z=1):\n    \"\"\"\n    Computes the production F(K, L) for a Cobb-Douglas production function\n\n    Takes the form F(K, L) = z K^{\\alpha} L^{1 - \\alpha}\n    \"\"\"\n    return z * K**(alpha) * L**(1.0 - alpha)\n\nWe can now call this function by passing in just K and L. Notice that it will produce same result as earlier because alpha and z are the same as earlier.\n\ncobb_douglas(1.0, 0.5)\n\nHowever, we can also set the other arguments of the function by passing more than just K/L.\n\ncobb_douglas(1.0, 0.5, 0.35, 1.6)\n\nIn the example above, we used alpha = 0.35, z = 1.6.\nWe can also refer to function arguments by their name, instead of only their position (order).\nTo do this, we would write func_name(arg=value) for as many of the arguments as we want.\nHere’s how to do that with our cobb_douglas example.\n\ncobb_douglas(1.0, 0.5, z = 1.5)\n\n\n\nExercise\nSee exercise 4 in the exercise list.\nIn terms of variable scope, the z name within the function is different from any other z in the outer scope.\nTo be clear,\n\nx = 5\ndef f(x):\n    return x\nf(x) # \"coincidence\" that it has the same name\n\nThis is also true with named function arguments, above.\n\nz = 1.5\ncobb_douglas(1.0, 0.5, z = z) # no problem!\n\nIn that example, the z on the left hand side of z = z refers to the local variable name in the function whereas the z on the right hand side refers to the z in the outer scope.\n\n\nAside: Methods\nAs we learned earlier, all variables in Python have a type associated with them.\nDifferent types of variables have different functions or operations defined for them.\nFor example, I can divide one number by another or make a string uppercase.\nIt wouldn’t make sense to divide one string by another or make a number uppercase.\nWhen certain functionality is closely tied to the type of an object, it is often implemented as a special kind of function known as a method.\nFor now, you only need to know two things about methods:\n\nWe call them by doing variable.method_name(other_arguments) instead of function_name(variable, other_arguments).\n\nA method is a function, even though we call it using a different notation.\n\nWhen we introduced the core data types, we saw many methods defined on these types.\nLet’s revisit them for the str, or string type.\nNotice that we call each of these functions using the dot syntax described above.\n\ns = \"This is my handy string!\"\n\n\ns.upper()\n\n\ns.title()"
  },
  {
    "objectID": "tutorials/session_1/qe_functions.html#more-on-scope-optional",
    "href": "tutorials/session_1/qe_functions.html#more-on-scope-optional",
    "title": "Functions",
    "section": "More on Scope (Optional)",
    "text": "More on Scope (Optional)\nKeep in mind that with mathematical functions, the arguments are just dummy names that can be interchanged.\nThat is, the following are identical.\n\\[\n\\begin{eqnarray}\n    f(K, L) &= z\\, K^{\\alpha} L^{1-\\alpha}\\\\\n    f(K_2, L_2) &= z\\, K_2^{\\alpha} L_2^{1-\\alpha}\n\\end{eqnarray}\n\\]\nThe same concept applies to Python functions, where the arguments are just placeholder names, and our cobb_douglas function is identical to\n\ndef cobb_douglas2(K2, L2): # changed dummy variable names\n\n    # Create alpha and z\n    z = 1\n    alpha = 0.33\n\n    return z * K2**alpha * L2**(1 - alpha)\n\ncobb_douglas2(1.0, 0.5)\n\nThis is an appealing feature of functions for avoiding coding errors: names of variables within the function are localized and won’t clash with those on the outside (with more examples in scope).\nImportantly, when Python looks for variables matching a particular name, it begins in the most local scope.\nThat is, note that having an alpha in the outer scope does not impact the local one.\n\ndef cobb_douglas3(K, L, alpha): # added new argument\n\n    # Create alpha and z\n    z = 1\n\n    return z * K**alpha * L**(1 - alpha) # sees local argument alpha\n\nprint(cobb_douglas3(1.0, 0.5, 0.2))\nprint(\"Setting alpha, does the result change?\")\nalpha = 0.5 # in the outer scope\nprint(cobb_douglas3(1.0, 0.5, 0.2))\n\nA crucial element of the above function is that the alpha variable was available in the local scope of the function.\nConsider the alternative where it is not. We have removed the alpha function parameter as well as the local definition of alpha.\n\ndef cobb_douglas4(K, L): # added new argument\n\n    # Create alpha and z\n    z = 1\n\n    # there are no local alpha in scope!\n    return z * K**alpha * L**(1 - alpha)\n\nalpha = 0.2 # in the outer scope\nprint(f\"alpha = {alpha} gives {cobb_douglas4(1.0, 0.5)}\")\nalpha = 0.3\nprint(f\"alpha = {alpha} gives {cobb_douglas4(1.0, 0.5)}\")\n\nThe intuition of scoping does not apply only for the “global” vs. “function” naming of variables, but also for nesting.\nFor example, we can define a version of cobb_douglas which is also missing a z in its inner-most scope, then put the function inside of another function.\n\nz = 1\ndef output_given_alpha(alpha):\n    # Scoping logic:\n    # 1. local function name doesn't clash with global one\n    # 2. alpha comes from the function parameter\n    # 3. z comes from the outer global scope\n    def cobb_douglas(K, L):\n        return z * K**alpha * L**(1 - alpha)\n\n    # using this function\n    return cobb_douglas(1.0, 0.5)\n\nalpha = 100 # ignored\nalphas = [0.2, 0.3, 0.5]\n# comprehension variables also have local scope\n# and don't clash with the alpha = 100\n[output_given_alpha(alpha) for alpha in alphas]"
  },
  {
    "objectID": "tutorials/session_1/qe_functions.html#exercises",
    "href": "tutorials/session_1/qe_functions.html#exercises",
    "title": "Functions",
    "section": "Exercises",
    "text": "Exercises\n\nExercise 1\nWhat happens if we try different inputs in our Cobb-Douglas production function?\n\n# Compute returns to scale with different values of `K` and `L` and `gamma`\n\n(back to text)\n\n\nExercise 2\nDefine a function named var that takes a list (call it x) and computes the variance. This function should use the mean function that we defined earlier.\n$ = _i (x_i - (x))^2 $\n\n# Your code here.\n\n(back to text)\n\n\nExercise 3\nRedefine the returns_to_scale function and add a docstring.\nConfirm that it works by running the cell containing returns_to_scale? below.\nNote: You do not need to change the actual code in the function — just copy/paste and add a docstring in the correct line.\n\n# re-define the `returns_to_scale` function here\n\n\n# test it here\n\nreturns_to_scale?\n\n(back to text)\n\n\nExercise 4\nExperiment with the sep and end arguments to the print function.\nThese can only be set by name.\n\n# Your code here.\n\n(back to text)"
  },
  {
    "objectID": "tutorials/session_6/machine_learning_regressions_correction.html",
    "href": "tutorials/session_6/machine_learning_regressions_correction.html",
    "title": "Machine learning: regressions",
    "section": "",
    "text": "Import the diabetes dataset from sklearn. Describe it.\n\nimport sklearn\nimport sklearn.datasets\n\ndataset = sklearn.datasets.load_diabetes()\n# the result is a dictionary:\n# 'data': features\n# 'target' labels\n# 'feature_names': names of the features\n# `DESCR`: description\n\n\nprint( dataset['DESCR'] )\n\n.. _diabetes_dataset:\n\nDiabetes dataset\n----------------\n\nTen baseline variables, age, sex, body mass index, average blood\npressure, and six blood serum measurements were obtained for each of n =\n442 diabetes patients, as well as the response of interest, a\nquantitative measure of disease progression one year after baseline.\n\n**Data Set Characteristics:**\n\n  :Number of Instances: 442\n\n  :Number of Attributes: First 10 columns are numeric predictive values\n\n  :Target: Column 11 is a quantitative measure of disease progression one year after baseline\n\n  :Attribute Information:\n      - age     age in years\n      - sex\n      - bmi     body mass index\n      - bp      average blood pressure\n      - s1      tc, total serum cholesterol\n      - s2      ldl, low-density lipoproteins\n      - s3      hdl, high-density lipoproteins\n      - s4      tch, total cholesterol / HDL\n      - s5      ltg, possibly log of serum triglycerides level\n      - s6      glu, blood sugar level\n\nNote: Each of these 10 feature variables have been mean centered and scaled by the standard deviation times the square root of `n_samples` (i.e. the sum of squares of each column totals 1).\n\nSource URL:\nhttps://www4.stat.ncsu.edu/~boos/var.select/diabetes.html\n\nFor more information see:\nBradley Efron, Trevor Hastie, Iain Johnstone and Robert Tibshirani (2004) \"Least Angle Regression,\" Annals of Statistics (with discussion), 407-499.\n(https://web.stanford.edu/~hastie/Papers/LARS/LeastAngle_2002.pdf)\n\n\n\n\n# create a dataframe\nimport pandas\n\ndf = pandas.DataFrame(dataset['data'], columns=dataset['feature_names'])\n\ndf['disease_progression'] = dataset['target']\n\n\ndf.describe()\n# we observe that mean of varaibles  is zero\n# standard deviations are the same for all variables\n# model has been normalized already:\n\n\n\n\n\n\n\n\nage\nsex\nbmi\nbp\ns1\ns2\ns3\ns4\ns5\ns6\ndisease_progression\n\n\n\n\ncount\n4.420000e+02\n4.420000e+02\n4.420000e+02\n4.420000e+02\n4.420000e+02\n4.420000e+02\n4.420000e+02\n4.420000e+02\n4.420000e+02\n4.420000e+02\n442.000000\n\n\nmean\n-2.511817e-19\n1.230790e-17\n-2.245564e-16\n-4.797570e-17\n-1.381499e-17\n3.918434e-17\n-5.777179e-18\n-9.042540e-18\n9.293722e-17\n1.130318e-17\n152.133484\n\n\nstd\n4.761905e-02\n4.761905e-02\n4.761905e-02\n4.761905e-02\n4.761905e-02\n4.761905e-02\n4.761905e-02\n4.761905e-02\n4.761905e-02\n4.761905e-02\n77.093005\n\n\nmin\n-1.072256e-01\n-4.464164e-02\n-9.027530e-02\n-1.123988e-01\n-1.267807e-01\n-1.156131e-01\n-1.023071e-01\n-7.639450e-02\n-1.260971e-01\n-1.377672e-01\n25.000000\n\n\n25%\n-3.729927e-02\n-4.464164e-02\n-3.422907e-02\n-3.665608e-02\n-3.424784e-02\n-3.035840e-02\n-3.511716e-02\n-3.949338e-02\n-3.324559e-02\n-3.317903e-02\n87.000000\n\n\n50%\n5.383060e-03\n-4.464164e-02\n-7.283766e-03\n-5.670422e-03\n-4.320866e-03\n-3.819065e-03\n-6.584468e-03\n-2.592262e-03\n-1.947171e-03\n-1.077698e-03\n140.500000\n\n\n75%\n3.807591e-02\n5.068012e-02\n3.124802e-02\n3.564379e-02\n2.835801e-02\n2.984439e-02\n2.931150e-02\n3.430886e-02\n3.243232e-02\n2.791705e-02\n211.500000\n\n\nmax\n1.107267e-01\n5.068012e-02\n1.705552e-01\n1.320436e-01\n1.539137e-01\n1.987880e-01\n1.811791e-01\n1.852344e-01\n1.335973e-01\n1.356118e-01\n346.000000\n\n\n\n\n\n\n\n\nimport seaborn\n\n\nseaborn.pairplot(df)\n\n\n\n\n\n\n\n\nSplit the dataset into a training set (70%) and a test set (30%)\n\nfrom sklearn.model_selection import train_test_split\n\n\n# features: dataset['data']\n# dataset['data'].shape # one line per observation, one column per feature (variable)\n\n\n# labels: dataset['target'] what we are trying to predict\ndataset['target'].shape\n\n(442,)\n\n\n\nX_train, X_test, y_train, y_test = train_test_split(dataset['data'], dataset['target'], test_size=0.3, random_state=56)\n# the choice of a random_state initializes a random seed so that every time it is run the notebook\n# returns exactly the same results\n\nTrain a linear model (with intercept) on the training set\n\n# since the model is already normalized, we can create the model directly\nfrom sklearn.linear_model import LinearRegression\n\nmodel = LinearRegression()   # don't forget the round bracket to get a model object\nmodel.fit(X_train, y_train)\n\nLinearRegression()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.LinearRegressionLinearRegression()\n\n\n\n# visualize model predictions:\n\n# from matplotlib import pyplot as plt\n\n# plt.plot(  )\n# plt.plot( model.predict(X_train) )\n\n\nmodel.intercept_ # a\n\n152.82810842206453\n\n\n\nmodel.coef_ # b_1, b_2, .... b_10|\n\narray([   3.04174075, -209.76813682,  501.77871853,  286.88207011,\n       -991.92731799,  603.10838272,  228.80501285,  226.30296964,\n        905.67772303,   92.55739263])\n\n\nCompute the fitting score on the test set. (Bonus: compare with your own computation of \\(R^2\\))\n\nmodel.score(X_test, y_test)\n\n0.43965636272283437\n\n\n\n# compare with the training set:\nmodel.score(X_train, y_train)\n\n0.541861476456197\n\n\nShould we adjust the size of the test set? What would be the problem?\n\n#### WARNING\n####\n#### very bad approach\n\n\n# let's try different sizes\n\nsizes = [0.01, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\nscores = []\nfor s in sizes:\n    X_train, X_test, y_train, y_test = train_test_split(dataset['data'], dataset['target'], test_size=0.3)\n\n    model = LinearRegression()   # don't forget the round bracket to get a model object\n    model.fit(X_train, y_train)\n    score = model.score(X_test, y_test) # score with x% test set\n\n    scores.append(score)\n\n\nfrom matplotlib import pyplot as plt\nplt.plot(sizes, scores)\n\n\n\n\n\n\n\n\nImplement \\(k\\)-fold model with \\(k=3\\).\n\nX = dataset['data']\ny = dataset['target']\n\n\n# to keep the scores\nscores = []\n\n\nfrom sklearn.model_selection import KFold\nkf = KFold(n_splits=3)\n\nfor train_index, test_index in kf.split(X):\n    \n    X_train, X_test = X[train_index], X[test_index]\n    y_train, y_test = y[train_index], y[test_index]\n\n    ## train a model in X_train, y_train\n    ## test it on X_test, y_test\n    model = LinearRegression()   # don't forget the round bracket to get a model object\n    model.fit(X_train, y_train)\n    score = model.score(X_test, y_test) # score with x% test set\n\n    scores.append(score)\n\n\nscores\n\n[0.46930417754348197, 0.4872526062543143, 0.5095496056127979]\n\n\n\n# it gives us a sense of the predictive power of the regression\n\n\nregresults.summary() # econometric estimation of R^2 is 0.51\n\n\nOLS Regression Results\n\n\nDep. Variable:\ndisease_progression\nR-squared:\n0.518\n\n\nModel:\nOLS\nAdj. R-squared:\n0.507\n\n\nMethod:\nLeast Squares\nF-statistic:\n46.27\n\n\nDate:\nMon, 27 Mar 2023\nProb (F-statistic):\n3.83e-62\n\n\nTime:\n21:46:43\nLog-Likelihood:\n-2386.0\n\n\nNo. Observations:\n442\nAIC:\n4794.\n\n\nDf Residuals:\n431\nBIC:\n4839.\n\n\nDf Model:\n10\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n152.1335\n2.576\n59.061\n0.000\n147.071\n157.196\n\n\nage\n-10.0099\n59.749\n-0.168\n0.867\n-127.446\n107.426\n\n\nsex\n-239.8156\n61.222\n-3.917\n0.000\n-360.147\n-119.484\n\n\nbmi\n519.8459\n66.533\n7.813\n0.000\n389.076\n650.616\n\n\nbp\n324.3846\n65.422\n4.958\n0.000\n195.799\n452.970\n\n\ns1\n-792.1756\n416.680\n-1.901\n0.058\n-1611.153\n26.802\n\n\ns2\n476.7390\n339.030\n1.406\n0.160\n-189.620\n1143.098\n\n\ns3\n101.0433\n212.531\n0.475\n0.635\n-316.684\n518.770\n\n\ns4\n177.0632\n161.476\n1.097\n0.273\n-140.315\n494.441\n\n\ns5\n751.2737\n171.900\n4.370\n0.000\n413.407\n1089.140\n\n\ns6\n67.6267\n65.984\n1.025\n0.306\n-62.064\n197.318\n\n\n\n\n\n\n\n\nOmnibus:\n1.506\nDurbin-Watson:\n2.029\n\n\nProb(Omnibus):\n0.471\nJarque-Bera (JB):\n1.404\n\n\nSkew:\n0.017\nProb(JB):\n0.496\n\n\nKurtosis:\n2.726\nCond. No.\n227.\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\nTo use lasso regression:\n\nfrom sklearn.linear_model import Lasso\n\n\nX_train, X_test, y_train, y_test = train_test_split(dataset['data'], dataset['target'], test_size=0.3)\nmodel = Lasso()   # don't forget the round bracket to get a model object\nmodel.fit(X_train, y_train)\nscore = model.score(X_test, y_test) # s\n\n\n# on the test set, the fit of the lasso regression is worse than regular regression\n# the regularization parameter should be changed"
  },
  {
    "objectID": "tutorials/session_6/machine_learning_regressions_correction.html#diabetes-dataset-basic-regression",
    "href": "tutorials/session_6/machine_learning_regressions_correction.html#diabetes-dataset-basic-regression",
    "title": "Machine learning: regressions",
    "section": "",
    "text": "Import the diabetes dataset from sklearn. Describe it.\n\nimport sklearn\nimport sklearn.datasets\n\ndataset = sklearn.datasets.load_diabetes()\n# the result is a dictionary:\n# 'data': features\n# 'target' labels\n# 'feature_names': names of the features\n# `DESCR`: description\n\n\nprint( dataset['DESCR'] )\n\n.. _diabetes_dataset:\n\nDiabetes dataset\n----------------\n\nTen baseline variables, age, sex, body mass index, average blood\npressure, and six blood serum measurements were obtained for each of n =\n442 diabetes patients, as well as the response of interest, a\nquantitative measure of disease progression one year after baseline.\n\n**Data Set Characteristics:**\n\n  :Number of Instances: 442\n\n  :Number of Attributes: First 10 columns are numeric predictive values\n\n  :Target: Column 11 is a quantitative measure of disease progression one year after baseline\n\n  :Attribute Information:\n      - age     age in years\n      - sex\n      - bmi     body mass index\n      - bp      average blood pressure\n      - s1      tc, total serum cholesterol\n      - s2      ldl, low-density lipoproteins\n      - s3      hdl, high-density lipoproteins\n      - s4      tch, total cholesterol / HDL\n      - s5      ltg, possibly log of serum triglycerides level\n      - s6      glu, blood sugar level\n\nNote: Each of these 10 feature variables have been mean centered and scaled by the standard deviation times the square root of `n_samples` (i.e. the sum of squares of each column totals 1).\n\nSource URL:\nhttps://www4.stat.ncsu.edu/~boos/var.select/diabetes.html\n\nFor more information see:\nBradley Efron, Trevor Hastie, Iain Johnstone and Robert Tibshirani (2004) \"Least Angle Regression,\" Annals of Statistics (with discussion), 407-499.\n(https://web.stanford.edu/~hastie/Papers/LARS/LeastAngle_2002.pdf)\n\n\n\n\n# create a dataframe\nimport pandas\n\ndf = pandas.DataFrame(dataset['data'], columns=dataset['feature_names'])\n\ndf['disease_progression'] = dataset['target']\n\n\ndf.describe()\n# we observe that mean of varaibles  is zero\n# standard deviations are the same for all variables\n# model has been normalized already:\n\n\n\n\n\n\n\n\nage\nsex\nbmi\nbp\ns1\ns2\ns3\ns4\ns5\ns6\ndisease_progression\n\n\n\n\ncount\n4.420000e+02\n4.420000e+02\n4.420000e+02\n4.420000e+02\n4.420000e+02\n4.420000e+02\n4.420000e+02\n4.420000e+02\n4.420000e+02\n4.420000e+02\n442.000000\n\n\nmean\n-2.511817e-19\n1.230790e-17\n-2.245564e-16\n-4.797570e-17\n-1.381499e-17\n3.918434e-17\n-5.777179e-18\n-9.042540e-18\n9.293722e-17\n1.130318e-17\n152.133484\n\n\nstd\n4.761905e-02\n4.761905e-02\n4.761905e-02\n4.761905e-02\n4.761905e-02\n4.761905e-02\n4.761905e-02\n4.761905e-02\n4.761905e-02\n4.761905e-02\n77.093005\n\n\nmin\n-1.072256e-01\n-4.464164e-02\n-9.027530e-02\n-1.123988e-01\n-1.267807e-01\n-1.156131e-01\n-1.023071e-01\n-7.639450e-02\n-1.260971e-01\n-1.377672e-01\n25.000000\n\n\n25%\n-3.729927e-02\n-4.464164e-02\n-3.422907e-02\n-3.665608e-02\n-3.424784e-02\n-3.035840e-02\n-3.511716e-02\n-3.949338e-02\n-3.324559e-02\n-3.317903e-02\n87.000000\n\n\n50%\n5.383060e-03\n-4.464164e-02\n-7.283766e-03\n-5.670422e-03\n-4.320866e-03\n-3.819065e-03\n-6.584468e-03\n-2.592262e-03\n-1.947171e-03\n-1.077698e-03\n140.500000\n\n\n75%\n3.807591e-02\n5.068012e-02\n3.124802e-02\n3.564379e-02\n2.835801e-02\n2.984439e-02\n2.931150e-02\n3.430886e-02\n3.243232e-02\n2.791705e-02\n211.500000\n\n\nmax\n1.107267e-01\n5.068012e-02\n1.705552e-01\n1.320436e-01\n1.539137e-01\n1.987880e-01\n1.811791e-01\n1.852344e-01\n1.335973e-01\n1.356118e-01\n346.000000\n\n\n\n\n\n\n\n\nimport seaborn\n\n\nseaborn.pairplot(df)\n\n\n\n\n\n\n\n\nSplit the dataset into a training set (70%) and a test set (30%)\n\nfrom sklearn.model_selection import train_test_split\n\n\n# features: dataset['data']\n# dataset['data'].shape # one line per observation, one column per feature (variable)\n\n\n# labels: dataset['target'] what we are trying to predict\ndataset['target'].shape\n\n(442,)\n\n\n\nX_train, X_test, y_train, y_test = train_test_split(dataset['data'], dataset['target'], test_size=0.3, random_state=56)\n# the choice of a random_state initializes a random seed so that every time it is run the notebook\n# returns exactly the same results\n\nTrain a linear model (with intercept) on the training set\n\n# since the model is already normalized, we can create the model directly\nfrom sklearn.linear_model import LinearRegression\n\nmodel = LinearRegression()   # don't forget the round bracket to get a model object\nmodel.fit(X_train, y_train)\n\nLinearRegression()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.LinearRegressionLinearRegression()\n\n\n\n# visualize model predictions:\n\n# from matplotlib import pyplot as plt\n\n# plt.plot(  )\n# plt.plot( model.predict(X_train) )\n\n\nmodel.intercept_ # a\n\n152.82810842206453\n\n\n\nmodel.coef_ # b_1, b_2, .... b_10|\n\narray([   3.04174075, -209.76813682,  501.77871853,  286.88207011,\n       -991.92731799,  603.10838272,  228.80501285,  226.30296964,\n        905.67772303,   92.55739263])\n\n\nCompute the fitting score on the test set. (Bonus: compare with your own computation of \\(R^2\\))\n\nmodel.score(X_test, y_test)\n\n0.43965636272283437\n\n\n\n# compare with the training set:\nmodel.score(X_train, y_train)\n\n0.541861476456197\n\n\nShould we adjust the size of the test set? What would be the problem?\n\n#### WARNING\n####\n#### very bad approach\n\n\n# let's try different sizes\n\nsizes = [0.01, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\nscores = []\nfor s in sizes:\n    X_train, X_test, y_train, y_test = train_test_split(dataset['data'], dataset['target'], test_size=0.3)\n\n    model = LinearRegression()   # don't forget the round bracket to get a model object\n    model.fit(X_train, y_train)\n    score = model.score(X_test, y_test) # score with x% test set\n\n    scores.append(score)\n\n\nfrom matplotlib import pyplot as plt\nplt.plot(sizes, scores)\n\n\n\n\n\n\n\n\nImplement \\(k\\)-fold model with \\(k=3\\).\n\nX = dataset['data']\ny = dataset['target']\n\n\n# to keep the scores\nscores = []\n\n\nfrom sklearn.model_selection import KFold\nkf = KFold(n_splits=3)\n\nfor train_index, test_index in kf.split(X):\n    \n    X_train, X_test = X[train_index], X[test_index]\n    y_train, y_test = y[train_index], y[test_index]\n\n    ## train a model in X_train, y_train\n    ## test it on X_test, y_test\n    model = LinearRegression()   # don't forget the round bracket to get a model object\n    model.fit(X_train, y_train)\n    score = model.score(X_test, y_test) # score with x% test set\n\n    scores.append(score)\n\n\nscores\n\n[0.46930417754348197, 0.4872526062543143, 0.5095496056127979]\n\n\n\n# it gives us a sense of the predictive power of the regression\n\n\nregresults.summary() # econometric estimation of R^2 is 0.51\n\n\nOLS Regression Results\n\n\nDep. Variable:\ndisease_progression\nR-squared:\n0.518\n\n\nModel:\nOLS\nAdj. R-squared:\n0.507\n\n\nMethod:\nLeast Squares\nF-statistic:\n46.27\n\n\nDate:\nMon, 27 Mar 2023\nProb (F-statistic):\n3.83e-62\n\n\nTime:\n21:46:43\nLog-Likelihood:\n-2386.0\n\n\nNo. Observations:\n442\nAIC:\n4794.\n\n\nDf Residuals:\n431\nBIC:\n4839.\n\n\nDf Model:\n10\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n152.1335\n2.576\n59.061\n0.000\n147.071\n157.196\n\n\nage\n-10.0099\n59.749\n-0.168\n0.867\n-127.446\n107.426\n\n\nsex\n-239.8156\n61.222\n-3.917\n0.000\n-360.147\n-119.484\n\n\nbmi\n519.8459\n66.533\n7.813\n0.000\n389.076\n650.616\n\n\nbp\n324.3846\n65.422\n4.958\n0.000\n195.799\n452.970\n\n\ns1\n-792.1756\n416.680\n-1.901\n0.058\n-1611.153\n26.802\n\n\ns2\n476.7390\n339.030\n1.406\n0.160\n-189.620\n1143.098\n\n\ns3\n101.0433\n212.531\n0.475\n0.635\n-316.684\n518.770\n\n\ns4\n177.0632\n161.476\n1.097\n0.273\n-140.315\n494.441\n\n\ns5\n751.2737\n171.900\n4.370\n0.000\n413.407\n1089.140\n\n\ns6\n67.6267\n65.984\n1.025\n0.306\n-62.064\n197.318\n\n\n\n\n\n\n\n\nOmnibus:\n1.506\nDurbin-Watson:\n2.029\n\n\nProb(Omnibus):\n0.471\nJarque-Bera (JB):\n1.404\n\n\nSkew:\n0.017\nProb(JB):\n0.496\n\n\nKurtosis:\n2.726\nCond. No.\n227.\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\nTo use lasso regression:\n\nfrom sklearn.linear_model import Lasso\n\n\nX_train, X_test, y_train, y_test = train_test_split(dataset['data'], dataset['target'], test_size=0.3)\nmodel = Lasso()   # don't forget the round bracket to get a model object\nmodel.fit(X_train, y_train)\nscore = model.score(X_test, y_test) # s\n\n\n# on the test set, the fit of the lasso regression is worse than regular regression\n# the regularization parameter should be changed"
  },
  {
    "objectID": "tutorials/session_6/machine_learning_regressions_correction.html#sparse-regressions-on-the-boston-house-price-dataset",
    "href": "tutorials/session_6/machine_learning_regressions_correction.html#sparse-regressions-on-the-boston-house-price-dataset",
    "title": "Machine learning: regressions",
    "section": "Sparse regressions on the Boston House Price Dataset",
    "text": "Sparse regressions on the Boston House Price Dataset\nImport the Boston House Price Dataset from sklearn. Explore the data (description, correlations, histograms…)\n\n# dataset = sklearn.datasets.load_boston()\nfrom sklearn.datasets import fetch_california_housing \ndataset = fetch_california_housing()\n\n\nprint(dataset[\"DESCR\"])\n\n.. _california_housing_dataset:\n\nCalifornia Housing dataset\n--------------------------\n\n**Data Set Characteristics:**\n\n    :Number of Instances: 20640\n\n    :Number of Attributes: 8 numeric, predictive attributes and the target\n\n    :Attribute Information:\n        - MedInc        median income in block group\n        - HouseAge      median house age in block group\n        - AveRooms      average number of rooms per household\n        - AveBedrms     average number of bedrooms per household\n        - Population    block group population\n        - AveOccup      average number of household members\n        - Latitude      block group latitude\n        - Longitude     block group longitude\n\n    :Missing Attribute Values: None\n\nThis dataset was obtained from the StatLib repository.\nhttps://www.dcc.fc.up.pt/~ltorgo/Regression/cal_housing.html\n\nThe target variable is the median house value for California districts,\nexpressed in hundreds of thousands of dollars ($100,000).\n\nThis dataset was derived from the 1990 U.S. census, using one row per census\nblock group. A block group is the smallest geographical unit for which the U.S.\nCensus Bureau publishes sample data (a block group typically has a population\nof 600 to 3,000 people).\n\nAn household is a group of people residing within a home. Since the average\nnumber of rooms and bedrooms in this dataset are provided per household, these\ncolumns may take surpinsingly large values for block groups with few households\nand many empty houses, such as vacation resorts.\n\nIt can be downloaded/loaded using the\n:func:`sklearn.datasets.fetch_california_housing` function.\n\n.. topic:: References\n\n    - Pace, R. Kelley and Ronald Barry, Sparse Spatial Autoregressions,\n      Statistics and Probability Letters, 33 (1997) 291-297\n\n\n\n\n# dataset = sklearn.datasets.load_boston()\nfrom sklearn.datasets import fetch_california_housing \ndataset = fetch_california_housing()\n\nSplit the dataset into a training set (70%) and a test set (30%).\n\nX = dataset['data']\ny = dataset['target']\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.3, random_state=58)\n\nTrain a lasso model to predict house prices. Compute the score on the test set.\n\n# we should check that the data is normalized, or normalize it ourselves\n\n\nfrom sklearn.linear_model import Lasso\nmodel_lasso = Lasso()\nmodel_lasso.fit(X_train, y_train)\n\nLasso()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.LassoLasso()\n\n\n\nmodel_lasso.score(X_test, y_test)\n\n0.28204855993177635\n\n\nTrain a ridge model to predict house prices. Which one is better?\n\nfrom sklearn.linear_model import Ridge\nmodel_ridge = Ridge()\nmodel_ridge.fit(X_train, y_train)\n\nRidge()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.RidgeRidge()\n\n\n\nmodel_ridge.score(X_test, y_test)\n\n0.6060031802405054\n\n\nIt looks like the ridge model has a better fit (score). However, we should have left a test set appart and not used it at all during training phase. Here it has influenced the choice of the model (between ridge and lasso)."
  },
  {
    "objectID": "pushups/pushups_3.html",
    "href": "pushups/pushups_3.html",
    "title": "Sklearn: sparse regression",
    "section": "",
    "text": "Sklearn includes the Winsconsin breast cancer database. It associates medical outcomes for tumor observation, with several characteristics. Can a machine learn how to predict whether a cancer is benign or malignant ?\nImport the Breast Cancer Dataset from sklearn. Describe it.\nProperly train a linear logistic regression to predict cancer morbidity.\nUse k-fold validation to validate the model\nTry with other classifiers. Which one is best?"
  },
  {
    "objectID": "pushups/pushups_3.html#predicting-breast-cancer",
    "href": "pushups/pushups_3.html#predicting-breast-cancer",
    "title": "Sklearn: sparse regression",
    "section": "",
    "text": "Sklearn includes the Winsconsin breast cancer database. It associates medical outcomes for tumor observation, with several characteristics. Can a machine learn how to predict whether a cancer is benign or malignant ?\nImport the Breast Cancer Dataset from sklearn. Describe it.\nProperly train a linear logistic regression to predict cancer morbidity.\nUse k-fold validation to validate the model\nTry with other classifiers. Which one is best?"
  },
  {
    "objectID": "pushups/pushups_3_correction.html",
    "href": "pushups/pushups_3_correction.html",
    "title": "Sparse regression with sklearn",
    "section": "",
    "text": "Sklearn includes the Winsconsin breast cancer database. It associates medical outcomes for tumor observation, with several characteristics. Can a machine learn how to predict whether a cancer is benign or malignant ?\nImport the Breast Cancer Dataset from sklearn. Describe it.\n\nimport sklearn\nimport sklearn.datasets\n# the as_frame option makes the function return a dataframe\ndataset = sklearn.datasets.load_breast_cancer(as_frame=True)\n\n\ndata = dataset['data']\ntarget = dataset['target']\n\nProperly train a linear logistic regression to predict cancer morbidity.\n\n# separate the training set and the testset\nimport sklearn.model_selection\ndata_train, data_test, target_train, target_test = sklearn.model_selection.train_test_split(data, target)\n\n\n# quickly check thes size of th samples, correspond to  what we want:\n[e.shape for e in [data_train, data_test, target_train, target_test]]\n\n[(426, 30), (143, 30), (426,), (143,)]\n\n\n\nimport sklearn.linear_model\nmodel = sklearn.linear_model.LogisticRegression()\n\n\nmodel.fit(data_train, target_train)\n\n/opt/conda/envs/escpython/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n\n\nLogisticRegression()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.LogisticRegressionLogisticRegression()\n\n\n\n# We can check the performance out of sample:\n\n\nmodel.score(data_test, target_test)\n\n0.8951048951048951\n\n\n\n# to know what the scores represent, we can read the doc\n# it shows that score is measured by mean accuracy\n# i.e. number of correct predictions divided by total number of predictions\nmodel.score?\n\n\nSignature: model.score(X, y, sample_weight=None)\nDocstring:\nReturn the mean accuracy on the given test data and labels.\nIn multi-label classification, this is the subset accuracy\nwhich is a harsh metric since you require for each sample that\neach label set be correctly predicted.\nParameters\n----------\nX : array-like of shape (n_samples, n_features)\n    Test samples.\ny : array-like of shape (n_samples,) or (n_samples, n_outputs)\n    True labels for `X`.\nsample_weight : array-like of shape (n_samples,), default=None\n    Sample weights.\nReturns\n-------\nscore : float\n    Mean accuracy of ``self.predict(X)`` wrt. `y`.\nFile:      /opt/conda/envs/escpython/lib/python3.10/site-packages/sklearn/base.py\nType:      method\n\n\n\nBonus: the warning message suggests to scale the data. Let’s redo the last few steps accordingly\n\nimport sklearn.preprocessing\nscaler = sklearn.preprocessing.StandardScaler()\nscaler.fit(data)\nscaled_data = scaler.transform(data)\n\n\n# let's repackage in a dataframe\nimport pandas\nscaled_data = pandas.DataFrame(scaled_data, columns=data.columns)\n# and check the result has zero mean and constant standard deviation\nscaled_data.describe()\n\n\n\n\n\n\n\n\nmean radius\nmean texture\nmean perimeter\nmean area\nmean smoothness\nmean compactness\nmean concavity\nmean concave points\nmean symmetry\nmean fractal dimension\n...\nworst radius\nworst texture\nworst perimeter\nworst area\nworst smoothness\nworst compactness\nworst concavity\nworst concave points\nworst symmetry\nworst fractal dimension\n\n\n\n\ncount\n5.690000e+02\n5.690000e+02\n5.690000e+02\n5.690000e+02\n5.690000e+02\n5.690000e+02\n5.690000e+02\n5.690000e+02\n5.690000e+02\n5.690000e+02\n...\n5.690000e+02\n5.690000e+02\n5.690000e+02\n569.000000\n5.690000e+02\n5.690000e+02\n5.690000e+02\n5.690000e+02\n5.690000e+02\n5.690000e+02\n\n\nmean\n-1.373633e-16\n6.868164e-17\n-1.248757e-16\n-2.185325e-16\n-8.366672e-16\n1.873136e-16\n4.995028e-17\n-4.995028e-17\n1.748260e-16\n4.745277e-16\n...\n-8.241796e-16\n1.248757e-17\n-3.746271e-16\n0.000000\n-2.372638e-16\n-3.371644e-16\n7.492542e-17\n2.247763e-16\n2.622390e-16\n-5.744282e-16\n\n\nstd\n1.000880e+00\n1.000880e+00\n1.000880e+00\n1.000880e+00\n1.000880e+00\n1.000880e+00\n1.000880e+00\n1.000880e+00\n1.000880e+00\n1.000880e+00\n...\n1.000880e+00\n1.000880e+00\n1.000880e+00\n1.000880\n1.000880e+00\n1.000880e+00\n1.000880e+00\n1.000880e+00\n1.000880e+00\n1.000880e+00\n\n\nmin\n-2.029648e+00\n-2.229249e+00\n-1.984504e+00\n-1.454443e+00\n-3.112085e+00\n-1.610136e+00\n-1.114873e+00\n-1.261820e+00\n-2.744117e+00\n-1.819865e+00\n...\n-1.726901e+00\n-2.223994e+00\n-1.693361e+00\n-1.222423\n-2.682695e+00\n-1.443878e+00\n-1.305831e+00\n-1.745063e+00\n-2.160960e+00\n-1.601839e+00\n\n\n25%\n-6.893853e-01\n-7.259631e-01\n-6.919555e-01\n-6.671955e-01\n-7.109628e-01\n-7.470860e-01\n-7.437479e-01\n-7.379438e-01\n-7.032397e-01\n-7.226392e-01\n...\n-6.749213e-01\n-7.486293e-01\n-6.895783e-01\n-0.642136\n-6.912304e-01\n-6.810833e-01\n-7.565142e-01\n-7.563999e-01\n-6.418637e-01\n-6.919118e-01\n\n\n50%\n-2.150816e-01\n-1.046362e-01\n-2.359800e-01\n-2.951869e-01\n-3.489108e-02\n-2.219405e-01\n-3.422399e-01\n-3.977212e-01\n-7.162650e-02\n-1.782793e-01\n...\n-2.690395e-01\n-4.351564e-02\n-2.859802e-01\n-0.341181\n-4.684277e-02\n-2.695009e-01\n-2.182321e-01\n-2.234689e-01\n-1.274095e-01\n-2.164441e-01\n\n\n75%\n4.693926e-01\n5.841756e-01\n4.996769e-01\n3.635073e-01\n6.361990e-01\n4.938569e-01\n5.260619e-01\n6.469351e-01\n5.307792e-01\n4.709834e-01\n...\n5.220158e-01\n6.583411e-01\n5.402790e-01\n0.357589\n5.975448e-01\n5.396688e-01\n5.311411e-01\n7.125100e-01\n4.501382e-01\n4.507624e-01\n\n\nmax\n3.971288e+00\n4.651889e+00\n3.976130e+00\n5.250529e+00\n4.770911e+00\n4.568425e+00\n4.243589e+00\n3.927930e+00\n4.484751e+00\n4.910919e+00\n...\n4.094189e+00\n3.885905e+00\n4.287337e+00\n5.930172\n3.955374e+00\n5.112877e+00\n4.700669e+00\n2.685877e+00\n6.046041e+00\n6.846856e+00\n\n\n\n\n8 rows × 30 columns\n\n\n\n\n# for compatibility purpose we save the scaled dataframe as data\ndata = scaled_data\n\n\n# and redo the same training\n\n\n# separate the training set and the testset\ndata_train, data_test, target_train, target_test = sklearn.model_selection.train_test_split(data, target)\n\n\nimport sklearn.linear_model\nmodel = sklearn.linear_model.LogisticRegression()\n\n\nmodel.fit(data_train, target_train) # this time, we don't get any error message\n\nLogisticRegression()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.LogisticRegressionLogisticRegression()\n\n\n\n# and actually improve the prediction (which might just be chance)\n\n\nmodel.score(data_test, target_test)\n\n0.972027972027972\n\n\nUse k-fold validation to validate the model\n\n# because the dataset is relatively small we didn't set aside a validation set\n# instead we rely on cross-validation\n\n# we split the dataset in 5\n# this provides 5 different testsets (with 20% of observation) to test the training on the remaining set (80%)\n\n\nkf = sklearn.model_selection.KFold(n_splits=5)\n\n\nscores = []\n\nfor i_train, i_test in kf.split(data):\n    \n    # i_train and i_test are indices of observations belonging to one of the two datasets\n    kf_data_train = data.iloc[i_train,:]\n    kf_target_train = target.iloc[i_train]\n    \n    kf_data_test = data.iloc[i_test,:]\n    kf_target_test = target.iloc[i_test]\n    \n    model_kf = sklearn.linear_model.LogisticRegression()\n    \n    # we train the model\n    model_kf.fit(kf_data_train, kf_target_train)\n    \n    # and test it\n    sc = model_kf.score(kf_data_test, kf_target_test)\n    \n    scores.append(sc)\n    \n    print(f\"Score: {sc}\")\n\nScore: 0.9736842105263158\nScore: 0.956140350877193\nScore: 0.9824561403508771\nScore: 0.9824561403508771\nScore: 0.9911504424778761\n\n\nThere is some volatility in the scores, but it stays reliably over 95% accuracy.\n\n# to get an estimate of accuracy we can compute the mean:\nprint(f\"KFold validation: mean accuracy {sum(scores)/5}\")\n\nKFold validation: mean accuracy 0.9771774569166279\n\n\nTry with other classifiers. Which one is best?\nThe dataset being relatively small we can try Support Vector Machines, which are known to generalize well (see discussion here).\nWe perform a kfold selection exactly as above.\n\nkf = sklearn.model_selection.KFold(n_splits=5)\n\n\nscores_svc = []\n\nfor i_train, i_test in kf.split(data):\n    \n    # i_train and i_test are indices of observations belonging to one of the two datasets\n    kf_data_train = data.iloc[i_train,:]\n    kf_target_train = target.iloc[i_train]\n    \n    kf_data_test = data.iloc[i_test,:]\n    kf_target_test = target.iloc[i_test]\n    \n    # we just change the following line\n    model_kf = sklearn.svm.SVC()\n    \n    # we train the model\n    model_kf.fit(kf_data_train, kf_target_train)\n    \n    # and test it\n    sc = model_kf.score(kf_data_test, kf_target_test)\n    \n    scores_svc.append(sc)\n    \n    print(f\"Score: {sc}\")\n\nScore: 0.9473684210526315\nScore: 0.9649122807017544\nScore: 0.9736842105263158\nScore: 0.9912280701754386\nScore: 0.9734513274336283\n\n\n\n# to get an estimate of accuracy we can compute the mean:\nprint(f\"KFold validation: mean accuracy {sum(scores_svc)/5}\")\n\nKFold validation: mean accuracy 0.9701288619779538\n\n\nComment: performance of support vector machine is similar to logistic regression. To assess the gains, we can compare the difference to both estimate (0.007) to the standard deviation of either of two models. Both are geater than 0.01, meaning that the difference between the two models is probably not significant.\n\n# we can compute the standard deviation as follows (googld standard deviation python)\n\nimport numpy \nprint( numpy.std(scores) )\nprint( numpy.std(scores_svc) )\n\n0.01188053806820839\n0.0142415326274357"
  },
  {
    "objectID": "pushups/pushups_3_correction.html#predicting-breast-cancer",
    "href": "pushups/pushups_3_correction.html#predicting-breast-cancer",
    "title": "Sparse regression with sklearn",
    "section": "",
    "text": "Sklearn includes the Winsconsin breast cancer database. It associates medical outcomes for tumor observation, with several characteristics. Can a machine learn how to predict whether a cancer is benign or malignant ?\nImport the Breast Cancer Dataset from sklearn. Describe it.\n\nimport sklearn\nimport sklearn.datasets\n# the as_frame option makes the function return a dataframe\ndataset = sklearn.datasets.load_breast_cancer(as_frame=True)\n\n\ndata = dataset['data']\ntarget = dataset['target']\n\nProperly train a linear logistic regression to predict cancer morbidity.\n\n# separate the training set and the testset\nimport sklearn.model_selection\ndata_train, data_test, target_train, target_test = sklearn.model_selection.train_test_split(data, target)\n\n\n# quickly check thes size of th samples, correspond to  what we want:\n[e.shape for e in [data_train, data_test, target_train, target_test]]\n\n[(426, 30), (143, 30), (426,), (143,)]\n\n\n\nimport sklearn.linear_model\nmodel = sklearn.linear_model.LogisticRegression()\n\n\nmodel.fit(data_train, target_train)\n\n/opt/conda/envs/escpython/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n\n\nLogisticRegression()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.LogisticRegressionLogisticRegression()\n\n\n\n# We can check the performance out of sample:\n\n\nmodel.score(data_test, target_test)\n\n0.8951048951048951\n\n\n\n# to know what the scores represent, we can read the doc\n# it shows that score is measured by mean accuracy\n# i.e. number of correct predictions divided by total number of predictions\nmodel.score?\n\n\nSignature: model.score(X, y, sample_weight=None)\nDocstring:\nReturn the mean accuracy on the given test data and labels.\nIn multi-label classification, this is the subset accuracy\nwhich is a harsh metric since you require for each sample that\neach label set be correctly predicted.\nParameters\n----------\nX : array-like of shape (n_samples, n_features)\n    Test samples.\ny : array-like of shape (n_samples,) or (n_samples, n_outputs)\n    True labels for `X`.\nsample_weight : array-like of shape (n_samples,), default=None\n    Sample weights.\nReturns\n-------\nscore : float\n    Mean accuracy of ``self.predict(X)`` wrt. `y`.\nFile:      /opt/conda/envs/escpython/lib/python3.10/site-packages/sklearn/base.py\nType:      method\n\n\n\nBonus: the warning message suggests to scale the data. Let’s redo the last few steps accordingly\n\nimport sklearn.preprocessing\nscaler = sklearn.preprocessing.StandardScaler()\nscaler.fit(data)\nscaled_data = scaler.transform(data)\n\n\n# let's repackage in a dataframe\nimport pandas\nscaled_data = pandas.DataFrame(scaled_data, columns=data.columns)\n# and check the result has zero mean and constant standard deviation\nscaled_data.describe()\n\n\n\n\n\n\n\n\nmean radius\nmean texture\nmean perimeter\nmean area\nmean smoothness\nmean compactness\nmean concavity\nmean concave points\nmean symmetry\nmean fractal dimension\n...\nworst radius\nworst texture\nworst perimeter\nworst area\nworst smoothness\nworst compactness\nworst concavity\nworst concave points\nworst symmetry\nworst fractal dimension\n\n\n\n\ncount\n5.690000e+02\n5.690000e+02\n5.690000e+02\n5.690000e+02\n5.690000e+02\n5.690000e+02\n5.690000e+02\n5.690000e+02\n5.690000e+02\n5.690000e+02\n...\n5.690000e+02\n5.690000e+02\n5.690000e+02\n569.000000\n5.690000e+02\n5.690000e+02\n5.690000e+02\n5.690000e+02\n5.690000e+02\n5.690000e+02\n\n\nmean\n-1.373633e-16\n6.868164e-17\n-1.248757e-16\n-2.185325e-16\n-8.366672e-16\n1.873136e-16\n4.995028e-17\n-4.995028e-17\n1.748260e-16\n4.745277e-16\n...\n-8.241796e-16\n1.248757e-17\n-3.746271e-16\n0.000000\n-2.372638e-16\n-3.371644e-16\n7.492542e-17\n2.247763e-16\n2.622390e-16\n-5.744282e-16\n\n\nstd\n1.000880e+00\n1.000880e+00\n1.000880e+00\n1.000880e+00\n1.000880e+00\n1.000880e+00\n1.000880e+00\n1.000880e+00\n1.000880e+00\n1.000880e+00\n...\n1.000880e+00\n1.000880e+00\n1.000880e+00\n1.000880\n1.000880e+00\n1.000880e+00\n1.000880e+00\n1.000880e+00\n1.000880e+00\n1.000880e+00\n\n\nmin\n-2.029648e+00\n-2.229249e+00\n-1.984504e+00\n-1.454443e+00\n-3.112085e+00\n-1.610136e+00\n-1.114873e+00\n-1.261820e+00\n-2.744117e+00\n-1.819865e+00\n...\n-1.726901e+00\n-2.223994e+00\n-1.693361e+00\n-1.222423\n-2.682695e+00\n-1.443878e+00\n-1.305831e+00\n-1.745063e+00\n-2.160960e+00\n-1.601839e+00\n\n\n25%\n-6.893853e-01\n-7.259631e-01\n-6.919555e-01\n-6.671955e-01\n-7.109628e-01\n-7.470860e-01\n-7.437479e-01\n-7.379438e-01\n-7.032397e-01\n-7.226392e-01\n...\n-6.749213e-01\n-7.486293e-01\n-6.895783e-01\n-0.642136\n-6.912304e-01\n-6.810833e-01\n-7.565142e-01\n-7.563999e-01\n-6.418637e-01\n-6.919118e-01\n\n\n50%\n-2.150816e-01\n-1.046362e-01\n-2.359800e-01\n-2.951869e-01\n-3.489108e-02\n-2.219405e-01\n-3.422399e-01\n-3.977212e-01\n-7.162650e-02\n-1.782793e-01\n...\n-2.690395e-01\n-4.351564e-02\n-2.859802e-01\n-0.341181\n-4.684277e-02\n-2.695009e-01\n-2.182321e-01\n-2.234689e-01\n-1.274095e-01\n-2.164441e-01\n\n\n75%\n4.693926e-01\n5.841756e-01\n4.996769e-01\n3.635073e-01\n6.361990e-01\n4.938569e-01\n5.260619e-01\n6.469351e-01\n5.307792e-01\n4.709834e-01\n...\n5.220158e-01\n6.583411e-01\n5.402790e-01\n0.357589\n5.975448e-01\n5.396688e-01\n5.311411e-01\n7.125100e-01\n4.501382e-01\n4.507624e-01\n\n\nmax\n3.971288e+00\n4.651889e+00\n3.976130e+00\n5.250529e+00\n4.770911e+00\n4.568425e+00\n4.243589e+00\n3.927930e+00\n4.484751e+00\n4.910919e+00\n...\n4.094189e+00\n3.885905e+00\n4.287337e+00\n5.930172\n3.955374e+00\n5.112877e+00\n4.700669e+00\n2.685877e+00\n6.046041e+00\n6.846856e+00\n\n\n\n\n8 rows × 30 columns\n\n\n\n\n# for compatibility purpose we save the scaled dataframe as data\ndata = scaled_data\n\n\n# and redo the same training\n\n\n# separate the training set and the testset\ndata_train, data_test, target_train, target_test = sklearn.model_selection.train_test_split(data, target)\n\n\nimport sklearn.linear_model\nmodel = sklearn.linear_model.LogisticRegression()\n\n\nmodel.fit(data_train, target_train) # this time, we don't get any error message\n\nLogisticRegression()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.LogisticRegressionLogisticRegression()\n\n\n\n# and actually improve the prediction (which might just be chance)\n\n\nmodel.score(data_test, target_test)\n\n0.972027972027972\n\n\nUse k-fold validation to validate the model\n\n# because the dataset is relatively small we didn't set aside a validation set\n# instead we rely on cross-validation\n\n# we split the dataset in 5\n# this provides 5 different testsets (with 20% of observation) to test the training on the remaining set (80%)\n\n\nkf = sklearn.model_selection.KFold(n_splits=5)\n\n\nscores = []\n\nfor i_train, i_test in kf.split(data):\n    \n    # i_train and i_test are indices of observations belonging to one of the two datasets\n    kf_data_train = data.iloc[i_train,:]\n    kf_target_train = target.iloc[i_train]\n    \n    kf_data_test = data.iloc[i_test,:]\n    kf_target_test = target.iloc[i_test]\n    \n    model_kf = sklearn.linear_model.LogisticRegression()\n    \n    # we train the model\n    model_kf.fit(kf_data_train, kf_target_train)\n    \n    # and test it\n    sc = model_kf.score(kf_data_test, kf_target_test)\n    \n    scores.append(sc)\n    \n    print(f\"Score: {sc}\")\n\nScore: 0.9736842105263158\nScore: 0.956140350877193\nScore: 0.9824561403508771\nScore: 0.9824561403508771\nScore: 0.9911504424778761\n\n\nThere is some volatility in the scores, but it stays reliably over 95% accuracy.\n\n# to get an estimate of accuracy we can compute the mean:\nprint(f\"KFold validation: mean accuracy {sum(scores)/5}\")\n\nKFold validation: mean accuracy 0.9771774569166279\n\n\nTry with other classifiers. Which one is best?\nThe dataset being relatively small we can try Support Vector Machines, which are known to generalize well (see discussion here).\nWe perform a kfold selection exactly as above.\n\nkf = sklearn.model_selection.KFold(n_splits=5)\n\n\nscores_svc = []\n\nfor i_train, i_test in kf.split(data):\n    \n    # i_train and i_test are indices of observations belonging to one of the two datasets\n    kf_data_train = data.iloc[i_train,:]\n    kf_target_train = target.iloc[i_train]\n    \n    kf_data_test = data.iloc[i_test,:]\n    kf_target_test = target.iloc[i_test]\n    \n    # we just change the following line\n    model_kf = sklearn.svm.SVC()\n    \n    # we train the model\n    model_kf.fit(kf_data_train, kf_target_train)\n    \n    # and test it\n    sc = model_kf.score(kf_data_test, kf_target_test)\n    \n    scores_svc.append(sc)\n    \n    print(f\"Score: {sc}\")\n\nScore: 0.9473684210526315\nScore: 0.9649122807017544\nScore: 0.9736842105263158\nScore: 0.9912280701754386\nScore: 0.9734513274336283\n\n\n\n# to get an estimate of accuracy we can compute the mean:\nprint(f\"KFold validation: mean accuracy {sum(scores_svc)/5}\")\n\nKFold validation: mean accuracy 0.9701288619779538\n\n\nComment: performance of support vector machine is similar to logistic regression. To assess the gains, we can compare the difference to both estimate (0.007) to the standard deviation of either of two models. Both are geater than 0.01, meaning that the difference between the two models is probably not significant.\n\n# we can compute the standard deviation as follows (googld standard deviation python)\n\nimport numpy \nprint( numpy.std(scores) )\nprint( numpy.std(scores_svc) )\n\n0.01188053806820839\n0.0142415326274357"
  },
  {
    "objectID": "pushups/pushups_2.html",
    "href": "pushups/pushups_2.html",
    "title": "Graph Replication Exercise",
    "section": "",
    "text": "Our World in Data features tons of very interesting graphs like the following:\nFor each graph it is possible to download the corresponding data file as csv:"
  },
  {
    "objectID": "pushups/pushups_2.html#import-data",
    "href": "pushups/pushups_2.html#import-data",
    "title": "Graph Replication Exercise",
    "section": "Import Data",
    "text": "Import Data\nChoose one graph that you find particularly interesting or beautiful. Download it from the website and upload it on nuvolos in the current folder\n\nImport the csv file using function pandas.read_csv and print some rows of the database\nTry to replicate the graph using matplotlib or altair (it doesn’t have to be identical, but the main message must be conveyed)."
  }
]