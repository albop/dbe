[
  {
    "objectID": "pushups/pushups_1_correction.html",
    "href": "pushups/pushups_1_correction.html",
    "title": "Problem Set 1",
    "section": "",
    "text": "See “Check Your Understanding” from Basics and Collections"
  },
  {
    "objectID": "pushups/pushups_1_correction.html#question-1",
    "href": "pushups/pushups_1_correction.html#question-1",
    "title": "Problem Set 1",
    "section": "Question 1",
    "text": "Question 1\nBelow this cell, add\n\nA Markdown cell with\n\n\n\ntwo levels of headings;\n\na numbered list (We ask for a list in Markdown, not a Python list object);\n\nan unnumbered list (again not a Python list object);\n\ntext with a * and a - sign (hint: look at this cell and escape characters)\n\nbackticked code (see https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet)\n\n\n\nA Markdown cell with\n\n\n\nthe quadratic formula embedded in the cell using LaTeX\n\nresponse:"
  },
  {
    "objectID": "pushups/pushups_1_correction.html#is-a-rose",
    "href": "pushups/pushups_1_correction.html#is-a-rose",
    "title": "Problem Set 1",
    "section": "is a rose",
    "text": "is a rose\n\nis a rose\n\nbrexit\nis brexit\nis brexit\n\nHere is nice quadratic formula: \\[\nx=\\frac{-b\\pm\\sqrt{b^2-4ac}}{2a}\n\\]"
  },
  {
    "objectID": "pushups/pushups_1_correction.html#question-2",
    "href": "pushups/pushups_1_correction.html#question-2",
    "title": "Problem Set 1",
    "section": "Question 2",
    "text": "Question 2\nComplete the following code, which sets up variables a, b, and c, to find the roots using the quadratic formula.\n\\[\nx=\\frac{-b\\pm\\sqrt{b^2-4ac}}{2a}\n\\]\nNote: because there are two roots, you will need to calculate two values of x\n\na = 1.0\nb = 2.0\nc = 1.0\n# we need the square root function\nfrom math import sqrt\n\nx1 = -b+sqrt(b**2-4*a*c)/(2*a)\nx2 = -b-sqrt(b**2-4*a*c)/(2*a)\n\nprint(f\"The two roots are {x1} and {x2}\")\n\nThe two roots are -2.0 and -2.0"
  },
  {
    "objectID": "pushups/pushups_1_correction.html#question-3",
    "href": "pushups/pushups_1_correction.html#question-3",
    "title": "Problem Set 1",
    "section": "Question 3",
    "text": "Question 3\nIn the cell below, use tab completion to find a function from the time module that displays the local time.\nUse time.FUNC_NAME? (where FUNC_NAME is replaced with the name of the function you found) to see information about that function, then call the function. (Hint: look for something involving the word local).\n\nimport time\n# Your code goes here\n# time. # uncomment and hit &lt;TAB&gt; to see functions\n\ntime.localtime()\n\ntime.struct_time(tm_year=2023, tm_mon=2, tm_mday=7, tm_hour=23, tm_min=15, tm_sec=33, tm_wday=1, tm_yday=38, tm_isdst=0)\n\n\nHint: if you are using an online jupyter server, the time will be based on the server settings. If it doesn’t match your location, don’t worry about it."
  },
  {
    "objectID": "pushups/pushups_1_correction.html#question-4",
    "href": "pushups/pushups_1_correction.html#question-4",
    "title": "Problem Set 1",
    "section": "Question 4",
    "text": "Question 4\nCreate the following variables:\n\nD: A floating point number with the value 10,000\n\nr: A floating point number with the value 0.025\n\nT: An integer with the value 30\n\nCompute the present discounted value of a payment (D) made in T years, assuming an interest rate of 2.5%. Save this value to a new variable called PDV and print your output.\nHint: The formula is\n\\[\n\\text{PDV} = \\frac{D}{(1 + r)^T}\n\\]\n\n# Your code goes here\nD = 10.0\nr = 0.025\nT = 30\n\nPDV = D/(1+r)**T\n\nf\"Present discount factor is: {PDV: .2f}\"   # the .2f is an instruction to limit the number of float numbers\n\n'Present discount factor is:  4.77'"
  },
  {
    "objectID": "pushups/pushups_1_correction.html#question-5",
    "href": "pushups/pushups_1_correction.html#question-5",
    "title": "Problem Set 1",
    "section": "Question 5",
    "text": "Question 5\nHow could you use the variables x and y to create the sentence Hello World ?\nHint: Think about how to represent a space as a string.\n\nx = \"Hello\"\ny = \"World\"\n# Your code goes here\n\nx+\" \"+y\n\n'Hello World'"
  },
  {
    "objectID": "pushups/pushups_1_correction.html#question-6",
    "href": "pushups/pushups_1_correction.html#question-6",
    "title": "Problem Set 1",
    "section": "Question 6",
    "text": "Question 6\nSuppose you are working with price data and come across the value \"€6.50\".\nWhen Python tries to interpret this value, it sees the value as the string \"€6.50\" instead of the number 6.50. (Quiz: why is this a problem? Think about the examples above.)\nIn this exercise, your task is to convert the variable price below into a number.\nHint: Once the string is in a suitable format, you can call float(clean_price) to make it a number.\n\nprice = \"€6.50\"\n# Your code goes here\n\n# remove the euro symbol\nprice[1:]\ns = price.strip(\"€\")\n\nfloat(s)\n\n6.5"
  },
  {
    "objectID": "pushups/pushups_1_correction.html#question-7",
    "href": "pushups/pushups_1_correction.html#question-7",
    "title": "Problem Set 1",
    "section": "Question 7",
    "text": "Question 7\nUse Python formatting (e.g. print(f\"text {somecode}\") where somecode is a valid expression or variable name) to produce the following output.\nThe 1st quarter revenue was $110M\nThe 2nd quarter revenue was $95M\nThe 3rd quarter revenue was $100M\nThe 4th quarter revenue was $130M\n\nns = [110, 95, 100, 130]\nqs = [\"1st\", \"2nd\", \"3rd\", \"4th\"]\n\n\nfor i in [0, 1, 2, 3]:\n    q = qs[i]\n    n = ns[i]\n    s = f\"The {q} quarter revenue was {n}M\"\n    print(s)\n\nThe 1st quarter revenue was 110M\nThe 2nd quarter revenue was 95M\nThe 3rd quarter revenue was 100M\nThe 4th quarter revenue was 130M"
  },
  {
    "objectID": "pushups/pushups_1_correction.html#question-8",
    "href": "pushups/pushups_1_correction.html#question-8",
    "title": "Problem Set 1",
    "section": "Question 8",
    "text": "Question 8\nDefine two lists y and z.\nThey can contain anything you want.\nCheck what happens when you do y + z. When you have finished that, try 2 * x and x * 2 where x represents the object you created from y + z.\nBriefly explain.\n\ny = [1,2,3,4,5] # fill me in!\nz = [\"once\", \"I\", \"caught\", \"a\", \"fish\", \"alive\"] # fill me in!\n# Your code goes here\n\n[1, 2, 3, 4, 5, 'once', 'I', 'caught', 'a', 'fish', 'alive']\n\n\n\nx = y+z # concatenates the two strings\nx\n\n[1, 2, 3, 4, 5, 'once', 'I', 'caught', 'a', 'fish', 'alive']\n\n\n\n2*x # repeats the list twice\n\n[1,\n 2,\n 3,\n 4,\n 5,\n 'once',\n 'I',\n 'caught',\n 'a',\n 'fish',\n 'alive',\n 1,\n 2,\n 3,\n 4,\n 5,\n 'once',\n 'I',\n 'caught',\n 'a',\n 'fish',\n 'alive']"
  },
  {
    "objectID": "pushups/pushups_1.html",
    "href": "pushups/pushups_1.html",
    "title": "Problem Set 1",
    "section": "",
    "text": "See “Check Your Understanding” from Basics and Collections"
  },
  {
    "objectID": "pushups/pushups_1.html#question-1",
    "href": "pushups/pushups_1.html#question-1",
    "title": "Problem Set 1",
    "section": "Question 1",
    "text": "Question 1\nBelow this cell, add\n\nA Markdown cell with\n\n\n\ntwo levels of headings;\n\na numbered list (We ask for a list in Markdown, not a Python list object);\n\nan unnumbered list (again not a Python list object);\n\ntext with a * and a - sign (hint: look at this cell and escape characters)\n\nbackticked code (see https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet)\n\n\n\nA Markdown cell with\n\n\n\nthe quadratic formula embedded in the cell using LaTeX"
  },
  {
    "objectID": "pushups/pushups_1.html#question-2",
    "href": "pushups/pushups_1.html#question-2",
    "title": "Problem Set 1",
    "section": "Question 2",
    "text": "Question 2\nComplete the following code, which sets up variables a, b, and c, to find the roots using the quadratic formula.\n\\[\nx=\\frac{-b\\pm\\sqrt{b^2-4ac}}{2a}\n\\]\nNote: because there are two roots, you will need to calculate two values of x\n\na = 1.0\nb = 2.0\nc = 1.0\n# Your code goes here"
  },
  {
    "objectID": "pushups/pushups_1.html#question-3",
    "href": "pushups/pushups_1.html#question-3",
    "title": "Problem Set 1",
    "section": "Question 3",
    "text": "Question 3\nIn the cell below, use tab completion to find a function from the time module that displays the local time.\nUse time.FUNC_NAME? (where FUNC_NAME is replaced with the name of the function you found) to see information about that function, then call the function. (Hint: look for something involving the word local).\n\nimport time\n# Your code goes here\n# time. # uncomment and hit &lt;TAB&gt; to see functions\n\nHint: if you are using an online jupyter server, the time will be based on the server settings. If it doesn’t match your location, don’t worry about it."
  },
  {
    "objectID": "pushups/pushups_1.html#question-4",
    "href": "pushups/pushups_1.html#question-4",
    "title": "Problem Set 1",
    "section": "Question 4",
    "text": "Question 4\nCreate the following variables:\n\nD: A floating point number with the value 10,000\n\nr: A floating point number with the value 0.025\n\nT: An integer with the value 30\n\nCompute the present discounted value of a payment (D) made in T years, assuming an interest rate of 2.5%. Save this value to a new variable called PDV and print your output.\nHint: The formula is\n\\[\n\\text{PDV} = \\frac{D}{(1 + r)^T}\n\\]\n\n# Your code goes here"
  },
  {
    "objectID": "pushups/pushups_1.html#question-5",
    "href": "pushups/pushups_1.html#question-5",
    "title": "Problem Set 1",
    "section": "Question 5",
    "text": "Question 5\nHow could you use the variables x and y to create the sentence Hello World ?\nHint: Think about how to represent a space as a string.\n\nx = \"Hello\"\ny = \"World\"\n# Your code goes here"
  },
  {
    "objectID": "pushups/pushups_1.html#question-6",
    "href": "pushups/pushups_1.html#question-6",
    "title": "Problem Set 1",
    "section": "Question 6",
    "text": "Question 6\nSuppose you are working with price data and come across the value \"€6.50\".\nWhen Python tries to interpret this value, it sees the value as the string \"€6.50\" instead of the number 6.50. (Quiz: why is this a problem? Think about the examples above.)\nIn this exercise, your task is to convert the variable price below into a number.\nHint: Once the string is in a suitable format, you can call float(clean_price) to make it a number.\n\nprice = \"€6.50\"\n# Your code goes here"
  },
  {
    "objectID": "pushups/pushups_1.html#question-7",
    "href": "pushups/pushups_1.html#question-7",
    "title": "Problem Set 1",
    "section": "Question 7",
    "text": "Question 7\nUse Python formatting (e.g. print(f\"text {somecode}\") where somecode is a valid expression or variable name) to produce the following output.\nThe 1st quarter revenue was $110M\nThe 2nd quarter revenue was $95M\nThe 3rd quarter revenue was $100M\nThe 4th quarter revenue was $130M\n\n# Your code goes here"
  },
  {
    "objectID": "pushups/pushups_1.html#question-8",
    "href": "pushups/pushups_1.html#question-8",
    "title": "Problem Set 1",
    "section": "Question 8",
    "text": "Question 8\nDefine two lists y and z.\nThey can contain anything you want.\nCheck what happens when you do y + z. When you have finished that, try 2 * x and x * 2 where x represents the object you created from y + z.\nBriefly explain.\n\ny = [] # fill me in!\nz = [] # fill me in!\n# Your code goes here"
  },
  {
    "objectID": "pushups/pushups_2_correction.html",
    "href": "pushups/pushups_2_correction.html",
    "title": "Pushups 2",
    "section": "",
    "text": "Verify that tuples are indeed immutable by attempting the following:\n\nChanging the first element of t to be 100\n\nAppending a new element \"!!\" to the end of t (remember with a list x we would use x.append(\"!!\") to do this\n\nSorting t\n\nReversing t\n\n\nt = (2,2,4)\n\n\n# change first element of t\nt[0] = 100\n\nTypeError: 'tuple' object does not support item assignment\n\n\n\n# appending to t\nt.append(3)\n\nAttributeError: 'tuple' object has no attribute 'append'\n\n\n\n# sorting t\nt.sort()\n\nAttributeError: 'tuple' object has no attribute 'sort'\n\n\n\n# this works and returns a new list\nsorted(t)\n\n[2, 2, 4]\n\n\n\n# reversing t\nt.reverse()\n\nAttributeError: 'tuple' object has no attribute 'reverse'\n\n\n\n\n\nCreate a new dict which associates stock tickers with its stock price.\nHere are some tickers and a price.\n\nAAPL: 175.96\n\nGOOGL: 1047.43\n\nTVIX: 8.38\n\n\n# your code here\n{\n    \"AAPL\": 175.96,\n    \"GOOGL\": 1047.43,\n    \"TVIX\": 8.38\n}\n\n{'AAPL': 175.96, 'GOOGL': 1047.43, 'TVIX': 8.38}\n\n\n\n\n\nLook at the World Factbook for Australia and create a dictionary with data containing the following types: float, string, integer, list, and dict. Choose any data you wish.\nTo confirm, you should have a dictionary that you identified via a key.\n\n# your code here\naustralia_data = {\n    \"coast_line\": 253760, #int\n    \"languages\": { # dict\n        \"English\": 72,\n        \"Mandarin\": 2.7,\n        \"Arabic\": 1.4,\n        \"Vietnamese\": 1.3,\n        \"Cantonese\": 1.2,\n        \"other\": 15.7,\n        \"unspecified\": 5.7\n    },\n    \"irrigated_land\": 15.210, #float\n    \"aquifers\": [\"Great Artesian Basin\", \"Canning Basin\"], # list\n    # string\n    \"population_distribution\": \"\"\"population is primarily located on the periphery, with the highest concentration of people residing in the east and southeast; a secondary population center is located in and around Perth in the west; of the States and Territories, New South Wales has, by far, the largest population; the interior, or \"outback\", has a very sparse population\"\"\"\n}\n\n\n\n\nUse Jupyter’s help facilities to learn how to use the pop method to remove the key \"irrigated_land\" (and its value) from the dict.\n\n# uncomment and use the Inspector or ?\naustralia_data.pop(\"irrigated_land\")\n\n15.21\n\n\n\naustralia_data\n\n{'coast_line': 253760,\n 'languages': {'English': 72,\n  'Mandarin': 2.7,\n  'Arabic': 1.4,\n  'Vietnamese': 1.3,\n  'Cantonese': 1.2,\n  'other': 15.7,\n  'unspecified': 5.7},\n 'aquifers': ['Great Artesian Basin', 'Canning Basin'],\n 'population_distribution': 'population is primarily located on the periphery, with the highest concentration of people residing in the east and southeast; a secondary population center is located in and around Perth in the west; of the States and Territories, New South Wales has, by far, the largest population; the interior, or \"outback\", has a very sparse population'}\n\n\n\n\n\nExplain what happens to the value you popped.\n\nIt returns the value, and removes it from the dictionary object.\n\n\n'irrigated_land' in australia_data\n\nFalse\n\n\nExperiment with calling pop twice.\n\naustralia_data.pop(\"irrigated_land\")\n## errors because the key is not in the dictionary any more\n\nKeyError: 'irrigated_land'"
  },
  {
    "objectID": "pushups/pushups_2_correction.html#tuples-and-dictionaries",
    "href": "pushups/pushups_2_correction.html#tuples-and-dictionaries",
    "title": "Pushups 2",
    "section": "",
    "text": "Verify that tuples are indeed immutable by attempting the following:\n\nChanging the first element of t to be 100\n\nAppending a new element \"!!\" to the end of t (remember with a list x we would use x.append(\"!!\") to do this\n\nSorting t\n\nReversing t\n\n\nt = (2,2,4)\n\n\n# change first element of t\nt[0] = 100\n\nTypeError: 'tuple' object does not support item assignment\n\n\n\n# appending to t\nt.append(3)\n\nAttributeError: 'tuple' object has no attribute 'append'\n\n\n\n# sorting t\nt.sort()\n\nAttributeError: 'tuple' object has no attribute 'sort'\n\n\n\n# this works and returns a new list\nsorted(t)\n\n[2, 2, 4]\n\n\n\n# reversing t\nt.reverse()\n\nAttributeError: 'tuple' object has no attribute 'reverse'\n\n\n\n\n\nCreate a new dict which associates stock tickers with its stock price.\nHere are some tickers and a price.\n\nAAPL: 175.96\n\nGOOGL: 1047.43\n\nTVIX: 8.38\n\n\n# your code here\n{\n    \"AAPL\": 175.96,\n    \"GOOGL\": 1047.43,\n    \"TVIX\": 8.38\n}\n\n{'AAPL': 175.96, 'GOOGL': 1047.43, 'TVIX': 8.38}\n\n\n\n\n\nLook at the World Factbook for Australia and create a dictionary with data containing the following types: float, string, integer, list, and dict. Choose any data you wish.\nTo confirm, you should have a dictionary that you identified via a key.\n\n# your code here\naustralia_data = {\n    \"coast_line\": 253760, #int\n    \"languages\": { # dict\n        \"English\": 72,\n        \"Mandarin\": 2.7,\n        \"Arabic\": 1.4,\n        \"Vietnamese\": 1.3,\n        \"Cantonese\": 1.2,\n        \"other\": 15.7,\n        \"unspecified\": 5.7\n    },\n    \"irrigated_land\": 15.210, #float\n    \"aquifers\": [\"Great Artesian Basin\", \"Canning Basin\"], # list\n    # string\n    \"population_distribution\": \"\"\"population is primarily located on the periphery, with the highest concentration of people residing in the east and southeast; a secondary population center is located in and around Perth in the west; of the States and Territories, New South Wales has, by far, the largest population; the interior, or \"outback\", has a very sparse population\"\"\"\n}\n\n\n\n\nUse Jupyter’s help facilities to learn how to use the pop method to remove the key \"irrigated_land\" (and its value) from the dict.\n\n# uncomment and use the Inspector or ?\naustralia_data.pop(\"irrigated_land\")\n\n15.21\n\n\n\naustralia_data\n\n{'coast_line': 253760,\n 'languages': {'English': 72,\n  'Mandarin': 2.7,\n  'Arabic': 1.4,\n  'Vietnamese': 1.3,\n  'Cantonese': 1.2,\n  'other': 15.7,\n  'unspecified': 5.7},\n 'aquifers': ['Great Artesian Basin', 'Canning Basin'],\n 'population_distribution': 'population is primarily located on the periphery, with the highest concentration of people residing in the east and southeast; a secondary population center is located in and around Perth in the west; of the States and Territories, New South Wales has, by far, the largest population; the interior, or \"outback\", has a very sparse population'}\n\n\n\n\n\nExplain what happens to the value you popped.\n\nIt returns the value, and removes it from the dictionary object.\n\n\n'irrigated_land' in australia_data\n\nFalse\n\n\nExperiment with calling pop twice.\n\naustralia_data.pop(\"irrigated_land\")\n## errors because the key is not in the dictionary any more\n\nKeyError: 'irrigated_land'"
  },
  {
    "objectID": "pushups/pushups_2_correction.html#prep-work-for-the-philips-curve",
    "href": "pushups/pushups_2_correction.html#prep-work-for-the-philips-curve",
    "title": "Pushups 2",
    "section": "Prep work for the Philips Curve",
    "text": "Prep work for the Philips Curve\nNote, if dbnomics is not installed on your machine, install it by running the following cell:"
  },
  {
    "objectID": "pushups/pushups_3.html",
    "href": "pushups/pushups_3.html",
    "title": "Graph Replication Exercise",
    "section": "",
    "text": "Our World in Data features tons of very interesting graphs like the following:\nFor each graph it is possible to download the corresponding data file as csv:"
  },
  {
    "objectID": "pushups/pushups_3.html#import-data",
    "href": "pushups/pushups_3.html#import-data",
    "title": "Graph Replication Exercise",
    "section": "Import Data",
    "text": "Import Data\nChoose one graph that you find particularly interesting or beautiful. Download it from the website and upload it on nuvolos in the current folder\n\nImport the csv file using function pandas.read_csv and print some rows of the database\nTry to replicate the graph using matplotlib or altair (it doesn’t have to be identical, but the main message must be conveyed)."
  },
  {
    "objectID": "tutorials/session_1/qe_functions.html",
    "href": "tutorials/session_1/qe_functions.html",
    "title": "Functions",
    "section": "",
    "text": "Prerequisites\nOutcomes"
  },
  {
    "objectID": "tutorials/session_1/qe_functions.html#application-production-functions",
    "href": "tutorials/session_1/qe_functions.html#application-production-functions",
    "title": "Functions",
    "section": "Application: Production Functions",
    "text": "Application: Production Functions\nProduction functions are useful when modeling the economics of firms producing goods or the aggregate output in an economy.\nThough the term “function” is used in a mathematical sense here, we will be making tight connections between the programming of mathematical functions and Python functions.\n\nFactors of Production\nThe factors of production are the inputs used in the production of some sort of output.\nSome example factors of production include\n\nPhysical capital, e.g. machines, buildings, computers, and power stations.\n\nLabor, e.g. all of the hours of work from different types of employees of a firm.\n\nHuman Capital, e.g. the knowledge of employees within a firm.\n\nA production function maps a set of inputs to the output, e.g. the amount of wheat produced by a farm, or widgets produced in a factory.\nAs an example of the notation, we denote the total units of labor and physical capital used in a factory as $ L $ and $ K $ respectively.\nIf we denote the physical output of the factory as $ Y $, then a production function $ F $ that transforms labor and capital into output might have the form:\n\\[\nY = F(K, L)\n\\]\n\n\n\nAn Example Production Function\nThroughout this lecture, we will use the Cobb-Douglas production function to help us understand how to create Python functions and why they are useful.\nThe Cobb-Douglas production function has appealing statistical properties when brought to data.\nThis function is displayed below.\n\\[\nY = z K^{\\alpha} L^{1-\\alpha}\n\\]\nThe function is parameterized by:\n\nA parameter $ $, called the “output elasticity of capital”.\n\nA value $ z $ called the Total Factor Productivity (TFP)."
  },
  {
    "objectID": "tutorials/session_1/qe_functions.html#what-are-python-functions",
    "href": "tutorials/session_1/qe_functions.html#what-are-python-functions",
    "title": "Functions",
    "section": "What are (Python) Functions?",
    "text": "What are (Python) Functions?\nIn this class, we will often talk about functions.\nSo what is a function?\nWe like to think of a function as a production line in a manufacturing plant: we pass zero or more things to it, operations take place in a set linear sequence, and zero or more things come out.\nWe use functions for the following purposes:\n\nRe-usability: Writing code to do a specific task just once, and reuse the code by calling the function.\n\nOrganization: Keep the code for distinct operations separated and organized.\n\nSharing/collaboration: Sharing code across multiple projects or sharing pieces of code with collaborators."
  },
  {
    "objectID": "tutorials/session_1/qe_functions.html#how-to-define-python-functions",
    "href": "tutorials/session_1/qe_functions.html#how-to-define-python-functions",
    "title": "Functions",
    "section": "How to Define (Python) Functions?",
    "text": "How to Define (Python) Functions?\nThe basic syntax to create our own function is as follows:\n\ndef function_name(inputs):\n    # step 1\n    # step 2\n    # ...\n    return outputs\n\nHere we see two new keywords: def and return.\n\ndef is used to tell Python we would like to define a new function.\n\nreturn is used to tell Python what we would like to return from a function.\n\nLet’s look at an example and then discuss each part:\n\ndef mean(numbers):\n    total = sum(numbers)\n    N = len(numbers)\n    answer = total / N\n\n    return answer\n\nHere we defined a function mean that has one input (numbers), does three steps, and has one output (answer).\nLet’s see what happens when we call this function on the list of numbers [1, 2, 3, 4].\n\nx = [1, 2, 3, 4]\nthe_mean = mean(x)\nthe_mean\n\nAdditionally, as we saw in the control flow lecture, indentation controls blocks of code (along with the scope rules).\nTo see this, compare a function with no inputs or return values.\n\ndef f():\n    print(\"1\")\n    print(\"2\")\nf()\n\nWith the following change of indentation…\n\ndef f():\n    print(\"1\")\nprint(\"2\")\nf()\n\n\n\nScope\nNotice that we named the input to the function x and we called the output the_mean.\nWhen we defined the function, the input was called numbers and the output answer… what gives?\nThis is an example of a programming concept called variable scope.\nIn Python, functions define their own scope for variables.\nIn English, this means that regardless of what name we give an input variable (x in this example), the input will always be referred to as numbers inside the body of the mean function.\nIt also means that although we called the output answer inside of the function mean, that this variable name was only valid inside of our function.\nTo use the output of the function, we had to give it our own name (the_mean in this example).\nAnother point to make here is that the intermediate variables we defined inside mean (total and N) are only defined inside of the mean function – we can’t access them from outside. We can verify this by trying to see what the value of total is:\n\ndef mean(numbers):\n    total = sum(numbers)\n    N = len(numbers)\n    answer = total / N\n    return answer # or directly return total / N\n\n# uncomment the line below and execute to see the error\n# total\n\nThis point can be taken even further: the same name can be bound to variables inside of blocks of code and in the outer “scope”.\n\nx = 4\nprint(f\"x = {x}\")\ndef f():\n    x = 5 # a different \"x\"\n    print(f\"x = {x}\")\nf() # calls function\nprint(f\"x = {x}\")\n\nThe final point we want to make about scope is that function inputs and output don’t have to be given a name outside the function.\n\nmean([10, 20, 30])\n\nNotice that we didn’t name the input or the output, but the function was called successfully.\nNow, we’ll use our new knowledge to define a function which computes the output from a Cobb-Douglas production function with parameters $ z = 1 $ and $ = 0.33 $ and takes inputs $ K $ and $ L $.\n\ndef cobb_douglas(K, L):\n\n    # Create alpha and z\n    z = 1\n    alpha = 0.33\n\n    return z * K**alpha * L**(1 - alpha)\n\nWe can use this function as we did the mean function.\n\ncobb_douglas(1.0, 0.5)\n\n\n\n\nRe-using Functions\nEconomists are often interested in this question: how much does output change if we modify our inputs?\nFor example, take a production function $ Y_1 = F(K_1,L_1) $ which produces $ Y_1 $ units of the goods.\nIf we then multiply the inputs each by $ $, so that $ K_2 = K_1 $ and $ L_2 = L_1 $, then the output is\n\\[\nY_2 = F(K_2, L_2) = F(\\gamma K_1, \\gamma L_1)\n\\]\nHow does $ Y_1 $ compare to $ Y_2 $?\nAnswering this question involves something called returns to scale.\nReturns to scale tells us whether our inputs are more or less productive as we have more of them.\nFor example, imagine that you run a restaurant. How would you expect the amount of food you could produce would change if you could build an exact replica of your restaurant and kitchen and hire the same number of cooks and waiters? You would probably expect it to double.\nIf, for any $ K, L $, we multiply $ K, L $ by a value $ $ then\n\nIf $ &lt; $ then we say the production function has decreasing returns to scale.\n\nIf $ = $ then we say the production function has constant returns to scale.\n\nIf $ &gt; $ then we say the production function has increasing returns to scale.\n\nLet’s try it and see what our function is!\n\ny1 = cobb_douglas(1.0, 0.5)\nprint(y1)\ny2 = cobb_douglas(2*1.0, 2*0.5)\nprint(y2)\n\nHow did $ Y_1 $ and $ Y_2 $ relate?\n\ny2 / y1\n\n$ Y_2 $ was exactly double $ Y_1 $!\nLet’s write a function that will compute the returns to scale for different values of $ K $ and $ L $.\nThis is an example of how writing functions can allow us to re-use code in ways we might not originally anticipate. (You didn’t know we’d be writing a returns_to_scale function when we wrote cobb_douglas.)\n\ndef returns_to_scale(K, L, gamma):\n    y1 = cobb_douglas(K, L)\n    y2 = cobb_douglas(gamma*K, gamma*L)\n    y_ratio = y2 / y1\n    return y_ratio / gamma\n\n\nreturns_to_scale(1.0, 0.5, 2.0)\n\n\n\nExercise\nSee exercise 1 in the exercise list.\nIt turns out that with a little bit of algebra, we can check that this will always hold for our Cobb-Douglas example above.\nTo show this, take an arbitrary $ K, L $ and multiply the inputs by an arbitrary $ $.\n\\[\n\\begin{aligned}\n    F(\\gamma K, \\gamma L) &= z (\\gamma K)^{\\alpha} (\\gamma L)^{1-\\alpha}\\\\\n    &=  z \\gamma^{\\alpha}\\gamma^{1-\\alpha} K^{\\alpha} L^{1-\\alpha}\\\\\n    &= \\gamma z K^{\\alpha} L^{1-\\alpha} = \\gamma F(K, L)\n\\end{aligned}\n\\]\nFor an example of a production function that is not CRS, look at a generalization of the Cobb-Douglas production function that has different “output elasticities” for the 2 inputs.\n\\[\nY = z K^{\\alpha_1} L^{\\alpha_2}\n\\]\nNote that if $ _2 = 1 - _1 $, this is our Cobb-Douglas production function.\n\n\nExercise\nSee exercise 2 in the exercise list.\n\n\n\nMultiple Returns\nAnother valuable element to analyze on production functions is how output changes as we change only one of the inputs. We will call this the marginal product.\nFor example, compare the output using $ K, L $ units of inputs to that with an $ $ units of labor.\nThen the marginal product of labor (MPL) is defined as\n\\[\n\\frac{F(K, L + \\varepsilon) - F(K, L)}{\\varepsilon}\n\\]\nThis tells us how much additional output is created relative to the additional input. (Spoiler alert: This should look like the definition for a partial derivative!)\nIf the input can be divided into small units, then we can use calculus to take this limit, using the partial derivative of the production function relative to that input.\nIn this case, we define the marginal product of labor (MPL) and marginal product of capital (MPK) as\n\\[\n\\begin{aligned}\nMPL(K, L) &= \\frac{\\partial F(K, L)}{\\partial L}\\\\\nMPK(K, L) &= \\frac{\\partial F(K, L)}{\\partial K}\n\\end{aligned}\n\\]\nIn the Cobb-Douglas example above, this becomes\n\\[\n\\begin{aligned}\nMPK(K, L) &= z  \\alpha \\left(\\frac{K}{L} \\right)^{\\alpha - 1}\\\\\nMPL(K, L) &= (1-\\alpha) z \\left(\\frac{K}{L} \\right)^{\\alpha}\\\\\n\\end{aligned}\n\\]\nLet’s test it out with Python! We’ll also see that we can actually return multiple things in a Python function.\nThe syntax for a return statement with multiple items is return item1, item2, ….\nIn this case, we’ll compute both the MPL and the MPK and then return both.\n\ndef marginal_products(K, L, epsilon):\n\n    mpl = (cobb_douglas(K, L + epsilon) - cobb_douglas(K, L)) / epsilon\n    mpk = (cobb_douglas(K + epsilon, L) - cobb_douglas(K, L)) / epsilon\n\n    return mpl, mpk\n\n\ntup = marginal_products(1.0, 0.5,  1e-4)\nprint(tup)\n\nInstead of using the tuple, these can be directly unpacked to variables.\n\nmpl, mpk = marginal_products(1.0, 0.5,  1e-4)\nprint(f\"mpl = {mpl}, mpk = {mpk}\")\n\nWe can use this to calculate the marginal products for different K, fixing L using a comprehension.\n\nKs = [1.0, 2.0, 3.0]\n[marginal_products(K, 0.5, 1e-4) for K in Ks] # create a tuple for each K\n\n\n\nDocumentation\nIn a previous exercise, we asked you to find help for the cobb_douglas and returns_to_scale functions using ?.\nIt didn’t provide any useful information.\nTo provide this type of help information, we need to add what Python programmers call a “docstring” to our functions.\nThis is done by putting a string (not assigned to any variable name) as the first line of the body of the function (after the line with def).\nBelow is a new version of the template we used to define functions.\n\ndef function_name(inputs):\n    \"\"\"\n    Docstring\n    \"\"\"\n    # step 1\n    # step 2\n    # ...\n    return outputs\n\nLet’s re-define our cobb_douglas function to include a docstring.\n\ndef cobb_douglas(K, L):\n    \"\"\"\n    Computes the production F(K, L) for a Cobb-Douglas production function\n\n    Takes the form F(K, L) = z K^{\\alpha} L^{1 - \\alpha}\n\n    We restrict z = 1 and alpha = 0.33\n    \"\"\"\n    return 1.0 * K**(0.33) * L**(1.0 - 0.33)\n\nNow when we have Jupyter evaluate cobb_douglas?, our message is displayed (or use the Contextual Help window with Jupyterlab and Ctrl-I or Cmd-I).\n\ncobb_douglas?\n\nWe recommend that you always include at least a very simple docstring for nontrivial functions.\nThis is in the same spirit as adding comments to your code — it makes it easier for future readers/users (including yourself) to understand what the code does.\n\n\nExercise\nSee exercise 3 in the exercise list.\n\n\nDefault and Keyword Arguments\nFunctions can have optional arguments.\nTo accomplish this, we must these arguments a default value by saying name=default_value instead of just name as we list the arguments.\nTo demonstrate this functionality, let’s now make $ z $ and $ $ arguments to our cobb_douglas function!\n\ndef cobb_douglas(K, L, alpha=0.33, z=1):\n    \"\"\"\n    Computes the production F(K, L) for a Cobb-Douglas production function\n\n    Takes the form F(K, L) = z K^{\\alpha} L^{1 - \\alpha}\n    \"\"\"\n    return z * K**(alpha) * L**(1.0 - alpha)\n\nWe can now call this function by passing in just K and L. Notice that it will produce same result as earlier because alpha and z are the same as earlier.\n\ncobb_douglas(1.0, 0.5)\n\nHowever, we can also set the other arguments of the function by passing more than just K/L.\n\ncobb_douglas(1.0, 0.5, 0.35, 1.6)\n\nIn the example above, we used alpha = 0.35, z = 1.6.\nWe can also refer to function arguments by their name, instead of only their position (order).\nTo do this, we would write func_name(arg=value) for as many of the arguments as we want.\nHere’s how to do that with our cobb_douglas example.\n\ncobb_douglas(1.0, 0.5, z = 1.5)\n\n\n\nExercise\nSee exercise 4 in the exercise list.\nIn terms of variable scope, the z name within the function is different from any other z in the outer scope.\nTo be clear,\n\nx = 5\ndef f(x):\n    return x\nf(x) # \"coincidence\" that it has the same name\n\nThis is also true with named function arguments, above.\n\nz = 1.5\ncobb_douglas(1.0, 0.5, z = z) # no problem!\n\nIn that example, the z on the left hand side of z = z refers to the local variable name in the function whereas the z on the right hand side refers to the z in the outer scope.\n\n\nAside: Methods\nAs we learned earlier, all variables in Python have a type associated with them.\nDifferent types of variables have different functions or operations defined for them.\nFor example, I can divide one number by another or make a string uppercase.\nIt wouldn’t make sense to divide one string by another or make a number uppercase.\nWhen certain functionality is closely tied to the type of an object, it is often implemented as a special kind of function known as a method.\nFor now, you only need to know two things about methods:\n\nWe call them by doing variable.method_name(other_arguments) instead of function_name(variable, other_arguments).\n\nA method is a function, even though we call it using a different notation.\n\nWhen we introduced the core data types, we saw many methods defined on these types.\nLet’s revisit them for the str, or string type.\nNotice that we call each of these functions using the dot syntax described above.\n\ns = \"This is my handy string!\"\n\n\ns.upper()\n\n\ns.title()"
  },
  {
    "objectID": "tutorials/session_1/qe_functions.html#more-on-scope-optional",
    "href": "tutorials/session_1/qe_functions.html#more-on-scope-optional",
    "title": "Functions",
    "section": "More on Scope (Optional)",
    "text": "More on Scope (Optional)\nKeep in mind that with mathematical functions, the arguments are just dummy names that can be interchanged.\nThat is, the following are identical.\n\\[\n\\begin{eqnarray}\n    f(K, L) &= z\\, K^{\\alpha} L^{1-\\alpha}\\\\\n    f(K_2, L_2) &= z\\, K_2^{\\alpha} L_2^{1-\\alpha}\n\\end{eqnarray}\n\\]\nThe same concept applies to Python functions, where the arguments are just placeholder names, and our cobb_douglas function is identical to\n\ndef cobb_douglas2(K2, L2): # changed dummy variable names\n\n    # Create alpha and z\n    z = 1\n    alpha = 0.33\n\n    return z * K2**alpha * L2**(1 - alpha)\n\ncobb_douglas2(1.0, 0.5)\n\nThis is an appealing feature of functions for avoiding coding errors: names of variables within the function are localized and won’t clash with those on the outside (with more examples in scope).\nImportantly, when Python looks for variables matching a particular name, it begins in the most local scope.\nThat is, note that having an alpha in the outer scope does not impact the local one.\n\ndef cobb_douglas3(K, L, alpha): # added new argument\n\n    # Create alpha and z\n    z = 1\n\n    return z * K**alpha * L**(1 - alpha) # sees local argument alpha\n\nprint(cobb_douglas3(1.0, 0.5, 0.2))\nprint(\"Setting alpha, does the result change?\")\nalpha = 0.5 # in the outer scope\nprint(cobb_douglas3(1.0, 0.5, 0.2))\n\nA crucial element of the above function is that the alpha variable was available in the local scope of the function.\nConsider the alternative where it is not. We have removed the alpha function parameter as well as the local definition of alpha.\n\ndef cobb_douglas4(K, L): # added new argument\n\n    # Create alpha and z\n    z = 1\n\n    # there are no local alpha in scope!\n    return z * K**alpha * L**(1 - alpha)\n\nalpha = 0.2 # in the outer scope\nprint(f\"alpha = {alpha} gives {cobb_douglas4(1.0, 0.5)}\")\nalpha = 0.3\nprint(f\"alpha = {alpha} gives {cobb_douglas4(1.0, 0.5)}\")\n\nThe intuition of scoping does not apply only for the “global” vs. “function” naming of variables, but also for nesting.\nFor example, we can define a version of cobb_douglas which is also missing a z in its inner-most scope, then put the function inside of another function.\n\nz = 1\ndef output_given_alpha(alpha):\n    # Scoping logic:\n    # 1. local function name doesn't clash with global one\n    # 2. alpha comes from the function parameter\n    # 3. z comes from the outer global scope\n    def cobb_douglas(K, L):\n        return z * K**alpha * L**(1 - alpha)\n\n    # using this function\n    return cobb_douglas(1.0, 0.5)\n\nalpha = 100 # ignored\nalphas = [0.2, 0.3, 0.5]\n# comprehension variables also have local scope\n# and don't clash with the alpha = 100\n[output_given_alpha(alpha) for alpha in alphas]"
  },
  {
    "objectID": "tutorials/session_1/qe_functions.html#exercises",
    "href": "tutorials/session_1/qe_functions.html#exercises",
    "title": "Functions",
    "section": "Exercises",
    "text": "Exercises\n\nExercise 1\nWhat happens if we try different inputs in our Cobb-Douglas production function?\n\n# Compute returns to scale with different values of `K` and `L` and `gamma`\n\n(back to text)\n\n\nExercise 2\nDefine a function named var that takes a list (call it x) and computes the variance. This function should use the mean function that we defined earlier.\n$ = _i (x_i - (x))^2 $\n\n# Your code here.\n\n(back to text)\n\n\nExercise 3\nRedefine the returns_to_scale function and add a docstring.\nConfirm that it works by running the cell containing returns_to_scale? below.\nNote: You do not need to change the actual code in the function — just copy/paste and add a docstring in the correct line.\n\n# re-define the `returns_to_scale` function here\n\n\n# test it here\n\nreturns_to_scale?\n\n(back to text)\n\n\nExercise 4\nExperiment with the sep and end arguments to the print function.\nThese can only be set by name.\n\n# Your code here.\n\n(back to text)"
  },
  {
    "objectID": "tutorials/session_1/qe_control.html",
    "href": "tutorials/session_1/qe_control.html",
    "title": "Control Flow",
    "section": "",
    "text": "Prerequisites\nOutcomes"
  },
  {
    "objectID": "tutorials/session_1/qe_control.html#net-present-values-and-asset-pricing",
    "href": "tutorials/session_1/qe_control.html#net-present-values-and-asset-pricing",
    "title": "Control Flow",
    "section": "Net Present Values and Asset Pricing",
    "text": "Net Present Values and Asset Pricing\nIn this lecture, we’ll introduce two related topics from economics:\n\nNet present valuations\n\nAsset pricing\n\nThese topics will motivate some of the programming we do in this course.\nIn economics and finance, “assets” provide a stream of payoffs.\nThese “assets” can be concrete or abstract: a stock pays dividends over time, a bond pays interest, an apple tree provides apples, a job pays wages, and an education provides possible jobs (which, in turn, pay wages).\nWhen deciding the price to pay for an asset or how to choose between different alternatives, we need to take into account that most people would prefer to receive 1 today vs. 1 next year.\nThis reflection on consumer preferences leads to the notion of a discount rate. If you are indifferent between receiving 1.00 today and 1.10 next year, then the discount rate over the next year is $ r = 0.10 $.\nIf we assume that an individuals preferences are consistent over time, then we can apply that same discount rate to valuing assets further into the future.\nFor example, we would expect that the consumer would be indifferent between consuming 1.00 today and $ (1+r)(1+r) = 1.21 $ dollars two years from now (i.e. discount twice).\nInverting this formula, 1 delivered two years from now is equivalent to $ $ today."
  },
  {
    "objectID": "tutorials/session_1/qe_control.html#exercise",
    "href": "tutorials/session_1/qe_control.html#exercise",
    "title": "Control Flow",
    "section": "Exercise",
    "text": "Exercise\nSee exercise 1 in the exercise list.\n\n\nNet Present Value\nIf an asset pays a stream of payoffs over multiple time periods, then we can use a discount rate to calculate the value to the consumer of a entire sequence of payoffs.\nMost generally, we enumerate each discrete time period (e.g. year, month, day) by the index $ t $ where today is $ t=0 $ and the asset lives for $ T $ periods.\nList the payoff at each time period as $ y_t $, which we will assume, for now, is known in advance.\nThen if the discount factor is $ r $, the consumer “values” the payoff $ y_t $ delivered at time $ t $ as $ y_t $ where we note that if $ t=0 $, the value is just the current payoff $ y_0 $.\nUsing this logic, we can write an expression for the value of the entire sequence of payoffs with a sum.\n \\[\nP_0 = \\sum_{t=0}^T \\left(\\frac{1}{1 + r}\\right)^t y_t \\tag{1}\n\\]\nIf $ y_t $ is a constant, then we can compute this sum with a simple formula!\nBelow, we present some useful formulas that come from infinite series that we will use to get our net present value formula.\nFor any constant $ 0 &lt; &lt; 1 $ and integer value $ &gt; 0 $,\n \\[\n\\begin{aligned}\n\\sum_{t=0}^{\\infty} \\beta^t & = \\frac{1}{1-\\beta}\\\\\n\\sum_{t=0}^{\\tau} \\beta^t &= \\frac{1- \\beta^{\\tau+1}}{1-\\beta}\\\\\n\\sum_{t=\\tau}^{\\infty} \\beta^t &=  \\frac{\\beta^{\\tau}}{1-\\beta}\n\\end{aligned} \\tag{2}\n\\]\nIn the case of an asset which pays one dollar until time $ T $, we can use these formulas, taking $ = $ and $ T = $, to find\n\\[\n\\begin{aligned}\nP_0 &= \\sum_{t=0}^T \\left(\\frac{1}{1 + r}\\right)^t = \\frac{1- (\\frac{1}{1+r})^{\\tau+1}}{1-\\frac{1}{1+r}}\\\\\n&= \\frac{1 + r}{r} - \\frac{1}{r}\\left(\\frac{1}{1+r} \\right)^\\tau\n\\end{aligned}\n\\]\nNote that we can also consider an asset that lives and pays forever if $ T= $, and from (2), the value of an asset which pays 1 forever is $ $."
  },
  {
    "objectID": "tutorials/session_1/qe_control.html#conditional-statements-and-blocks",
    "href": "tutorials/session_1/qe_control.html#conditional-statements-and-blocks",
    "title": "Control Flow",
    "section": "Conditional Statements and Blocks",
    "text": "Conditional Statements and Blocks\nSometimes, we will only want to execute some piece of code if a certain condition is met.\nThese conditions can be anything.\nFor example, we might add to total sales if the transaction value is positive, but add to total returns if the value is negative.\nOr, we might want to add up all incurred costs, only if the transaction happened before a certain date.\nWe use conditionals to run particular pieces of code when certain criterion are met.\nConditionals are closely tied to booleans, so if you don’t remember what those are, go back to the basics lecture for a refresher.\nThe basic syntax for conditionals is\n\nif condition:\n    # code to run when condition is True\nelse:\n    # code to run if no conditions above are True\n\nNote that immediately following the condition, there is a colon and that the next line begins with blank spaces.\nUsing 4 spaces is a very strong convention, so that is what we do — we recommend that you do the same.\nAlso note that the else clause is optional.\nLet’s see some simple examples.\n\nif True:\n    print(\"This is where `True` code is run\")\n\nAlternatively, you could have a test which returns a booleans\n\nif 1 &lt; 2:\n     print(\"This is where `True` code is run\")\n\nThis example is equivalent to just typing the print statement, but the example below isn’t…\n\nif False:\n    print(\"This is where `True` code is run\")\n\nOr\n\nif 1 &gt; 2:\n     print(\"This is where `True` code is run\")\n\nNotice that when you run the cells above nothing is printed.\nThat is because the condition for the if statement was not true, so the code inside the indented block was never run.\nThis also allows us to demonstrate the role of indentation in determining the “block” of code.\n\nval = False\n\nif val is True: # check an expression\n    print(\"This is where `True` code is run\")\n    print(\"More code in the if block\")\nprint(\"Code runs after 'if' block, regardless of val\")"
  },
  {
    "objectID": "tutorials/session_1/qe_control.html#exercise-1",
    "href": "tutorials/session_1/qe_control.html#exercise-1",
    "title": "Control Flow",
    "section": "Exercise",
    "text": "Exercise\nSee exercise 2 in the exercise list.\nThe next example shows us how else works.\n\nval = (2 == 4)  # returns False\nif val is True:\n    print(\"This is where `True` code is run\")\nelse:\n    print(\"This is where `False` code is run\")\n    print(\"More else code\")\nprint(\"Code runs after 'if' block, regardless of val\")\n\nThe if False: ... part of this example is the same as the example before, but now, we added an else: clause.\nIn this case, because the conditional for the if statement was not True, the if code block was not executed, but the else block was.\nFinally, the Condition is True is assumed in the if statement, and is often left out. For example, the following are identical\n\nif (1 &lt; 2) is True:\n    print(\"1 &lt; 2\")\n\nif 1 &lt; 2:\n    print(\"1 &lt; 2\")"
  },
  {
    "objectID": "tutorials/session_1/qe_control.html#exercise-2",
    "href": "tutorials/session_1/qe_control.html#exercise-2",
    "title": "Control Flow",
    "section": "Exercise",
    "text": "Exercise\nSee exercise 3 in the exercise list."
  },
  {
    "objectID": "tutorials/session_1/qe_control.html#exercise-3",
    "href": "tutorials/session_1/qe_control.html#exercise-3",
    "title": "Control Flow",
    "section": "Exercise",
    "text": "Exercise\nSee exercise 4 in the exercise list.\n\nelif clauses\nSometimes, you have more than one condition you want to check.\nFor example, you might want to run a different set of code based on which quarter a particular transaction took place in.\nIn this case you could check whether the date is in Q1, or in Q2, or in Q3, or if not any of these it must be in Q4.\nThe way to express this type of conditional is to use one or more elif clause in addition to the if and the else.\nThe syntax is\n\nif condition1:\n    # code to run when condition1 is True\nelif condition2:\n    # code to run when condition2 is True\nelif condition3:\n    # code to run when condition3 is True\nelse:\n    # code to run when none of the above are true\n\nYou can include as many elif clauses as you want.\nAs before, the else part is optional.\nHere’s how we might express the quarter example referred to above.\n\nimport datetime\nhalloween = datetime.date(2017, 10, 31)\n\nif halloween.month &gt; 9:\n    print(\"Halloween is in Q4\")\nelif halloween.month &gt; 6:\n    print(\"Halloween is in Q3\")\nelif halloween.month &gt; 3:\n    print(\"Halloween is in Q2\")\nelse:\n    print(\"Halloween is in Q1\")\n\nNote that when there are multiple if or elif conditions, only the code corresponding to the first true clause is run.\nWe saw this in action above.\nWe know that when halloween.month &gt; 9 is true, then halloween.month &gt; 6 and halloween.month &gt; 3 must also be true, but only the code block associated with halloween.month &gt; 9 was printed."
  },
  {
    "objectID": "tutorials/session_1/qe_control.html#iteration",
    "href": "tutorials/session_1/qe_control.html#iteration",
    "title": "Control Flow",
    "section": "Iteration",
    "text": "Iteration\nWhen doing computations or analyzing data, we often need to repeat certain operations a finite number of times or until some condition is met.\nExamples include processing all data files in a directory (folder), aggregating revenues and costs for every period in a year, or computing the net present value of certain assets. (In fact, later in this section, we will verify the equations that we wrote down above.)\nThese are all examples of a programming concept called iteration.\nWe feel the concept is best understood through example, so we will present a contrived example and then discuss the details behind doing iteration in Python.\n\nA Contrived Example\nSuppose we wanted to print out the first 10 integers and their squares.\nWe could do something like this.\n\nprint(f\"1**2 = {1**2}\")\nprint(f\"2**2 = {2**2}\")\nprint(f\"3**2 = {3**2}\")\nprint(f\"4**2 = {4**2}\")\n# .. and so on until 10\n\nAs you can see, the code above is repetitive.\nFor each integer, the code is exactly the same except for the two places where the “current” integer appears.\nSuppose that I asked you to write the same print statement for an int stored in a variable named i.\nYou might write the following code:\n\nprint(f\"{i}**2 = {i**2}\")\n\nThis more general version of the operation suggests a strategy for achieving our goal with less repetition: have a variable i take on the values 1 through 10 (Quiz: How can we use range to create the numbers 1 to 10?) and run the line of code above for each new value of i.\nThis can be accomplished with a for loop!\n\nfor i in range(1, 11):\n     print(f\"{i}**2 = {i**2}\")\n\nWhoa, what just happened?\nThe integer i took on the values in range(1, 11) one by one and for each new value it did the operations in the indented block (here just one line that called the print function).\n\n\nfor Loops\nThe general structure of a standard for loop is as follows.\n\nfor item in iterable:\n   # operation 1 with item\n   # operation 2 with item\n   # ...\n   # operation N with item\n\nwhere iterable is anything capable of producing one item at a time (see here for official definition from the Python team).\nWe’ve actually already seen some of the most common iterables!\nLists, tuples, dicts, and range/zip/enumerate objects are all iterables.\nNote that we can have as many operations as we want inside the indented block.\nWe will refer to the indented block as the “body” of the loop.\nWhen the for loop is executed, item will take on one value from iterable at a time and execute the loop body for each value.\n\n\n\nExercise\nSee exercise 5 in the exercise list.\nWhen iterating, each item in iterable might actually contain more than one value.\nRecall that tuples (and lists) can be unpacked directly into variables.\n\ntup = (4, \"test\")\ni, x = tup\nprint(f\"i = {i}, x = {x}, tup = {tup}\")\n\nAlso, recall that the value of a enumerate(iterable) is a tuple of the form (i, x) where iterable[i] == x.\nWhen we use enumerate in a for loop, we can “unpack” both values at the same time as follows:\n\n# revenue by quarter\ncompany_revenue = [5.12, 5.20, 5.50, 6.50]\n\nfor index, value in enumerate(company_revenue):\n    print(f\"quarter {index} revenue is ${value} million\")\n\nSimilarly, the index can be used to access another vector.\n\ncities = [\"Phoenix\", \"Austin\", \"San Diego\", \"New York\"]\nstates = [\"Arizona\", \"Texas\", \"California\", \"New York\"]\nfor index, city in enumerate(cities):\n    state = states[index]\n    print(f\"{city} is in {state}\")\n\n\n\nExercise\nSee exercise 6 in the exercise list.\n\n\nwhile Loops\nA related but slightly different form of iteration is to repeat something until some condition is met.\nThis is typically achieved using a while loop.\nThe structure of a while loop is\n\nwhile True_condition:\n    # repeat these steps\n\nwhere True_condition is some conditional statement that should evaluate to True when iterations should continue and False when Python should stop iterating.\nFor example, suppose we wanted to know the smallest N such that $ _{i=0}^N i &gt; 1000 $.\nWe figure this out using a while loop as follows.\n\ntotal = 0\ni = 0\nwhile total &lt;= 1000:\n    i = i + 1\n    total = total + i\n\nprint(\"The answer is\", i)\n\nLet’s check our work.\n\n# Should be just less than 1000 because range(45) goes from 0 to 44\nsum(range(45))\n\n\n# should be between 990 + 45 = 1035\nsum(range(46))\n\nA warning: one common programming error with while loops is to forget to set the variable you use in the condition prior to executing. For example, take the following code which correctly sets a counter\n\ni = 0\n\nAnd then executes a while loop\n\nwhile i &lt; 3:\n    print(i)\n    i = i + 1\nprint(\"done\")\n\nNo problems. But if you were to execute the above cell again, or another cell, the i=3 remains, and code is never executed (since i &lt; 3 begins as False).\n\nwhile i &lt; 3:\n    print(i)\n    i = i + 1\nprint(\"done\")\n\n\n\nExercise\nSee exercise 7 in the exercise list.\n\n\nbreak and continue\n\nbreak Out of a Loop\nSometimes we want to stop a loop early if some condition is met.\nLet’s revisit the example of finding the smallest N such that $ _{i=0}^N i &gt; 1000 $.\nClearly N must be less than 1000, so we know we will find the answer if we start with a for loop over all items in range(1001).\nThen, we can keep a running total as we proceed and tell Python to stop iterating through our range once total goes above 1000.\n\ntotal = 0\nfor i in range(1001):\n    total = total + i\n    if total &gt; 1000:\n        break\n\nprint(\"The answer is\", i)\n\n\n\nExercise\nSee exercise 8 in the exercise list.\n\n\ncontinue to the Next Iteration\nSometimes we might want to stop the body of a loop early if a condition is met.\nTo do this we can use the continue keyword.\nThe basic syntax for doing this is:\n\nfor item in iterable:\n    # always do these operations\n    if condition:\n        continue\n\n    # only do these operations if condition is False\n\nInside the loop body, Python will stop that loop iteration of the loop and continue directly to the next iteration when it encounters the continue statement.\nFor example, suppose I ask you to loop over the numbers 1 to 10 and print out the message “{i} An odd number!” whenever the number i is odd, and do nothing otherwise.\nYou can use continue to do this as follows:\n\nfor i in range(1, 11):\n    if i % 2 == 0:  # an even number... This is modulus division\n        continue\n\n    print(i, \"is an odd number!\")\n\n\n\nExercise\nSee exercise 9 in the exercise list."
  },
  {
    "objectID": "tutorials/session_1/qe_control.html#comprehension",
    "href": "tutorials/session_1/qe_control.html#comprehension",
    "title": "Control Flow",
    "section": "Comprehension",
    "text": "Comprehension\nOften, we will want to perform a very simple operation for every element of some iterable and create a new iterable with these values.\nThis could be done by writing a for loop and saving each value, but often using what is called a comprehension is more readable.\nLike many Python concepts, a comprehension is easiest to understand through example.\nImagine that we have a list x with a list of numbers. We would like to create a list x2 which has the squared values of x.\n\nx = list(range(4))\n\n# Create squared values with a loop\nx2_loop = []\nfor x_val in x:\n    x2_loop.append(x_val**2)\n\n# Create squared values with a comprehension\nx2_comp = [x_val**2 for x_val in x]\n\nprint(x2_loop)\nprint(x2_comp)\n\nNotice that much of the same text appears when we do the operation in the loop and when we do the operation with the comprehension.\n\nWe need to specify what we are iterating over – in both cases, this is for x_val in x.\n\nWe need to square each element x_val**2.\n\nIt needs to be stored somewhere – in x2_loop, this is done by appending each element to a list, and in x2_comp, this is done automatically because the operation is enclosed in a list.\n\nWe can do comprehension with many different types of iterables, so we demonstrate a few more below.\n\n# Create a dictionary from lists\ntickers = [\"AAPL\", \"GOOGL\", \"TVIX\"]\nprices = [175.96, 1047.43, 8.38]\nd = {key: value for key, value in zip(tickers, prices)}\nd\n\n\n# Create a list from a dictionary\nd = {\"AMZN\": \"Seattle\", \"TVIX\": \"Zurich\", \"AAPL\": \"Cupertino\"}\n\nhq_cities = [d[ticker] for ticker in d.keys()]\nhq_cities\n\n\nimport math\n\n# List from list\nx = range(10)\n\nsin_x = [math.sin(x_val) for x_val in x]\nsin_x"
  },
  {
    "objectID": "tutorials/session_1/qe_control.html#exercise-9",
    "href": "tutorials/session_1/qe_control.html#exercise-9",
    "title": "Control Flow",
    "section": "Exercise",
    "text": "Exercise\nSee exercise 10 in the exercise list.\nFinally, we can use this approach to build complicated nested dictionaries.\n\ngdp_data = [9.607, 10.48, 11.06]\nyears = [2013, 2014, 2015]\nexports = [ {\"manufacturing\": 2.4, \"agriculture\": 1.5, \"services\": 0.5},\n            {\"manufacturing\": 2.5, \"agriculture\": 1.4, \"services\": 0.9},\n            {\"manufacturing\": 2.7, \"agriculture\": 1.4, \"services\": 1.5}]\ndata = zip(years, gdp_data,exports)\ndata_dict = {year : {\"gdp\" : gdp, \"exports\": exports} for year, gdp, exports in data}\nprint(data_dict)\n\n# total exports by year\n[data_dict[year][\"exports\"][\"services\"] for year in data_dict.keys()]"
  },
  {
    "objectID": "tutorials/session_1/qe_control.html#exercises",
    "href": "tutorials/session_1/qe_control.html#exercises",
    "title": "Control Flow",
    "section": "Exercises",
    "text": "Exercises\n\nExercise 1\nGovernment bonds are often issued as zero-coupon bonds meaning that they make no payments throughout the entire time that they are held, but, rather make a single payment at the time of maturity.\nHow much should you be willing to pay for a zero-coupon bond that paid 100 in 10 years with an interest rate of 5%?\n\n# your code here\n\n(back to text)\n\n\nExercise 2\nRun the following two variations on the code with only a single change in the indentation.\nAfter, modify the x to print 3 and then 2, 3 instead.\n\nx = 1\n\nif x &gt; 0:\n    print(\"1\")\n    print(\"2\")\nprint(\"3\")\n\n\nx = 1\n\nif x &gt; 0:\n    print(\"1\")\nprint(\"2\") # changed the indentation\nprint(\"3\")\n\n(back to text)\n\n\nExercise 3\nUsing the code cell below as a start, print \"Good afternoon\" if the current_time is past noon.\nOtherwise, do nothing.\nWrite some conditional based on current_time.hour.\n\nimport datetime\ncurrent_time = datetime.datetime.now()\n\n## your code here\n\nmore text after\n(back to text)\n\n\nExercise 4\nIn this example, you will generate a random number between 0 and 1 and then display “x &gt; 0.5” or “x &lt; 0.5” depending on the value of the number.\nThis also introduces a new package numpy.random for drawing random numbers (more in the randomness lecture).\n\nimport numpy as np\nx = np.random.random()\nprint(f\"x = {x}\")\n\n## your code here\n\n(back to text)\n\n\nExercise 5\nIn economics, when an individual has some knowledge, skills, or education which provides them with a source of future income, we call it human capital.\nWhen a student graduating from high school is considering whether to continue with post-secondary education, they may consider that it gives them higher paying jobs in the future, but requires that they don’t begin working until after graduation.\nConsider the simplified example where a student has perfectly forecastable employment and is given two choices:\n\nBegin working immediately and make 40,000 a year until they retire 40 years later.\n\nPay 5,000 a year for the next 4 years to attend university, then get a job paying 50,000 a year until they retire 40 years after making the college attendance decision.\n\nShould the student enroll in school if the discount rate is r = 0.05?\n\n# Discount rate\nr = 0.05\n\n# High school wage\nw_hs = 40_000\n\n# College wage and cost of college\nc_college = 5_000\nw_college = 50_000\n\n# Compute npv of being a hs worker\n\n# Compute npv of attending college\n\n# Compute npv of being a college worker\n\n# Is npv_collegeworker - npv_collegecost &gt; npv_hsworker\n\n(back to text)\n\n\nExercise 6\nInstead of the above, write a for loop that uses the lists of cities and states below to print the same “{city} is in {state}” using a zip instead of an enumerate.\nTry using zip\n\ncities = [\"Phoenix\", \"Austin\", \"San Diego\", \"New York\"]\nstates = [\"Arizona\", \"Texas\", \"California\", \"New York\"]\n\n# Your code here\n\n(back to text)\n\n\nExercise 7\nCompanies often invest in training their employees to raise their productivity. Economists sometimes wonder why companies spend this money when this incentivizes other companies to hire their employees away with higher salaries since employees gain human capital from training?\nLet’s say that it costs a company 25,000 dollars to teach their employees Python, but it raises their output by 2,500 per month. How many months would an employee need to stay for the company to find it profitable to pay for their employees to learn Python if their discount rate is r = 0.01?\n\n# Define cost of teaching python\ncost = 25_000\nr = 0.01\n\n# Per month value\nadded_value = 2500\n\nn_months = 0\ntotal_npv = 0.0\n\n# Put condition below here\nwhile False: # (replace False with your condition here)\n    n_months = n_months + 1  # Increment how many months they've worked\n\n    # Increase total_npv\n\n(back to text)\n\n\nExercise 8\nTry to find the index of the first value in x that is greater than 0.999 using a for loop and break.\ntry iterating over range(len(x)).\n\nx = np.random.rand(10_000)\n# Your code here\n\n(back to text)\n\n\nExercise 9\nWrite a for loop that adds up all values in x that are greater than or equal to 0.5.\nUse the continue word to end the body of the loop early for all values of x that are less than 0.5.\nTry starting your loop with for value in x: instead of iterating over the indices of x.\n\nx = np.random.rand(10_000)\n# Your code here\n\n(back to text)\n\n\nExercise 10\nReturning to our previous example: print “{city} is in {state}” for each combination using a zip and a comprehension.\nTry using zip\n\ncities = [\"Phoenix\", \"Austin\", \"San Diego\", \"New York\"]\nstates = [\"Arizona\", \"Texas\", \"California\", \"New York\"]\n\n# your code here\n\n(back to text)"
  },
  {
    "objectID": "tutorials/session_1/qe_functions_answers.html",
    "href": "tutorials/session_1/qe_functions_answers.html",
    "title": "Functions",
    "section": "",
    "text": "Prerequisites\nOutcomes"
  },
  {
    "objectID": "tutorials/session_1/qe_functions_answers.html#application-production-functions",
    "href": "tutorials/session_1/qe_functions_answers.html#application-production-functions",
    "title": "Functions",
    "section": "Application: Production Functions",
    "text": "Application: Production Functions\nProduction functions are useful when modeling the economics of firms producing goods or the aggregate output in an economy.\nThough the term “function” is used in a mathematical sense here, we will be making tight connections between the programming of mathematical functions and Python functions.\n\nFactors of Production\nThe factors of production are the inputs used in the production of some sort of output.\nSome example factors of production include\n\nPhysical capital, e.g. machines, buildings, computers, and power stations.\n\nLabor, e.g. all of the hours of work from different types of employees of a firm.\n\nHuman Capital, e.g. the knowledge of employees within a firm.\n\nA production function maps a set of inputs to the output, e.g. the amount of wheat produced by a farm, or widgets produced in a factory.\nAs an example of the notation, we denote the total units of labor and physical capital used in a factory as $ L $ and $ K $ respectively.\nIf we denote the physical output of the factory as $ Y $, then a production function $ F $ that transforms labor and capital into output might have the form:\n\\[\nY = F(K, L)\n\\]\n\n\n\nAn Example Production Function\nThroughout this lecture, we will use the Cobb-Douglas production function to help us understand how to create Python functions and why they are useful.\nThe Cobb-Douglas production function has appealing statistical properties when brought to data.\nThis function is displayed below.\n\\[\nY = z K^{\\alpha} L^{1-\\alpha}\n\\]\nThe function is parameterized by:\n\nA parameter $ $, called the “output elasticity of capital”.\n\nA value $ z $ called the Total Factor Productivity (TFP)."
  },
  {
    "objectID": "tutorials/session_1/qe_functions_answers.html#what-are-python-functions",
    "href": "tutorials/session_1/qe_functions_answers.html#what-are-python-functions",
    "title": "Functions",
    "section": "What are (Python) Functions?",
    "text": "What are (Python) Functions?\nIn this class, we will often talk about functions.\nSo what is a function?\nWe like to think of a function as a production line in a manufacturing plant: we pass zero or more things to it, operations take place in a set linear sequence, and zero or more things come out.\nWe use functions for the following purposes:\n\nRe-usability: Writing code to do a specific task just once, and reuse the code by calling the function.\n\nOrganization: Keep the code for distinct operations separated and organized.\n\nSharing/collaboration: Sharing code across multiple projects or sharing pieces of code with collaborators."
  },
  {
    "objectID": "tutorials/session_1/qe_functions_answers.html#how-to-define-python-functions",
    "href": "tutorials/session_1/qe_functions_answers.html#how-to-define-python-functions",
    "title": "Functions",
    "section": "How to Define (Python) Functions?",
    "text": "How to Define (Python) Functions?\nThe basic syntax to create our own function is as follows:\n\ndef function_name(inputs):\n    # step 1\n    # step 2\n    # ...\n    return outputs\n\nHere we see two new keywords: def and return.\n\ndef is used to tell Python we would like to define a new function.\n\nreturn is used to tell Python what we would like to return from a function.\n\nLet’s look at an example and then discuss each part:\n\ndef mean(numbers):\n    total = sum(numbers)\n    N = len(numbers)\n    answer = total / N\n\n    return answer\n\nHere we defined a function mean that has one input (numbers), does three steps, and has one output (answer).\nLet’s see what happens when we call this function on the list of numbers [1, 2, 3, 4].\n\nx = [1, 2, 3, 4]\nthe_mean = mean(x)\nthe_mean\n\nAdditionally, as we saw in the control flow lecture, indentation controls blocks of code (along with the scope rules).\nTo see this, compare a function with no inputs or return values.\n\ndef f():\n    print(\"1\")\n    print(\"2\")\nf()\n\nWith the following change of indentation…\n\ndef f():\n    print(\"1\")\nprint(\"2\")\nf()\n\n\n\nScope\nNotice that we named the input to the function x and we called the output the_mean.\nWhen we defined the function, the input was called numbers and the output answer… what gives?\nThis is an example of a programming concept called variable scope.\nIn Python, functions define their own scope for variables.\nIn English, this means that regardless of what name we give an input variable (x in this example), the input will always be referred to as numbers inside the body of the mean function.\nIt also means that although we called the output answer inside of the function mean, that this variable name was only valid inside of our function.\nTo use the output of the function, we had to give it our own name (the_mean in this example).\nAnother point to make here is that the intermediate variables we defined inside mean (total and N) are only defined inside of the mean function – we can’t access them from outside. We can verify this by trying to see what the value of total is:\n\ndef mean(numbers):\n    total = sum(numbers)\n    N = len(numbers)\n    answer = total / N\n    return answer # or directly return total / N\n\n# uncomment the line below and execute to see the error\n# total\n\nThis point can be taken even further: the same name can be bound to variables inside of blocks of code and in the outer “scope”.\n\nx = 4\nprint(f\"x = {x}\")\ndef f():\n    x = 5 # a different \"x\"\n    print(f\"x = {x}\")\nf() # calls function\nprint(f\"x = {x}\")\n\nThe final point we want to make about scope is that function inputs and output don’t have to be given a name outside the function.\n\nmean([10, 20, 30])\n\nNotice that we didn’t name the input or the output, but the function was called successfully.\nNow, we’ll use our new knowledge to define a function which computes the output from a Cobb-Douglas production function with parameters $ z = 1 $ and $ = 0.33 $ and takes inputs $ K $ and $ L $.\n\ndef cobb_douglas(K, L):\n\n    # Create alpha and z\n    z = 1\n    alpha = 0.33\n\n    return z * K**alpha * L**(1 - alpha)\n\nWe can use this function as we did the mean function.\n\ncobb_douglas(1.0, 0.5)\n\n\n\n\nRe-using Functions\nEconomists are often interested in this question: how much does output change if we modify our inputs?\nFor example, take a production function $ Y_1 = F(K_1,L_1) $ which produces $ Y_1 $ units of the goods.\nIf we then multiply the inputs each by $ $, so that $ K_2 = K_1 $ and $ L_2 = L_1 $, then the output is\n\\[\nY_2 = F(K_2, L_2) = F(\\gamma K_1, \\gamma L_1)\n\\]\nHow does $ Y_1 $ compare to $ Y_2 $?\nAnswering this question involves something called returns to scale.\nReturns to scale tells us whether our inputs are more or less productive as we have more of them.\nFor example, imagine that you run a restaurant. How would you expect the amount of food you could produce would change if you could build an exact replica of your restaurant and kitchen and hire the same number of cooks and waiters? You would probably expect it to double.\nIf, for any $ K, L $, we multiply $ K, L $ by a value $ $ then\n\nIf $ &lt; $ then we say the production function has decreasing returns to scale.\n\nIf $ = $ then we say the production function has constant returns to scale.\n\nIf $ &gt; $ then we say the production function has increasing returns to scale.\n\nLet’s try it and see what our function is!\n\ny1 = cobb_douglas(1.0, 0.5)\nprint(y1)\ny2 = cobb_douglas(2*1.0, 2*0.5)\nprint(y2)\n\nHow did $ Y_1 $ and $ Y_2 $ relate?\n\ny2 / y1\n\n$ Y_2 $ was exactly double $ Y_1 $!\nLet’s write a function that will compute the returns to scale for different values of $ K $ and $ L $.\nThis is an example of how writing functions can allow us to re-use code in ways we might not originally anticipate. (You didn’t know we’d be writing a returns_to_scale function when we wrote cobb_douglas.)\n\ndef returns_to_scale(K, L, gamma):\n    y1 = cobb_douglas(K, L)\n    y2 = cobb_douglas(gamma*K, gamma*L)\n    y_ratio = y2 / y1\n    return y_ratio / gamma\n\n\nreturns_to_scale(1.0, 0.5, 2.0)\n\n\n\nExercise\nSee exercise 1 in the exercise list.\nIt turns out that with a little bit of algebra, we can check that this will always hold for our Cobb-Douglas example above.\nTo show this, take an arbitrary $ K, L $ and multiply the inputs by an arbitrary $ $.\n\\[\n\\begin{aligned}\n    F(\\gamma K, \\gamma L) &= z (\\gamma K)^{\\alpha} (\\gamma L)^{1-\\alpha}\\\\\n    &=  z \\gamma^{\\alpha}\\gamma^{1-\\alpha} K^{\\alpha} L^{1-\\alpha}\\\\\n    &= \\gamma z K^{\\alpha} L^{1-\\alpha} = \\gamma F(K, L)\n\\end{aligned}\n\\]\nFor an example of a production function that is not CRS, look at a generalization of the Cobb-Douglas production function that has different “output elasticities” for the 2 inputs.\n\\[\nY = z K^{\\alpha_1} L^{\\alpha_2}\n\\]\nNote that if $ _2 = 1 - _1 $, this is our Cobb-Douglas production function.\n\n\nExercise\nSee exercise 2 in the exercise list.\n\n\n\nMultiple Returns\nAnother valuable element to analyze on production functions is how output changes as we change only one of the inputs. We will call this the marginal product.\nFor example, compare the output using $ K, L $ units of inputs to that with an $ $ units of labor.\nThen the marginal product of labor (MPL) is defined as\n\\[\n\\frac{F(K, L + \\varepsilon) - F(K, L)}{\\varepsilon}\n\\]\nThis tells us how much additional output is created relative to the additional input. (Spoiler alert: This should look like the definition for a partial derivative!)\nIf the input can be divided into small units, then we can use calculus to take this limit, using the partial derivative of the production function relative to that input.\nIn this case, we define the marginal product of labor (MPL) and marginal product of capital (MPK) as\n\\[\n\\begin{aligned}\nMPL(K, L) &= \\frac{\\partial F(K, L)}{\\partial L}\\\\\nMPK(K, L) &= \\frac{\\partial F(K, L)}{\\partial K}\n\\end{aligned}\n\\]\nIn the Cobb-Douglas example above, this becomes\n\\[\n\\begin{aligned}\nMPK(K, L) &= z  \\alpha \\left(\\frac{K}{L} \\right)^{\\alpha - 1}\\\\\nMPL(K, L) &= (1-\\alpha) z \\left(\\frac{K}{L} \\right)^{\\alpha}\\\\\n\\end{aligned}\n\\]\nLet’s test it out with Python! We’ll also see that we can actually return multiple things in a Python function.\nThe syntax for a return statement with multiple items is return item1, item2, ….\nIn this case, we’ll compute both the MPL and the MPK and then return both.\n\ndef marginal_products(K, L, epsilon):\n\n    mpl = (cobb_douglas(K, L + epsilon) - cobb_douglas(K, L)) / epsilon\n    mpk = (cobb_douglas(K + epsilon, L) - cobb_douglas(K, L)) / epsilon\n\n    return mpl, mpk\n\n\ntup = marginal_products(1.0, 0.5,  1e-4)\nprint(tup)\n\nInstead of using the tuple, these can be directly unpacked to variables.\n\nmpl, mpk = marginal_products(1.0, 0.5,  1e-4)\nprint(f\"mpl = {mpl}, mpk = {mpk}\")\n\nWe can use this to calculate the marginal products for different K, fixing L using a comprehension.\n\nKs = [1.0, 2.0, 3.0]\n[marginal_products(K, 0.5, 1e-4) for K in Ks] # create a tuple for each K\n\n\n\nDocumentation\nIn a previous exercise, we asked you to find help for the cobb_douglas and returns_to_scale functions using ?.\nIt didn’t provide any useful information.\nTo provide this type of help information, we need to add what Python programmers call a “docstring” to our functions.\nThis is done by putting a string (not assigned to any variable name) as the first line of the body of the function (after the line with def).\nBelow is a new version of the template we used to define functions.\n\ndef function_name(inputs):\n    \"\"\"\n    Docstring\n    \"\"\"\n    # step 1\n    # step 2\n    # ...\n    return outputs\n\nLet’s re-define our cobb_douglas function to include a docstring.\n\ndef cobb_douglas(K, L):\n    \"\"\"\n    Computes the production F(K, L) for a Cobb-Douglas production function\n\n    Takes the form F(K, L) = z K^{\\alpha} L^{1 - \\alpha}\n\n    We restrict z = 1 and alpha = 0.33\n    \"\"\"\n    return 1.0 * K**(0.33) * L**(1.0 - 0.33)\n\nNow when we have Jupyter evaluate cobb_douglas?, our message is displayed (or use the Contextual Help window with Jupyterlab and Ctrl-I or Cmd-I).\n\ncobb_douglas?\n\nWe recommend that you always include at least a very simple docstring for nontrivial functions.\nThis is in the same spirit as adding comments to your code — it makes it easier for future readers/users (including yourself) to understand what the code does.\n\n\nExercise\nSee exercise 3 in the exercise list.\n\n\nDefault and Keyword Arguments\nFunctions can have optional arguments.\nTo accomplish this, we must these arguments a default value by saying name=default_value instead of just name as we list the arguments.\nTo demonstrate this functionality, let’s now make $ z $ and $ $ arguments to our cobb_douglas function!\n\ndef cobb_douglas(K, L, alpha=0.33, z=1):\n    \"\"\"\n    Computes the production F(K, L) for a Cobb-Douglas production function\n\n    Takes the form F(K, L) = z K^{\\alpha} L^{1 - \\alpha}\n    \"\"\"\n    return z * K**(alpha) * L**(1.0 - alpha)\n\nWe can now call this function by passing in just K and L. Notice that it will produce same result as earlier because alpha and z are the same as earlier.\n\ncobb_douglas(1.0, 0.5)\n\nHowever, we can also set the other arguments of the function by passing more than just K/L.\n\ncobb_douglas(1.0, 0.5, 0.35, 1.6)\n\nIn the example above, we used alpha = 0.35, z = 1.6.\nWe can also refer to function arguments by their name, instead of only their position (order).\nTo do this, we would write func_name(arg=value) for as many of the arguments as we want.\nHere’s how to do that with our cobb_douglas example.\n\ncobb_douglas(1.0, 0.5, z = 1.5)\n\n\n\nExercise\nSee exercise 4 in the exercise list.\nIn terms of variable scope, the z name within the function is different from any other z in the outer scope.\nTo be clear,\n\nx = 5\ndef f(x):\n    return x\nf(x) # \"coincidence\" that it has the same name\n\nThis is also true with named function arguments, above.\n\nz = 1.5\ncobb_douglas(1.0, 0.5, z = z) # no problem!\n\nIn that example, the z on the left hand side of z = z refers to the local variable name in the function whereas the z on the right hand side refers to the z in the outer scope.\n\n\nAside: Methods\nAs we learned earlier, all variables in Python have a type associated with them.\nDifferent types of variables have different functions or operations defined for them.\nFor example, I can divide one number by another or make a string uppercase.\nIt wouldn’t make sense to divide one string by another or make a number uppercase.\nWhen certain functionality is closely tied to the type of an object, it is often implemented as a special kind of function known as a method.\nFor now, you only need to know two things about methods:\n\nWe call them by doing variable.method_name(other_arguments) instead of function_name(variable, other_arguments).\n\nA method is a function, even though we call it using a different notation.\n\nWhen we introduced the core data types, we saw many methods defined on these types.\nLet’s revisit them for the str, or string type.\nNotice that we call each of these functions using the dot syntax described above.\n\ns = \"This is my handy string!\"\n\n\ns.upper()\n\n\ns.title()"
  },
  {
    "objectID": "tutorials/session_1/qe_functions_answers.html#more-on-scope-optional",
    "href": "tutorials/session_1/qe_functions_answers.html#more-on-scope-optional",
    "title": "Functions",
    "section": "More on Scope (Optional)",
    "text": "More on Scope (Optional)\nKeep in mind that with mathematical functions, the arguments are just dummy names that can be interchanged.\nThat is, the following are identical.\n\\[\n\\begin{eqnarray}\n    f(K, L) &= z\\, K^{\\alpha} L^{1-\\alpha}\\\\\n    f(K_2, L_2) &= z\\, K_2^{\\alpha} L_2^{1-\\alpha}\n\\end{eqnarray}\n\\]\nThe same concept applies to Python functions, where the arguments are just placeholder names, and our cobb_douglas function is identical to\n\ndef cobb_douglas2(K2, L2): # changed dummy variable names\n\n    # Create alpha and z\n    z = 1\n    alpha = 0.33\n\n    return z * K2**alpha * L2**(1 - alpha)\n\ncobb_douglas2(1.0, 0.5)\n\nThis is an appealing feature of functions for avoiding coding errors: names of variables within the function are localized and won’t clash with those on the outside (with more examples in scope).\nImportantly, when Python looks for variables matching a particular name, it begins in the most local scope.\nThat is, note that having an alpha in the outer scope does not impact the local one.\n\ndef cobb_douglas3(K, L, alpha): # added new argument\n\n    # Create alpha and z\n    z = 1\n\n    return z * K**alpha * L**(1 - alpha) # sees local argument alpha\n\nprint(cobb_douglas3(1.0, 0.5, 0.2))\nprint(\"Setting alpha, does the result change?\")\nalpha = 0.5 # in the outer scope\nprint(cobb_douglas3(1.0, 0.5, 0.2))\n\nA crucial element of the above function is that the alpha variable was available in the local scope of the function.\nConsider the alternative where it is not. We have removed the alpha function parameter as well as the local definition of alpha.\n\ndef cobb_douglas4(K, L): # added new argument\n\n    # Create alpha and z\n    z = 1\n\n    # there are no local alpha in scope!\n    return z * K**alpha * L**(1 - alpha)\n\nalpha = 0.2 # in the outer scope\nprint(f\"alpha = {alpha} gives {cobb_douglas4(1.0, 0.5)}\")\nalpha = 0.3\nprint(f\"alpha = {alpha} gives {cobb_douglas4(1.0, 0.5)}\")\n\nThe intuition of scoping does not apply only for the “global” vs. “function” naming of variables, but also for nesting.\nFor example, we can define a version of cobb_douglas which is also missing a z in its inner-most scope, then put the function inside of another function.\n\nz = 1\ndef output_given_alpha(alpha):\n    # Scoping logic:\n    # 1. local function name doesn't clash with global one\n    # 2. alpha comes from the function parameter\n    # 3. z comes from the outer global scope\n    def cobb_douglas(K, L):\n        return z * K**alpha * L**(1 - alpha)\n\n    # using this function\n    return cobb_douglas(1.0, 0.5)\n\nalpha = 100 # ignored\nalphas = [0.2, 0.3, 0.5]\n# comprehension variables also have local scope\n# and don't clash with the alpha = 100\n[output_given_alpha(alpha) for alpha in alphas]"
  },
  {
    "objectID": "tutorials/session_1/qe_functions_answers.html#exercises",
    "href": "tutorials/session_1/qe_functions_answers.html#exercises",
    "title": "Functions",
    "section": "Exercises",
    "text": "Exercises\n\nExercise 1\nWhat happens if we try different inputs in our Cobb-Douglas production function?\n\n# Compute returns to scale with different values of `K` and `L` and `gamma`\n\n(back to text)\n\n\nExercise 2\nDefine a function named var that takes a list (call it x) and computes the variance. This function should use the mean function that we defined earlier.\n$ = _i (x_i - (x))^2 $\n\n# Your code here.\n\n(back to text)\n\n\nExercise 3\nRedefine the returns_to_scale function and add a docstring.\nConfirm that it works by running the cell containing returns_to_scale? below.\nNote: You do not need to change the actual code in the function — just copy/paste and add a docstring in the correct line.\n\n# re-define the `returns_to_scale` function here\n\n\n# test it here\n\nreturns_to_scale?\n\n(back to text)\n\n\nExercise 4\nExperiment with the sep and end arguments to the print function.\nThese can only be set by name.\n\n# Your code here.\n\n(back to text)"
  },
  {
    "objectID": "tutorials/session_1/qe_collections.html",
    "href": "tutorials/session_1/qe_collections.html",
    "title": "Collections",
    "section": "",
    "text": "Prerequisites\nOutcomes"
  },
  {
    "objectID": "tutorials/session_1/qe_collections.html#ordered-collections",
    "href": "tutorials/session_1/qe_collections.html#ordered-collections",
    "title": "Collections",
    "section": "Ordered Collections",
    "text": "Ordered Collections\n\nLists\nA Python list is an ordered collection of items.\nWe can create lists using the following syntax\n\n[item1, item2, ...,  itemN]\n\nwhere the ... represents any number of additional items.\nEach item can be of any type.\nLet’s create some lists.\n\n# created, but not assigned to a variable\n[2.0, 9.1, \"a rose is a rose is a rose\"]\n\n[2.0, 9.1, 'a rose is a rose is a rose']\n\n\n\n# stored as the variable `x`\nx = [2.0, 9.1, 12.5]\nprint(\"x has type\", type(x))\nx\n\nx has type &lt;class 'list'&gt;\n\n\n[2.0, 9.1, 12.5]\n\n\n\nWhat Can We Do with Lists?\nWe can access items in a list called mylist using mylist[N] where N is an integer.\nNote: Anytime that we use the syntax x[i] we are doing what is called indexing – it means that we are selecting a particular element of a collection x.\n\nx[1]\n\n9.1\n\n\nWait? Why did x[1] return 9.1 when the first element in x is actually 2.0?\nThis happened because Python starts counting at zero!\nLets repeat that one more time for emphasis Python starts counting at zero!\nTo access the first element of x we must use x[0]:\n\nx[0]\n\n2.0\n\n\nWe can also determine how many items are in a list using the len function.\n\nlen(x)\n\n3\n\n\nWhat happens if we try to index with a number higher than the number of items in a list?\n\n# uncomment the line below and run\nx[4]\n\nIndexError: list index out of range\n\n\nWe can check if a list contains an element using the in keyword.\n\n2.0 in x\n\nTrue\n\n\n\n1.5 in x\n\nFalse\n\n\nFor our list x, other common operations we might want to do are…\n\nx.reverse()\nx\n\n[12.5, 9.1, 2.0]\n\n\n\nnumber_list = [10, 25, 42, 1.0]\nprint(number_list)\nnumber_list.sort()\nprint(number_list)\n\n[10, 25, 42, 1.0]\n[1.0, 10, 25, 42]\n\n\nNote that in order to sort, we had to have all elements in our list be numbers (int and float), more on this below.\nWe could actually do the same with a list of strings. In this case, sort will put the items in alphabetical order.\n\nstr_list = [\"NY\", \"AZ\", \"TX\"]\nprint(str_list)\nstr_list.sort()\nprint(str_list)\n\n['NY', 'AZ', 'TX']\n['AZ', 'NY', 'TX']\n\n\nThe append method adds an element to the end of existing list.\n\nnum_list = [10, 25, 42, 8]\nprint(num_list)\nnum_list.append(10)\nprint(num_list)\n\n[10, 25, 42, 8]\n[10, 25, 42, 8, 10]\n\n\nHowever, if you call append with a list, it adds a list to the end, rather than the numbers in that list.\n\nnum_list = [10, 25, 42, 8]\nprint(num_list)\nnum_list.append([20, 4])\nprint(num_list)\n\n[10, 25, 42, 8]\n[10, 25, 42, 8, [20, 4]]\n\n\nTo combine the lists instead…\n\nnum_list = [10, 25, 42, 8]\nprint(num_list)\nnum_list.extend([20, 4])\nprint(num_list)\n\n[10, 25, 42, 8]\n[10, 25, 42, 8, 20, 4]\n\n\n\n\nExercise\nSee exercise 1 in the exercise list.\n\n\n\n\nLists of Different Types\nWhile most examples above have all used a list with a single type of variable, this is not required.\nLet’s carefully make a small change to the first example: replace 2.0 with 2\n\nx = [2, 9.1, 12.5]\n\nThis behavior is identical for many operations you might apply to a list.\n\nimport numpy as np\nx = [2, 9.1, 12.5]\nnp.mean(x) == sum(x)/len(x)\n\nHere we have also introduced a new module, Numpy, which provides many functions for working with numeric data.\nTaking this further, we can put completely different types of elements inside of a list.\n\n# stored as the variable `x`\nx = [2, \"hello\", 3.0]\nprint(\"x has type\", type(x))\nx\n\nTo see the types of individual elements in the list:\n\nprint(f\"type(x[0]) = {type(x[0])}, type(x[0]) = {type(x[1])}, type(x[2]) = {type(x[2])}\")\n\nWhile no programming limitations prevent this, you should be careful if you write code with different numeric and non-numeric types in the same list.\nFor example, if the types within the list cannot be compared, then how could you sort the elements of the list? (i.e. How do you determine whether the string “hello” is less than the integer 2, “hello” &lt; 2?)\n\nx = [2, \"hello\", 3.0]\n# uncomment the line below and see what happens!\n# x.sort()\n\nA few key exceptions to this general rule are:\n\nLists with both integers and floating points are less error-prone (since mathematical code using the list would work with both types).\n\nWhen working with lists and data, you may want to represent missing values with a different type than the existing values.\n\n\n\nThe range Function\nOne function you will see often in Python is the range function.\nIt has three versions:\n\nrange(N): goes from 0 to N-1\n\nrange(a, N): goes from a to N-1\n\nrange(a, N, d): goes from a to N-1, counting by d\n\nWhen we call the range function, we get back something that has type range:\n\nr = range(5)\nprint(\"type(r)\", type(r))\n\ntype(r) &lt;class 'range'&gt;\n\n\nTo turn the range into a list:\n\n[*r]\n\n[0, 1, 2, 3, 4]\n\n\n\nlist(r)\n\n[0, 1, 2, 3, 4]\n\n\n\nfor i in range(5):\n    print(i)\n\n0\n1\n2\n3\n4\n\n\n\n\nExercise\nSee exercise 2 in the exercise list.\n\n\nWhat are Tuples?\nTuples are very similar to lists and hold ordered collections of items.\nHowever, tuples and lists have three main differences:\n\nTuples are created using parenthesis — ( and ) — instead of square brackets — [ and ].\n\nTuples are immutable, which is a fancy computer science word meaning that they can’t be changed or altered after they are created.\n\nTuples and multiple return values from functions are tightly connected, as we will see in functions.\n\n\nt = (1, \"hello\", 3.0)\nprint(\"t is a\", type(t))\nt\n\nt is a &lt;class 'tuple'&gt;\n\n\n(1, 'hello', 3.0)\n\n\n\ntuple(list(t))\n\n(1, 'hello', 3.0)\n\n\nWe can convert a list to a tuple by calling the tuple function on a list.\n\nprint(\"x is a\", type(x))\nprint(\"tuple(x) is a\", type(tuple(x)))\ntuple(x)\n\nWe can also convert a tuple to a list using the list function.\n\nlist(t)\n\nAs with a list, we access items in a tuple t using t[N] where N is an int.\n\nt[0]  # still start counting at 0\n\n1\n\n\n\nt[2]\n\n3.0\n\n\n\n\nExercise\nSee exercise 3 in the exercise list.\nTuples (and lists) can be unpacked directly into variables.\n\nx, y = (1, \"test\")\nprint(f\"x = {x}, y = {y}\")\n\nThis will be a convenient way to work with functions returning multiple values, as well as within comprehensions and loops.\n\n\nList vs Tuple: Which to Use?\nShould you use a list or tuple?\nThis depends on what you are storing, whether you might need to reorder the elements, or whether you’d add new elements without a complete reinterpretation of the underlying data.\nFor example, take data representing the GDP (in trillions) and population (in billions) for China in 2015.\n\nchina_data_2015 = (\"China\", 2015, 11.06, 1.371)\n\nprint(china_data_2015)\n\nIn this case, we have used a tuple since: (a) ordering would be meaningless; and (b) adding more data would require a reinterpretation of the whole data structure.\nOn the other hand, consider a list of GDP in China between 2013 and 2015.\n\ngdp_data = [9.607, 10.48, 11.06]\nprint(gdp_data)\n\nIn this case, we have used a list, since adding on a new element to the end of the list for GDP in 2016 would make complete sense.\nAlong these lines, collecting data on China for different years may make sense as a list of tuples (e.g. year, GDP, and population – although we will see better ways to store this sort of data in the Pandas section).\n\nchina_data = [(2015, 11.06, 1.371), (2014, 10.48, 1.364), (2013, 9.607, 1.357)]\nprint(china_data)\n\nIn general, a rule of thumb is to use a list unless you need to use a tuple.\nKey criteria for tuple use are when you want to:\n\nensure the order of elements can’t change\n\nensure the actual values of the elements can’t change\n\nuse the collection as a key in a dict (we will learn what this means soon)\n\n\n\nzip and enumerate\nTwo functions that can be extremely useful are zip and enumerate.\nBoth of these functions are best understood by example, so let’s see them in action and then talk about what they do.\n\ngdp_data = [9.607, 10.48, 11.06]\nyears = [2013, 2014, 2015]\nz = zip(years, gdp_data)\nprint(\"type(z)\", type(z))\n\ntype(z) &lt;class 'zip'&gt;\n\n\nTo see what is inside z, let’s convert it to a list.\n\nlist(z)\n\n[(2013, 9.607), (2014, 10.48), (2015, 11.06)]\n\n\nNotice that we now have a list where each item is a tuple.\nWithin each tuple, we have one item from each of the collections we passed to the zip function.\nIn particular, the first item in z contains the first item from [2013, 2014, 2015] and the first item from [9.607, 10.48, 11.06].\nThe second item in z contains the second item from each collection and so on.\nWe can access an element in this and then unpack the resulting tuple directly into variables.\n\nl = list(zip(years, gdp_data))\nx, y = l[0]\nprint(f\"year = {x}, GDP = {y}\")\n\nNow let’s experiment with enumerate.\n\ne = enumerate([\"a\", \"b\", \"c\"])\nprint(\"type(e)\", type(e))\ne\n\ntype(e) &lt;class 'enumerate'&gt;\n\n\n&lt;enumerate at 0x7fef3c8a01c0&gt;\n\n\nAgain, we call list(e) to see what is inside.\n\nlist(e)\n\n[(0, 'a'), (1, 'b'), (2, 'c')]\n\n\nWe again have a list of tuples, but this time, the first element in each tuple is the index of the second tuple element in the initial collection.\nNotice that the third item is (2, 'c') because [\"a\", \"b\", \"c\"][2] is 'c'\n\n\nExercise\nSee exercise 4 in the exercise list.\nAn important quirk of some iterable types that are not lists (such as the above zip) is that you cannot convert the same type to a list twice.\nThis is because zip, enumerate, and range produce what is called a generator.\nA generator will only produce each of its elements a single time, so if you call list on the same generator a second time, it will not have any elements to iterate over anymore.\nFor more information, refer to the Python documentation.\n\ngdp_data = [9.607, 10.48, 11.06]\nyears = [2013, 2014, 2015]\nz = zip(years, gdp_data)\nl = list(z)\nprint(l)\nm = list(z)\nprint(m)"
  },
  {
    "objectID": "tutorials/session_1/qe_collections.html#associative-collections",
    "href": "tutorials/session_1/qe_collections.html#associative-collections",
    "title": "Collections",
    "section": "Associative Collections",
    "text": "Associative Collections\n\n\nDictionaries\nA dictionary (or dict) associates keys with values.\nIt will feel similar to a dictionary for words, where the keys are words and the values are the associated definitions.\nThe most common way to create a dict is to use curly braces — { and } — like this:\n\n{\n    \"key1\": value1,\n    \"key2\": value2,\n    \"keyN\": valueN\n}\n\nwhere the ... indicates that we can have any number of additional terms.\nThe crucial part of the syntax is that each key-value pair is written key: value and that these pairs are separated by commas — ,.\nLet’s see an example using our aggregate data on China in 2015.\n\nchina_data = {\n    \"country\": \"China\",\n    \"year\": 2015,\n    \"GDP\" : 11.06,\n    \"population\": 1.371\n}\nprint(china_data)\n\n{'country': 'China', 'year': 2015, 'GDP': 11.06, 'population': 1.371}\n\n\nUnlike our above example using a tuple, a dict allows us to associate a name with each field, rather than having to remember the order within the tuple.\nOften, code that makes a dict is easier to read if we put each key: value pair on its own line. (Recall our earlier comment on using whitespace effectively to improve readability!)\nThe code below is equivalent to what we saw above.\n\nchina_data = {\n    \"country\": \"China\",\n    \"year\": 2015,\n    \"GDP\" : 11.06,\n    \"population\": 1.371\n}\n\nMost often, the keys (e.g. “country”, “year”, “GDP”, and “population”) will be strings, but we could also use numbers (int, or float) or even tuples (or, rarely, a combination of types).\nThe values can be any type and different from each other.\n\n\nExercise\nSee exercise 5 in the exercise list.\nThis next example is meant to emphasize how values can be anything – including another dictionary.\n\ncompanies = {\"AAPL\": {\"bid\": 175.96, \"ask\": 175.98},\n             \"GE\": {\"bid\": 1047.03, \"ask\": 1048.40},\n             \"TVIX\": {\"bid\": 8.38, \"ask\": 8.40}}\nprint(companies)\n\n\nGetting, Setting, and Updating dict Items\nWe can now ask Python to tell us the value for a particular key by using the syntax d[k], where d is our dict and k is the key for which we want to find the value.\nFor example,\n\nchina_data['country']\n\n'China'\n\n\n\n\nprint(f\"country = {china_data['country']}, population = {china_data['population']}\")\n\ncountry = China, population = 1.371\n\n\nNote: when inside of a formatting string, you can use ' instead of \" as above to ensure the formatting still works with the embedded code.\nIf we ask for the value of a key that is not in the dict, we will get an error.\n\n# uncomment the line below to see the error\n# china_data[\"inflation\"]\n\nWe can also add new items to a dict using the syntax d[new_key] = new_value.\nLet’s see some examples.\n\nchina_data\n\n{'country': 'China', 'year': 2015, 'GDP': 11.06, 'population': 1.371}\n\n\n\nprint(china_data)\nchina_data[\"unemployment\"] = \"4.05%\"\nprint(china_data)\n\n{'country': 'China', 'year': 2015, 'GDP': 11.06, 'population': 1.371}\n{'country': 'China', 'year': 2015, 'GDP': 11.06, 'population': 1.371, 'unemployment': '4.05%'}\n\n\nTo update the value, we use assignment in the same way (which will create the key and value as required).\n\nprint(china_data)\nchina_data[\"unemployment\"] = \"4.051%\"\nprint(china_data)\n\n{'country': 'China', 'year': 2015, 'GDP': 11.06, 'population': 1.371, 'unemployment': '4.05%'}\n{'country': 'China', 'year': 2015, 'GDP': 11.06, 'population': 1.371, 'unemployment': '4.051%'}\n\n\nOr we could change the type.\n\nchina_data[\"unemployment\"] = False or True\nprint(china_data)\n\n{'country': 'China', 'year': 2015, 'GDP': 11.06, 'population': 1.371, 'unemployment': True}\n\n\n\n\nExercise\nSee exercise 6 in the exercise list.\n\n\nCommon dict Functionality\nWe can do some common things with dicts.\nWe will demonstrate them with examples below.\n\n# number of key-value pairs in a dict\nlen(china_data)\n\n5\n\n\n\n# get a list of all the keys\nlist(china_data.keys())\n\n['country', 'year', 'GDP', 'population', 'unemployment']\n\n\n\n# get a list of all the values\nlist(china_data.values())\n\n['China', 2015, 11.06, 1.371, True]\n\n\n\nmore_china_data = {\n    \"irrigated_land\": 690_070,\n    \"top_religions\":\n        {\"buddhist\": 18.2, \"christian\" : 5.1, \"muslim\": 1.8}\n}\n\n# Add all key-value pairs in mydict2 to mydict.\n# if the key already appears in mydict, overwrite the\n# value with the value in mydict2\nchina_data.update(more_china_data)\nchina_data\n\n{'country': 'China',\n 'year': 2015,\n 'GDP': 11.06,\n 'population': 1.371,\n 'unemployment': True,\n 'irrigated_land': 690070,\n 'top_religions': {'buddhist': 18.2, 'christian': 5.1, 'muslim': 1.8}}\n\n\n\ntype(china_data.get(\"book\"))\n\nNoneType\n\n\n\n# Get the value associated with a key or return a default value\n# use this to avoid the NameError we saw above if you have a reasonable\n# default value\nchina_data.get(\"irrigated_land\", \"Data Not Available\")\n\n690070\n\n\n\nchina_data.get(\"book\", \"Data Not Available\")\n\n'Data Not Available'\n\n\n\n\nExercise\nSee exercise 7 in the exercise list.\n\n\nExercise\nSee exercise 8 in the exercise list.\n\n\n\nSets (Optional)\nPython has an additional way to represent collections of items: sets.\nSets come up infrequently, but you should be aware of them.\nIf you are familiar with the mathematical concept of sets, then you will understand the majority of Python sets already.\nIf you don’t know the math behind sets, don’t worry: we’ll cover the basics of Python’s sets here.\nA set is an unordered collection of unique elements.\nThe syntax for creating a set uses curly bracket { and }.\n\n{item1, item2, ..., itemN}\n\nHere is an example.\n\ns = {1, \"hello\", 3.0}\nprint(\"s has type\", type(s))\ns\n\n\n\nExercise\nSee exercise 9 in the exercise list.\nAs with lists and tuples, we can check if something is in the set and check the set’s length:\n\nprint(\"len(s) =\", len(s))\n\"hello\" in s\n\nUnlike lists and tuples, we can’t extract elements of a set s using s[N] where N is a number.\n\n# Uncomment the line below to see what happens\n# s[1]\n\nThis is because sets are not ordered, so the notion of getting the second element (s[1]) is not well defined.\nWe add elements to a set s using s.add.\n\ns.add(100)\ns\n\n\ns.add(\"hello\") # nothing happens, why?\ns\n\nWe can also do set operations.\nConsider the set s from above and the set s2 = {\"hello\", \"world\"}.\n\ns.union(s2): returns a set with all elements in either s or s2\n\ns.intersection(s2): returns a set with all elements in both s and s2\n\ns.difference(s2): returns a set with all elements in s that aren’t in s2\n\ns.symmetric_difference(s2): returns a set with all elements in only one of s and s2\n\n\n\nExercise\nSee exercise 10 in the exercise list.\nAs with tuples and lists, a set function can convert other collections to sets.\n\nx = [1, 2, 3, 1]\nset(x)\n\n\nt = (1, 2, 3, 1)\nset(t)\n\nLikewise, we can convert sets to lists and tuples.\n\nlist(s)\n\n\ntuple(s)"
  },
  {
    "objectID": "tutorials/session_1/qe_collections.html#exercises",
    "href": "tutorials/session_1/qe_collections.html#exercises",
    "title": "Collections",
    "section": "Exercises",
    "text": "Exercises\n\nExercise 1\nIn the first cell, try y.append(z).\nIn the second cell try y.extend(z).\nExplain the behavior.\nWhen you are trying to explain use y.append? and y.extend? to see a description of what these methods are supposed to do.\n\ny = [\"a\", \"b\", \"c\"]\nz = [1, 2, 3]\n# \n\n['a', 'b', 'c', [1, 2, 3]]\n\n\n\ny = [\"a\", \"b\", \"c\"]\nz = [1, 2, 3]\n# \n\n['a', 'b', 'c', 1, 2, 3]\n\n\n(back to text)\n\n\nExercise 2\nExperiment with the other two versions of the range function.\n\n# try list(range(a, N)) -- you pick `a` and `N`\n\n\n# try list(range(a, N, d)) -- you pick `a`, `N`, and `d`\n\n(back to text)\n\n\nExercise 3\nVerify that tuples are indeed immutable by attempting the following:\n\nChanging the first element of t to be 100\n\nAppending a new element \"!!\" to the end of t (remember with a list x we would use x.append(\"!!\") to do this\n\nSorting t\n\nReversing t\n\n\n# change first element of t\n\n\n# appending to t\n\n\n# sorting t\n\n\n# reversing t\n\n(back to text)\n\n\nExercise 4\nChallenging For the tuple foo below, use a combination of zip, range, and len to mimic enumerate(foo).\nVerify that your proposed solution is correct by converting each to a list and checking equality with ==.\nYou can see what the answer should look like by starting with list(enumerate(foo)).\n\nfoo = (\"good\", \"luck!\")\n\n(back to text)\n\n\nExercise 5\nCreate a new dict which associates stock tickers with its stock price.\nHere are some tickers and a price.\n\nAAPL: 175.96\n\nGOOGL: 1047.43\n\nTVIX: 8.38\n\n\n# your code here\n\n(back to text)\n\n\nExercise 6\nLook at the World Factbook for Australia and create a dictionary with data containing the following types: float, string, integer, list, and dict. Choose any data you wish.\nTo confirm, you should have a dictionary that you identified via a key.\n\n# your code here\n\n(back to text)\n\n\nExercise 7\nUse Jupyter’s help facilities to learn how to use the pop method to remove the key \"irrigated_land\" (and its value) from the dict.\n\n# uncomment and use the Inspector or ?\n#china_data.pop()\n\n(back to text)\n\n\nExercise 8\nExplain what happens to the value you popped.\nExperiment with calling pop twice.\n\n# your code here\n\n(back to text)\n\n\nExercise 9\nTry creating a set with repeated elements (e.g. {1, 2, 1, 2, 1, 2}).\nWhat happens?\nWhy?\n\n# your code here\n\n(back to text)\n\n\nExercise 10\nTest out two of the operations described above using the original set we created, s, and the set created below s2.\n\ns2 = {\"hello\", \"world\"}\n\n\n# Operation 1\n\n\n# Operation 2\n\n(back to text)"
  },
  {
    "objectID": "slides/session_1/index.html#general-1",
    "href": "slides/session_1/index.html#general-1",
    "title": "Introduction",
    "section": "General (1)",
    "text": "General (1)\n\nYour instructors:\n\nPablo Winadnt: pwinant@escp.eu (course and tutorials)\nRayane Hanifi: rayane.hanifi@edu.escp.eu (tutorials)\nÉmilie Rannou: (session on LLMs)\n\nHint: start your mail subject by [dbe]",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#general-2",
    "href": "slides/session_1/index.html#general-2",
    "title": "Introduction",
    "section": "General (2)",
    "text": "General (2)\n\nAll course material on www.mosphere.fr/dbe\nTutorials on Nuvolos\n\na datascience platform\nyou’ll be able to keep a full backup afterwards\n\nCollaboration between students is strongly encouraged",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#so-what-will-we-do",
    "href": "slides/session_1/index.html#so-what-will-we-do",
    "title": "Introduction",
    "section": "So what will we do ?",
    "text": "So what will we do ?\n\n\nProgramming\nEconometrics / Machine Learning\nTalk about economics",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#data-based-economics-1",
    "href": "slides/session_1/index.html#data-based-economics-1",
    "title": "Introduction",
    "section": "Data-based economics (1)",
    "text": "Data-based economics (1)\n\nMost economists use data all the time\n\nto illustrate facts\nto test theories",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#what-do-economists-do",
    "href": "slides/session_1/index.html#what-do-economists-do",
    "title": "Introduction",
    "section": "What do economists do ?",
    "text": "What do economists do ?\n\n\nimport data\nclean the data\n\ndeal with heterogenous sources, missing data, abnormal observerations\nsuper time consuming\nwe’ll make this part easy for you\n\ndescribe the data (statistics), visualize it\ninterpret it using a model\npresent results",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#econometricks",
    "href": "slides/session_1/index.html#econometricks",
    "title": "Introduction",
    "section": "Econometricks",
    "text": "Econometricks\n\nAn art invented by economists: \\[\\underbrace{y}_{\\text{dependent variable}} = a \\underbrace{x}_{\\text{explanatory variable}} + b\\]\n\n\n\nMain challenge:\n\ngiven dataset \\((x_i, y_i)\\)\nfind \\(a\\) while controlling for \\(b\\)\nunderstand robustness of results\npredict new values of \\(y\\) for new values of \\(x\\)",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#econometricks-example-1",
    "href": "slides/session_1/index.html#econometricks-example-1",
    "title": "Introduction",
    "section": "Econometricks: Example 1",
    "text": "Econometricks: Example 1\nCheck out the following website: How happy are you?\n\nWhat is \\(x\\) ? What is \\(y\\) ?",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#econometricks-example-2",
    "href": "slides/session_1/index.html#econometricks-example-2",
    "title": "Introduction",
    "section": "Econometricks: Example 2",
    "text": "Econometricks: Example 2\n\\[\\underbrace{y}_{\\text{dependent variable}} = a \\underbrace{x}_{\\text{explanatory variable}} + b\\]\n\n\nA famous study:\n\nyoung men who go to war receive in average lower wages when they return than men who didn’t go to war\n… is it because they skipped college?\n… or did they choose to go to war because they were less skilled for college?\n\nHow to decide?",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#econometricks-example-2-1",
    "href": "slides/session_1/index.html#econometricks-example-2-1",
    "title": "Introduction",
    "section": "Econometricks: Example 2",
    "text": "Econometricks: Example 2\n\\[\\underbrace{y}_{\\text{dependent variable}} = a \\underbrace{x}_{\\text{explanatory variable}} + b\\]\n\n\nHow to decide?\n\nfind a way to extract causality\ninstrumental variables\nThis was worth a Nobel Prize! (D. Card, J. Angrist, G.W. Imbens)",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#big-data-era-and-machine-learning-1",
    "href": "slides/session_1/index.html#big-data-era-and-machine-learning-1",
    "title": "Introduction",
    "section": "Big Data Era and Machine Learning (1)",
    "text": "Big Data Era and Machine Learning (1)\n\nData has become very abundant\nLarge amounts of data of all kinds\n\nstructured (tables, …)\nunstructured (text, images, …)\n\nMachine learning:\n\na set of powerful algorithms…\n… so powerful some call it artificial intelligence\n\nthey learn by processing data\n\n… to extract information and relations in large data sets",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#big-data-era-and-machine-learning-2",
    "href": "slides/session_1/index.html#big-data-era-and-machine-learning-2",
    "title": "Introduction",
    "section": "Big Data Era and Machine Learning (2)",
    "text": "Big Data Era and Machine Learning (2)\n\nMachine learning:\n\na set of powerful algorithms…\n… so powerful some call it artificial intelligence\n\nthey learn by processing data\n\n… to extract information and relations in large data sets\n…\n\nComparison with econometrics\n\nML has it own, partially redundant, jargon\nharder to study causality, standard deviation (precision)",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#machine-learning",
    "href": "slides/session_1/index.html#machine-learning",
    "title": "Introduction",
    "section": "Machine Learning",
    "text": "Machine Learning\n\\[\\underbrace{y}_{\\text{predicted variable}} = f( \\underbrace{x}_{\\text{feature}} , a)\\]\n\nChallenge:\n\ngiven dataset \\((x_i, y_i)\\)\nfind \\(a\\), that is find a nonlinear relationship between \\(a\\) and \\(b\\)\npredict new values of \\(y\\) given new values of \\(x\\)\n\nWhat is the difference with econometrics?",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#big-data-era-and-machine-learning-1-1",
    "href": "slides/session_1/index.html#big-data-era-and-machine-learning-1-1",
    "title": "Introduction",
    "section": "Big Data Era and Machine Learning (1)",
    "text": "Big Data Era and Machine Learning (1)\n\nSentiment analysis: predict population’s optimism by analyzing tweets.\nCheck sentiment viz",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#big-data-era-and-machine-learning-2-1",
    "href": "slides/session_1/index.html#big-data-era-and-machine-learning-2-1",
    "title": "Introduction",
    "section": "Big Data Era and Machine Learning (2)",
    "text": "Big Data Era and Machine Learning (2)\n\nBeautiful people (from NVIDIA presentation)",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#big-data-era-and-machine-learning-2-2",
    "href": "slides/session_1/index.html#big-data-era-and-machine-learning-2-2",
    "title": "Introduction",
    "section": "Big Data Era and Machine Learning (2)",
    "text": "Big Data Era and Machine Learning (2)\n\nBeautiful people (from NVIDIA presentation)Task: predict second and third columns from the first one.\nSolution: deep learning with artificial neural nets",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#why-program-in-python",
    "href": "slides/session_1/index.html#why-program-in-python",
    "title": "Introduction",
    "section": "Why program in Python?",
    "text": "Why program in Python?\n\nWhy learn and use Python?\nAnd not \n\nR\nSPSS\nStata\nMatlab\nC\nJavascript\nSQL\n…",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#because",
    "href": "slides/session_1/index.html#because",
    "title": "Introduction",
    "section": "Because",
    "text": "Because\nPython is: Easy",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#because-1",
    "href": "slides/session_1/index.html#because-1",
    "title": "Introduction",
    "section": "Because",
    "text": "Because\nPython is: Free",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#because-2",
    "href": "slides/session_1/index.html#because-2",
    "title": "Introduction",
    "section": "Because",
    "text": "Because\nPython is: Popular\n\n(TIOBE Index)",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#because-3",
    "href": "slides/session_1/index.html#because-3",
    "title": "Introduction",
    "section": "Because",
    "text": "Because\nPython has:\n\na lively community\nlots of online ressources\nlibraries for virtually anything",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#because-4",
    "href": "slides/session_1/index.html#because-4",
    "title": "Introduction",
    "section": "Because",
    "text": "Because\n   \n\nThe lingua Franca of Machine learning\n\nAll major machine learning softwares are written or interface with Python",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#why-learn-programming-1",
    "href": "slides/session_1/index.html#why-learn-programming-1",
    "title": "Introduction",
    "section": "Why learn programming ? (1)",
    "text": "Why learn programming ? (1)\n\n\nResearchers (econometricians or data scientists) spend 80% of their time writing code.\nPresentation (plots, interactive apps) is key and relies on\n\n… programming\n\nInteraction with code becomes unavoidable in business environment\n\nfixing the website\nquerying the database, …\n…",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#why-learn-programming-2",
    "href": "slides/session_1/index.html#why-learn-programming-2",
    "title": "Introduction",
    "section": "Why learn programming ? (2)",
    "text": "Why learn programming ? (2)\n\n\n\nWorth investing a bit of time to learn it\n\nyou can easily become an expert\nand can do anything\n\nPlus it’s fun\n\n\n\n\n\nimport antigravity",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#why-should-you-learn-programming-2",
    "href": "slides/session_1/index.html#why-should-you-learn-programming-2",
    "title": "Introduction",
    "section": "Why should you learn programming ? (2)",
    "text": "Why should you learn programming ? (2)\n\nimport antigravity",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#how-good-should-you-program",
    "href": "slides/session_1/index.html#how-good-should-you-program",
    "title": "Introduction",
    "section": "How good should you program ?",
    "text": "How good should you program ?\n\n\n\n\n\n\n\n\n\n\n\nWe will “assume” everybody as some prior experience with Python\nEven though some of you have possibly never touched it\nWe’ll do some catchup today\nAnd count on you to find the resources to learn what you need when you need it\nOf course you can always ask questions",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#additional-resources",
    "href": "slides/session_1/index.html#additional-resources",
    "title": "Introduction",
    "section": "Additional resources",
    "text": "Additional resources\nPlenty of online resources to learn python/econometrics/machine learning\n\nlearnpython sponsored by datacamp\nquantecon: designed for economists, good examples of projects\nPython Data Science Handbook: by Jake Van der Plas, very complete. Online free version.\nIntroduction to Econometrics with R, in R but very clear (beginner and advanced versions)",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "slides/session_1/index.html#quantecon",
    "href": "slides/session_1/index.html#quantecon",
    "title": "Introduction",
    "section": "Quantecon",
    "text": "Quantecon\n\n\n\n\n\nQuantEcon\n\n\n\n\n\nTom Sargent\n\n\n\n\n\nJohn Stachurski\n\n\n\n\n\n \n\nQuantecon: free online lectures to learn python programming and (advanced) economics\n\nnow with a section on datascience\nit is excellent!\nwe will use some of it today",
    "crumbs": [
      "lectures",
      "Introduction"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "Create an account on Nuvolos using the invite link. When you do make sure you are connected to your google account using the school’s email.\n\n\n\n\n\n\n\n\n\nDate\n\n\nTitle\n\n\n\n\n\n\nJan 17, 2024\n\n\nIntroduction\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "tutorials/session_1/qe_collections_answers.html",
    "href": "tutorials/session_1/qe_collections_answers.html",
    "title": "Collections",
    "section": "",
    "text": "Prerequisites\nOutcomes"
  },
  {
    "objectID": "tutorials/session_1/qe_collections_answers.html#ordered-collections",
    "href": "tutorials/session_1/qe_collections_answers.html#ordered-collections",
    "title": "Collections",
    "section": "Ordered Collections",
    "text": "Ordered Collections\n\nLists\nA Python list is an ordered collection of items.\nWe can create lists using the following syntax\n\n[item1, item2, ...,  itemN]\n\nwhere the ... represents any number of additional items.\nEach item can be of any type.\nLet’s create some lists.\n\n# created, but not assigned to a variable\n[2.0, 9.1, \"a rose is a rose is a rose\"]\n\n[2.0, 9.1, 'a rose is a rose is a rose']\n\n\n\n# stored as the variable `x`\nx = [2.0, 9.1, 12.5]\nprint(\"x has type\", type(x))\nx\n\nx has type &lt;class 'list'&gt;\n\n\n[2.0, 9.1, 12.5]\n\n\n\nWhat Can We Do with Lists?\nWe can access items in a list called mylist using mylist[N] where N is an integer.\nNote: Anytime that we use the syntax x[i] we are doing what is called indexing – it means that we are selecting a particular element of a collection x.\n\nx[1]\n\n9.1\n\n\nWait? Why did x[1] return 9.1 when the first element in x is actually 2.0?\nThis happened because Python starts counting at zero!\nLets repeat that one more time for emphasis Python starts counting at zero!\nTo access the first element of x we must use x[0]:\n\nx[0]\n\n2.0\n\n\nWe can also determine how many items are in a list using the len function.\n\nlen(x)\n\n3\n\n\nWhat happens if we try to index with a number higher than the number of items in a list?\n\n# uncomment the line below and run\nx[4]\n\nIndexError: list index out of range\n\n\nWe can check if a list contains an element using the in keyword.\n\n2.0 in x\n\nTrue\n\n\n\n1.5 in x\n\nFalse\n\n\nFor our list x, other common operations we might want to do are…\n\nx.reverse()\nx\n\n[12.5, 9.1, 2.0]\n\n\n\nnumber_list = [10, 25, 42, 1.0]\nprint(number_list)\nnumber_list.sort()\nprint(number_list)\n\n[10, 25, 42, 1.0]\n[1.0, 10, 25, 42]\n\n\nNote that in order to sort, we had to have all elements in our list be numbers (int and float), more on this below.\nWe could actually do the same with a list of strings. In this case, sort will put the items in alphabetical order.\n\nstr_list = [\"NY\", \"AZ\", \"TX\"]\nprint(str_list)\nstr_list.sort()\nprint(str_list)\n\n['NY', 'AZ', 'TX']\n['AZ', 'NY', 'TX']\n\n\nThe append method adds an element to the end of existing list.\n\nnum_list = [10, 25, 42, 8]\nprint(num_list)\nnum_list.append(10)\nprint(num_list)\n\n[10, 25, 42, 8]\n[10, 25, 42, 8, 10]\n\n\nHowever, if you call append with a list, it adds a list to the end, rather than the numbers in that list.\n\nnum_list = [10, 25, 42, 8]\nprint(num_list)\nnum_list.append([20, 4])\nprint(num_list)\n\n[10, 25, 42, 8]\n[10, 25, 42, 8, [20, 4]]\n\n\nTo combine the lists instead…\n\nnum_list = [10, 25, 42, 8]\nprint(num_list)\nnum_list.extend([20, 4])\nprint(num_list)\n\n[10, 25, 42, 8]\n[10, 25, 42, 8, 20, 4]\n\n\n\n\nExercise\nSee exercise 1 in the exercise list.\n\n\n\n\nLists of Different Types\nWhile most examples above have all used a list with a single type of variable, this is not required.\nLet’s carefully make a small change to the first example: replace 2.0 with 2\n\nx = [2, 9.1, 12.5]\n\nThis behavior is identical for many operations you might apply to a list.\n\nimport numpy as np\nx = [2, 9.1, 12.5]\nnp.mean(x) == sum(x)/len(x)\n\nHere we have also introduced a new module, Numpy, which provides many functions for working with numeric data.\nTaking this further, we can put completely different types of elements inside of a list.\n\n# stored as the variable `x`\nx = [2, \"hello\", 3.0]\nprint(\"x has type\", type(x))\nx\n\nTo see the types of individual elements in the list:\n\nprint(f\"type(x[0]) = {type(x[0])}, type(x[0]) = {type(x[1])}, type(x[2]) = {type(x[2])}\")\n\nWhile no programming limitations prevent this, you should be careful if you write code with different numeric and non-numeric types in the same list.\nFor example, if the types within the list cannot be compared, then how could you sort the elements of the list? (i.e. How do you determine whether the string “hello” is less than the integer 2, “hello” &lt; 2?)\n\nx = [2, \"hello\", 3.0]\n# uncomment the line below and see what happens!\n# x.sort()\n\nA few key exceptions to this general rule are:\n\nLists with both integers and floating points are less error-prone (since mathematical code using the list would work with both types).\n\nWhen working with lists and data, you may want to represent missing values with a different type than the existing values.\n\n\n\nThe range Function\nOne function you will see often in Python is the range function.\nIt has three versions:\n\nrange(N): goes from 0 to N-1\n\nrange(a, N): goes from a to N-1\n\nrange(a, N, d): goes from a to N-1, counting by d\n\nWhen we call the range function, we get back something that has type range:\n\nr = range(5)\nprint(\"type(r)\", type(r))\n\ntype(r) &lt;class 'range'&gt;\n\n\nTo turn the range into a list:\n\n[*r]\n\n[0, 1, 2, 3, 4]\n\n\n\nlist(r)\n\n[0, 1, 2, 3, 4]\n\n\n\nfor i in range(5):\n    print(i)\n\n0\n1\n2\n3\n4\n\n\n\n\nExercise\nSee exercise 2 in the exercise list.\n\n\nWhat are Tuples?\nTuples are very similar to lists and hold ordered collections of items.\nHowever, tuples and lists have three main differences:\n\nTuples are created using parenthesis — ( and ) — instead of square brackets — [ and ].\n\nTuples are immutable, which is a fancy computer science word meaning that they can’t be changed or altered after they are created.\n\nTuples and multiple return values from functions are tightly connected, as we will see in functions.\n\n\nt = (1, \"hello\", 3.0)\nprint(\"t is a\", type(t))\nt\n\nt is a &lt;class 'tuple'&gt;\n\n\n(1, 'hello', 3.0)\n\n\n\ntuple(list(t))\n\n(1, 'hello', 3.0)\n\n\nWe can convert a list to a tuple by calling the tuple function on a list.\n\nprint(\"x is a\", type(x))\nprint(\"tuple(x) is a\", type(tuple(x)))\ntuple(x)\n\nWe can also convert a tuple to a list using the list function.\n\nlist(t)\n\nAs with a list, we access items in a tuple t using t[N] where N is an int.\n\nt[0]  # still start counting at 0\n\n1\n\n\n\nt[2]\n\n3.0\n\n\n\n\nExercise\nSee exercise 3 in the exercise list.\nTuples (and lists) can be unpacked directly into variables.\n\nx, y = (1, \"test\")\nprint(f\"x = {x}, y = {y}\")\n\nThis will be a convenient way to work with functions returning multiple values, as well as within comprehensions and loops.\n\n\nList vs Tuple: Which to Use?\nShould you use a list or tuple?\nThis depends on what you are storing, whether you might need to reorder the elements, or whether you’d add new elements without a complete reinterpretation of the underlying data.\nFor example, take data representing the GDP (in trillions) and population (in billions) for China in 2015.\n\nchina_data_2015 = (\"China\", 2015, 11.06, 1.371)\n\nprint(china_data_2015)\n\nIn this case, we have used a tuple since: (a) ordering would be meaningless; and (b) adding more data would require a reinterpretation of the whole data structure.\nOn the other hand, consider a list of GDP in China between 2013 and 2015.\n\ngdp_data = [9.607, 10.48, 11.06]\nprint(gdp_data)\n\nIn this case, we have used a list, since adding on a new element to the end of the list for GDP in 2016 would make complete sense.\nAlong these lines, collecting data on China for different years may make sense as a list of tuples (e.g. year, GDP, and population – although we will see better ways to store this sort of data in the Pandas section).\n\nchina_data = [(2015, 11.06, 1.371), (2014, 10.48, 1.364), (2013, 9.607, 1.357)]\nprint(china_data)\n\nIn general, a rule of thumb is to use a list unless you need to use a tuple.\nKey criteria for tuple use are when you want to:\n\nensure the order of elements can’t change\n\nensure the actual values of the elements can’t change\n\nuse the collection as a key in a dict (we will learn what this means soon)\n\n\n\nzip and enumerate\nTwo functions that can be extremely useful are zip and enumerate.\nBoth of these functions are best understood by example, so let’s see them in action and then talk about what they do.\n\ngdp_data = [9.607, 10.48, 11.06]\nyears = [2013, 2014, 2015]\nz = zip(years, gdp_data)\nprint(\"type(z)\", type(z))\n\ntype(z) &lt;class 'zip'&gt;\n\n\nTo see what is inside z, let’s convert it to a list.\n\nlist(z)\n\n[(2013, 9.607), (2014, 10.48), (2015, 11.06)]\n\n\nNotice that we now have a list where each item is a tuple.\nWithin each tuple, we have one item from each of the collections we passed to the zip function.\nIn particular, the first item in z contains the first item from [2013, 2014, 2015] and the first item from [9.607, 10.48, 11.06].\nThe second item in z contains the second item from each collection and so on.\nWe can access an element in this and then unpack the resulting tuple directly into variables.\n\nl = list(zip(years, gdp_data))\nx, y = l[0]\nprint(f\"year = {x}, GDP = {y}\")\n\nNow let’s experiment with enumerate.\n\ne = enumerate([\"a\", \"b\", \"c\"])\nprint(\"type(e)\", type(e))\ne\n\ntype(e) &lt;class 'enumerate'&gt;\n\n\n&lt;enumerate at 0x7fef3c8a01c0&gt;\n\n\nAgain, we call list(e) to see what is inside.\n\nlist(e)\n\n[(0, 'a'), (1, 'b'), (2, 'c')]\n\n\nWe again have a list of tuples, but this time, the first element in each tuple is the index of the second tuple element in the initial collection.\nNotice that the third item is (2, 'c') because [\"a\", \"b\", \"c\"][2] is 'c'\n\n\nExercise\nSee exercise 4 in the exercise list.\nAn important quirk of some iterable types that are not lists (such as the above zip) is that you cannot convert the same type to a list twice.\nThis is because zip, enumerate, and range produce what is called a generator.\nA generator will only produce each of its elements a single time, so if you call list on the same generator a second time, it will not have any elements to iterate over anymore.\nFor more information, refer to the Python documentation.\n\ngdp_data = [9.607, 10.48, 11.06]\nyears = [2013, 2014, 2015]\nz = zip(years, gdp_data)\nl = list(z)\nprint(l)\nm = list(z)\nprint(m)"
  },
  {
    "objectID": "tutorials/session_1/qe_collections_answers.html#associative-collections",
    "href": "tutorials/session_1/qe_collections_answers.html#associative-collections",
    "title": "Collections",
    "section": "Associative Collections",
    "text": "Associative Collections\n\n\nDictionaries\nA dictionary (or dict) associates keys with values.\nIt will feel similar to a dictionary for words, where the keys are words and the values are the associated definitions.\nThe most common way to create a dict is to use curly braces — { and } — like this:\n\n{\n    \"key1\": value1,\n    \"key2\": value2,\n    \"keyN\": valueN\n}\n\nwhere the ... indicates that we can have any number of additional terms.\nThe crucial part of the syntax is that each key-value pair is written key: value and that these pairs are separated by commas — ,.\nLet’s see an example using our aggregate data on China in 2015.\n\nchina_data = {\n    \"country\": \"China\",\n    \"year\": 2015,\n    \"GDP\" : 11.06,\n    \"population\": 1.371\n}\nprint(china_data)\n\n{'country': 'China', 'year': 2015, 'GDP': 11.06, 'population': 1.371}\n\n\nUnlike our above example using a tuple, a dict allows us to associate a name with each field, rather than having to remember the order within the tuple.\nOften, code that makes a dict is easier to read if we put each key: value pair on its own line. (Recall our earlier comment on using whitespace effectively to improve readability!)\nThe code below is equivalent to what we saw above.\n\nchina_data = {\n    \"country\": \"China\",\n    \"year\": 2015,\n    \"GDP\" : 11.06,\n    \"population\": 1.371\n}\n\nMost often, the keys (e.g. “country”, “year”, “GDP”, and “population”) will be strings, but we could also use numbers (int, or float) or even tuples (or, rarely, a combination of types).\nThe values can be any type and different from each other.\n\n\nExercise\nSee exercise 5 in the exercise list.\nThis next example is meant to emphasize how values can be anything – including another dictionary.\n\ncompanies = {\"AAPL\": {\"bid\": 175.96, \"ask\": 175.98},\n             \"GE\": {\"bid\": 1047.03, \"ask\": 1048.40},\n             \"TVIX\": {\"bid\": 8.38, \"ask\": 8.40}}\nprint(companies)\n\n\nGetting, Setting, and Updating dict Items\nWe can now ask Python to tell us the value for a particular key by using the syntax d[k], where d is our dict and k is the key for which we want to find the value.\nFor example,\n\nchina_data['country']\n\n'China'\n\n\n\n\nprint(f\"country = {china_data['country']}, population = {china_data['population']}\")\n\ncountry = China, population = 1.371\n\n\nNote: when inside of a formatting string, you can use ' instead of \" as above to ensure the formatting still works with the embedded code.\nIf we ask for the value of a key that is not in the dict, we will get an error.\n\n# uncomment the line below to see the error\n# china_data[\"inflation\"]\n\nWe can also add new items to a dict using the syntax d[new_key] = new_value.\nLet’s see some examples.\n\nchina_data\n\n{'country': 'China', 'year': 2015, 'GDP': 11.06, 'population': 1.371}\n\n\n\nprint(china_data)\nchina_data[\"unemployment\"] = \"4.05%\"\nprint(china_data)\n\n{'country': 'China', 'year': 2015, 'GDP': 11.06, 'population': 1.371}\n{'country': 'China', 'year': 2015, 'GDP': 11.06, 'population': 1.371, 'unemployment': '4.05%'}\n\n\nTo update the value, we use assignment in the same way (which will create the key and value as required).\n\nprint(china_data)\nchina_data[\"unemployment\"] = \"4.051%\"\nprint(china_data)\n\n{'country': 'China', 'year': 2015, 'GDP': 11.06, 'population': 1.371, 'unemployment': '4.05%'}\n{'country': 'China', 'year': 2015, 'GDP': 11.06, 'population': 1.371, 'unemployment': '4.051%'}\n\n\nOr we could change the type.\n\nchina_data[\"unemployment\"] = False or True\nprint(china_data)\n\n{'country': 'China', 'year': 2015, 'GDP': 11.06, 'population': 1.371, 'unemployment': True}\n\n\n\n\nExercise\nSee exercise 6 in the exercise list.\n\n\nCommon dict Functionality\nWe can do some common things with dicts.\nWe will demonstrate them with examples below.\n\n# number of key-value pairs in a dict\nlen(china_data)\n\n5\n\n\n\n# get a list of all the keys\nlist(china_data.keys())\n\n['country', 'year', 'GDP', 'population', 'unemployment']\n\n\n\n# get a list of all the values\nlist(china_data.values())\n\n['China', 2015, 11.06, 1.371, True]\n\n\n\nmore_china_data = {\n    \"irrigated_land\": 690_070,\n    \"top_religions\":\n        {\"buddhist\": 18.2, \"christian\" : 5.1, \"muslim\": 1.8}\n}\n\n# Add all key-value pairs in mydict2 to mydict.\n# if the key already appears in mydict, overwrite the\n# value with the value in mydict2\nchina_data.update(more_china_data)\nchina_data\n\n{'country': 'China',\n 'year': 2015,\n 'GDP': 11.06,\n 'population': 1.371,\n 'unemployment': True,\n 'irrigated_land': 690070,\n 'top_religions': {'buddhist': 18.2, 'christian': 5.1, 'muslim': 1.8}}\n\n\n\ntype(china_data.get(\"book\"))\n\nNoneType\n\n\n\n# Get the value associated with a key or return a default value\n# use this to avoid the NameError we saw above if you have a reasonable\n# default value\nchina_data.get(\"irrigated_land\", \"Data Not Available\")\n\n690070\n\n\n\nchina_data.get(\"book\", \"Data Not Available\")\n\n'Data Not Available'\n\n\n\n\nExercise\nSee exercise 7 in the exercise list.\n\n\nExercise\nSee exercise 8 in the exercise list.\n\n\n\nSets (Optional)\nPython has an additional way to represent collections of items: sets.\nSets come up infrequently, but you should be aware of them.\nIf you are familiar with the mathematical concept of sets, then you will understand the majority of Python sets already.\nIf you don’t know the math behind sets, don’t worry: we’ll cover the basics of Python’s sets here.\nA set is an unordered collection of unique elements.\nThe syntax for creating a set uses curly bracket { and }.\n\n{item1, item2, ..., itemN}\n\nHere is an example.\n\ns = {1, \"hello\", 3.0}\nprint(\"s has type\", type(s))\ns\n\n\n\nExercise\nSee exercise 9 in the exercise list.\nAs with lists and tuples, we can check if something is in the set and check the set’s length:\n\nprint(\"len(s) =\", len(s))\n\"hello\" in s\n\nUnlike lists and tuples, we can’t extract elements of a set s using s[N] where N is a number.\n\n# Uncomment the line below to see what happens\n# s[1]\n\nThis is because sets are not ordered, so the notion of getting the second element (s[1]) is not well defined.\nWe add elements to a set s using s.add.\n\ns.add(100)\ns\n\n\ns.add(\"hello\") # nothing happens, why?\ns\n\nWe can also do set operations.\nConsider the set s from above and the set s2 = {\"hello\", \"world\"}.\n\ns.union(s2): returns a set with all elements in either s or s2\n\ns.intersection(s2): returns a set with all elements in both s and s2\n\ns.difference(s2): returns a set with all elements in s that aren’t in s2\n\ns.symmetric_difference(s2): returns a set with all elements in only one of s and s2\n\n\n\nExercise\nSee exercise 10 in the exercise list.\nAs with tuples and lists, a set function can convert other collections to sets.\n\nx = [1, 2, 3, 1]\nset(x)\n\n\nt = (1, 2, 3, 1)\nset(t)\n\nLikewise, we can convert sets to lists and tuples.\n\nlist(s)\n\n\ntuple(s)"
  },
  {
    "objectID": "tutorials/session_1/qe_collections_answers.html#exercises",
    "href": "tutorials/session_1/qe_collections_answers.html#exercises",
    "title": "Collections",
    "section": "Exercises",
    "text": "Exercises\n\nExercise 1\nIn the first cell, try y.append(z).\nIn the second cell try y.extend(z).\nExplain the behavior.\nWhen you are trying to explain use y.append? and y.extend? to see a description of what these methods are supposed to do.\n\ny = [\"a\", \"b\", \"c\"]\nz = [1, 2, 3]\ny.append(z)\nprint(y)\n\n['a', 'b', 'c', [1, 2, 3]]\n\n\n\ny = [\"a\", \"b\", \"c\"]\nz = [1, 2, 3]\ny.extend(z)\nprint(y)\n\n['a', 'b', 'c', 1, 2, 3]\n\n\n(back to text)\n\n\nExercise 2\nExperiment with the other two versions of the range function.\n\n# try list(range(a, N)) -- you pick `a` and `N`\n\n\n# try list(range(a, N, d)) -- you pick `a`, `N`, and `d`\n\n(back to text)\n\n\nExercise 3\nVerify that tuples are indeed immutable by attempting the following:\n\nChanging the first element of t to be 100\n\nAppending a new element \"!!\" to the end of t (remember with a list x we would use x.append(\"!!\") to do this\n\nSorting t\n\nReversing t\n\n\n# change first element of t\n\n\n# appending to t\n\n\n# sorting t\n\n\n# reversing t\n\n(back to text)\n\n\nExercise 4\nChallenging For the tuple foo below, use a combination of zip, range, and len to mimic enumerate(foo).\nVerify that your proposed solution is correct by converting each to a list and checking equality with ==.\nYou can see what the answer should look like by starting with list(enumerate(foo)).\n\nfoo = (\"good\", \"luck!\")\n\n(back to text)\n\n\nExercise 5\nCreate a new dict which associates stock tickers with its stock price.\nHere are some tickers and a price.\n\nAAPL: 175.96\n\nGOOGL: 1047.43\n\nTVIX: 8.38\n\n\n# your code here\n\n(back to text)\n\n\nExercise 6\nLook at the World Factbook for Australia and create a dictionary with data containing the following types: float, string, integer, list, and dict. Choose any data you wish.\nTo confirm, you should have a dictionary that you identified via a key.\n\n# your code here\n\n(back to text)\n\n\nExercise 7\nUse Jupyter’s help facilities to learn how to use the pop method to remove the key \"irrigated_land\" (and its value) from the dict.\n\n# uncomment and use the Inspector or ?\n#china_data.pop()\n\n(back to text)\n\n\nExercise 8\nExplain what happens to the value you popped.\nExperiment with calling pop twice.\n\n# your code here\n\n(back to text)\n\n\nExercise 9\nTry creating a set with repeated elements (e.g. {1, 2, 1, 2, 1, 2}).\nWhat happens?\nWhy?\n\n# your code here\n\n(back to text)\n\n\nExercise 10\nTest out two of the operations described above using the original set we created, s, and the set created below s2.\n\ns2 = {\"hello\", \"world\"}\n\n\n# Operation 1\n\n\n# Operation 2\n\n(back to text)"
  },
  {
    "objectID": "tutorials/session_1/qe_basics_answers.html",
    "href": "tutorials/session_1/qe_basics_answers.html",
    "title": "Basics",
    "section": "",
    "text": "Outcomes"
  },
  {
    "objectID": "tutorials/session_1/qe_basics_answers.html#first-steps",
    "href": "tutorials/session_1/qe_basics_answers.html#first-steps",
    "title": "Basics",
    "section": "First Steps",
    "text": "First Steps\nWe are ready to begin writing code!\nIn this section, we will teach you some basic concepts of programming and where to search for help.\n\nVariable Assignment\nThe first thing we will learn is the idea of variable assignment.\nVariable assignment associates a value to a variable.\nBelow, we assign the value “Hello World” to the variable x\n\nx = \"Hello World\"\n\n\nx\n\n'Hello World'\n\n\nOnce we have assigned a value to a variable, Python will remember this variable as long as the current session of Python is still running.\nNotice how writing x into the prompt below outputs the value “Hello World”.\n\nx\n\n'Hello World'\n\n\nHowever, Python returns an error if we ask it about variables that have not yet been created.\n\n# uncomment (delete the # and the space) the line below and run\ny\n\nNameError: name 'y' is not defined\n\n\nIt is also useful to understand the order in which operations happen.\nFirst, the right side of the equal sign is computed.\nThen, that computed value is stored as the variable to the left of the equal sign.\n\n\nExercise\nSee exercise 1 in the exercise list.\nKeep in mind that the variable binds a name to something stored in memory.\nThe name can even be bound to a value of a completely different type.\n\nx = 2\nprint(x)\nx = \"something else\"\nprint(x)\n\n\n\nCode Comments\nComments are short notes that you leave for yourself and for others who read your code.\nThey should be used to explain what the code does.\nA comment is made with the #. Python ignores everything in a line that follows a #.\nLet’s practice making some comments.\n\ni = 1  # Assign the value 1 to variable i\nj = 2  # Assign the value 2 to variable j\n\n# We add i and j below this line\ni + j\n\n3"
  },
  {
    "objectID": "tutorials/session_1/qe_basics_answers.html#functions",
    "href": "tutorials/session_1/qe_basics_answers.html#functions",
    "title": "Basics",
    "section": "Functions",
    "text": "Functions\nFunctions are processes that take an input (or inputs) and produce an output.\nIf we had a function called f that took two arguments x and y, we would write f(x, y) to use the function.\nFor example, the function print simply prints whatever it is given. Recall the variable we created called x.\n\nprint(x)\n\nHello World\n\n\n\nGetting Help\nWe can figure out what a function does by asking for help.\nIn Jupyter notebooks, this is done by placing a ? after the function name (without using parenthesis) and evaluating the cell.\nFor example, we can ask for help on the print function by writing print?.\nDepending on how you launched Jupyter, this will either launch\n\nJupyterLab: display the help in text below the cell.\n\nClassic Jupyter Notebooks: display a new panel at the bottom of your screen. You can exit this panel by hitting the escape key or clicking the x at the top right of the panel.\n\n\nprint?\n\n\nDocstring:\nprint(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\nPrints the values to a stream, or to sys.stdout by default.\nOptional keyword arguments:\nfile:  a file-like object (stream); defaults to the current sys.stdout.\nsep:   string inserted between values, default a space.\nend:   string appended after the last value, default a newline.\nflush: whether to forcibly flush the stream.\nType:      builtin_function_or_method\n\n\n\n\n# print? # remove the comment and &lt;Shift-Enter&gt;\n\n\n\nExercise\nSee exercise 2 in the exercise list.\nJupyterLab also has a “Contextual Help” (previously called “Inspector”) window. To use,\n\nGo to the Commands and choose Contextual Help (or Inspector), or select &lt;Ctrl-I&gt; (&lt;Cmd-I&gt; for OSX users).\n\nDrag the new inspector pain to dock in the screen next to your code.\n\nThen, type print or any other function into a cell and see the help.\n\n\n# len? # remove the comment and &lt;Shift-Enter&gt;\n\nWe will learn much more about functions, including how to write our own, in a future lecture."
  },
  {
    "objectID": "tutorials/session_1/qe_basics_answers.html#objects-and-types",
    "href": "tutorials/session_1/qe_basics_answers.html#objects-and-types",
    "title": "Basics",
    "section": "Objects and Types",
    "text": "Objects and Types\nEverything in Python is an object.\nObjects are “things” that contain 1) data and 2) functions that can operate on the data.\nSometimes we refer to the functions inside an object as methods.\nWe can investigate what data is inside an object and which methods it supports by typing . after that particular variable, then hitting TAB.\nIt should then list data and method names to the right of the variable name like this:\n\n\n\nhttps://datascience.quantecon.org/_static/introspection.png\n\n\nYou can scroll through this list by using the up and down arrows.\nWe often refer to this as “tab completion” or “introspection”.\nLet’s do this together below. Keep going down until you find the method split.\n\n# Type a period after `x` and then press TAB.\nx\n\nOnce you have found the method split, you can use the method by adding parenthesis after it.\nLet’s call the split method, which doesn’t have any other required parameters. (Quiz: how would we check that?)\n\nx.split()\n\nWe often want to identify what kind of object some value is– called its “type”.\nA “type” is an abstraction which defines a set of behavior for any “instance” of that type i.e. 2.0 and 3.0 are instances of float, where float has a set of particular common behaviors.\nIn particular, the type determines:\n\nthe available data for any “instance” of the type (where each instance may have different values of the data).\n\nthe methods that can be applied on the object and its data.\n\nWe can figure this out by using the type function.\nThe type function takes a single argument and outputs the type of that argument.\n\ntype(3)\n\n\ntype(\"Hello World\")\n\n\ntype([1, 2, 3])\n\nWe will learn more about each of these types (and others!) and how to use them soon, so stay tuned!"
  },
  {
    "objectID": "tutorials/session_1/qe_basics_answers.html#modules",
    "href": "tutorials/session_1/qe_basics_answers.html#modules",
    "title": "Basics",
    "section": "Modules",
    "text": "Modules\nPython takes a modular approach to tools.\nBy this we mean that sets of related tools are bundled together into packages. (You may also hear the term modules to describe the same thing.)\nFor example:\n\npandas is a package that implements the tools necessary to do scalable data analysis.\n\nmatplotlib is a package that implements visualization tools.\n\nrequests and urllib are packages that allow Python to interface with the internet.\n\nAs we move further into the class, being able to access these packages will become very important.\nWe can bring a package’s functionality into our current Python session by writing\n\nimport package\n\nOnce we have done this, any function or object from that package can be accessed by using package.name.\nHere’s an example.\n\nimport sys   # for dealing with your computer's system\nsys.version  # information about the Python version in use"
  },
  {
    "objectID": "tutorials/session_1/qe_basics_answers.html#exercise-2",
    "href": "tutorials/session_1/qe_basics_answers.html#exercise-2",
    "title": "Basics",
    "section": "Exercise",
    "text": "Exercise\nSee exercise 3 in the exercise list.\n\nModule Aliases\nSome packages have long names (see matplotlib, for example) which makes accessing the package functionality somewhat inconvenient.\nTo ease this burden, Python allows us to give aliases or “nicknames” to packages.\nFor example we can write:\n\nimport package as p\n\nThis statement allows us to access the packages functionality as p.function_name rather than package.function_name.\nSome common aliases for packages are\n\nimport pandas as pd\n\nimport numpy as np\n\nimport matplotlib as mpl\n\nimport datetime as dt\n\nWhile you can choose any name for an alias, we suggest that you stick to the common ones.\nYou will learn what these common ones are over time.\n\n\nExercise\nSee exercise 4 in the exercise list."
  },
  {
    "objectID": "tutorials/session_1/qe_basics_answers.html#good-code-habits",
    "href": "tutorials/session_1/qe_basics_answers.html#good-code-habits",
    "title": "Basics",
    "section": "Good Code Habits",
    "text": "Good Code Habits\nA common saying in the software engineering world is:\n\nAlways code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live. Code for readability.\n\nThis might be a dramatic take, but the most important feature of your code after correctness is readability.\nWe encourage you to do everything in your power to make your code as readable as possible.\nHere are some suggestions for how to do so:\n\nComment frequently. Leaving short notes not only will help others who use your code, but will also help you interpret your code after some time has passed.\n\nAnytime you use a comma, place a space immediately afterwards.\n\nWhitespace is your friend. Don’t write line after line of code – use blank lines to break it up.\n\nDon’t let your lines run too long. Some people reading your code will be on a laptop, so you want to ensure that they don’t need to scroll horizontally and right to read your code. We recommend no more than 80 characters per line."
  },
  {
    "objectID": "tutorials/session_1/qe_basics_answers.html#numbers",
    "href": "tutorials/session_1/qe_basics_answers.html#numbers",
    "title": "Basics",
    "section": "Numbers",
    "text": "Numbers\nPython has two types of numbers.\n\nInteger (int): These can only take the values of the integers i.e. $ {, -2, -1, 0, 1, 2, } $\n\nFloating Point Number (float): Think of these as any real number such as $ 1.0 $, $ 3.1415 $, or $ -100.022358923223 $…\n\nThe easiest way to differentiate these types of numbers is to find a decimal place after the number.\nA float will have a decimal place, but an integer will not.\nBelow, we assign integers to the variables xi and zi and assign floating point numbers to the variables xf and zf.\n\nxi = 1\nxf = 1.0\nzi = 123\nzf = 1230.5  # Notice -- There are no commas!\nzf2 = 1_230.5  # If needed, we use `_` to separate numbers for readability"
  },
  {
    "objectID": "tutorials/session_1/qe_basics_answers.html#exercise-4",
    "href": "tutorials/session_1/qe_basics_answers.html#exercise-4",
    "title": "Basics",
    "section": "Exercise",
    "text": "Exercise\nSee exercise 5 in the exercise list.\n\nPython as a Calculator\nYou can use Python to perform mathematical calculations.\n\na = 4\nb = 2\n\nprint(\"a + b is\", a + b)\nprint(\"a - b is\", a - b)\nprint(\"a * b is\", a * b)\nprint(\"a / b is\", a / b)\nprint(\"a ** b is\", a**b)\nprint(\"a ^ b is\", a^b)\n\nYou likely could have guessed all except the last two.\nPython uses **, not ^, for exponentiation (raising a number to a power)!\nNotice also that above +, - and ** all returned an integer type, but / converted the result to a float.\nWhen possible, operations between integers return an integer type.\nAll operations involving a float will result in a float.\n\na = 4\nb = 2.0\n\nprint(\"a + b is\", a + b)\nprint(\"a - b is\", a - b)\nprint(\"a * b is\", a * b)\nprint(\"a / b is\", a / b)\nprint(\"a ** b is\", a**b)\n\nWe can also chain together operations.\nWhen doing this, Python follows the standard order of operations — parenthesis, exponents, multiplication and division, followed by addition and subtraction.\nFor example,\n\nx = 2.0\ny = 3.0\nz1 = x + y * x\nz2 = (x + y) * x\n\nWhat do you think z1 is?\nHow about z2?\n\n\nExercise\nSee exercise 6 in the exercise list.\n\n\nOther Math Functions\nWe often want to use other math functions on our numbers. Let’s try to calculate sin(2.5).\n\nsin(2.5)\n\nAs seen above, Python complains that sin isn’t defined.\nThe problem here is that the sin function – as well as many other standard math functions – are contained in the math package.\nWe must begin by importing the math package.\n\nimport math\n\nNow, we can use math.[TAB] to see what functions are available to us.\n\n# uncomment, add a period (`.`) and pres TAB\n# math\n\n\n# found math.sin!\nmath.sin(2.5)\n\n\n\nExercise\nSee exercise 7 in the exercise list.\n\nFloor/Modulus Division Operators\nYou are less likely to run into the following operators, but understanding that they exist is useful.\nFor two numbers assigned to the variables x and y,\n\nFloor division: x // y\n\nModulus division: x % y\n\nRemember when you first learned how to do division and you were asked to talk about the quotient and the remainder?\nThat’s what these operators correspond to…\nFloor division returns the number of times the divisor goes into the dividend (the quotient) and modulus division returns the remainder.\nAn example would be 37 divided by 7:\n\nFloor division would return 5 (7 * 5 = 35)\n\nModulus division would return 2 (2 + 35 = 37)\n\nTry it!\n\n37 // 7\n\n\n37 % 7"
  },
  {
    "objectID": "tutorials/session_1/qe_basics_answers.html#strings",
    "href": "tutorials/session_1/qe_basics_answers.html#strings",
    "title": "Basics",
    "section": "Strings",
    "text": "Strings\nTextual information is stored in a data type called a string.\nTo denote that you would like something to be stored as a string, you place it inside of quotation marks.\nFor example,\n\n\"this is a string\"  # Notice the quotation marks\n'this is a string'  # Notice the quotation marks\nthis is not a string  # No quotation marks\n\nYou can use either \" or ' to create a string. Just make sure that you start and end the string with the same one!\nNotice that if we ask Python to tell us the type of a string, it abbreviates its answer to str.\n\ntype(\"this is a string\")"
  },
  {
    "objectID": "tutorials/session_1/qe_basics_answers.html#exercise-7",
    "href": "tutorials/session_1/qe_basics_answers.html#exercise-7",
    "title": "Basics",
    "section": "Exercise",
    "text": "Exercise\nSee exercise 8 in the exercise list.\n\nString Operations\nSome of the arithmetic operators we saw in the numbers lecture also work on strings:\n\nPut two strings together: x + y.\n\nRepeat the string x a total of n times: n * x (or x * n).\n\n\nx = \"Hello\"\ny = \"World\"\n\n\nx + y\n\n\n3 * x\n\nWhat happens if we try * with two strings, or - or /?\nThe best way to find out is to try it!\n\na = \"1\"\nb = \"2\"\na * b\n\n\na - b\n\n\n\nExercise\nSee exercise 9 in the exercise list.\n\n\nString Methods\nWe can use many methods to manipulate strings.\nWe will not be able to cover all of them here, but let’s take a look at some of the most useful ones.\n\nx\n\n\nx.lower()  # Makes all letters lower case\n\n\nx.upper()  # Makes all letters upper case\n\n\nx.count(\"l\")  # Counts number of a particular string\n\n\nx.count(\"ll\")\n\n\n\nExercise\nSee exercise 10 in the exercise list.\n\n\nExercise\nSee exercise 11 in the exercise list.\n\n\nString Formatting\nSometimes we’d like to reuse some portion of a string repeatedly, but still make some relatively small changes at each usage.\nWe can do this with string formatting, which done by using {} as a placeholder where we’d like to change the string, with a variable name or expression.\nLet’s look at an example.\n\ncountry = \"Vietnam\"\nGDP = 223.9\nyear = 2017\nmy_string = f\"{country} had ${GDP} billion GDP in {year}\"\nprint(my_string)\n\nRather than just substituting a variable name, you can use a calculation or expression.\n\nprint(f\"{5}**2 = {5**2}\")\n\nOr, using our previous example\n\nmy_string = f\"{country} had ${GDP * 1_000_000} GDP in {year}\"\nprint(my_string)\n\nIn these cases, the f in front of the string causes Python interpolate any valid expression within the {} braces.\n\n\nExercise\nSee exercise 12 in the exercise list.\nAlternatively, to reuse a formatted string, you can call the format method (noting that you do not put f in front).\n\ngdp_string = \"{country} had ${GDP} billion in {year}\"\n\ngdp_string.format(country = \"Vietnam\", GDP = 223.9, year = 2017)\n\n\n\nExercise\nSee exercise 13 in the exercise list.\n\n\nExercise\nSee exercise 14 in the exercise list.\nFor more information on what you can do with string formatting (there is a lot that can be done…), see the official Python documentation on the subject."
  },
  {
    "objectID": "tutorials/session_1/qe_basics_answers.html#booleans",
    "href": "tutorials/session_1/qe_basics_answers.html#booleans",
    "title": "Basics",
    "section": "Booleans",
    "text": "Booleans\nA boolean is a type that denotes true or false.\nAs you will soon see in the control flow chapter, using boolean values allows you to perform or skip operations depending on whether or not a condition is met.\nLet’s start by creating some booleans and looking at them.\n\nx = True\ny = False\n\ntype(x)\n\n\nx\n\n\ny\n\n\nComparison Operators\nRather than directly write True or False, you will usually create booleans by making a comparison.\nFor example, you might want to evaluate whether the price of a particular asset is greater than or less than some price.\nFor two variables x and y, we can do the following comparisons:\n\nGreater than: x &gt; y\n\nLess than: x &lt; y\n\nEqual to: ==\n\nGreater than or equal to: x &gt;= y\n\nLess than or equal to: x &lt;= y\n\nWe demonstrate these below.\n\na = 4\nb = 2\n\nprint(\"a &gt; b\", \"is\", a &gt; b)\nprint(\"a &lt; b\", \"is\", a &lt; b)\nprint(\"a == b\", \"is\", a == b)\nprint(\"a &gt;= b\", \"is\", a &gt;= b)\nprint(\"a &lt;= b\", \"is\", a &lt;= b)\n\n\n\nNegation\nOccasionally, determining whether a statement is “not true” or “not false” is more convenient than simply “true” or “false”.\nThis is known as negating a statement.\nIn Python, we can negate a boolean using the word not.\n\nnot False\n\n\nnot True\n\n\n\nMultiple Comparisons (and/or)\nSometimes we need to evaluate multiple comparisons at once.\nThis is done by using the words and and or.\nHowever, these are the “mathematical” ands and ors – so they don’t carry the same meaning as you’d use them in colloquial English.\n\na and b is true only when both a and b are true.\n\na or b is true whenever at least one of a or b is true.\n\nFor example\n\nThe statement “I will accept the new job if the salary is higher and I receive more vacation days” means that you would only accept the new job if you both receive a higher salary and are given more vacation days.\n\nThe statement “I will accept the new job if the salary is higher or I receive more vacation days” means that you would accept the job if\n\nthey raised your salary, (2) you are given more vacation days, or\nthey raise your salary and give you more vacation days.\n\n\nLet’s see some examples.\n\nTrue and False\n\n\nTrue and True\n\n\nTrue or False\n\n\nFalse or False\n\n\n# Can chain multiple comparisons together.\nTrue and (False or True)\n\n\n\nExercise\nSee exercise 15 in the exercise list.\n\n\nall and any\nWe have seen how we can use the words and and or to process two booleans at a time.\nThe functions all and any allow us to process an unlimited number of booleans at once.\nall(bools) will return True if and only if all the booleans in bools is True and returns False otherwise.\nany(bools) returns True whenever one or more of bools is True.\nThe exercise below will give you a chance to practice.\n\n\nExercise\nSee exercise 16 in the exercise list."
  },
  {
    "objectID": "tutorials/session_1/qe_basics_answers.html#exercises",
    "href": "tutorials/session_1/qe_basics_answers.html#exercises",
    "title": "Basics",
    "section": "Exercises",
    "text": "Exercises\n\nExercise 1\nWhat do you think the value of z is after running the code below?\n\nz = 3\nz = z + 4\nprint(\"z is\", z)\n\nz is 7\n\n\nI think the answer is: 7\n(back to text)\n\n\nExercise 2\nRead about out what the len function does (by writing len?).\nWhat will it produce if we give it the variable x?\nCheck whether you were right by running the code len(x).\n(back to text)\nlen counts the number of objects in a collection and returns an integer. The string x has 11 elements, which should be the answer.\n\nlen?\n\n\nSignature: len(obj, /)\nDocstring: Return the number of items in a container.\nType:      builtin_function_or_method\n\n\n\n\nlen(x)\n\n11\n\n\n\n\nExercise 3\nWe can use our introspection skills to investigate a package’s contents.\nIn the cell below, use tab completion to find a function from the time module that will display the local time.\nUse time.FUNC_NAME? (where FUNC_NAME is replaced with the function you found) to see information about that function and then call the function.\nLook for something to do with the word local\n\nimport time\n# your code here -- notice the comment!\n\n(back to text)\n\n\nExercise 4\nTry running import time as t in the cell below, then see if you can call the function you identified above.\nDoes it work?\n(back to text)\n\n\nExercise 5\nCreate the following variables:\n\nD: A floating point number with the value 10,000\n\nr: A floating point number with value 0.025\n\nT: An integer with value 30\n\nWe will use them in a later exercise.\n\n# your code here!\n\n(back to text)\n\n\nExercise 6\nRemember the variables we created earlier?\nLet’s compute the present discounted value of a payment ($ D $) made in $ T $ years assuming an interest rate of 2.5%. Save this value to a new variable called PDV and print your output.\nThe formula is\n\\[\n\\text{PDV} = \\frac{D}{(1 + r)^T}\n\\]\n\n# your code here\n\n(back to text)\n\n\nExercise 7\nVerify the “trick” where the percent difference ($ \\() between two numbers close to 1 can be well approximated by the difference between the log of the two numbers (\\) (x) - (y) $).\nUse the numbers x and y below.\nyou will want to use the math.log function\n\nx = 1.05\ny = 1.02\n\n(back to text)\n\n\nExercise 8\nThe code below is invalid Python code\n\nx = 'What's wrong with this string'\n\nCan you fix it?\nTry creating a code cell below and testing things out until you find a solution.\n(back to text)\n\n\nExercise 9\nUsing the variables x and y, how could you create the sentence Hello World?\nThink about how to represent a space as a string.\n(back to text)\n\n\nExercise 10\nOne of our favorite (and most frequently used) string methods is replace.\nIt substitutes all occurrences of a particular pattern with a different pattern.\nFor the variable test below, use the replace method to change the c to a d.\nType test.replace? to get some help for how to use the method replace.\n\ntest = \"abc\"\n\n(back to text)\n\n\nExercise 11\nSuppose you are working with price data and encounter the value \"\\$6.50\".\nWe recognize this as being a number representing the quantity “six dollars and fifty cents.”\nHowever, Python interprets the value as the string \"\\$6.50\". (Quiz: why is this a problem? Think about the examples above.)\nIn this exercise, your task is to convert the variable price below into a number.\nOnce the string is in a suitable format, you can call write float(clean_price) to make it a number.\n\nprice = \"$6.50\"\n\n(back to text)\n\n\nExercise 12\nLookup a country in World Bank database, and format a string showing the growth rate of GDP over the last 2 years.\n(back to text)\n\n\nExercise 13\nInstead of hard-coding the values above, try to use the country, GDP and year variables you previously defined.\n(back to text)\n\n\nExercise 14\nCreate a new string and use formatting to produce each of the following statements\n\n“The 1st quarter revenue was 110M”\n\n“The 2nd quarter revenue was 95M”\n\n“The 3rd quarter revenue was 100M”\n\n“The 4th quarter revenue was 130M”\n\n(back to text)\n\n\nExercise 15\nWithout typing the commands, determine whether the following statements are true or false.\nOnce you have evaluated whether the command is True or False, run the code in Python.\n\nx = 2\ny = 2\nz = 4\n\n# Statement 1\nx &gt; z\n\n# Statement 1\nx == y\n\n# Statement 3\n(x &lt; y) and (x &gt; y)\n\n# Statement 4\n(x &lt; y) or (x &gt; y)\n\n# Statement 5\n(x &lt;= y) and (x &gt;= y)\n\n# Statement 6\nTrue and ((x &lt; z) or (x &lt; y))\n\n\n# code here!\n\n(back to text)\n\n\nExercise 16\nFor each of the code cells below, think carefully about what you expect to be returned before evaluating the cell.\nThen evaluate the cell to check your intuitions.\nNOTE: For now, do not worry about what the [ and ] mean – they allow us to create lists which we will learn about in an upcoming lecture.\n\nall([True, True, True])\n\n\nall([False, True, False])\n\n\nall([False, False, False])\n\n\nany([True, True, True])\n\n\nany([False, True, False])\n\n\nany([False, False, False])\n\n(back to text)"
  },
  {
    "objectID": "tutorials/session_1/qe_basics.html",
    "href": "tutorials/session_1/qe_basics.html",
    "title": "Basics",
    "section": "",
    "text": "Outcomes"
  },
  {
    "objectID": "tutorials/session_1/qe_basics.html#first-steps",
    "href": "tutorials/session_1/qe_basics.html#first-steps",
    "title": "Basics",
    "section": "First Steps",
    "text": "First Steps\nWe are ready to begin writing code!\nIn this section, we will teach you some basic concepts of programming and where to search for help.\n\nVariable Assignment\nThe first thing we will learn is the idea of variable assignment.\nVariable assignment associates a value to a variable.\nBelow, we assign the value “Hello World” to the variable x\n\nx = \"Hello World\"\n\n\nx\n\n'Hello World'\n\n\nOnce we have assigned a value to a variable, Python will remember this variable as long as the current session of Python is still running.\nNotice how writing x into the prompt below outputs the value “Hello World”.\n\nx\n\n'Hello World'\n\n\nHowever, Python returns an error if we ask it about variables that have not yet been created.\n\n# uncomment (delete the # and the space) the line below and run\ny\n\nNameError: name 'y' is not defined\n\n\nIt is also useful to understand the order in which operations happen.\nFirst, the right side of the equal sign is computed.\nThen, that computed value is stored as the variable to the left of the equal sign.\n\n\nExercise\nSee exercise 1 in the exercise list.\nKeep in mind that the variable binds a name to something stored in memory.\nThe name can even be bound to a value of a completely different type.\n\nx = 2\nprint(x)\nx = \"something else\"\nprint(x)\n\n\n\nCode Comments\nComments are short notes that you leave for yourself and for others who read your code.\nThey should be used to explain what the code does.\nA comment is made with the #. Python ignores everything in a line that follows a #.\nLet’s practice making some comments.\n\ni = 1  # Assign the value 1 to variable i\nj = 2  # Assign the value 2 to variable j\n\n# We add i and j below this line\ni + j\n\n3"
  },
  {
    "objectID": "tutorials/session_1/qe_basics.html#functions",
    "href": "tutorials/session_1/qe_basics.html#functions",
    "title": "Basics",
    "section": "Functions",
    "text": "Functions\nFunctions are processes that take an input (or inputs) and produce an output.\nIf we had a function called f that took two arguments x and y, we would write f(x, y) to use the function.\nFor example, the function print simply prints whatever it is given. Recall the variable we created called x.\n\nprint(x)\n\nHello World\n\n\n\nGetting Help\nWe can figure out what a function does by asking for help.\nIn Jupyter notebooks, this is done by placing a ? after the function name (without using parenthesis) and evaluating the cell.\nFor example, we can ask for help on the print function by writing print?.\nDepending on how you launched Jupyter, this will either launch\n\nJupyterLab: display the help in text below the cell.\n\nClassic Jupyter Notebooks: display a new panel at the bottom of your screen. You can exit this panel by hitting the escape key or clicking the x at the top right of the panel.\n\n\nprint?\n\n\nDocstring:\nprint(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\nPrints the values to a stream, or to sys.stdout by default.\nOptional keyword arguments:\nfile:  a file-like object (stream); defaults to the current sys.stdout.\nsep:   string inserted between values, default a space.\nend:   string appended after the last value, default a newline.\nflush: whether to forcibly flush the stream.\nType:      builtin_function_or_method\n\n\n\n\n# print? # remove the comment and &lt;Shift-Enter&gt;\n\n\n\nExercise\nSee exercise 2 in the exercise list.\nJupyterLab also has a “Contextual Help” (previously called “Inspector”) window. To use,\n\nGo to the Commands and choose Contextual Help (or Inspector), or select &lt;Ctrl-I&gt; (&lt;Cmd-I&gt; for OSX users).\n\nDrag the new inspector pain to dock in the screen next to your code.\n\nThen, type print or any other function into a cell and see the help.\n\n\n# len? # remove the comment and &lt;Shift-Enter&gt;\n\nWe will learn much more about functions, including how to write our own, in a future lecture."
  },
  {
    "objectID": "tutorials/session_1/qe_basics.html#objects-and-types",
    "href": "tutorials/session_1/qe_basics.html#objects-and-types",
    "title": "Basics",
    "section": "Objects and Types",
    "text": "Objects and Types\nEverything in Python is an object.\nObjects are “things” that contain 1) data and 2) functions that can operate on the data.\nSometimes we refer to the functions inside an object as methods.\nWe can investigate what data is inside an object and which methods it supports by typing . after that particular variable, then hitting TAB.\nIt should then list data and method names to the right of the variable name like this:\n\n\n\nhttps://datascience.quantecon.org/_static/introspection.png\n\n\nYou can scroll through this list by using the up and down arrows.\nWe often refer to this as “tab completion” or “introspection”.\nLet’s do this together below. Keep going down until you find the method split.\n\n# Type a period after `x` and then press TAB.\nx\n\nOnce you have found the method split, you can use the method by adding parenthesis after it.\nLet’s call the split method, which doesn’t have any other required parameters. (Quiz: how would we check that?)\n\nx.split()\n\nWe often want to identify what kind of object some value is– called its “type”.\nA “type” is an abstraction which defines a set of behavior for any “instance” of that type i.e. 2.0 and 3.0 are instances of float, where float has a set of particular common behaviors.\nIn particular, the type determines:\n\nthe available data for any “instance” of the type (where each instance may have different values of the data).\n\nthe methods that can be applied on the object and its data.\n\nWe can figure this out by using the type function.\nThe type function takes a single argument and outputs the type of that argument.\n\ntype(3)\n\n\ntype(\"Hello World\")\n\n\ntype([1, 2, 3])\n\nWe will learn more about each of these types (and others!) and how to use them soon, so stay tuned!"
  },
  {
    "objectID": "tutorials/session_1/qe_basics.html#modules",
    "href": "tutorials/session_1/qe_basics.html#modules",
    "title": "Basics",
    "section": "Modules",
    "text": "Modules\nPython takes a modular approach to tools.\nBy this we mean that sets of related tools are bundled together into packages. (You may also hear the term modules to describe the same thing.)\nFor example:\n\npandas is a package that implements the tools necessary to do scalable data analysis.\n\nmatplotlib is a package that implements visualization tools.\n\nrequests and urllib are packages that allow Python to interface with the internet.\n\nAs we move further into the class, being able to access these packages will become very important.\nWe can bring a package’s functionality into our current Python session by writing\n\nimport package\n\nOnce we have done this, any function or object from that package can be accessed by using package.name.\nHere’s an example.\n\nimport sys   # for dealing with your computer's system\nsys.version  # information about the Python version in use"
  },
  {
    "objectID": "tutorials/session_1/qe_basics.html#exercise-2",
    "href": "tutorials/session_1/qe_basics.html#exercise-2",
    "title": "Basics",
    "section": "Exercise",
    "text": "Exercise\nSee exercise 3 in the exercise list.\n\nModule Aliases\nSome packages have long names (see matplotlib, for example) which makes accessing the package functionality somewhat inconvenient.\nTo ease this burden, Python allows us to give aliases or “nicknames” to packages.\nFor example we can write:\n\nimport package as p\n\nThis statement allows us to access the packages functionality as p.function_name rather than package.function_name.\nSome common aliases for packages are\n\nimport pandas as pd\n\nimport numpy as np\n\nimport matplotlib as mpl\n\nimport datetime as dt\n\nWhile you can choose any name for an alias, we suggest that you stick to the common ones.\nYou will learn what these common ones are over time.\n\n\nExercise\nSee exercise 4 in the exercise list."
  },
  {
    "objectID": "tutorials/session_1/qe_basics.html#good-code-habits",
    "href": "tutorials/session_1/qe_basics.html#good-code-habits",
    "title": "Basics",
    "section": "Good Code Habits",
    "text": "Good Code Habits\nA common saying in the software engineering world is:\n\nAlways code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live. Code for readability.\n\nThis might be a dramatic take, but the most important feature of your code after correctness is readability.\nWe encourage you to do everything in your power to make your code as readable as possible.\nHere are some suggestions for how to do so:\n\nComment frequently. Leaving short notes not only will help others who use your code, but will also help you interpret your code after some time has passed.\n\nAnytime you use a comma, place a space immediately afterwards.\n\nWhitespace is your friend. Don’t write line after line of code – use blank lines to break it up.\n\nDon’t let your lines run too long. Some people reading your code will be on a laptop, so you want to ensure that they don’t need to scroll horizontally and right to read your code. We recommend no more than 80 characters per line."
  },
  {
    "objectID": "tutorials/session_1/qe_basics.html#numbers",
    "href": "tutorials/session_1/qe_basics.html#numbers",
    "title": "Basics",
    "section": "Numbers",
    "text": "Numbers\nPython has two types of numbers.\n\nInteger (int): These can only take the values of the integers i.e. $ {, -2, -1, 0, 1, 2, } $\n\nFloating Point Number (float): Think of these as any real number such as $ 1.0 $, $ 3.1415 $, or $ -100.022358923223 $…\n\nThe easiest way to differentiate these types of numbers is to find a decimal place after the number.\nA float will have a decimal place, but an integer will not.\nBelow, we assign integers to the variables xi and zi and assign floating point numbers to the variables xf and zf.\n\nxi = 1\nxf = 1.0\nzi = 123\nzf = 1230.5  # Notice -- There are no commas!\nzf2 = 1_230.5  # If needed, we use `_` to separate numbers for readability"
  },
  {
    "objectID": "tutorials/session_1/qe_basics.html#exercise-4",
    "href": "tutorials/session_1/qe_basics.html#exercise-4",
    "title": "Basics",
    "section": "Exercise",
    "text": "Exercise\nSee exercise 5 in the exercise list.\n\nPython as a Calculator\nYou can use Python to perform mathematical calculations.\n\na = 4\nb = 2\n\nprint(\"a + b is\", a + b)\nprint(\"a - b is\", a - b)\nprint(\"a * b is\", a * b)\nprint(\"a / b is\", a / b)\nprint(\"a ** b is\", a**b)\nprint(\"a ^ b is\", a^b)\n\nYou likely could have guessed all except the last two.\nPython uses **, not ^, for exponentiation (raising a number to a power)!\nNotice also that above +, - and ** all returned an integer type, but / converted the result to a float.\nWhen possible, operations between integers return an integer type.\nAll operations involving a float will result in a float.\n\na = 4\nb = 2.0\n\nprint(\"a + b is\", a + b)\nprint(\"a - b is\", a - b)\nprint(\"a * b is\", a * b)\nprint(\"a / b is\", a / b)\nprint(\"a ** b is\", a**b)\n\nWe can also chain together operations.\nWhen doing this, Python follows the standard order of operations — parenthesis, exponents, multiplication and division, followed by addition and subtraction.\nFor example,\n\nx = 2.0\ny = 3.0\nz1 = x + y * x\nz2 = (x + y) * x\n\nWhat do you think z1 is?\nHow about z2?\n\n\nExercise\nSee exercise 6 in the exercise list.\n\n\nOther Math Functions\nWe often want to use other math functions on our numbers. Let’s try to calculate sin(2.5).\n\nsin(2.5)\n\nAs seen above, Python complains that sin isn’t defined.\nThe problem here is that the sin function – as well as many other standard math functions – are contained in the math package.\nWe must begin by importing the math package.\n\nimport math\n\nNow, we can use math.[TAB] to see what functions are available to us.\n\n# uncomment, add a period (`.`) and pres TAB\n# math\n\n\n# found math.sin!\nmath.sin(2.5)\n\n\n\nExercise\nSee exercise 7 in the exercise list.\n\nFloor/Modulus Division Operators\nYou are less likely to run into the following operators, but understanding that they exist is useful.\nFor two numbers assigned to the variables x and y,\n\nFloor division: x // y\n\nModulus division: x % y\n\nRemember when you first learned how to do division and you were asked to talk about the quotient and the remainder?\nThat’s what these operators correspond to…\nFloor division returns the number of times the divisor goes into the dividend (the quotient) and modulus division returns the remainder.\nAn example would be 37 divided by 7:\n\nFloor division would return 5 (7 * 5 = 35)\n\nModulus division would return 2 (2 + 35 = 37)\n\nTry it!\n\n37 // 7\n\n\n37 % 7"
  },
  {
    "objectID": "tutorials/session_1/qe_basics.html#strings",
    "href": "tutorials/session_1/qe_basics.html#strings",
    "title": "Basics",
    "section": "Strings",
    "text": "Strings\nTextual information is stored in a data type called a string.\nTo denote that you would like something to be stored as a string, you place it inside of quotation marks.\nFor example,\n\n\"this is a string\"  # Notice the quotation marks\n'this is a string'  # Notice the quotation marks\nthis is not a string  # No quotation marks\n\nYou can use either \" or ' to create a string. Just make sure that you start and end the string with the same one!\nNotice that if we ask Python to tell us the type of a string, it abbreviates its answer to str.\n\ntype(\"this is a string\")"
  },
  {
    "objectID": "tutorials/session_1/qe_basics.html#exercise-7",
    "href": "tutorials/session_1/qe_basics.html#exercise-7",
    "title": "Basics",
    "section": "Exercise",
    "text": "Exercise\nSee exercise 8 in the exercise list.\n\nString Operations\nSome of the arithmetic operators we saw in the numbers lecture also work on strings:\n\nPut two strings together: x + y.\n\nRepeat the string x a total of n times: n * x (or x * n).\n\n\nx = \"Hello\"\ny = \"World\"\n\n\nx + y\n\n\n3 * x\n\nWhat happens if we try * with two strings, or - or /?\nThe best way to find out is to try it!\n\na = \"1\"\nb = \"2\"\na * b\n\n\na - b\n\n\n\nExercise\nSee exercise 9 in the exercise list.\n\n\nString Methods\nWe can use many methods to manipulate strings.\nWe will not be able to cover all of them here, but let’s take a look at some of the most useful ones.\n\nx\n\n\nx.lower()  # Makes all letters lower case\n\n\nx.upper()  # Makes all letters upper case\n\n\nx.count(\"l\")  # Counts number of a particular string\n\n\nx.count(\"ll\")\n\n\n\nExercise\nSee exercise 10 in the exercise list.\n\n\nExercise\nSee exercise 11 in the exercise list.\n\n\nString Formatting\nSometimes we’d like to reuse some portion of a string repeatedly, but still make some relatively small changes at each usage.\nWe can do this with string formatting, which done by using {} as a placeholder where we’d like to change the string, with a variable name or expression.\nLet’s look at an example.\n\ncountry = \"Vietnam\"\nGDP = 223.9\nyear = 2017\nmy_string = f\"{country} had ${GDP} billion GDP in {year}\"\nprint(my_string)\n\nRather than just substituting a variable name, you can use a calculation or expression.\n\nprint(f\"{5}**2 = {5**2}\")\n\nOr, using our previous example\n\nmy_string = f\"{country} had ${GDP * 1_000_000} GDP in {year}\"\nprint(my_string)\n\nIn these cases, the f in front of the string causes Python interpolate any valid expression within the {} braces.\n\n\nExercise\nSee exercise 12 in the exercise list.\nAlternatively, to reuse a formatted string, you can call the format method (noting that you do not put f in front).\n\ngdp_string = \"{country} had ${GDP} billion in {year}\"\n\ngdp_string.format(country = \"Vietnam\", GDP = 223.9, year = 2017)\n\n\n\nExercise\nSee exercise 13 in the exercise list.\n\n\nExercise\nSee exercise 14 in the exercise list.\nFor more information on what you can do with string formatting (there is a lot that can be done…), see the official Python documentation on the subject."
  },
  {
    "objectID": "tutorials/session_1/qe_basics.html#booleans",
    "href": "tutorials/session_1/qe_basics.html#booleans",
    "title": "Basics",
    "section": "Booleans",
    "text": "Booleans\nA boolean is a type that denotes true or false.\nAs you will soon see in the control flow chapter, using boolean values allows you to perform or skip operations depending on whether or not a condition is met.\nLet’s start by creating some booleans and looking at them.\n\nx = True\ny = False\n\ntype(x)\n\n\nx\n\n\ny\n\n\nComparison Operators\nRather than directly write True or False, you will usually create booleans by making a comparison.\nFor example, you might want to evaluate whether the price of a particular asset is greater than or less than some price.\nFor two variables x and y, we can do the following comparisons:\n\nGreater than: x &gt; y\n\nLess than: x &lt; y\n\nEqual to: ==\n\nGreater than or equal to: x &gt;= y\n\nLess than or equal to: x &lt;= y\n\nWe demonstrate these below.\n\na = 4\nb = 2\n\nprint(\"a &gt; b\", \"is\", a &gt; b)\nprint(\"a &lt; b\", \"is\", a &lt; b)\nprint(\"a == b\", \"is\", a == b)\nprint(\"a &gt;= b\", \"is\", a &gt;= b)\nprint(\"a &lt;= b\", \"is\", a &lt;= b)\n\n\n\nNegation\nOccasionally, determining whether a statement is “not true” or “not false” is more convenient than simply “true” or “false”.\nThis is known as negating a statement.\nIn Python, we can negate a boolean using the word not.\n\nnot False\n\n\nnot True\n\n\n\nMultiple Comparisons (and/or)\nSometimes we need to evaluate multiple comparisons at once.\nThis is done by using the words and and or.\nHowever, these are the “mathematical” ands and ors – so they don’t carry the same meaning as you’d use them in colloquial English.\n\na and b is true only when both a and b are true.\n\na or b is true whenever at least one of a or b is true.\n\nFor example\n\nThe statement “I will accept the new job if the salary is higher and I receive more vacation days” means that you would only accept the new job if you both receive a higher salary and are given more vacation days.\n\nThe statement “I will accept the new job if the salary is higher or I receive more vacation days” means that you would accept the job if\n\nthey raised your salary, (2) you are given more vacation days, or\nthey raise your salary and give you more vacation days.\n\n\nLet’s see some examples.\n\nTrue and False\n\n\nTrue and True\n\n\nTrue or False\n\n\nFalse or False\n\n\n# Can chain multiple comparisons together.\nTrue and (False or True)\n\n\n\nExercise\nSee exercise 15 in the exercise list.\n\n\nall and any\nWe have seen how we can use the words and and or to process two booleans at a time.\nThe functions all and any allow us to process an unlimited number of booleans at once.\nall(bools) will return True if and only if all the booleans in bools is True and returns False otherwise.\nany(bools) returns True whenever one or more of bools is True.\nThe exercise below will give you a chance to practice.\n\n\nExercise\nSee exercise 16 in the exercise list."
  },
  {
    "objectID": "tutorials/session_1/qe_basics.html#exercises",
    "href": "tutorials/session_1/qe_basics.html#exercises",
    "title": "Basics",
    "section": "Exercises",
    "text": "Exercises\n\nExercise 1\nWhat do you think the value of z is after running the code below?\n\nz = 3\nz = z + 4\nprint(\"z is\", z)\n\n(back to text)\n\n\nExercise 2\nRead about out what the len function does (by writing len?).\nWhat will it produce if we give it the variable x?\nCheck whether you were right by running the code len(x).\n(back to text)\n\n\nExercise 3\nWe can use our introspection skills to investigate a package’s contents.\nIn the cell below, use tab completion to find a function from the time module that will display the local time.\nUse time.FUNC_NAME? (where FUNC_NAME is replaced with the function you found) to see information about that function and then call the function.\nLook for something to do with the word local\n\nimport time\n# your code here -- notice the comment!\n\n(back to text)\n\n\nExercise 4\nTry running import time as t in the cell below, then see if you can call the function you identified above.\nDoes it work?\n(back to text)\n\n\nExercise 5\nCreate the following variables:\n\nD: A floating point number with the value 10,000\n\nr: A floating point number with value 0.025\n\nT: An integer with value 30\n\nWe will use them in a later exercise.\n\n# your code here!\n\n(back to text)\n\n\nExercise 6\nRemember the variables we created earlier?\nLet’s compute the present discounted value of a payment ($ D $) made in $ T $ years assuming an interest rate of 2.5%. Save this value to a new variable called PDV and print your output.\nThe formula is\n\\[\n\\text{PDV} = \\frac{D}{(1 + r)^T}\n\\]\n\n# your code here\n\n(back to text)\n\n\nExercise 7\nVerify the “trick” where the percent difference ($ \\() between two numbers close to 1 can be well approximated by the difference between the log of the two numbers (\\) (x) - (y) $).\nUse the numbers x and y below.\nyou will want to use the math.log function\n\n# your code here\n\n(back to text)\n\n\nExercise 8\nThe code below is invalid Python code\n\nx = 'What's wrong with this string'\n\nCan you fix it?\nTry creating a code cell below and testing things out until you find a solution.\n(back to text)\n\n\nExercise 9\nUsing the variables x and y, how could you create the sentence Hello World?\nThink about how to represent a space as a string.\n(back to text)\n\n\nExercise 10\nOne of our favorite (and most frequently used) string methods is replace.\nIt substitutes all occurrences of a particular pattern with a different pattern.\nFor the variable test below, use the replace method to change the c to a d.\nType test.replace? to get some help for how to use the method replace.\n\ntest = \"abc\"\n\n(back to text)\n\n\nExercise 11\nSuppose you are working with price data and encounter the value \"\\$6.50\".\nWe recognize this as being a number representing the quantity “six dollars and fifty cents.”\nHowever, Python interprets the value as the string \"\\$6.50\". (Quiz: why is this a problem? Think about the examples above.)\nIn this exercise, your task is to convert the variable price below into a number.\nOnce the string is in a suitable format, you can call write float(clean_price) to make it a number.\n\nprice = \"$6.50\"\n\n(back to text)\n\n\nExercise 12\nLookup a country in World Bank database, and format a string showing the growth rate of GDP over the last 2 years.\n(back to text)\n\n\nExercise 13\nInstead of hard-coding the values above, try to use the country, GDP and year variables you previously defined.\n(back to text)\n\n\nExercise 14\nCreate a new string and use formatting to produce each of the following statements\n\n“The 1st quarter revenue was 110M”\n\n“The 2nd quarter revenue was 95M”\n\n“The 3rd quarter revenue was 100M”\n\n“The 4th quarter revenue was 130M”\n\n(back to text)\n\n\nExercise 15\nWithout typing the commands, determine whether the following statements are true or false.\nOnce you have evaluated whether the command is True or False, run the code in Python.\n\nx = 2\ny = 2\nz = 4\n\n# Statement 1\nx &gt; z\n\n# Statement 1\nx == y\n\n# Statement 3\n(x &lt; y) and (x &gt; y)\n\n# Statement 4\n(x &lt; y) or (x &gt; y)\n\n# Statement 5\n(x &lt;= y) and (x &gt;= y)\n\n# Statement 6\nTrue and ((x &lt; z) or (x &lt; y))\n\n\n# code here!\n\n(back to text)\n\n\nExercise 16\nFor each of the code cells below, think carefully about what you expect to be returned before evaluating the cell.\nThen evaluate the cell to check your intuitions.\nNOTE: For now, do not worry about what the [ and ] mean – they allow us to create lists which we will learn about in an upcoming lecture.\n\nall([True, True, True])\n\n\nall([False, True, False])\n\n\nall([False, False, False])\n\n\nany([True, True, True])\n\n\nany([False, True, False])\n\n\nany([False, False, False])\n\n(back to text)"
  },
  {
    "objectID": "tutorials/session_1/qe_control_answers.html",
    "href": "tutorials/session_1/qe_control_answers.html",
    "title": "Control Flow",
    "section": "",
    "text": "Prerequisites\nOutcomes"
  },
  {
    "objectID": "tutorials/session_1/qe_control_answers.html#net-present-values-and-asset-pricing",
    "href": "tutorials/session_1/qe_control_answers.html#net-present-values-and-asset-pricing",
    "title": "Control Flow",
    "section": "Net Present Values and Asset Pricing",
    "text": "Net Present Values and Asset Pricing\nIn this lecture, we’ll introduce two related topics from economics:\n\nNet present valuations\n\nAsset pricing\n\nThese topics will motivate some of the programming we do in this course.\nIn economics and finance, “assets” provide a stream of payoffs.\nThese “assets” can be concrete or abstract: a stock pays dividends over time, a bond pays interest, an apple tree provides apples, a job pays wages, and an education provides possible jobs (which, in turn, pay wages).\nWhen deciding the price to pay for an asset or how to choose between different alternatives, we need to take into account that most people would prefer to receive 1 today vs. 1 next year.\nThis reflection on consumer preferences leads to the notion of a discount rate. If you are indifferent between receiving 1.00 today and 1.10 next year, then the discount rate over the next year is $ r = 0.10 $.\nIf we assume that an individuals preferences are consistent over time, then we can apply that same discount rate to valuing assets further into the future.\nFor example, we would expect that the consumer would be indifferent between consuming 1.00 today and $ (1+r)(1+r) = 1.21 $ dollars two years from now (i.e. discount twice).\nInverting this formula, 1 delivered two years from now is equivalent to $ $ today."
  },
  {
    "objectID": "tutorials/session_1/qe_control_answers.html#exercise",
    "href": "tutorials/session_1/qe_control_answers.html#exercise",
    "title": "Control Flow",
    "section": "Exercise",
    "text": "Exercise\nSee exercise 1 in the exercise list.\n\n\nNet Present Value\nIf an asset pays a stream of payoffs over multiple time periods, then we can use a discount rate to calculate the value to the consumer of a entire sequence of payoffs.\nMost generally, we enumerate each discrete time period (e.g. year, month, day) by the index $ t $ where today is $ t=0 $ and the asset lives for $ T $ periods.\nList the payoff at each time period as $ y_t $, which we will assume, for now, is known in advance.\nThen if the discount factor is $ r $, the consumer “values” the payoff $ y_t $ delivered at time $ t $ as $ y_t $ where we note that if $ t=0 $, the value is just the current payoff $ y_0 $.\nUsing this logic, we can write an expression for the value of the entire sequence of payoffs with a sum.\n \\[\nP_0 = \\sum_{t=0}^T \\left(\\frac{1}{1 + r}\\right)^t y_t \\tag{1}\n\\]\nIf $ y_t $ is a constant, then we can compute this sum with a simple formula!\nBelow, we present some useful formulas that come from infinite series that we will use to get our net present value formula.\nFor any constant $ 0 &lt; &lt; 1 $ and integer value $ &gt; 0 $,\n \\[\n\\begin{aligned}\n\\sum_{t=0}^{\\infty} \\beta^t & = \\frac{1}{1-\\beta}\\\\\n\\sum_{t=0}^{\\tau} \\beta^t &= \\frac{1- \\beta^{\\tau+1}}{1-\\beta}\\\\\n\\sum_{t=\\tau}^{\\infty} \\beta^t &=  \\frac{\\beta^{\\tau}}{1-\\beta}\n\\end{aligned} \\tag{2}\n\\]\nIn the case of an asset which pays one dollar until time $ T $, we can use these formulas, taking $ = $ and $ T = $, to find\n\\[\n\\begin{aligned}\nP_0 &= \\sum_{t=0}^T \\left(\\frac{1}{1 + r}\\right)^t = \\frac{1- (\\frac{1}{1+r})^{\\tau+1}}{1-\\frac{1}{1+r}}\\\\\n&= \\frac{1 + r}{r} - \\frac{1}{r}\\left(\\frac{1}{1+r} \\right)^\\tau\n\\end{aligned}\n\\]\nNote that we can also consider an asset that lives and pays forever if $ T= $, and from (2), the value of an asset which pays 1 forever is $ $."
  },
  {
    "objectID": "tutorials/session_1/qe_control_answers.html#conditional-statements-and-blocks",
    "href": "tutorials/session_1/qe_control_answers.html#conditional-statements-and-blocks",
    "title": "Control Flow",
    "section": "Conditional Statements and Blocks",
    "text": "Conditional Statements and Blocks\nSometimes, we will only want to execute some piece of code if a certain condition is met.\nThese conditions can be anything.\nFor example, we might add to total sales if the transaction value is positive, but add to total returns if the value is negative.\nOr, we might want to add up all incurred costs, only if the transaction happened before a certain date.\nWe use conditionals to run particular pieces of code when certain criterion are met.\nConditionals are closely tied to booleans, so if you don’t remember what those are, go back to the basics lecture for a refresher.\nThe basic syntax for conditionals is\n\nif condition:\n    # code to run when condition is True\nelse:\n    # code to run if no conditions above are True\n\nNote that immediately following the condition, there is a colon and that the next line begins with blank spaces.\nUsing 4 spaces is a very strong convention, so that is what we do — we recommend that you do the same.\nAlso note that the else clause is optional.\nLet’s see some simple examples.\n\nif True:\n    print(\"This is where `True` code is run\")\n\nAlternatively, you could have a test which returns a booleans\n\nif 1 &lt; 2:\n     print(\"This is where `True` code is run\")\n\nThis example is equivalent to just typing the print statement, but the example below isn’t…\n\nif False:\n    print(\"This is where `True` code is run\")\n\nOr\n\nif 1 &gt; 2:\n     print(\"This is where `True` code is run\")\n\nNotice that when you run the cells above nothing is printed.\nThat is because the condition for the if statement was not true, so the code inside the indented block was never run.\nThis also allows us to demonstrate the role of indentation in determining the “block” of code.\n\nval = False\n\nif val is True: # check an expression\n    print(\"This is where `True` code is run\")\n    print(\"More code in the if block\")\nprint(\"Code runs after 'if' block, regardless of val\")"
  },
  {
    "objectID": "tutorials/session_1/qe_control_answers.html#exercise-1",
    "href": "tutorials/session_1/qe_control_answers.html#exercise-1",
    "title": "Control Flow",
    "section": "Exercise",
    "text": "Exercise\nSee exercise 2 in the exercise list.\nThe next example shows us how else works.\n\nval = (2 == 4)  # returns False\nif val is True:\n    print(\"This is where `True` code is run\")\nelse:\n    print(\"This is where `False` code is run\")\n    print(\"More else code\")\nprint(\"Code runs after 'if' block, regardless of val\")\n\nThe if False: ... part of this example is the same as the example before, but now, we added an else: clause.\nIn this case, because the conditional for the if statement was not True, the if code block was not executed, but the else block was.\nFinally, the Condition is True is assumed in the if statement, and is often left out. For example, the following are identical\n\nif (1 &lt; 2) is True:\n    print(\"1 &lt; 2\")\n\nif 1 &lt; 2:\n    print(\"1 &lt; 2\")"
  },
  {
    "objectID": "tutorials/session_1/qe_control_answers.html#exercise-2",
    "href": "tutorials/session_1/qe_control_answers.html#exercise-2",
    "title": "Control Flow",
    "section": "Exercise",
    "text": "Exercise\nSee exercise 3 in the exercise list."
  },
  {
    "objectID": "tutorials/session_1/qe_control_answers.html#exercise-3",
    "href": "tutorials/session_1/qe_control_answers.html#exercise-3",
    "title": "Control Flow",
    "section": "Exercise",
    "text": "Exercise\nSee exercise 4 in the exercise list.\n\nelif clauses\nSometimes, you have more than one condition you want to check.\nFor example, you might want to run a different set of code based on which quarter a particular transaction took place in.\nIn this case you could check whether the date is in Q1, or in Q2, or in Q3, or if not any of these it must be in Q4.\nThe way to express this type of conditional is to use one or more elif clause in addition to the if and the else.\nThe syntax is\n\nif condition1:\n    # code to run when condition1 is True\nelif condition2:\n    # code to run when condition2 is True\nelif condition3:\n    # code to run when condition3 is True\nelse:\n    # code to run when none of the above are true\n\nYou can include as many elif clauses as you want.\nAs before, the else part is optional.\nHere’s how we might express the quarter example referred to above.\n\nimport datetime\nhalloween = datetime.date(2017, 10, 31)\n\nif halloween.month &gt; 9:\n    print(\"Halloween is in Q4\")\nelif halloween.month &gt; 6:\n    print(\"Halloween is in Q3\")\nelif halloween.month &gt; 3:\n    print(\"Halloween is in Q2\")\nelse:\n    print(\"Halloween is in Q1\")\n\nNote that when there are multiple if or elif conditions, only the code corresponding to the first true clause is run.\nWe saw this in action above.\nWe know that when halloween.month &gt; 9 is true, then halloween.month &gt; 6 and halloween.month &gt; 3 must also be true, but only the code block associated with halloween.month &gt; 9 was printed."
  },
  {
    "objectID": "tutorials/session_1/qe_control_answers.html#iteration",
    "href": "tutorials/session_1/qe_control_answers.html#iteration",
    "title": "Control Flow",
    "section": "Iteration",
    "text": "Iteration\nWhen doing computations or analyzing data, we often need to repeat certain operations a finite number of times or until some condition is met.\nExamples include processing all data files in a directory (folder), aggregating revenues and costs for every period in a year, or computing the net present value of certain assets. (In fact, later in this section, we will verify the equations that we wrote down above.)\nThese are all examples of a programming concept called iteration.\nWe feel the concept is best understood through example, so we will present a contrived example and then discuss the details behind doing iteration in Python.\n\nA Contrived Example\nSuppose we wanted to print out the first 10 integers and their squares.\nWe could do something like this.\n\nprint(f\"1**2 = {1**2}\")\nprint(f\"2**2 = {2**2}\")\nprint(f\"3**2 = {3**2}\")\nprint(f\"4**2 = {4**2}\")\n# .. and so on until 10\n\nAs you can see, the code above is repetitive.\nFor each integer, the code is exactly the same except for the two places where the “current” integer appears.\nSuppose that I asked you to write the same print statement for an int stored in a variable named i.\nYou might write the following code:\n\nprint(f\"{i}**2 = {i**2}\")\n\nThis more general version of the operation suggests a strategy for achieving our goal with less repetition: have a variable i take on the values 1 through 10 (Quiz: How can we use range to create the numbers 1 to 10?) and run the line of code above for each new value of i.\nThis can be accomplished with a for loop!\n\nfor i in range(1, 11):\n     print(f\"{i}**2 = {i**2}\")\n\nWhoa, what just happened?\nThe integer i took on the values in range(1, 11) one by one and for each new value it did the operations in the indented block (here just one line that called the print function).\n\n\nfor Loops\nThe general structure of a standard for loop is as follows.\n\nfor item in iterable:\n   # operation 1 with item\n   # operation 2 with item\n   # ...\n   # operation N with item\n\nwhere iterable is anything capable of producing one item at a time (see here for official definition from the Python team).\nWe’ve actually already seen some of the most common iterables!\nLists, tuples, dicts, and range/zip/enumerate objects are all iterables.\nNote that we can have as many operations as we want inside the indented block.\nWe will refer to the indented block as the “body” of the loop.\nWhen the for loop is executed, item will take on one value from iterable at a time and execute the loop body for each value.\n\n\n\nExercise\nSee exercise 5 in the exercise list.\nWhen iterating, each item in iterable might actually contain more than one value.\nRecall that tuples (and lists) can be unpacked directly into variables.\n\ntup = (4, \"test\")\ni, x = tup\nprint(f\"i = {i}, x = {x}, tup = {tup}\")\n\nAlso, recall that the value of a enumerate(iterable) is a tuple of the form (i, x) where iterable[i] == x.\nWhen we use enumerate in a for loop, we can “unpack” both values at the same time as follows:\n\n# revenue by quarter\ncompany_revenue = [5.12, 5.20, 5.50, 6.50]\n\nfor index, value in enumerate(company_revenue):\n    print(f\"quarter {index} revenue is ${value} million\")\n\nSimilarly, the index can be used to access another vector.\n\ncities = [\"Phoenix\", \"Austin\", \"San Diego\", \"New York\"]\nstates = [\"Arizona\", \"Texas\", \"California\", \"New York\"]\nfor index, city in enumerate(cities):\n    state = states[index]\n    print(f\"{city} is in {state}\")\n\n\n\nExercise\nSee exercise 6 in the exercise list.\n\n\nwhile Loops\nA related but slightly different form of iteration is to repeat something until some condition is met.\nThis is typically achieved using a while loop.\nThe structure of a while loop is\n\nwhile True_condition:\n    # repeat these steps\n\nwhere True_condition is some conditional statement that should evaluate to True when iterations should continue and False when Python should stop iterating.\nFor example, suppose we wanted to know the smallest N such that $ _{i=0}^N i &gt; 1000 $.\nWe figure this out using a while loop as follows.\n\ntotal = 0\ni = 0\nwhile total &lt;= 1000:\n    i = i + 1\n    total = total + i\n\nprint(\"The answer is\", i)\n\nLet’s check our work.\n\n# Should be just less than 1000 because range(45) goes from 0 to 44\nsum(range(45))\n\n\n# should be between 990 + 45 = 1035\nsum(range(46))\n\nA warning: one common programming error with while loops is to forget to set the variable you use in the condition prior to executing. For example, take the following code which correctly sets a counter\n\ni = 0\n\nAnd then executes a while loop\n\nwhile i &lt; 3:\n    print(i)\n    i = i + 1\nprint(\"done\")\n\nNo problems. But if you were to execute the above cell again, or another cell, the i=3 remains, and code is never executed (since i &lt; 3 begins as False).\n\nwhile i &lt; 3:\n    print(i)\n    i = i + 1\nprint(\"done\")\n\n\n\nExercise\nSee exercise 7 in the exercise list.\n\n\nbreak and continue\n\nbreak Out of a Loop\nSometimes we want to stop a loop early if some condition is met.\nLet’s revisit the example of finding the smallest N such that $ _{i=0}^N i &gt; 1000 $.\nClearly N must be less than 1000, so we know we will find the answer if we start with a for loop over all items in range(1001).\nThen, we can keep a running total as we proceed and tell Python to stop iterating through our range once total goes above 1000.\n\ntotal = 0\nfor i in range(1001):\n    total = total + i\n    if total &gt; 1000:\n        break\n\nprint(\"The answer is\", i)\n\n\n\nExercise\nSee exercise 8 in the exercise list.\n\n\ncontinue to the Next Iteration\nSometimes we might want to stop the body of a loop early if a condition is met.\nTo do this we can use the continue keyword.\nThe basic syntax for doing this is:\n\nfor item in iterable:\n    # always do these operations\n    if condition:\n        continue\n\n    # only do these operations if condition is False\n\nInside the loop body, Python will stop that loop iteration of the loop and continue directly to the next iteration when it encounters the continue statement.\nFor example, suppose I ask you to loop over the numbers 1 to 10 and print out the message “{i} An odd number!” whenever the number i is odd, and do nothing otherwise.\nYou can use continue to do this as follows:\n\nfor i in range(1, 11):\n    if i % 2 == 0:  # an even number... This is modulus division\n        continue\n\n    print(i, \"is an odd number!\")\n\n\n\nExercise\nSee exercise 9 in the exercise list."
  },
  {
    "objectID": "tutorials/session_1/qe_control_answers.html#comprehension",
    "href": "tutorials/session_1/qe_control_answers.html#comprehension",
    "title": "Control Flow",
    "section": "Comprehension",
    "text": "Comprehension\nOften, we will want to perform a very simple operation for every element of some iterable and create a new iterable with these values.\nThis could be done by writing a for loop and saving each value, but often using what is called a comprehension is more readable.\nLike many Python concepts, a comprehension is easiest to understand through example.\nImagine that we have a list x with a list of numbers. We would like to create a list x2 which has the squared values of x.\n\nx = list(range(4))\n\n# Create squared values with a loop\nx2_loop = []\nfor x_val in x:\n    x2_loop.append(x_val**2)\n\n# Create squared values with a comprehension\nx2_comp = [x_val**2 for x_val in x]\n\nprint(x2_loop)\nprint(x2_comp)\n\nNotice that much of the same text appears when we do the operation in the loop and when we do the operation with the comprehension.\n\nWe need to specify what we are iterating over – in both cases, this is for x_val in x.\n\nWe need to square each element x_val**2.\n\nIt needs to be stored somewhere – in x2_loop, this is done by appending each element to a list, and in x2_comp, this is done automatically because the operation is enclosed in a list.\n\nWe can do comprehension with many different types of iterables, so we demonstrate a few more below.\n\n# Create a dictionary from lists\ntickers = [\"AAPL\", \"GOOGL\", \"TVIX\"]\nprices = [175.96, 1047.43, 8.38]\nd = {key: value for key, value in zip(tickers, prices)}\nd\n\n\n# Create a list from a dictionary\nd = {\"AMZN\": \"Seattle\", \"TVIX\": \"Zurich\", \"AAPL\": \"Cupertino\"}\n\nhq_cities = [d[ticker] for ticker in d.keys()]\nhq_cities\n\n\nimport math\n\n# List from list\nx = range(10)\n\nsin_x = [math.sin(x_val) for x_val in x]\nsin_x"
  },
  {
    "objectID": "tutorials/session_1/qe_control_answers.html#exercise-9",
    "href": "tutorials/session_1/qe_control_answers.html#exercise-9",
    "title": "Control Flow",
    "section": "Exercise",
    "text": "Exercise\nSee exercise 10 in the exercise list.\nFinally, we can use this approach to build complicated nested dictionaries.\n\ngdp_data = [9.607, 10.48, 11.06]\nyears = [2013, 2014, 2015]\nexports = [ {\"manufacturing\": 2.4, \"agriculture\": 1.5, \"services\": 0.5},\n            {\"manufacturing\": 2.5, \"agriculture\": 1.4, \"services\": 0.9},\n            {\"manufacturing\": 2.7, \"agriculture\": 1.4, \"services\": 1.5}]\ndata = zip(years, gdp_data,exports)\ndata_dict = {year : {\"gdp\" : gdp, \"exports\": exports} for year, gdp, exports in data}\nprint(data_dict)\n\n# total exports by year\n[data_dict[year][\"exports\"][\"services\"] for year in data_dict.keys()]"
  },
  {
    "objectID": "tutorials/session_1/qe_control_answers.html#exercises",
    "href": "tutorials/session_1/qe_control_answers.html#exercises",
    "title": "Control Flow",
    "section": "Exercises",
    "text": "Exercises\n\nExercise 1\nGovernment bonds are often issued as zero-coupon bonds meaning that they make no payments throughout the entire time that they are held, but, rather make a single payment at the time of maturity.\nHow much should you be willing to pay for a zero-coupon bond that paid 100 in 10 years with an interest rate of 5%?\n\n# your code here\n\n(back to text)\n\n\nExercise 2\nRun the following two variations on the code with only a single change in the indentation.\nAfter, modify the x to print 3 and then 2, 3 instead.\n\nx = 1\n\nif x &gt; 0:\n    print(\"1\")\n    print(\"2\")\nprint(\"3\")\n\n\nx = 1\n\nif x &gt; 0:\n    print(\"1\")\nprint(\"2\") # changed the indentation\nprint(\"3\")\n\n(back to text)\n\n\nExercise 3\nUsing the code cell below as a start, print \"Good afternoon\" if the current_time is past noon.\nOtherwise, do nothing.\nWrite some conditional based on current_time.hour.\n\nimport datetime\ncurrent_time = datetime.datetime.now()\n\n## your code here\n\nmore text after\n(back to text)\n\n\nExercise 4\nIn this example, you will generate a random number between 0 and 1 and then display “x &gt; 0.5” or “x &lt; 0.5” depending on the value of the number.\nThis also introduces a new package numpy.random for drawing random numbers (more in the randomness lecture).\n\nimport numpy as np\nx = np.random.random()\nprint(f\"x = {x}\")\n\n## your code here\n\n(back to text)\n\n\nExercise 5\nIn economics, when an individual has some knowledge, skills, or education which provides them with a source of future income, we call it human capital.\nWhen a student graduating from high school is considering whether to continue with post-secondary education, they may consider that it gives them higher paying jobs in the future, but requires that they don’t begin working until after graduation.\nConsider the simplified example where a student has perfectly forecastable employment and is given two choices:\n\nBegin working immediately and make 40,000 a year until they retire 40 years later.\n\nPay 5,000 a year for the next 4 years to attend university, then get a job paying 50,000 a year until they retire 40 years after making the college attendance decision.\n\nShould the student enroll in school if the discount rate is r = 0.05?\n\n# Discount rate\nr = 0.05\n\n# High school wage\nw_hs = 40_000\n\n# College wage and cost of college\nc_college = 5_000\nw_college = 50_000\n\n# Compute npv of being a hs worker\n\n# Compute npv of attending college\n\n# Compute npv of being a college worker\n\n# Is npv_collegeworker - npv_collegecost &gt; npv_hsworker\n\n(back to text)\n\n\nExercise 6\nInstead of the above, write a for loop that uses the lists of cities and states below to print the same “{city} is in {state}” using a zip instead of an enumerate.\nTry using zip\n\ncities = [\"Phoenix\", \"Austin\", \"San Diego\", \"New York\"]\nstates = [\"Arizona\", \"Texas\", \"California\", \"New York\"]\n\n# Your code here\n\n(back to text)\n\n\nExercise 7\nCompanies often invest in training their employees to raise their productivity. Economists sometimes wonder why companies spend this money when this incentivizes other companies to hire their employees away with higher salaries since employees gain human capital from training?\nLet’s say that it costs a company 25,000 dollars to teach their employees Python, but it raises their output by 2,500 per month. How many months would an employee need to stay for the company to find it profitable to pay for their employees to learn Python if their discount rate is r = 0.01?\n\n# Define cost of teaching python\ncost = 25_000\nr = 0.01\n\n# Per month value\nadded_value = 2500\n\nn_months = 0\ntotal_npv = 0.0\n\n# Put condition below here\nwhile False: # (replace False with your condition here)\n    n_months = n_months + 1  # Increment how many months they've worked\n\n    # Increase total_npv\n\n(back to text)\n\n\nExercise 8\nTry to find the index of the first value in x that is greater than 0.999 using a for loop and break.\ntry iterating over range(len(x)).\n\nx = np.random.rand(10_000)\n# Your code here\n\n(back to text)\n\n\nExercise 9\nWrite a for loop that adds up all values in x that are greater than or equal to 0.5.\nUse the continue word to end the body of the loop early for all values of x that are less than 0.5.\nTry starting your loop with for value in x: instead of iterating over the indices of x.\n\nx = np.random.rand(10_000)\n# Your code here\n\n(back to text)\n\n\nExercise 10\nReturning to our previous example: print “{city} is in {state}” for each combination using a zip and a comprehension.\nTry using zip\n\ncities = [\"Phoenix\", \"Austin\", \"San Diego\", \"New York\"]\nstates = [\"Arizona\", \"Texas\", \"California\", \"New York\"]\n\n# your code here\n\n(back to text)"
  },
  {
    "objectID": "pushups/pushups_4_correction.html",
    "href": "pushups/pushups_4_correction.html",
    "title": "Sklearn: sparse regression",
    "section": "",
    "text": "Sklearn includes the Winsconsin breast cancer database. It associates medical outcomes for tumor observation, with several characteristics. Can a machine learn how to predict whether a cancer is benign or malignant ?\nImport the Breast Cancer Dataset from sklearn. Describe it.\n\nimport sklearn\nimport sklearn.datasets\n# the as_frame option makes the function return a dataframe\ndataset = sklearn.datasets.load_breast_cancer(as_frame=True)\n\n\ndata = dataset['data']\ntarget = dataset['target']\n\nProperly train a linear logistic regression to predict cancer morbidity.\n\n# separate the training set and the testset\nimport sklearn.model_selection\ndata_train, data_test, target_train, target_test = sklearn.model_selection.train_test_split(data, target)\n\n\n# quickly check thes size of th samples, correspond to  what we want:\n[e.shape for e in [data_train, data_test, target_train, target_test]]\n\n[(426, 30), (143, 30), (426,), (143,)]\n\n\n\nimport sklearn.linear_model\nmodel = sklearn.linear_model.LogisticRegression()\n\n\nmodel.fit(data_train, target_train)\n\n/opt/conda/envs/escpython/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n\n\nLogisticRegression()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.LogisticRegressionLogisticRegression()\n\n\n\n# We can check the performance out of sample:\n\n\nmodel.score(data_test, target_test)\n\n0.8951048951048951\n\n\n\n# to know what the scores represent, we can read the doc\n# it shows that score is measured by mean accuracy\n# i.e. number of correct predictions divided by total number of predictions\nmodel.score?\n\n\nSignature: model.score(X, y, sample_weight=None)\nDocstring:\nReturn the mean accuracy on the given test data and labels.\nIn multi-label classification, this is the subset accuracy\nwhich is a harsh metric since you require for each sample that\neach label set be correctly predicted.\nParameters\n----------\nX : array-like of shape (n_samples, n_features)\n    Test samples.\ny : array-like of shape (n_samples,) or (n_samples, n_outputs)\n    True labels for `X`.\nsample_weight : array-like of shape (n_samples,), default=None\n    Sample weights.\nReturns\n-------\nscore : float\n    Mean accuracy of ``self.predict(X)`` wrt. `y`.\nFile:      /opt/conda/envs/escpython/lib/python3.10/site-packages/sklearn/base.py\nType:      method\n\n\n\nBonus: the warning message suggests to scale the data. Let’s redo the last few steps accordingly\n\nimport sklearn.preprocessing\nscaler = sklearn.preprocessing.StandardScaler()\nscaler.fit(data)\nscaled_data = scaler.transform(data)\n\n\n# let's repackage in a dataframe\nimport pandas\nscaled_data = pandas.DataFrame(scaled_data, columns=data.columns)\n# and check the result has zero mean and constant standard deviation\nscaled_data.describe()\n\n\n\n\n\n\n\n\nmean radius\nmean texture\nmean perimeter\nmean area\nmean smoothness\nmean compactness\nmean concavity\nmean concave points\nmean symmetry\nmean fractal dimension\n...\nworst radius\nworst texture\nworst perimeter\nworst area\nworst smoothness\nworst compactness\nworst concavity\nworst concave points\nworst symmetry\nworst fractal dimension\n\n\n\n\ncount\n5.690000e+02\n5.690000e+02\n5.690000e+02\n5.690000e+02\n5.690000e+02\n5.690000e+02\n5.690000e+02\n5.690000e+02\n5.690000e+02\n5.690000e+02\n...\n5.690000e+02\n5.690000e+02\n5.690000e+02\n569.000000\n5.690000e+02\n5.690000e+02\n5.690000e+02\n5.690000e+02\n5.690000e+02\n5.690000e+02\n\n\nmean\n-1.373633e-16\n6.868164e-17\n-1.248757e-16\n-2.185325e-16\n-8.366672e-16\n1.873136e-16\n4.995028e-17\n-4.995028e-17\n1.748260e-16\n4.745277e-16\n...\n-8.241796e-16\n1.248757e-17\n-3.746271e-16\n0.000000\n-2.372638e-16\n-3.371644e-16\n7.492542e-17\n2.247763e-16\n2.622390e-16\n-5.744282e-16\n\n\nstd\n1.000880e+00\n1.000880e+00\n1.000880e+00\n1.000880e+00\n1.000880e+00\n1.000880e+00\n1.000880e+00\n1.000880e+00\n1.000880e+00\n1.000880e+00\n...\n1.000880e+00\n1.000880e+00\n1.000880e+00\n1.000880\n1.000880e+00\n1.000880e+00\n1.000880e+00\n1.000880e+00\n1.000880e+00\n1.000880e+00\n\n\nmin\n-2.029648e+00\n-2.229249e+00\n-1.984504e+00\n-1.454443e+00\n-3.112085e+00\n-1.610136e+00\n-1.114873e+00\n-1.261820e+00\n-2.744117e+00\n-1.819865e+00\n...\n-1.726901e+00\n-2.223994e+00\n-1.693361e+00\n-1.222423\n-2.682695e+00\n-1.443878e+00\n-1.305831e+00\n-1.745063e+00\n-2.160960e+00\n-1.601839e+00\n\n\n25%\n-6.893853e-01\n-7.259631e-01\n-6.919555e-01\n-6.671955e-01\n-7.109628e-01\n-7.470860e-01\n-7.437479e-01\n-7.379438e-01\n-7.032397e-01\n-7.226392e-01\n...\n-6.749213e-01\n-7.486293e-01\n-6.895783e-01\n-0.642136\n-6.912304e-01\n-6.810833e-01\n-7.565142e-01\n-7.563999e-01\n-6.418637e-01\n-6.919118e-01\n\n\n50%\n-2.150816e-01\n-1.046362e-01\n-2.359800e-01\n-2.951869e-01\n-3.489108e-02\n-2.219405e-01\n-3.422399e-01\n-3.977212e-01\n-7.162650e-02\n-1.782793e-01\n...\n-2.690395e-01\n-4.351564e-02\n-2.859802e-01\n-0.341181\n-4.684277e-02\n-2.695009e-01\n-2.182321e-01\n-2.234689e-01\n-1.274095e-01\n-2.164441e-01\n\n\n75%\n4.693926e-01\n5.841756e-01\n4.996769e-01\n3.635073e-01\n6.361990e-01\n4.938569e-01\n5.260619e-01\n6.469351e-01\n5.307792e-01\n4.709834e-01\n...\n5.220158e-01\n6.583411e-01\n5.402790e-01\n0.357589\n5.975448e-01\n5.396688e-01\n5.311411e-01\n7.125100e-01\n4.501382e-01\n4.507624e-01\n\n\nmax\n3.971288e+00\n4.651889e+00\n3.976130e+00\n5.250529e+00\n4.770911e+00\n4.568425e+00\n4.243589e+00\n3.927930e+00\n4.484751e+00\n4.910919e+00\n...\n4.094189e+00\n3.885905e+00\n4.287337e+00\n5.930172\n3.955374e+00\n5.112877e+00\n4.700669e+00\n2.685877e+00\n6.046041e+00\n6.846856e+00\n\n\n\n\n8 rows × 30 columns\n\n\n\n\n# for compatibility purpose we save the scaled dataframe as data\ndata = scaled_data\n\n\n# and redo the same training\n\n\n# separate the training set and the testset\ndata_train, data_test, target_train, target_test = sklearn.model_selection.train_test_split(data, target)\n\n\nimport sklearn.linear_model\nmodel = sklearn.linear_model.LogisticRegression()\n\n\nmodel.fit(data_train, target_train) # this time, we don't get any error message\n\nLogisticRegression()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.LogisticRegressionLogisticRegression()\n\n\n\n# and actually improve the prediction (which might just be chance)\n\n\nmodel.score(data_test, target_test)\n\n0.972027972027972\n\n\nUse k-fold validation to validate the model\n\n# because the dataset is relatively small we didn't set aside a validation set\n# instead we rely on cross-validation\n\n# we split the dataset in 5\n# this provides 5 different testsets (with 20% of observation) to test the training on the remaining set (80%)\n\n\nkf = sklearn.model_selection.KFold(n_splits=5)\n\n\nscores = []\n\nfor i_train, i_test in kf.split(data):\n    \n    # i_train and i_test are indices of observations belonging to one of the two datasets\n    kf_data_train = data.iloc[i_train,:]\n    kf_target_train = target.iloc[i_train]\n    \n    kf_data_test = data.iloc[i_test,:]\n    kf_target_test = target.iloc[i_test]\n    \n    model_kf = sklearn.linear_model.LogisticRegression()\n    \n    # we train the model\n    model_kf.fit(kf_data_train, kf_target_train)\n    \n    # and test it\n    sc = model_kf.score(kf_data_test, kf_target_test)\n    \n    scores.append(sc)\n    \n    print(f\"Score: {sc}\")\n\nScore: 0.9736842105263158\nScore: 0.956140350877193\nScore: 0.9824561403508771\nScore: 0.9824561403508771\nScore: 0.9911504424778761\n\n\nThere is some volatility in the scores, but it stays reliably over 95% accuracy.\n\n# to get an estimate of accuracy we can compute the mean:\nprint(f\"KFold validation: mean accuracy {sum(scores)/5}\")\n\nKFold validation: mean accuracy 0.9771774569166279\n\n\nTry with other classifiers. Which one is best?\nThe dataset being relatively small we can try Support Vector Machines, which are known to generalize well (see discussion here).\nWe perform a kfold selection exactly as above.\n\nkf = sklearn.model_selection.KFold(n_splits=5)\n\n\nscores_svc = []\n\nfor i_train, i_test in kf.split(data):\n    \n    # i_train and i_test are indices of observations belonging to one of the two datasets\n    kf_data_train = data.iloc[i_train,:]\n    kf_target_train = target.iloc[i_train]\n    \n    kf_data_test = data.iloc[i_test,:]\n    kf_target_test = target.iloc[i_test]\n    \n    # we just change the following line\n    model_kf = sklearn.svm.SVC()\n    \n    # we train the model\n    model_kf.fit(kf_data_train, kf_target_train)\n    \n    # and test it\n    sc = model_kf.score(kf_data_test, kf_target_test)\n    \n    scores_svc.append(sc)\n    \n    print(f\"Score: {sc}\")\n\nScore: 0.9473684210526315\nScore: 0.9649122807017544\nScore: 0.9736842105263158\nScore: 0.9912280701754386\nScore: 0.9734513274336283\n\n\n\n# to get an estimate of accuracy we can compute the mean:\nprint(f\"KFold validation: mean accuracy {sum(scores_svc)/5}\")\n\nKFold validation: mean accuracy 0.9701288619779538\n\n\nComment: performance of support vector machine is similar to logistic regression. To assess the gains, we can compare the difference to both estimate (0.007) to the standard deviation of either of two models. Both are geater than 0.01, meaning that the difference between the two models is probably not significant.\n\n# we can compute the standard deviation as follows (googld standard deviation python)\n\nimport numpy \nprint( numpy.std(scores) )\nprint( numpy.std(scores_svc) )\n\n0.01188053806820839\n0.0142415326274357"
  },
  {
    "objectID": "pushups/pushups_4_correction.html#predicting-breast-cancer",
    "href": "pushups/pushups_4_correction.html#predicting-breast-cancer",
    "title": "Sklearn: sparse regression",
    "section": "",
    "text": "Sklearn includes the Winsconsin breast cancer database. It associates medical outcomes for tumor observation, with several characteristics. Can a machine learn how to predict whether a cancer is benign or malignant ?\nImport the Breast Cancer Dataset from sklearn. Describe it.\n\nimport sklearn\nimport sklearn.datasets\n# the as_frame option makes the function return a dataframe\ndataset = sklearn.datasets.load_breast_cancer(as_frame=True)\n\n\ndata = dataset['data']\ntarget = dataset['target']\n\nProperly train a linear logistic regression to predict cancer morbidity.\n\n# separate the training set and the testset\nimport sklearn.model_selection\ndata_train, data_test, target_train, target_test = sklearn.model_selection.train_test_split(data, target)\n\n\n# quickly check thes size of th samples, correspond to  what we want:\n[e.shape for e in [data_train, data_test, target_train, target_test]]\n\n[(426, 30), (143, 30), (426,), (143,)]\n\n\n\nimport sklearn.linear_model\nmodel = sklearn.linear_model.LogisticRegression()\n\n\nmodel.fit(data_train, target_train)\n\n/opt/conda/envs/escpython/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n\n\nLogisticRegression()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.LogisticRegressionLogisticRegression()\n\n\n\n# We can check the performance out of sample:\n\n\nmodel.score(data_test, target_test)\n\n0.8951048951048951\n\n\n\n# to know what the scores represent, we can read the doc\n# it shows that score is measured by mean accuracy\n# i.e. number of correct predictions divided by total number of predictions\nmodel.score?\n\n\nSignature: model.score(X, y, sample_weight=None)\nDocstring:\nReturn the mean accuracy on the given test data and labels.\nIn multi-label classification, this is the subset accuracy\nwhich is a harsh metric since you require for each sample that\neach label set be correctly predicted.\nParameters\n----------\nX : array-like of shape (n_samples, n_features)\n    Test samples.\ny : array-like of shape (n_samples,) or (n_samples, n_outputs)\n    True labels for `X`.\nsample_weight : array-like of shape (n_samples,), default=None\n    Sample weights.\nReturns\n-------\nscore : float\n    Mean accuracy of ``self.predict(X)`` wrt. `y`.\nFile:      /opt/conda/envs/escpython/lib/python3.10/site-packages/sklearn/base.py\nType:      method\n\n\n\nBonus: the warning message suggests to scale the data. Let’s redo the last few steps accordingly\n\nimport sklearn.preprocessing\nscaler = sklearn.preprocessing.StandardScaler()\nscaler.fit(data)\nscaled_data = scaler.transform(data)\n\n\n# let's repackage in a dataframe\nimport pandas\nscaled_data = pandas.DataFrame(scaled_data, columns=data.columns)\n# and check the result has zero mean and constant standard deviation\nscaled_data.describe()\n\n\n\n\n\n\n\n\nmean radius\nmean texture\nmean perimeter\nmean area\nmean smoothness\nmean compactness\nmean concavity\nmean concave points\nmean symmetry\nmean fractal dimension\n...\nworst radius\nworst texture\nworst perimeter\nworst area\nworst smoothness\nworst compactness\nworst concavity\nworst concave points\nworst symmetry\nworst fractal dimension\n\n\n\n\ncount\n5.690000e+02\n5.690000e+02\n5.690000e+02\n5.690000e+02\n5.690000e+02\n5.690000e+02\n5.690000e+02\n5.690000e+02\n5.690000e+02\n5.690000e+02\n...\n5.690000e+02\n5.690000e+02\n5.690000e+02\n569.000000\n5.690000e+02\n5.690000e+02\n5.690000e+02\n5.690000e+02\n5.690000e+02\n5.690000e+02\n\n\nmean\n-1.373633e-16\n6.868164e-17\n-1.248757e-16\n-2.185325e-16\n-8.366672e-16\n1.873136e-16\n4.995028e-17\n-4.995028e-17\n1.748260e-16\n4.745277e-16\n...\n-8.241796e-16\n1.248757e-17\n-3.746271e-16\n0.000000\n-2.372638e-16\n-3.371644e-16\n7.492542e-17\n2.247763e-16\n2.622390e-16\n-5.744282e-16\n\n\nstd\n1.000880e+00\n1.000880e+00\n1.000880e+00\n1.000880e+00\n1.000880e+00\n1.000880e+00\n1.000880e+00\n1.000880e+00\n1.000880e+00\n1.000880e+00\n...\n1.000880e+00\n1.000880e+00\n1.000880e+00\n1.000880\n1.000880e+00\n1.000880e+00\n1.000880e+00\n1.000880e+00\n1.000880e+00\n1.000880e+00\n\n\nmin\n-2.029648e+00\n-2.229249e+00\n-1.984504e+00\n-1.454443e+00\n-3.112085e+00\n-1.610136e+00\n-1.114873e+00\n-1.261820e+00\n-2.744117e+00\n-1.819865e+00\n...\n-1.726901e+00\n-2.223994e+00\n-1.693361e+00\n-1.222423\n-2.682695e+00\n-1.443878e+00\n-1.305831e+00\n-1.745063e+00\n-2.160960e+00\n-1.601839e+00\n\n\n25%\n-6.893853e-01\n-7.259631e-01\n-6.919555e-01\n-6.671955e-01\n-7.109628e-01\n-7.470860e-01\n-7.437479e-01\n-7.379438e-01\n-7.032397e-01\n-7.226392e-01\n...\n-6.749213e-01\n-7.486293e-01\n-6.895783e-01\n-0.642136\n-6.912304e-01\n-6.810833e-01\n-7.565142e-01\n-7.563999e-01\n-6.418637e-01\n-6.919118e-01\n\n\n50%\n-2.150816e-01\n-1.046362e-01\n-2.359800e-01\n-2.951869e-01\n-3.489108e-02\n-2.219405e-01\n-3.422399e-01\n-3.977212e-01\n-7.162650e-02\n-1.782793e-01\n...\n-2.690395e-01\n-4.351564e-02\n-2.859802e-01\n-0.341181\n-4.684277e-02\n-2.695009e-01\n-2.182321e-01\n-2.234689e-01\n-1.274095e-01\n-2.164441e-01\n\n\n75%\n4.693926e-01\n5.841756e-01\n4.996769e-01\n3.635073e-01\n6.361990e-01\n4.938569e-01\n5.260619e-01\n6.469351e-01\n5.307792e-01\n4.709834e-01\n...\n5.220158e-01\n6.583411e-01\n5.402790e-01\n0.357589\n5.975448e-01\n5.396688e-01\n5.311411e-01\n7.125100e-01\n4.501382e-01\n4.507624e-01\n\n\nmax\n3.971288e+00\n4.651889e+00\n3.976130e+00\n5.250529e+00\n4.770911e+00\n4.568425e+00\n4.243589e+00\n3.927930e+00\n4.484751e+00\n4.910919e+00\n...\n4.094189e+00\n3.885905e+00\n4.287337e+00\n5.930172\n3.955374e+00\n5.112877e+00\n4.700669e+00\n2.685877e+00\n6.046041e+00\n6.846856e+00\n\n\n\n\n8 rows × 30 columns\n\n\n\n\n# for compatibility purpose we save the scaled dataframe as data\ndata = scaled_data\n\n\n# and redo the same training\n\n\n# separate the training set and the testset\ndata_train, data_test, target_train, target_test = sklearn.model_selection.train_test_split(data, target)\n\n\nimport sklearn.linear_model\nmodel = sklearn.linear_model.LogisticRegression()\n\n\nmodel.fit(data_train, target_train) # this time, we don't get any error message\n\nLogisticRegression()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.LogisticRegressionLogisticRegression()\n\n\n\n# and actually improve the prediction (which might just be chance)\n\n\nmodel.score(data_test, target_test)\n\n0.972027972027972\n\n\nUse k-fold validation to validate the model\n\n# because the dataset is relatively small we didn't set aside a validation set\n# instead we rely on cross-validation\n\n# we split the dataset in 5\n# this provides 5 different testsets (with 20% of observation) to test the training on the remaining set (80%)\n\n\nkf = sklearn.model_selection.KFold(n_splits=5)\n\n\nscores = []\n\nfor i_train, i_test in kf.split(data):\n    \n    # i_train and i_test are indices of observations belonging to one of the two datasets\n    kf_data_train = data.iloc[i_train,:]\n    kf_target_train = target.iloc[i_train]\n    \n    kf_data_test = data.iloc[i_test,:]\n    kf_target_test = target.iloc[i_test]\n    \n    model_kf = sklearn.linear_model.LogisticRegression()\n    \n    # we train the model\n    model_kf.fit(kf_data_train, kf_target_train)\n    \n    # and test it\n    sc = model_kf.score(kf_data_test, kf_target_test)\n    \n    scores.append(sc)\n    \n    print(f\"Score: {sc}\")\n\nScore: 0.9736842105263158\nScore: 0.956140350877193\nScore: 0.9824561403508771\nScore: 0.9824561403508771\nScore: 0.9911504424778761\n\n\nThere is some volatility in the scores, but it stays reliably over 95% accuracy.\n\n# to get an estimate of accuracy we can compute the mean:\nprint(f\"KFold validation: mean accuracy {sum(scores)/5}\")\n\nKFold validation: mean accuracy 0.9771774569166279\n\n\nTry with other classifiers. Which one is best?\nThe dataset being relatively small we can try Support Vector Machines, which are known to generalize well (see discussion here).\nWe perform a kfold selection exactly as above.\n\nkf = sklearn.model_selection.KFold(n_splits=5)\n\n\nscores_svc = []\n\nfor i_train, i_test in kf.split(data):\n    \n    # i_train and i_test are indices of observations belonging to one of the two datasets\n    kf_data_train = data.iloc[i_train,:]\n    kf_target_train = target.iloc[i_train]\n    \n    kf_data_test = data.iloc[i_test,:]\n    kf_target_test = target.iloc[i_test]\n    \n    # we just change the following line\n    model_kf = sklearn.svm.SVC()\n    \n    # we train the model\n    model_kf.fit(kf_data_train, kf_target_train)\n    \n    # and test it\n    sc = model_kf.score(kf_data_test, kf_target_test)\n    \n    scores_svc.append(sc)\n    \n    print(f\"Score: {sc}\")\n\nScore: 0.9473684210526315\nScore: 0.9649122807017544\nScore: 0.9736842105263158\nScore: 0.9912280701754386\nScore: 0.9734513274336283\n\n\n\n# to get an estimate of accuracy we can compute the mean:\nprint(f\"KFold validation: mean accuracy {sum(scores_svc)/5}\")\n\nKFold validation: mean accuracy 0.9701288619779538\n\n\nComment: performance of support vector machine is similar to logistic regression. To assess the gains, we can compare the difference to both estimate (0.007) to the standard deviation of either of two models. Both are geater than 0.01, meaning that the difference between the two models is probably not significant.\n\n# we can compute the standard deviation as follows (googld standard deviation python)\n\nimport numpy \nprint( numpy.std(scores) )\nprint( numpy.std(scores_svc) )\n\n0.01188053806820839\n0.0142415326274357"
  },
  {
    "objectID": "pushups/pushups_4.html",
    "href": "pushups/pushups_4.html",
    "title": "Sklearn: sparse regression",
    "section": "",
    "text": "Sklearn includes the Winsconsin breast cancer database. It associates medical outcomes for tumor observation, with several characteristics. Can a machine learn how to predict whether a cancer is benign or malignant ?\nImport the Breast Cancer Dataset from sklearn. Describe it.\nProperly train a linear logistic regression to predict cancer morbidity.\nUse k-fold validation to validate the model\nTry with other classifiers. Which one is best?"
  },
  {
    "objectID": "pushups/pushups_4.html#predicting-breast-cancer",
    "href": "pushups/pushups_4.html#predicting-breast-cancer",
    "title": "Sklearn: sparse regression",
    "section": "",
    "text": "Sklearn includes the Winsconsin breast cancer database. It associates medical outcomes for tumor observation, with several characteristics. Can a machine learn how to predict whether a cancer is benign or malignant ?\nImport the Breast Cancer Dataset from sklearn. Describe it.\nProperly train a linear logistic regression to predict cancer morbidity.\nUse k-fold validation to validate the model\nTry with other classifiers. Which one is best?"
  },
  {
    "objectID": "pushups/pushups_2.html",
    "href": "pushups/pushups_2.html",
    "title": "Pushups 2",
    "section": "",
    "text": "Verify that tuples are indeed immutable by attempting the following:\n\nChanging the first element of t to be 100\n\nAppending a new element \"!!\" to the end of t (remember with a list x we would use x.append(\"!!\") to do this\n\nSorting t\n\nReversing t\n\n\nt = (2,2,4)\n\n\n# change first element of t\nt[0] = 100\n\nTypeError: 'tuple' object does not support item assignment\n\n\n\n# appending to t\nt.append(3)\n\nAttributeError: 'tuple' object has no attribute 'append'\n\n\n\n# sorting t\nt.sort()\n\nAttributeError: 'tuple' object has no attribute 'sort'\n\n\n\n# this works and returns a new list\nsorted(t)\n\n[2, 2, 4]\n\n\n\n# reversing t\nt.reverse()\n\nAttributeError: 'tuple' object has no attribute 'reverse'\n\n\n\n\n\nCreate a new dict which associates stock tickers with its stock price.\nHere are some tickers and a price.\n\nAAPL: 175.96\n\nGOOGL: 1047.43\n\nTVIX: 8.38\n\n\n# your code here\n{\n    \"AAPL\": 175.96,\n    \"GOOGL\": 1047.43,\n    \"TVIX\": 8.38\n}\n\n{'AAPL': 175.96, 'GOOGL': 1047.43, 'TVIX': 8.38}\n\n\n\n\n\nLook at the World Factbook for Australia and create a dictionary with data containing the following types: float, string, integer, list, and dict. Choose any data you wish.\nTo confirm, you should have a dictionary that you identified via a key.\n\n# your code here\naustralia_data = {\n    \"coast_line\": 253760, #int\n    \"languages\": { # dict\n        \"English\": 72,\n        \"Mandarin\": 2.7,\n        \"Arabic\": 1.4,\n        \"Vietnamese\": 1.3,\n        \"Cantonese\": 1.2,\n        \"other\": 15.7,\n        \"unspecified\": 5.7\n    },\n    \"irrigated_land\": 15.210, #float\n    \"aquifers\": [\"Great Artesian Basin\", \"Canning Basin\"], # list\n    # string\n    \"population_distribution\": \"\"\"population is primarily located on the periphery, with the highest concentration of people residing in the east and southeast; a secondary population center is located in and around Perth in the west; of the States and Territories, New South Wales has, by far, the largest population; the interior, or \"outback\", has a very sparse population\"\"\"\n}\n\n\n\n\nUse Jupyter’s help facilities to learn how to use the pop method to remove the key \"irrigated_land\" (and its value) from the dict.\n\n# uncomment and use the Inspector or ?\naustralia_data.pop(\"irrigated_land\")\n\n15.21\n\n\n\naustralia_data\n\n{'coast_line': 253760,\n 'languages': {'English': 72,\n  'Mandarin': 2.7,\n  'Arabic': 1.4,\n  'Vietnamese': 1.3,\n  'Cantonese': 1.2,\n  'other': 15.7,\n  'unspecified': 5.7},\n 'aquifers': ['Great Artesian Basin', 'Canning Basin'],\n 'population_distribution': 'population is primarily located on the periphery, with the highest concentration of people residing in the east and southeast; a secondary population center is located in and around Perth in the west; of the States and Territories, New South Wales has, by far, the largest population; the interior, or \"outback\", has a very sparse population'}\n\n\n\n\n\nExplain what happens to the value you popped.\n\nIt returns the value, and removes it from the dictionary object.\n\n\n'irrigated_land' in australia_data\n\nFalse\n\n\nExperiment with calling pop twice.\n\naustralia_data.pop(\"irrigated_land\")\n## errors because the key is not in the dictionary any more\n\nKeyError: 'irrigated_land'"
  },
  {
    "objectID": "pushups/pushups_2.html#tuples-and-dictionaries",
    "href": "pushups/pushups_2.html#tuples-and-dictionaries",
    "title": "Pushups 2",
    "section": "",
    "text": "Verify that tuples are indeed immutable by attempting the following:\n\nChanging the first element of t to be 100\n\nAppending a new element \"!!\" to the end of t (remember with a list x we would use x.append(\"!!\") to do this\n\nSorting t\n\nReversing t\n\n\nt = (2,2,4)\n\n\n# change first element of t\nt[0] = 100\n\nTypeError: 'tuple' object does not support item assignment\n\n\n\n# appending to t\nt.append(3)\n\nAttributeError: 'tuple' object has no attribute 'append'\n\n\n\n# sorting t\nt.sort()\n\nAttributeError: 'tuple' object has no attribute 'sort'\n\n\n\n# this works and returns a new list\nsorted(t)\n\n[2, 2, 4]\n\n\n\n# reversing t\nt.reverse()\n\nAttributeError: 'tuple' object has no attribute 'reverse'\n\n\n\n\n\nCreate a new dict which associates stock tickers with its stock price.\nHere are some tickers and a price.\n\nAAPL: 175.96\n\nGOOGL: 1047.43\n\nTVIX: 8.38\n\n\n# your code here\n{\n    \"AAPL\": 175.96,\n    \"GOOGL\": 1047.43,\n    \"TVIX\": 8.38\n}\n\n{'AAPL': 175.96, 'GOOGL': 1047.43, 'TVIX': 8.38}\n\n\n\n\n\nLook at the World Factbook for Australia and create a dictionary with data containing the following types: float, string, integer, list, and dict. Choose any data you wish.\nTo confirm, you should have a dictionary that you identified via a key.\n\n# your code here\naustralia_data = {\n    \"coast_line\": 253760, #int\n    \"languages\": { # dict\n        \"English\": 72,\n        \"Mandarin\": 2.7,\n        \"Arabic\": 1.4,\n        \"Vietnamese\": 1.3,\n        \"Cantonese\": 1.2,\n        \"other\": 15.7,\n        \"unspecified\": 5.7\n    },\n    \"irrigated_land\": 15.210, #float\n    \"aquifers\": [\"Great Artesian Basin\", \"Canning Basin\"], # list\n    # string\n    \"population_distribution\": \"\"\"population is primarily located on the periphery, with the highest concentration of people residing in the east and southeast; a secondary population center is located in and around Perth in the west; of the States and Territories, New South Wales has, by far, the largest population; the interior, or \"outback\", has a very sparse population\"\"\"\n}\n\n\n\n\nUse Jupyter’s help facilities to learn how to use the pop method to remove the key \"irrigated_land\" (and its value) from the dict.\n\n# uncomment and use the Inspector or ?\naustralia_data.pop(\"irrigated_land\")\n\n15.21\n\n\n\naustralia_data\n\n{'coast_line': 253760,\n 'languages': {'English': 72,\n  'Mandarin': 2.7,\n  'Arabic': 1.4,\n  'Vietnamese': 1.3,\n  'Cantonese': 1.2,\n  'other': 15.7,\n  'unspecified': 5.7},\n 'aquifers': ['Great Artesian Basin', 'Canning Basin'],\n 'population_distribution': 'population is primarily located on the periphery, with the highest concentration of people residing in the east and southeast; a secondary population center is located in and around Perth in the west; of the States and Territories, New South Wales has, by far, the largest population; the interior, or \"outback\", has a very sparse population'}\n\n\n\n\n\nExplain what happens to the value you popped.\n\nIt returns the value, and removes it from the dictionary object.\n\n\n'irrigated_land' in australia_data\n\nFalse\n\n\nExperiment with calling pop twice.\n\naustralia_data.pop(\"irrigated_land\")\n## errors because the key is not in the dictionary any more\n\nKeyError: 'irrigated_land'"
  },
  {
    "objectID": "pushups/pushups_2.html#prep-work-for-the-philips-curve",
    "href": "pushups/pushups_2.html#prep-work-for-the-philips-curve",
    "title": "Pushups 2",
    "section": "Prep work for the Philips Curve",
    "text": "Prep work for the Philips Curve\nNote, if dbnomics is not installed on your machine, install it by running the following cell:\n\n!pip install dbnomics\n\nChoose any OECD country you like and download historical, yearly data for inflation and gdp growth from the dbnomics website.\nCheck the maximum common availability period for both series.\nCompute average and standard deviations for both series.\nBonus: try to get the relevant data as one single dataframe."
  }
]